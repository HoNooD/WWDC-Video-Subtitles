
1
00:00:07,140 --> 00:00:16,350
(音楽)

2
00:00:20,487 --> 00:00:23,524
どうも　おはようございます

3
00:00:23,857 --> 00:00:27,194
(拍手)

4
00:00:27,427 --> 00:00:30,831
HTTP Live Streamingの
セッションです

5
00:00:31,398 --> 00:00:32,933
私はエミール･アンドリエスク

6
00:00:33,400 --> 00:00:37,538
HLSのパフォーマンスの測定と
最適化について話します

7
00:00:38,472 --> 00:00:40,707
まず なぜそれが大事で

8
00:00:40,807 --> 00:00:44,878
アプリケーションに
不可欠なのかを考えましょう

9
00:00:47,247 --> 00:00:51,351
土曜の夜 ソファーで
くつろいでいるとします

10
00:00:51,852 --> 00:00:55,522
レビューを読んで
見たい動画を選び

11
00:00:55,789 --> 00:00:59,459
ポップコーンを用意し
再生ボタンをタップ

12
00:00:59,560 --> 00:01:01,728
ところが これです

13
00:00:59,560 --> 00:01:01,728
ところが これです

14
00:01:03,263 --> 00:01:06,733
謎の映像が延々と続いて

15
00:01:06,834 --> 00:01:09,336
“これは何だ”と
頭を抱えます

16
00:01:10,470 --> 00:01:13,473
ご存じですね
再生エラーです

17
00:01:16,310 --> 00:01:20,414
顧客がHLSに期待するのは
何でしょう

18
00:01:20,981 --> 00:01:25,452
それは高解像度画像や
ハイファイ音声

19
00:01:25,719 --> 00:01:28,889
機器のスムーズな動作です

20
00:01:29,389 --> 00:01:31,792
ストリーミングの
アプリケーションは

21
00:01:31,892 --> 00:01:33,961
常にネットワークに
左右されます

22
00:01:34,061 --> 00:01:35,929
いかに問題を解決すべきか

23
00:01:36,630 --> 00:01:39,766
HLSはそのために
設計されました

24
00:01:39,867 --> 00:01:42,336
予測不能な
ネットワーク環境で

25
00:01:42,436 --> 00:01:47,007
ベストなストリーミングを
提供します

26
00:01:47,107 --> 00:01:49,743
だが それだけではありません

27
00:01:50,077 --> 00:01:54,348
HLSはダイナミックな
エコシステムに発展しました

28
00:01:54,481 --> 00:01:57,985
iframe再生などの新たな
オーサリング機能をサポート

29
00:01:58,085 --> 00:02:00,921
新しいメディアフォーマットや
コーデックもです

30
00:01:58,085 --> 00:02:00,921
新しいメディアフォーマットや
コーデックもです

31
00:02:01,855 --> 00:02:04,191
さらに絶え間なく

32
00:02:04,291 --> 00:02:09,196
iOSやtvOS
macOSのAPIなどを追加

33
00:02:09,295 --> 00:02:11,899
再生を調整して

34
00:02:11,999 --> 00:02:15,702
豊かなユーザー
エクスペリエンスを提供します

35
00:02:16,770 --> 00:02:19,339
配信パターンや
トランスポート･プロトコルも

36
00:02:19,439 --> 00:02:20,841
進化しています

37
00:02:20,941 --> 00:02:24,745
サーバのパフォーマンスも
重要です

38
00:02:24,845 --> 00:02:27,414
モバイル機器か
自宅の機器かなど

39
00:02:27,514 --> 00:02:30,817
コンテンツの動作環境も
関係します

40
00:02:34,154 --> 00:02:37,057
いろいろな選択肢がある中で

41
00:02:37,157 --> 00:02:41,428
いかに最高のユーザー
エクスペリエンスを提供するか

42
00:02:42,095 --> 00:02:46,166
第一歩はユーザー
エクスペリエンスの数値化です

43
00:02:46,266 --> 00:02:51,238
コンテンツやアプリケーション
配信に加える変更に関係します

44
00:02:52,072 --> 00:02:55,676
計測が欠かせない部分です

45
00:02:55,776 --> 00:02:59,213
最適な設定を推測するのでは
ありません

46
00:03:00,147 --> 00:03:01,615
このセッションでは

47
00:03:02,082 --> 00:03:07,254
まずストリーミングの質を
議論する共通言語を定め

48
00:03:07,454 --> 00:03:12,926
次にパフォーマンスの
客観的な計測法を議論

49
00:03:13,660 --> 00:03:19,166
続いてストリーミングの質を
損なう問題の発見と解決に

50
00:03:19,266 --> 00:03:21,134
手を貸します

51
00:03:22,336 --> 00:03:25,772
最後はマスタープレイリストの
最適化です

52
00:03:25,873 --> 00:03:30,677
ストリーミングの質に関する
大半の問題の原因は

53
00:03:30,777 --> 00:03:34,548
マスタープレイリストの
オーサリングにあります

54
00:03:35,315 --> 00:03:40,420
詳細を議論する前に
HLSの再生をおさらいします

55
00:03:41,121 --> 00:03:44,358
まずマスタープレイリストの
ダウンロードです

56
00:03:45,826 --> 00:03:50,163
プレイリストが入手できると
AVPlayerがコンテンツを認知

57
00:03:50,264 --> 00:03:54,001
ビットレートは１メガビットか
２メガビットです

58
00:03:54,101 --> 00:03:56,203
AVPlayerがどちらかを選び

59
00:03:56,303 --> 00:04:01,375
メディアプレイリストを
キーなどと共にダウンロード

60
00:03:56,303 --> 00:04:01,375
メディアプレイリストを
キーなどと共にダウンロード

61
00:04:01,475 --> 00:04:03,710
セグメントもダウンロードし

62
00:04:03,877 --> 00:04:06,780
バッファを再生に十分な
レベルに満たします

63
00:04:08,115 --> 00:04:09,483
そうなれば

64
00:04:09,583 --> 00:04:13,687
AVPlayerItemが
再生可能の予測を伝えます

65
00:04:14,221 --> 00:04:17,991
プロパティ値は
trueに設定します

66
00:04:18,257 --> 00:04:21,295
AVPlayerのレートを
１にセットし

67
00:04:21,394 --> 00:04:24,765
オートプレイの機能を使うと

68
00:04:24,898 --> 00:04:28,168
直ちに再生が始まります

69
00:04:28,368 --> 00:04:31,371
この時間間隔を
起動時間と呼びます

70
00:04:31,672 --> 00:04:35,509
ここからは
実際の経過時間と

71
00:04:35,809 --> 00:04:39,213
AVPlayerItemの時間が
同時に進みます

72
00:04:39,346 --> 00:04:40,681
条件は１つ

73
00:04:40,781 --> 00:04:44,518
AVPlayerの消費スピードと
同等またはそれ以上で

74
00:04:44,618 --> 00:04:47,988
コンテンツが到着する
必要があります

75
00:04:48,488 --> 00:04:53,560
そうでない場合 AVPlayerは
１メガビットに落ちます

76
00:04:53,660 --> 00:04:57,598
それでも実際の時間に
ついていけなければ

77
00:04:57,698 --> 00:05:00,067
バッファが枯渇します

78
00:04:57,698 --> 00:05:00,067
バッファが枯渇します

79
00:05:00,167 --> 00:05:03,337
AVPlayerは
再生を止めるしかありません

80
00:05:03,437 --> 00:05:05,239
これが“ストール”です

81
00:05:05,739 --> 00:05:09,843
データが再び流れ始めるまで
AVPlayerは動きません

82
00:05:09,943 --> 00:05:12,579
十分なレベルに
バッファが回復し

83
00:05:12,679 --> 00:05:16,583
AVPlayerItemが前向きな
予測を出すまで待ちます

84
00:05:17,150 --> 00:05:19,887
その後は再生が再開します

85
00:05:20,521 --> 00:05:25,292
ユーザーエクスペリエンスの
数値化について話しましょう

86
00:05:26,193 --> 00:05:30,430
そのために重要業績評価指標
KPIを定義します

87
00:05:31,064 --> 00:05:35,636
HLSを表すのに最適な
５つの指標を選びました

88
00:05:36,870 --> 00:05:42,776
ユーザが再生の開始を
待つ時間はどれくらいか

89
00:05:42,876 --> 00:05:47,247
１秒か５秒か
あるいは30秒でしょうか

90
00:05:47,381 --> 00:05:50,450
ユーザーエクスペリエンスの
重要な視点です

91
00:05:51,652 --> 00:05:56,890
再生のストールは
ユーザにとって致命的です

92
00:05:56,990 --> 00:05:59,860
発生の頻度も問題ですが

93
00:05:59,960 --> 00:06:04,298
回復にかかる時間は
それ以上に問題です

94
00:05:59,960 --> 00:06:04,298
回復にかかる時間は
それ以上に問題です

95
00:06:05,032 --> 00:06:09,570
ストールが再発するかも
しれない状況では

96
00:06:09,670 --> 00:06:12,906
最低のビットレートで
提供するのが一番です

97
00:06:13,006 --> 00:06:17,744
しかしストールを起こさず
最高の画質と音質で

98
00:06:17,845 --> 00:06:19,446
提供したい

99
00:06:19,546 --> 00:06:24,751
ストールのリスクと
メディアの質のてんびんです

100
00:06:25,419 --> 00:06:29,957
メディアの全体的な質を測る
別の指標が必要です

101
00:06:30,757 --> 00:06:33,961
最後の指標が再生エラーです

102
00:06:34,061 --> 00:06:36,563
ストールより致命的です

103
00:06:37,698 --> 00:06:40,434
いかにエラーを追跡するか

104
00:06:41,101 --> 00:06:43,036
まず起動時間の話から

105
00:06:43,570 --> 00:06:48,442
起動時間の算出に使える
APIは複数あります

106
00:06:48,542 --> 00:06:52,613
AVPlayerのステータスを
readyToPlayにしても

107
00:06:52,713 --> 00:06:55,482
再生が始まるかどうか
分かりません

108
00:06:56,383 --> 00:07:01,321
オートプレイを使っていて
事前にレートを設定していれば

109
00:06:56,383 --> 00:07:01,321
オートプレイを使っていて
事前にレートを設定していれば

110
00:07:01,455 --> 00:07:05,292
AVPlayerItemのステータスを
readyToPlayに設定するか

111
00:07:05,392 --> 00:07:09,329
isPlaybackLikelyToKeepUpを
trueに設定できます

112
00:07:09,429 --> 00:07:11,298
これらのプロパティは
監視可能です

113
00:07:12,065 --> 00:07:15,435
これなら再生が始まると
分かります

114
00:07:15,569 --> 00:07:19,606
しかし開始までには
一瞬の間があります

115
00:07:19,706 --> 00:07:25,379
そこでAVPlayerの
timeControlStatusを使うか

116
00:07:25,479 --> 00:07:27,581
AVPlayerItemのtimebaseを
追跡します

117
00:07:27,681 --> 00:07:30,117
通知によって
それが可能です

118
00:07:32,085 --> 00:07:35,389
ストールの回避に
ヒューリスティックを用いても

119
00:07:35,489 --> 00:07:38,192
避けられないこともあります

120
00:07:38,725 --> 00:07:40,727
AVPlayerItemPlaybackStalledの
通知で

121
00:07:40,828 --> 00:07:44,731
ストールの発生を
監視できます

122
00:07:44,998 --> 00:07:48,135
発生頻度を測るのです

123
00:07:48,602 --> 00:07:55,542
異なる持続時間のストールを
比較したり集計したりしたい

124
00:07:55,642 --> 00:07:57,978
そのために標準化します

125
00:07:58,212 --> 00:08:03,884
総視聴時間を監視し
ストールの割合を計算し

126
00:07:58,212 --> 00:08:03,884
総視聴時間を監視し
ストールの割合を計算し

127
00:08:03,984 --> 00:08:09,556
１時間ごとのストールを
割り出します

128
00:08:11,859 --> 00:08:17,364
ユーザは１秒のストールより
30秒のストールを嫌います

129
00:08:17,497 --> 00:08:21,835
だからリバッファや
ストールの時間に配慮します

130
00:08:22,169 --> 00:08:24,004
ストールの通知から

131
00:08:24,104 --> 00:08:29,209
AVPlayerItemのtimebaseが１に
戻るまでの間隔を計ります

132
00:08:29,309 --> 00:08:32,412
そこからストールの持続時間を
計算できます

133
00:08:32,846 --> 00:08:38,784
総持続時間はセッションの
視聴時間で標準化できます

134
00:08:38,885 --> 00:08:42,990
セッションの視聴時間を
いかに計算するか

135
00:08:43,190 --> 00:08:46,994
アクセスログを使います
実演しましょう

136
00:08:47,995 --> 00:08:50,063
これがコードです

137
00:08:50,164 --> 00:08:54,301
playerItemの
アクセスログを参照します

138
00:08:55,002 --> 00:08:58,505
アクセスログ中の
イベントを反復し

139
00:08:58,605 --> 00:09:02,276
各イベントの視聴時間を
合計します

140
00:08:58,605 --> 00:09:02,276
各イベントの視聴時間を
合計します

141
00:09:02,376 --> 00:09:05,646
これでセッションの
総視聴時間が算出されます

142
00:09:05,879 --> 00:09:10,350
アクセスログのイベントは
何を意味するのか

143
00:09:10,684 --> 00:09:14,788
AVPlayerItemの
アクセスログは

144
00:09:15,289 --> 00:09:18,892
セッションの履歴を
提供します

145
00:09:19,326 --> 00:09:22,996
もともとはNULLですが
再生が始まると

146
00:09:23,130 --> 00:09:26,900
NewAccessLogEntry通知を
受け取ります

147
00:09:27,000 --> 00:09:29,570
その時点で
アクセスログができています

148
00:09:29,770 --> 00:09:34,374
アクセスログのイベントに
含まれる情報は

149
00:09:34,608 --> 00:09:39,179
現在のURLやビットレート

150
00:09:39,346 --> 00:09:42,916
視聴時間や
ストールの回数などです

151
00:09:43,217 --> 00:09:49,790
これらの初期値は慣例により
負かNULLに設定されます

152
00:09:50,023 --> 00:09:51,658
再生が始まると

153
00:09:51,758 --> 00:09:56,697
計測データと実際のURLに
更新されます

154
00:09:56,964 --> 00:10:01,401
新しいイベントを
加える場合は２つ

155
00:09:56,964 --> 00:10:01,401
新しいイベントを
加える場合は２つ

156
00:10:01,535 --> 00:10:05,873
バリアントの更新時か
再生シーク時です

157
00:10:06,106 --> 00:10:10,043
古いイベントが
イミュータブルになってから

158
00:10:10,310 --> 00:10:11,945
新しいイベントを加えます

159
00:10:12,045 --> 00:10:17,484
再生が始まるとこれらの値は
絶えず更新されます

160
00:10:17,584 --> 00:10:20,554
最後のイベントの値は

161
00:10:21,588 --> 00:10:23,524
監視できません

162
00:10:25,292 --> 00:10:31,265
メディアの質も重要です
いかに計算するのでしょう

163
00:10:33,534 --> 00:10:37,371
ユーザに最高の質が
提供されているかは

164
00:10:37,471 --> 00:10:40,174
動画のビットレートを見ます

165
00:10:40,541 --> 00:10:45,946
起動時間やストールの時間は
関係ないので

166
00:10:46,180 --> 00:10:48,182
再生状態だけを見ます

167
00:10:48,282 --> 00:10:50,551
画面上のこの例では

168
00:10:50,651 --> 00:10:54,421
２メガビットの再生のほうが

169
00:10:54,655 --> 00:10:56,757
１メガビットより長い

170
00:10:56,924 --> 00:10:59,226
各ビットレートを
時間加重することで

171
00:10:59,326 --> 00:11:04,865
セッション間で比較できる
画質の値を得られます

172
00:10:59,326 --> 00:11:04,865
セッション間で比較できる
画質の値を得られます

173
00:11:05,933 --> 00:11:09,369
これが時間加重指標
ビットレートです

174
00:11:09,469 --> 00:11:14,308
それを計算するのは
総持続時間と同様に簡単です

175
00:11:14,975 --> 00:11:19,279
再びPlayerItemsの
アクセスログを参照し

176
00:11:19,379 --> 00:11:21,582
ログのイベントを反復します

177
00:11:21,682 --> 00:11:27,387
先に算出した総視聴時間に対する
各イベントの時間加重を計算

178
00:11:27,855 --> 00:11:31,258
最後に加重ビットレート値に
合算します

179
00:11:31,358 --> 00:11:35,829
プロパティが初期化されていない
可能性があるので

180
00:11:35,929 --> 00:11:38,832
コードを適切に
チェックします

181
00:11:41,235 --> 00:11:45,672
他に追跡すべきイベントは
再生の失敗です

182
00:11:45,772 --> 00:11:48,942
AVPlayerItemの
ステータスを見ます

183
00:11:49,476 --> 00:11:54,948
値がfalseに変われば
回復不可能なエラーを示します

184
00:11:55,449 --> 00:11:58,685
この観察結果を
KPIに変換する方法は？

185
00:11:59,553 --> 00:12:02,756
その１つの方法としては

186
00:11:59,553 --> 00:12:02,756
その１つの方法としては

187
00:12:02,856 --> 00:12:06,593
失敗したセッションの
割合を調べることです

188
00:12:06,693 --> 00:12:08,595
他にも方法が
あるかもしれません

189
00:12:08,695 --> 00:12:14,134
ストリームのすべてのエラーが
致命的ではありません

190
00:12:14,334 --> 00:12:16,336
メディアの質に
影響するものもあれば

191
00:12:16,436 --> 00:12:19,439
ユーザが
気づかないものもあります

192
00:12:19,573 --> 00:12:25,646
それでもエラーが出れば
ストリームの問題が通知されます

193
00:12:25,779 --> 00:12:30,684
ストリームに何があったかを
探るための手段が

194
00:12:31,051 --> 00:12:34,788
AVPlayerItemのエラーログです

195
00:12:35,422 --> 00:12:36,924
AVPlayerItemのエラーログは

196
00:12:37,024 --> 00:12:40,894
ユーザに影響のある
障害を知らせます

197
00:12:42,196 --> 00:12:45,866
アクセスログと似ていますが
イベントが

198
00:12:46,166 --> 00:12:49,002
アクセス状態ではなく
エラーを示します

199
00:12:50,037 --> 00:12:55,142
配信やネットワークの問題
オーサリングのエラーなど

200
00:12:55,309 --> 00:12:57,644
さまざまな分野を
カバーします

201
00:12:57,878 --> 00:13:01,515
メディアファイルに
反応がなかったなど

202
00:12:57,878 --> 00:13:01,515
メディアファイルに
反応がなかったなど

203
00:13:01,615 --> 00:13:05,252
ストールの原因が分かります

204
00:13:07,187 --> 00:13:11,158
セッションごとに追跡できる
起動時間の話をしました

205
00:13:11,592 --> 00:13:15,696
アプリケーションの
起動時間を見直しましょう

206
00:13:16,196 --> 00:13:19,833
ストールの頻度や
時間の話もしました

207
00:13:20,634 --> 00:13:23,170
時間加重指標ビットレートは

208
00:13:23,270 --> 00:13:27,441
メディアの質を示す
有効な指標です

209
00:13:27,574 --> 00:13:32,846
失敗したセッションの割合を
最低限に抑えたいものです

210
00:13:36,884 --> 00:13:41,622
すべてのKPIがセッション間で
比較できるわけではありません

211
00:13:42,189 --> 00:13:45,459
たとえば AVFoundationは

212
00:13:45,559 --> 00:13:48,662
AVPlayerの画面上の
レイヤーサイズを使って

213
00:13:48,795 --> 00:13:51,431
HLSのバリアントを評価します

214
00:13:51,532 --> 00:13:54,535
10のATPコンテンツがあり

215
00:13:54,635 --> 00:13:57,771
200画素で
提供されないとしても

216
00:13:57,871 --> 00:14:01,575
ユーザが低画質と
感じるとは限りません

217
00:13:57,871 --> 00:14:01,575
ユーザが低画質と
感じるとは限りません

218
00:14:02,910 --> 00:14:08,916
ストリーミングのメトリックと
コンテキストの情報を集めます

219
00:14:09,349 --> 00:14:12,519
それを基に アプリケーションに
適した分類に

220
00:14:12,619 --> 00:14:15,222
再生のセッションを
分割します

221
00:14:16,223 --> 00:14:18,225
コードのサンプルは

222
00:14:18,425 --> 00:14:23,363
Apple Developer Webサイトに
HLSのカタログとしてあります

223
00:14:24,164 --> 00:14:27,167
ここからは
ジェンヘン･リーが

224
00:14:27,267 --> 00:14:30,838
HLSのパフォーマンスを
向上させる方法を話します

225
00:14:30,938 --> 00:14:34,842
(拍手)

226
00:14:35,042 --> 00:14:36,210
ありがとう

227
00:14:42,616 --> 00:14:45,152
こんにちは　ジェンヘンです

228
00:14:47,921 --> 00:14:52,926
ユーザが最も懸念する
KPIについて話しました

229
00:14:53,093 --> 00:14:57,831
ここからはAPIを改善する
方法について話します

230
00:14:58,098 --> 00:15:00,567
掘り下げる点は３つです

231
00:14:58,098 --> 00:15:00,567
掘り下げる点は３つです

232
00:15:00,834 --> 00:15:04,204
いかに起動時間を短縮するか

233
00:15:04,972 --> 00:15:08,809
いかにストールを調べて
回避するか

234
00:15:09,009 --> 00:15:13,247
いかにエラーを調べて
回避するか

235
00:15:13,347 --> 00:15:14,414
では始めます

236
00:15:15,549 --> 00:15:18,652
何が再生の開始を
遅らせるのか

237
00:15:18,886 --> 00:15:23,724
これは再生を押してから
動画が再生されるまでの―

238
00:15:23,824 --> 00:15:25,859
ユーザ操作の例です

239
00:15:26,894 --> 00:15:29,329
アプリケーションが
アセットを作り

240
00:15:29,429 --> 00:15:31,732
アセットの検査を開始

241
00:15:31,999 --> 00:15:37,371
持続時間とアセットの
メディアオプションを探ります

242
00:15:37,971 --> 00:15:43,544
コンテンツサーバと
デバイスの間を何度か往復し

243
00:15:43,677 --> 00:15:47,981
マスタープレイリストを
ダウンロードします

244
00:15:48,515 --> 00:15:53,887
その後 アプリケーションは
AVPlayerとAVPlayerItemを作り

245
00:15:54,454 --> 00:15:55,923
バッファリングが始まります

246
00:15:56,823 --> 00:16:01,995
バッファリングはしばしば中断
コンテンツは暗号化されます

247
00:15:56,823 --> 00:16:01,995
バッファリングはしばしば中断
コンテンツは暗号化されます

248
00:16:02,429 --> 00:16:07,000
デバイスとキーサーバの
間を何往復かして

249
00:16:07,100 --> 00:16:09,102
復号キーをフェッチします

250
00:16:09,403 --> 00:16:11,205
キーがフェッチされると

251
00:16:12,706 --> 00:16:14,608
バッファリングが再開します

252
00:16:14,942 --> 00:16:17,878
また中断されるかも
しれません

253
00:16:18,145 --> 00:16:21,682
アプリケーションが
機能を提供し

254
00:16:21,782 --> 00:16:24,651
前回視聴した時点から
再開します

255
00:16:25,419 --> 00:16:27,588
アプリケーションは
ユーザに代わって

256
00:16:27,688 --> 00:16:31,458
AVPlayerの
シーク時間を設定します

257
00:16:31,925 --> 00:16:35,629
AVPlayerは
既存のバッファを捨てて

258
00:16:35,729 --> 00:16:40,267
セグメント100から
ダウンロードします

259
00:16:41,602 --> 00:16:43,770
それでも中断はあり得ます

260
00:16:43,871 --> 00:16:47,074
ユーザは好みの言語を

261
00:16:47,174 --> 00:16:49,543
アプリケーションに設定

262
00:16:50,010 --> 00:16:52,513
このユーザは
スペイン語です

263
00:16:53,046 --> 00:16:57,017
アプリケーションは
メディアを選びます

264
00:16:57,885 --> 00:17:00,454
既存のバッファは捨てられます

265
00:16:57,885 --> 00:17:00,454
既存のバッファは捨てられます

266
00:17:01,088 --> 00:17:05,592
AVPlayerは異なる言語から
ダウンロードします

267
00:17:06,226 --> 00:17:09,229
数秒後にはAVPlayerItemが

268
00:17:09,829 --> 00:17:12,900
isPlaybackLikelyToKeepUpを通知

269
00:17:13,099 --> 00:17:15,002
レートを設定します

270
00:17:15,169 --> 00:17:17,938
再生が再開します

271
00:17:18,238 --> 00:17:21,108
この間 ユーザは
待っています

272
00:17:22,041 --> 00:17:23,710
ご覧のように

273
00:17:24,344 --> 00:17:29,082
起動には 複数の操作が絡み
時間が必要です

274
00:17:29,182 --> 00:17:35,089
デバイスとコンテンツサーバ
キーサーバの間の往復

275
00:17:35,189 --> 00:17:39,593
アプリケーションと
AVPlayerの間の往復

276
00:17:39,993 --> 00:17:43,630
この２つは大抵
異なるプロセスです

277
00:17:44,464 --> 00:17:48,602
起動時間と時間コストを
いかに計るか

278
00:17:49,369 --> 00:17:54,942
API呼び出しとAVPlayerや
AVPlayerItemの―

279
00:17:55,042 --> 00:17:58,979
ステータス変化通知の間の
時間を計ります

280
00:18:00,714 --> 00:18:05,752
AVPlayerItemはアクセスログにも
起動時間を書き出します

281
00:18:06,019 --> 00:18:10,390
この時間は
AVPlayerItemで計られ

282
00:18:10,657 --> 00:18:13,660
バッファリングの時間のみを
表します

283
00:18:14,361 --> 00:18:16,864
メディアの
ダウンロード開始から

284
00:18:16,964 --> 00:18:20,701
最初の
isPlaybackLikelyToKeepUpまで

285
00:18:21,568 --> 00:18:27,141
ユーザは動画が数秒で
始まることを期待します

286
00:18:27,241 --> 00:18:29,142
それを実現する方法とは？

287
00:18:30,510 --> 00:18:31,845
１つの選択肢は

288
00:18:32,679 --> 00:18:36,183
操作の一部を
別の段階に移すことです

289
00:18:36,717 --> 00:18:40,087
ユーザが再生を押す前にです

290
00:18:40,521 --> 00:18:43,857
例えばAVAssetの作成と

291
00:18:44,358 --> 00:18:46,593
検査は移動できます

292
00:18:48,395 --> 00:18:50,831
キーのフェッチも同様です

293
00:18:51,565 --> 00:18:55,335
これでユーザが
動画の再生を始めた時の―

294
00:18:56,370 --> 00:18:58,806
待機時間を減らせます

295
00:18:59,106 --> 00:19:02,142
これらの操作の移動先は？

296
00:18:59,106 --> 00:19:02,142
これらの操作の移動先は？

297
00:19:04,545 --> 00:19:09,449
ユーザが動画のカタログや
動画情報を見ている間に

298
00:19:09,650 --> 00:19:13,654
AVAssetを作成し 検査します

299
00:19:13,987 --> 00:19:16,490
ユーザが動画を
再生する前です

300
00:19:17,758 --> 00:19:21,828
AVContentKeySessionを
導入しましたが

301
00:19:22,196 --> 00:19:27,167
このAPIはメディアロードを
キーフェッチから分離します

302
00:19:27,468 --> 00:19:31,738
アプリケーションに
キー管理の制御と

303
00:19:31,839 --> 00:19:35,876
キーフェッチを
最適化する方法を与えます

304
00:19:35,976 --> 00:19:40,981
複数のキーリクエストを一括して
キーサーバに戻したりします

305
00:19:41,415 --> 00:19:44,852
AVContentの
キーセッションを採用して

306
00:19:44,985 --> 00:19:48,088
技術的作業に数時間かければ

307
00:19:48,455 --> 00:19:52,025
ユーザは起動の早さに
気がつきます

308
00:19:53,660 --> 00:19:59,600
AVAssetの作成とキーフェッチを
起動時間から取り除きました

309
00:19:59,800 --> 00:20:05,072
次はAVPlayerItemの
バッファリング時間と

310
00:19:59,800 --> 00:20:05,072
次はAVPlayerItemの
バッファリング時間と

311
00:20:05,539 --> 00:20:10,510
アプリケーションと
AVPlayer間の通信時間です

312
00:20:11,178 --> 00:20:12,379
多くの場合―

313
00:20:13,080 --> 00:20:17,117
アプリケーションは
バッファリングを避けられます

314
00:20:17,551 --> 00:20:20,621
シークや
メディア選択によってです

315
00:20:20,721 --> 00:20:24,892
AVPlayerと
アプリケーションの間の―

316
00:20:25,125 --> 00:20:28,428
往復時間の短縮も可能です

317
00:20:29,029 --> 00:20:31,899
起動時間は
更に短くなります

318
00:20:32,900 --> 00:20:34,368
ご覧ください

319
00:20:36,103 --> 00:20:38,372
AVPlayerItemを作成します

320
00:20:39,840 --> 00:20:44,244
ユーザが再生したい時点が
分かれば

321
00:20:44,912 --> 00:20:47,281
AVPlayerItemで
時間を設定できます

322
00:20:47,681 --> 00:20:53,220
ダウンロードする言語など
メディア選択が分かれば

323
00:20:53,487 --> 00:20:59,159
AVPlayerItemを設定する前に
それらも設定できます

324
00:20:59,626 --> 00:21:01,562
AVPlayerも同じです

325
00:20:59,626 --> 00:21:01,562
AVPlayerも同じです

326
00:21:01,795 --> 00:21:04,164
ユーザが再生を押すと

327
00:21:04,865 --> 00:21:11,638
ダウンロードが始まる前に
レートを設定

328
00:21:11,939 --> 00:21:18,378
準備が整ったら
再生が自動的に始まります

329
00:21:18,846 --> 00:21:20,080
まとめです

330
00:21:20,914 --> 00:21:23,817
バッファリングの前に
AVPlayerを設定

331
00:21:24,351 --> 00:21:27,921
AVPlayerのレートの設定を

332
00:21:28,188 --> 00:21:32,326
AVPlayerItemの設定前に
行います

333
00:21:33,093 --> 00:21:34,862
多くのアプリケーションが

334
00:21:35,462 --> 00:21:40,634
ユーザが複数の動画を
選べる機能を提供しています

335
00:21:40,734 --> 00:21:45,606
シリーズ番組を見るなど
次から次へと再生できます

336
00:21:46,607 --> 00:21:52,346
動画ごとにAVPlayerと
AVPlayerItemを実装

337
00:21:52,713 --> 00:21:57,417
新しい動画には起動時
バッファリング時間が必要です

338
00:21:57,551 --> 00:22:01,989
このバッファリング時間を
短縮するのが

339
00:21:57,551 --> 00:22:01,989
このバッファリング時間を
短縮するのが

340
00:22:02,089 --> 00:22:04,157
AVQueuePlayerです

341
00:22:05,826 --> 00:22:10,731
複数のAVPlayerItemを
作って再生キューに入れます

342
00:22:12,199 --> 00:22:15,536
AVPlayerが
現在のアイテムを再生中に

343
00:22:16,970 --> 00:22:20,240
メディアの
ダウンロードが終わると

344
00:22:21,508 --> 00:22:26,413
AVPlayerは再生中に
次のダウンロードを開始

345
00:22:27,147 --> 00:22:31,685
現在のイベントが
終わるとすぐに

346
00:22:31,885 --> 00:22:35,189
次のAVPlayerItemが
再生を始めます

347
00:22:37,157 --> 00:22:41,028
AVQueuePlayerを使って
複数のアイテムを再生し

348
00:22:41,261 --> 00:22:45,032
２つ目のAVPlayerItemを
事前にキューに追加します

349
00:22:47,167 --> 00:22:50,571
残っているのが
バッファリング時間です

350
00:22:51,271 --> 00:22:55,175
ネットワークの
バッファリング時間を決めるのは

351
00:22:55,542 --> 00:22:56,810
４つの要因です

352
00:22:58,111 --> 00:22:59,680
バリアントの選択

353
00:23:00,981 --> 00:23:02,916
コンテンツのビットレート

354
00:23:03,550 --> 00:23:07,254
プレイリストの
ターゲット持続時間

355
00:23:07,488 --> 00:23:09,556
そして ネットワーク帯域幅

356
00:23:11,525 --> 00:23:14,928
バッファリング時間の例を
見ましょう

357
00:23:16,130 --> 00:23:19,166
シンプルな
マスタープレイリストです

358
00:23:19,266 --> 00:23:24,738
ATP動画を５mbpsに
設定しています

359
00:23:25,272 --> 00:23:29,276
ネットワーク帯域幅が
６mbpsなら

360
00:23:29,643 --> 00:23:32,079
ターゲット持続時間は10秒

361
00:23:32,713 --> 00:23:37,551
大抵 AVPlayerItemは１つの
セグメントをバッファリングします

362
00:23:37,851 --> 00:23:41,755
isPlaybackLikelyToKeepUpを
通知する前です

363
00:23:42,523 --> 00:23:47,027
同じマスタープレイリストで

364
00:23:47,995 --> 00:23:50,030
ほぼ同じネットワーク状況

365
00:23:50,898 --> 00:23:54,568
しかしユーザは
起動が遅いと感じます

366
00:23:55,802 --> 00:23:59,673
ネットワーク帯域幅は
変化します

367
00:23:59,840 --> 00:24:02,543
コンテンツの
ビットレートもです

368
00:23:59,840 --> 00:24:02,543
コンテンツの
ビットレートもです

369
00:24:02,643 --> 00:24:08,282
ダウンロードに時間がかかり
起動が遅くなります

370
00:24:08,882 --> 00:24:10,984
これを解消するために

371
00:24:11,084 --> 00:24:15,622
ビットレートの低い
バリアントを提供します

372
00:24:17,124 --> 00:24:21,828
AVPlayerは低いほうに切り替え
起動を早められます

373
00:24:24,231 --> 00:24:26,934
他に情報がなければ

374
00:24:27,401 --> 00:24:31,038
最初に現れるバリアントが
起動時のバリアントになります

375
00:24:32,372 --> 00:24:35,642
この例では
２つの同じバリアントで

376
00:24:36,076 --> 00:24:40,280
低いビットレートが
先に現れます

377
00:24:40,547 --> 00:24:44,551
AVPlayerの起動は
早くなります

378
00:24:46,053 --> 00:24:50,424
ネットワーク帯域幅が
再生に十分なら

379
00:24:50,524 --> 00:24:52,993
切り替えも素早くできます

380
00:24:53,827 --> 00:24:55,095
まとめます

381
00:24:57,297 --> 00:25:01,969
賢いバリアントの選択で
バッファリング時間を短縮

382
00:24:57,297 --> 00:25:01,969
賢いバリアントの選択で
バッファリング時間を短縮

383
00:25:02,803 --> 00:25:06,974
ビットレートが低ければ
時間は短くなりますが

384
00:25:07,074 --> 00:25:10,177
映像の画質が悪くなります

385
00:25:11,345 --> 00:25:14,448
マルチメディア
フォーマットの場合

386
00:25:14,548 --> 00:25:17,551
HDRやSDRのような映像形式や

387
00:25:17,651 --> 00:25:21,155
ステレオやマルチチャネル
オーディオですが

388
00:25:22,556 --> 00:25:27,528
各メディアフォーマットの
最初のバリアントの―

389
00:25:28,328 --> 00:25:31,131
ビットレートを
同等レベルにします

390
00:25:31,231 --> 00:25:33,767
そうすれば
どんな視聴環境でも

391
00:25:33,901 --> 00:25:37,371
同じような使い心地を
得られます

392
00:25:38,672 --> 00:25:42,342
大事なのは起動時間を
短縮することです

393
00:25:42,576 --> 00:25:44,144
これで起動は完了

394
00:25:45,379 --> 00:25:47,848
次の問題はストールです

395
00:25:48,348 --> 00:25:51,852
ネットワーク帯域幅が
狭ければ

396
00:25:51,952 --> 00:25:55,522
ストールは避けられません

397
00:25:55,989 --> 00:26:00,360
ここからはストールを調査し

398
00:25:55,989 --> 00:26:00,360
ここからはストールを調査し

399
00:26:00,694 --> 00:26:03,730
回避する方法について
話します

400
00:26:06,200 --> 00:26:08,902
ストールを調査するために

401
00:26:09,169 --> 00:26:14,308
アプリケーションは
常時 通知に注意します

402
00:26:16,176 --> 00:26:20,848
AVPlayerItemの
ステータスにも注意します

403
00:26:20,981 --> 00:26:24,785
isPlaybackLikelyToKeepUp
などです

404
00:26:26,320 --> 00:26:32,159
AVPlayerItemはエラーログと
アクセスログも提供します

405
00:26:32,426 --> 00:26:35,762
アプリケーションは
ストールが起きると

406
00:26:35,863 --> 00:26:39,032
これらのログを検証します

407
00:26:40,868 --> 00:26:44,004
２つのストールの例を
ご覧ください

408
00:26:44,605 --> 00:26:49,142
アプリケーションが
ストールの通知を受けます

409
00:26:50,644 --> 00:26:54,248
エラーログも受け取ります

410
00:26:54,982 --> 00:27:00,954
エラーコメントで詳細に
何が起きたか分かります

411
00:26:54,982 --> 00:27:00,954
エラーコメントで詳細に
何が起きたか分かります

412
00:27:01,355 --> 00:27:05,425
メディアファイルが
15秒間 未受信です

413
00:27:06,293 --> 00:27:09,830
アプリケーションは
アクセスログを調べ

414
00:27:10,597 --> 00:27:14,935
何を再生していたかを
突き止めます

415
00:27:15,702 --> 00:27:19,206
ログは詳細な情報を
提供します

416
00:27:19,573 --> 00:27:22,176
コンテンツは何か

417
00:27:22,443 --> 00:27:23,877
URIは？

418
00:27:24,311 --> 00:27:27,181
indicatedBitrateは
コンテンツのビットレートで

419
00:27:27,281 --> 00:27:30,117
この場合は36mbpsです

420
00:27:30,217 --> 00:27:32,119
４Kのコンテンツでしょう

421
00:27:32,486 --> 00:27:36,823
observedBitrateは
ネットワーク帯域幅です

422
00:27:36,924 --> 00:27:39,860
この場合は2.8mbpsです

423
00:27:39,960 --> 00:27:41,695
ネットワーク帯域幅が

424
00:27:42,229 --> 00:27:46,733
コンテンツのビットレートに
追いついていません

425
00:27:48,635 --> 00:27:51,271
変化するネットワークには

426
00:27:51,939 --> 00:27:55,008
ビットレートをフルセット
用意する必要があります

427
00:27:55,109 --> 00:27:59,546
ネットワーク環境が
よくないユーザもいれば

428
00:27:59,913 --> 00:28:05,152
携帯端末で動画を見る
ユーザもいます

429
00:27:59,913 --> 00:28:05,152
携帯端末で動画を見る
ユーザもいます

430
00:28:05,586 --> 00:28:09,890
マルチメディア
フォーマットなら

431
00:28:10,457 --> 00:28:14,228
コーデックの組み合わせごとに
階層が必要です

432
00:28:16,497 --> 00:28:21,335
ネットワークの状況だけが
ストールの原因ではありません

433
00:28:22,169 --> 00:28:23,637
これを見てください

434
00:28:24,404 --> 00:28:28,575
ストールのエラーログは
別の原因を示しています

435
00:28:29,776 --> 00:28:35,048
プレイリストファイルが２回
続けて同じだったようです

436
00:28:35,883 --> 00:28:38,519
アクセスログを見ると

437
00:28:39,520 --> 00:28:41,321
AVPlayerはライブ再生中

438
00:28:42,189 --> 00:28:46,994
ビットレートは低めで
コンテンツは400K

439
00:28:47,761 --> 00:28:51,465
ネットワーク帯域幅は
3.7mbpsです

440
00:28:51,798 --> 00:28:55,068
コンテンツの配信に
問題がありそうです

441
00:28:56,837 --> 00:29:00,507
配信が原因のストールを
回避するために

442
00:28:56,837 --> 00:29:00,507
配信が原因のストールを
回避するために

443
00:29:01,175 --> 00:29:03,177
コンテンツサーバやCDNは

444
00:29:04,044 --> 00:29:08,448
遅延なくメディアファイルや
セグメントやキーを配信

445
00:29:09,082 --> 00:29:13,353
ターゲット持続時間ごとに
ライブプレイリストを更新します

446
00:29:13,487 --> 00:29:18,559
最新のプレイリストを
配信するようCDNを構築し

447
00:29:18,659 --> 00:29:20,861
古いプレイリストを避けます

448
00:29:22,362 --> 00:29:26,200
シーケンス番号の不連続を
同期させること

449
00:29:27,801 --> 00:29:33,173
HTTPステータスコードを使い
サーバ側の問題を示すこと

450
00:29:35,642 --> 00:29:38,278
エラーはどうでしょう

451
00:29:39,112 --> 00:29:42,850
どうやって
エラーを調べるか

452
00:29:43,784 --> 00:29:45,419
方法はあります

453
00:29:45,786 --> 00:29:51,325
AVPlayerItemのエラーログと
アクセスログ

454
00:29:52,025 --> 00:29:54,261
エラープロパティもあります

455
00:29:54,361 --> 00:29:57,931
アプリケーションが監視する
AVPlayerや

456
00:29:58,031 --> 00:30:00,033
AVPlayerItemからです

457
00:29:58,031 --> 00:30:00,033
AVPlayerItemからです

458
00:30:02,169 --> 00:30:05,305
メディア検証の
ツールもあります

459
00:30:05,405 --> 00:30:08,942
これでコンテンツの問題を
検知できます

460
00:30:09,376 --> 00:30:11,311
１つずつ見ていきましょう

461
00:30:13,046 --> 00:30:17,818
AVPlayerItemErrorLogから
説明します

462
00:30:19,019 --> 00:30:22,222
このタイプのエラーログが
示すのは

463
00:30:22,322 --> 00:30:25,492
コンテンツのフォーマットか
ネットワークの問題です

464
00:30:25,592 --> 00:30:28,495
常に致命的なわけでは
ありません

465
00:30:30,030 --> 00:30:34,902
エラーが示されても 再生に
支障がないこともあります

466
00:30:36,403 --> 00:30:40,474
アプリケーションは
エラーコメントを確認して

467
00:30:40,574 --> 00:30:43,610
このような詳細を
突き止めます

468
00:30:44,178 --> 00:30:48,715
メディアファイルが
15秒間 未受信でした

469
00:30:49,349 --> 00:30:53,287
これによればユーザは
ストールを体験したか

470
00:30:53,420 --> 00:30:55,355
または これからします

471
00:30:57,124 --> 00:31:01,628
次はHTTPのエラーです
ファイルが見つかりません

472
00:30:57,124 --> 00:31:01,628
次はHTTPのエラーです
ファイルが見つかりません

473
00:31:01,728 --> 00:31:04,798
コンテンツの配信に
問題があります

474
00:31:05,265 --> 00:31:09,436
音声か映像 あるいは両方が
途切れます

475
00:31:13,006 --> 00:31:16,343
セグメントが指定された
帯域幅を超えました

476
00:31:16,443 --> 00:31:19,980
ストールのリスクを
示しています

477
00:31:20,114 --> 00:31:25,319
しかしエラーが示されても
再生は完璧なことも

478
00:31:25,586 --> 00:31:29,056
セグメントのビットレートが

479
00:31:29,156 --> 00:31:32,826
マスタープレイリストの
それより高いことを示しています

480
00:31:33,961 --> 00:31:37,998
最後は暗号化フォーマットの
エラーです

481
00:31:38,098 --> 00:31:39,700
サポートされていません

482
00:31:39,900 --> 00:31:44,071
再生時の障害かもしれません

483
00:31:44,671 --> 00:31:47,207
紹介していないものも
ありますが

484
00:31:47,307 --> 00:31:51,245
エラーメッセージは
非常に役に立ちます

485
00:31:51,545 --> 00:31:55,449
AVPlayerや
AVPlayerItemのエラー発生時です

486
00:31:55,682 --> 00:31:56,850
見てみましょう

487
00:31:59,253 --> 00:32:03,757
アプリケーションは
AVPlayerItemのステータスと

488
00:31:59,253 --> 00:32:03,757
アプリケーションは
AVPlayerItemのステータスと

489
00:32:03,991 --> 00:32:08,362
AVPlayerItemの
エラープロパティを監視します

490
00:32:09,263 --> 00:32:11,165
致命的なエラーです

491
00:32:11,865 --> 00:32:15,836
エラーが示された時は
再生が停止しています

492
00:32:16,470 --> 00:32:19,907
いかにして原因を見つけるか

493
00:32:20,107 --> 00:32:22,209
例を挙げます

494
00:32:22,676 --> 00:32:26,813
アプリケーションは
AVPlayerItemのステータスを監視し

495
00:32:27,147 --> 00:32:29,650
ステータスが
failedに変わったら

496
00:32:30,284 --> 00:32:35,089
アプリケーションは
AVPlayerのエラープロパティや

497
00:32:35,355 --> 00:32:39,393
AVPlayerItemのエラーログも
確認します

498
00:32:41,295 --> 00:32:46,800
AVPlayerItemの
エラープロパティです

499
00:32:47,034 --> 00:32:49,303
有益な情報を提供します

500
00:32:50,070 --> 00:32:53,207
AVFoundationErrorDomainの
エラーコード

501
00:32:53,740 --> 00:32:56,243
ヒントもあります

502
00:32:56,343 --> 00:33:00,781
AVPlayerItemの
エラーログをチェック

503
00:32:56,343 --> 00:33:00,781
AVPlayerItemの
エラーログをチェック

504
00:33:01,415 --> 00:33:07,955
そこから より詳細な情報を
得ることができます

505
00:33:08,388 --> 00:33:11,391
いつどのデータで起きた―

506
00:33:11,859 --> 00:33:14,761
どんなタイプのエラーか

507
00:33:14,928 --> 00:33:18,298
サポートされていない
暗号化フォーマットです

508
00:33:18,899 --> 00:33:20,801
それから

509
00:33:21,435 --> 00:33:26,673
エラーが起きた時の
ネットワークインターフェイス

510
00:33:28,742 --> 00:33:31,979
次はHDCP関連のエラーです

511
00:33:32,713 --> 00:33:37,251
HDCP保護が必要な
コンテンツの場合

512
00:33:37,651 --> 00:33:43,156
アプリケーションはこのような
長いプロパティ名を持ちます

513
00:33:43,624 --> 00:33:48,161
isOutputObscuredDueTo
InsufficientExternalProtection

514
00:33:49,062 --> 00:33:52,966
このプロパティの値が
trueに変わると

515
00:33:54,034 --> 00:33:58,138
現在のアイテムが外部保護を
必要としています

516
00:33:58,572 --> 00:34:01,975
デバイスが保護レベルを
満たしていません

517
00:33:58,572 --> 00:34:01,975
デバイスが保護レベルを
満たしていません

518
00:34:02,176 --> 00:34:08,014
ユーザは動画に
問題があることを認識します

519
00:34:09,449 --> 00:34:11,451
これを避けるために

520
00:34:12,585 --> 00:34:17,224
マスタープレイリストは
少なくとも１つのバリアントで

521
00:34:17,791 --> 00:34:21,728
HDCPにフォールバックを
要求しないこと

522
00:34:22,529 --> 00:34:28,168
すべてのユーザが
HDCP環境とは限りません

523
00:34:28,869 --> 00:34:33,407
アプリケーションのUIは
プロパティの変更を反映し

524
00:34:33,507 --> 00:34:35,342
ユーザに知らせます

525
00:34:36,677 --> 00:34:40,781
再生問題の原因の多くが
コンテンツのオーサリング

526
00:34:41,047 --> 00:34:43,951
音声や映像のズレや

527
00:34:44,051 --> 00:34:47,054
グリッチが生じる問題です

528
00:34:47,920 --> 00:34:51,992
エラーの調査や対処に加えて

529
00:34:52,592 --> 00:34:57,764
メディアストリーム
検証ツールを

530
00:34:58,065 --> 00:35:01,368
デベロッパWebサイトで
入手できます

531
00:34:58,065 --> 00:35:01,368
デベロッパWebサイトで
入手できます

532
00:35:01,835 --> 00:35:04,171
私の話はここまでです

533
00:35:04,505 --> 00:35:08,275
同僚のエリック･
ヴァーシェンが―

534
00:35:10,344 --> 00:35:14,481
マスタープレイリストの
オーサリングについて話します

535
00:35:14,681 --> 00:35:19,720
(拍手)

536
00:35:24,658 --> 00:35:25,959
ありがとう

537
00:35:26,159 --> 00:35:30,097
私はエリック
HLSツールのエンジニアです

538
00:35:30,531 --> 00:35:36,136
パフォーマンスの計測と
問題の解決を話してきました

539
00:35:36,603 --> 00:35:41,708
エラーのない再生を
可能にするカギの１つは

540
00:35:41,809 --> 00:35:45,913
マスタープレイリストの
適切なオーサリングです

541
00:35:46,113 --> 00:35:50,617
マスタープレイリストは
再生前も再生中も

542
00:35:50,718 --> 00:35:53,387
正しい決断を促すものです

543
00:35:53,620 --> 00:35:55,289
だから重要です

544
00:35:56,690 --> 00:35:59,426
これが私の助言…
というのは冗談で

545
00:35:59,893 --> 00:36:03,664
このロジャーの言葉を
最後に解説します

546
00:35:59,893 --> 00:36:03,664
このロジャーの言葉を
最後に解説します

547
00:36:04,231 --> 00:36:09,036
可能な全エンコーディングを
できるだけ詳細に

548
00:36:09,136 --> 00:36:11,872
マスタープレイリストに
記載してください

549
00:36:12,406 --> 00:36:14,475
ストリームの選択とは？

550
00:36:16,209 --> 00:36:19,479
適切なストリームの選択は
非常に重要です

551
00:36:20,180 --> 00:36:24,918
マスタープレイリストが
機能していても

552
00:36:25,018 --> 00:36:26,887
適切とは限りません

553
00:36:27,321 --> 00:36:30,657
こんなのを
見たことがあります

554
00:36:30,924 --> 00:36:34,194
間違いではありませんが
役に立ちません

555
00:36:35,095 --> 00:36:38,098
これはバリアントが
増えています

556
00:36:38,699 --> 00:36:41,568
多少はマシですが
まだまだです

557
00:36:41,668 --> 00:36:46,373
コーデックが不明です
HDRなのか60fpsなのか

558
00:36:46,840 --> 00:36:50,144
あらゆる情報が必要です

559
00:36:50,510 --> 00:36:53,547
平均帯域幅が分かれば

560
00:36:53,647 --> 00:36:57,818
どのバリアントにするか
よりよい決断ができます

561
00:36:58,318 --> 00:37:01,521
ストリームについていけるか

562
00:36:58,318 --> 00:37:01,521
ストリームについていけるか

563
00:37:02,522 --> 00:37:07,061
コーデックで
再生できないものを排除

564
00:37:07,327 --> 00:37:11,198
解像度は選ぶべきバリアントを
教えてくれます

565
00:37:11,932 --> 00:37:17,571
メディアプレイリストや
セグメントを見るのは最後です

566
00:37:17,704 --> 00:37:21,441
マスタープレイリストで
先に説明すべきです

567
00:37:23,010 --> 00:37:26,547
シンプルな
マスタープレイリストの例です

568
00:37:26,647 --> 00:37:29,950
AVPlayerが
帯域幅の変化に適応したり

569
00:37:30,050 --> 00:37:33,187
適切なバリアントの選択を
可能にします

570
00:37:34,421 --> 00:37:39,960
ユーザには見えませんが
ストリームを向上させます

571
00:37:41,228 --> 00:37:43,230
よくある問題の１つが

572
00:37:43,330 --> 00:37:47,367
早送りで画像が
見えなくなること

573
00:37:47,468 --> 00:37:49,737
サムネールもです

574
00:37:51,071 --> 00:37:52,940
Apple TVのスクラバー･バー

575
00:37:53,440 --> 00:37:58,011
コンテンツの長さや
現在の再生位置が分かります

576
00:37:58,645 --> 00:38:04,084
サムネール画像には
iframeプレイリストが必要です

577
00:37:58,645 --> 00:38:04,084
サムネール画像には
iframeプレイリストが必要です

578
00:38:04,251 --> 00:38:07,688
iframeプレイリストが
なければ

579
00:38:07,788 --> 00:38:13,560
iPadやiPhone上の早送りや
巻き戻しで映像が出ません

580
00:38:14,461 --> 00:38:19,733
iframeプレイリストの前に
通常の動画の話をしましょう

581
00:38:20,400 --> 00:38:24,805
通常のHLSの動画のセグメントを
視覚化したものです

582
00:38:24,905 --> 00:38:29,543
各セグメントには複数のフレームの
コンテンツと持続時間

583
00:38:29,643 --> 00:38:31,445
平均ビットレートがあり

584
00:38:31,545 --> 00:38:34,648
ビットレートは
セグメントで変わります

585
00:38:36,350 --> 00:38:38,986
圧縮技術によって

586
00:38:39,119 --> 00:38:42,956
動画のフレームは
他と関連付けて復号されます

587
00:38:43,524 --> 00:38:46,427
しかしiframeの場合

588
00:38:46,593 --> 00:38:48,962
フレームは単独で
復号できます

589
00:38:49,062 --> 00:38:52,532
これら基本フレームによって
他も復号可能となります

590
00:38:52,833 --> 00:38:57,804
１つのセグメントに
１つ以上のiframeが存在し得ます

591
00:38:58,072 --> 00:39:03,911
iframeは規則的な間隔で
現れる必要はありません

592
00:38:58,072 --> 00:39:03,911
iframeは規則的な間隔で
現れる必要はありません

593
00:39:05,579 --> 00:39:10,284
iframeプレイリストは
iframeコンテンツを指し示し

594
00:39:10,384 --> 00:39:13,253
iframeデータしか
ダウンロードされません

595
00:39:13,754 --> 00:39:15,756
iframeの持続時間は

596
00:39:15,856 --> 00:39:19,993
そのiframeから
次のiframeまでの時間です

597
00:39:20,360 --> 00:39:25,799
このiframeは通常の
コンテンツから抽出しました

598
00:39:26,233 --> 00:39:29,469
高密度iframeプレイリストも
作れます

599
00:39:30,437 --> 00:39:33,674
通常のコンテンツ用ではなく

600
00:39:33,807 --> 00:39:36,910
iframeを均等配置するためです

601
00:39:37,377 --> 00:39:42,916
これなら早送りの時にも
スムーズに流れます

602
00:39:44,318 --> 00:39:48,088
iframeプレイリストを追加した
マスタープレイリストです

603
00:39:49,223 --> 00:39:52,292
iframeプレイリストも

604
00:39:52,392 --> 00:39:56,597
通常のプレイリストと
同じタグを使っています

605
00:39:56,763 --> 00:40:01,835
違いはフレームレート属性を
サポートしていないことです

606
00:39:56,763 --> 00:40:01,835
違いはフレームレート属性を
サポートしていないことです

607
00:40:01,935 --> 00:40:04,271
意味を成さないからです

608
00:40:04,838 --> 00:40:08,875
テストするために
直接試すことができます

609
00:40:09,243 --> 00:40:14,014
iframeプレイリストのURIを
Safariに貼り付けます

610
00:40:14,448 --> 00:40:16,083
１倍速で再生され

611
00:40:16,183 --> 00:40:22,322
徐々に変わりながら順番に
iframeが表示されるはずです

612
00:40:23,624 --> 00:40:26,527
ビットレートの違いも

613
00:40:26,927 --> 00:40:32,499
iframeのビットレートは
通常より低いのが常です

614
00:40:34,101 --> 00:40:36,470
ビットレートと言えば

615
00:40:36,570 --> 00:40:41,775
HLSでピークビットレートを
計算する方法を定義しました

616
00:40:42,376 --> 00:40:43,744
その方法でないと

617
00:40:43,844 --> 00:40:49,616
セグメントが帯域幅を超えた
というエラーになります

618
00:40:51,251 --> 00:40:55,122
動画から離れて
音声の話をしましょう

619
00:40:55,322 --> 00:40:58,659
いかに複数言語を
サポートするか

620
00:40:59,226 --> 00:41:01,094
これがインターフェイスです

621
00:40:59,226 --> 00:41:01,094
これがインターフェイスです

622
00:41:01,195 --> 00:41:05,265
言語のリストがあり
そこから選びます

623
00:41:07,201 --> 00:41:08,869
プレイリストの例です

624
00:41:08,969 --> 00:41:12,406
それぞれの音声属性を

625
00:41:12,706 --> 00:41:18,412
それぞれの動画バリアントに
追加しています

626
00:41:18,579 --> 00:41:22,916
グループIDとともに
メディアタグも足しました

627
00:41:23,083 --> 00:41:26,487
グループIDはシンプルに―

628
00:41:27,321 --> 00:41:32,826
オーディオレンディションと
動画バリアントを関連付けます

629
00:41:33,760 --> 00:41:38,365
２つのオーディオレンディションの
違いを見てください

630
00:41:38,799 --> 00:41:43,670
メディアについても
できるだけ詳しく記述してください

631
00:41:45,005 --> 00:41:47,941
問題になりがちな属性が２つ

632
00:41:48,042 --> 00:41:51,111
デフォルトと自動選択です

633
00:41:52,212 --> 00:41:54,681
自動選択は
次のことを示します

634
00:41:55,349 --> 00:41:58,619
AVPlayerの
メディア選択コードで

635
00:41:58,719 --> 00:42:03,791
ユーザからの入力なしに
レンディションを選べます

636
00:41:58,719 --> 00:42:03,791
ユーザからの入力なしに
レンディションを選べます

637
00:42:04,191 --> 00:42:07,694
大抵は自動選択を設定します

638
00:42:08,428 --> 00:42:13,767
設定しなければユーザが
自ら選ばなければなりません

639
00:42:15,669 --> 00:42:20,941
デフォルトはユーザに
好みの言語がない時に選ばれます

640
00:42:22,075 --> 00:42:25,746
一般的に動画の原語です

641
00:42:25,946 --> 00:42:30,617
自動選択でデフォルトも
選択可能とします

642
00:42:31,118 --> 00:42:35,122
デフォルト動画バリアントとは
無関係のデフォルトです

643
00:42:35,222 --> 00:42:38,725
レンディション内の
デフォルトです

644
00:42:40,394 --> 00:42:42,996
複数の言語があるのは
いいですが

645
00:42:43,096 --> 00:42:46,833
5.1chのマルチチャンネル
オーディオを再生したい

646
00:42:48,335 --> 00:42:53,307
マルチチャンネルオーディオに
未対応のデバイスもあります

647
00:42:53,407 --> 00:42:58,312
ステレオオプションも
ユーザに提供します

648
00:42:59,113 --> 00:43:01,749
マトリクスを埋めるべく

649
00:42:59,113 --> 00:43:01,749
マトリクスを埋めるべく

650
00:43:02,115 --> 00:43:05,986
すべてのフォーマットで
あらゆる言語に対応

651
00:43:07,921 --> 00:43:09,223
しかし

652
00:43:09,823 --> 00:43:15,396
マルチチャンネルオーディオの
フランス語はない

653
00:43:16,296 --> 00:43:20,534
その場合は代わりに
ステレオコンテンツを

654
00:43:20,634 --> 00:43:22,703
グループに入れます

655
00:43:23,737 --> 00:43:27,207
マトリクスのすべての項目を
埋める必要があります

656
00:43:28,075 --> 00:43:33,146
もう１つプレイリストの
例を見てください

657
00:43:34,281 --> 00:43:38,218
グループIDが変わっています

658
00:43:38,318 --> 00:43:42,156
グループIDは
オーディオレンディションと

659
00:43:42,256 --> 00:43:45,058
動画バリアントを
関連付けるものです

660
00:43:46,360 --> 00:43:49,363
マルチチャンネルの
グループです

661
00:43:49,763 --> 00:43:55,269
フランス語はステレオに
してあるのが分かりますね

662
00:43:55,469 --> 00:44:00,507
コーデックタグが
このグループにある―

663
00:43:55,469 --> 00:44:00,507
コーデックタグが
このグループにある―

664
00:44:00,607 --> 00:44:06,447
すべてのコーデックを
示すようにしてください

665
00:44:08,048 --> 00:44:11,752
動画バリアントを
複製しました

666
00:44:12,252 --> 00:44:13,954
エントリが２つです

667
00:44:14,054 --> 00:44:18,292
指し示す音声グループが
違います

668
00:44:18,392 --> 00:44:21,895
のちほどのスライドでも
同様の複製があります

669
00:44:23,397 --> 00:44:28,168
複数の音声ビットレートが
ある場合

670
00:44:28,602 --> 00:44:31,471
高ビットレート音声
だけでなく

671
00:44:31,572 --> 00:44:36,543
低ビットレートでも
提供するべきでしょう

672
00:44:36,844 --> 00:44:41,381
レンディションは
先ほどと似ています

673
00:44:41,515 --> 00:44:46,153
すべてのビットレートに
言語をあてはめます

674
00:44:47,154 --> 00:44:50,257
どちらも同じ
AACフォーマットです

675
00:44:50,624 --> 00:44:56,563
別のフォーマットを追加するなら
列を拡張するだけです

676
00:44:56,997 --> 00:45:02,402
これまで便宜上
言語と呼んできましたが

677
00:44:56,997 --> 00:45:02,402
これまで便宜上
言語と呼んできましたが

678
00:45:02,736 --> 00:45:06,907
実際には
NAME属性のことです

679
00:45:08,275 --> 00:45:13,881
音声グループ名が記された
動画バリアントを見てください

680
00:45:14,248 --> 00:45:19,052
低ビットレートの動画は
低ビットレートの音声と関連付け

681
00:45:19,153 --> 00:45:23,323
高ビットレートの動画は
高ビットレートの音声と

682
00:45:23,924 --> 00:45:26,427
常に このように分けます

683
00:45:26,994 --> 00:45:32,966
全部の動画バリアントを
低ビットレートの音声と関連付けて

684
00:45:33,066 --> 00:45:36,336
更に高ビットレートの音声とも
関連付けないように

685
00:45:36,470 --> 00:45:39,606
そうしてしまうと
高ビットレートの動画が

686
00:45:39,707 --> 00:45:42,910
高ビットレートと低ビットレートの
音声の間で揺れ動きます

687
00:45:44,945 --> 00:45:49,516
AC3コンテンツを
追加しました

688
00:45:49,983 --> 00:45:54,955
ここでも動画バリアントの
エントリを複製していますが

689
00:45:55,055 --> 00:45:57,458
同じ動画プレイリストを
指しています

690
00:45:58,025 --> 00:46:02,563
動画バリアントのビットレートが
変わっています

691
00:45:58,025 --> 00:46:02,563
動画バリアントのビットレートが
変わっています

692
00:46:02,696 --> 00:46:04,898
なぜなら動画は…

693
00:46:05,499 --> 00:46:07,834
動画バリアントの
ビットレートは

694
00:46:07,935 --> 00:46:12,105
動画とレンディションの
ビットレートの合計です

695
00:46:14,074 --> 00:46:17,511
動画に戻りましょう

696
00:46:18,212 --> 00:46:19,613
複数のフォーマットです

697
00:46:19,713 --> 00:46:25,686
HEVCは同じビットレートで
高画質ですし

698
00:46:25,786 --> 00:46:29,356
ドルビービジョンの
HDRコンテンツも再生したい

699
00:46:31,024 --> 00:46:33,827
再びマトリクスを埋めます

700
00:46:33,927 --> 00:46:37,131
どの動画フォーマットを
選んでも

701
00:46:37,431 --> 00:46:40,367
合理的なバリアントの
集合にしたい

702
00:46:40,467 --> 00:46:44,037
この並びは
品質に基づく階層です

703
00:46:44,405 --> 00:46:49,476
それぞれのフォーマットの
各層をバリアントで埋めます

704
00:46:52,146 --> 00:46:58,385
古いフォーマットの高位の層を
埋める必要はありません

705
00:46:58,485 --> 00:47:00,120
スキップできます

706
00:46:58,485 --> 00:47:00,120
スキップできます

707
00:47:00,254 --> 00:47:05,325
ドルビービジョンに
未対応のデバイスがあります

708
00:47:05,459 --> 00:47:10,564
フォールバックとして
H.264を提供します

709
00:47:11,365 --> 00:47:16,370
列ごとにビットレートを
段階的に上げていきます

710
00:47:17,971 --> 00:47:21,175
１枚のスライドでは
収まりません

711
00:47:21,275 --> 00:47:22,943
３枚に分けます

712
00:47:23,210 --> 00:47:26,080
これはH.264のバリアント

713
00:47:27,414 --> 00:47:29,850
このスライドはHEVCですね

714
00:47:29,950 --> 00:47:34,855
それぞれが異なる動画
プレイリストを指しています

715
00:47:35,522 --> 00:47:37,324
これはドルビービジョンです

716
00:47:37,424 --> 00:47:40,928
音声グループは同じです

717
00:47:41,228 --> 00:47:44,598
複数の音声フォーマットを
扱う場合

718
00:47:44,798 --> 00:47:49,436
それぞれに動画バリアントを
複製します

719
00:47:49,903 --> 00:47:53,440
動画プレイリストの数は
増えません

720
00:47:53,540 --> 00:47:56,810
プレイリストのエントリが
増えるだけです

721
00:47:58,011 --> 00:48:00,180
あと一歩です

722
00:47:58,011 --> 00:48:00,180
あと一歩です

723
00:48:00,748 --> 00:48:03,550
最後に字幕と
クローズドキャプションを

724
00:48:04,385 --> 00:48:06,787
どうやるのでしょうか

725
00:48:07,354 --> 00:48:08,388
バリアントで

726
00:48:08,489 --> 00:48:13,894
字幕とクローズドキャプションの
グループを示します

727
00:48:13,994 --> 00:48:17,464
動画バリアントに
属性を追加して

728
00:48:18,398 --> 00:48:20,534
レンディションを記述します

729
00:48:20,734 --> 00:48:23,437
クローズドキャプションの
レンディションには

730
00:48:23,537 --> 00:48:25,606
URI属性がありません

731
00:48:26,340 --> 00:48:30,377
クローズドキャプションの
データは

732
00:48:30,477 --> 00:48:34,481
動画コンテンツ内にあると
システムは理解します

733
00:48:36,550 --> 00:48:42,323
ロジャーの“すべてを与えろ”
とはこういうことです

734
00:48:43,557 --> 00:48:46,427
今日の話をまとめましょう

735
00:48:46,560 --> 00:48:49,463
エミールは
パフォーマンスの測定の話

736
00:48:49,563 --> 00:48:52,433
算出方法と意味について
話しました

737
00:48:52,599 --> 00:48:56,503
ジェンヘンは
起動時間の短縮と

738
00:48:56,770 --> 00:49:01,208
ストールやエラーの
解決法を話しました

739
00:48:56,770 --> 00:49:01,208
ストールやエラーの
解決法を話しました

740
00:49:01,308 --> 00:49:03,710
私は
マスタープレイリストの話を

741
00:49:04,077 --> 00:49:09,416
HLS検証ツールは
マスタープレイリストや

742
00:49:09,516 --> 00:49:12,319
メディアプレイリストの
問題を突き止めます

743
00:49:12,453 --> 00:49:14,655
使う価値はあります

744
00:49:16,123 --> 00:49:21,528
更に詳しい情報は
デベロッパWebサイトをご覧ください

745
00:49:21,895 --> 00:49:24,932
以上です
ありがとうございました

746
00:49:25,065 --> 00:49:28,135
(拍手)