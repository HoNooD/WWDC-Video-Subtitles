
1
00:00:07,074 --> 00:00:16,216
(音楽)

2
00:00:21,188 --> 00:00:28,962
(拍手)

3
00:00:29,062 --> 00:00:33,233
今回のテーマは
Playgroundの活用法です

4
00:00:33,433 --> 00:00:34,935
私はチベットです

5
00:00:35,035 --> 00:00:39,006
後ほど同僚のアレックスと
ＴＪも加わります

6
00:00:40,174 --> 00:00:44,611
コードをすぐに試せる
Playgroundは便利ですよね

7
00:00:45,145 --> 00:00:49,016
今回はお勧めのワークフローを
ご紹介します

8
00:00:49,349 --> 00:00:55,022
Playgroundへの理解が
より深まるセッションです

9
00:00:56,823 --> 00:01:00,260
まずは基本的なことから
お話しします

10
00:00:56,823 --> 00:01:00,260
まずは基本的なことから
お話しします

11
00:01:00,360 --> 00:01:04,864
概要やマークアップ
埋め込みリソースなどです

12
00:01:05,432 --> 00:01:08,502
その後 ステップ実行を行います

13
00:01:08,902 --> 00:01:12,940
コードの実行をコントロールする
方法もお伝えします

14
00:01:14,208 --> 00:01:20,314
終盤ではCustomPlayground
DisplayConvertibleもご紹介します

15
00:01:20,614 --> 00:01:24,284
インラインの結果表示を
カスタマイズするプロトコルです

16
00:01:25,052 --> 00:01:28,088
フレームワークで
コードを動かすための

17
00:01:28,188 --> 00:01:30,891
ワークスペースの使い方も
取り上げます

18
00:01:32,526 --> 00:01:39,500
PlaygroundはSwiftを試すための
インタラクティブな環境です

19
00:01:40,400 --> 00:01:43,837
実際にXcodeで開いてみましょう

20
00:01:46,773 --> 00:01:50,544
Playgroundを開くと
エディタが現れます

21
00:01:51,311 --> 00:01:55,682
Xcodeの標準的なエディタですね

22
00:01:56,183 --> 00:01:59,086
ですがPlaygroundの場合は

23
00:01:59,186 --> 00:02:04,625
右側のサイドバーに
コードの結果が表示されます

24
00:01:59,186 --> 00:02:04,625
右側のサイドバーに
コードの結果が表示されます

25
00:02:06,059 --> 00:02:10,330
結果をインラインで
表示することもできます

26
00:02:10,864 --> 00:02:16,036
サイドバーの結果の横にある
長方形のボタンを選択すれば

27
00:02:16,837 --> 00:02:20,474
エディタ領域に結果を表示できます

28
00:02:22,776 --> 00:02:26,446
この例では
“Hello, playground”の文言が

29
00:02:26,547 --> 00:02:29,583
変数宣言の下に確認できます

30
00:02:31,518 --> 00:02:33,987
Assistant Editorも便利です

31
00:02:34,821 --> 00:02:37,858
このモードの面白いところは

32
00:02:37,958 --> 00:02:42,229
ライブビューで詳細に
結果を確認できる点です

33
00:02:43,697 --> 00:02:48,635
例ではUIViewを使い
ライブビューを作成しましたが

34
00:02:49,136 --> 00:02:53,473
iOSやtvOSの場合は
UIViewControllerも使えます

35
00:02:53,674 --> 00:02:57,578
macOSにはNSViewと
NSViewControllerが使えます

36
00:03:01,849 --> 00:03:05,919
こちらはライブビューを表示する
スニペットです

37
00:03:06,453 --> 00:03:09,189
まずはPlayground Supportの
インポートです

38
00:03:10,123 --> 00:03:15,729
このフレームワークはXcodeと
Playgroundの連携を強めます

39
00:03:15,829 --> 00:03:18,332
ライブビューもその１つです

40
00:03:18,832 --> 00:03:22,736
このフレームワークを
インポートすればAPIも使えます

41
00:03:23,670 --> 00:03:28,375
UIKitやAppKitを使い
View Controllerを作成したら

42
00:03:28,509 --> 00:03:31,278
フレームワークに渡します

43
00:03:31,745 --> 00:03:37,150
これには“liveView”プロパティを
“viewController”に設定します

44
00:03:37,584 --> 00:03:41,955
これでAssistant Editorに
View Controllerが表示されます

45
00:03:43,657 --> 00:03:48,195
次はマークアップで
Playgroundを整えましょう

46
00:03:48,328 --> 00:03:51,732
他の人とシェアする際にも
役立ちます

47
00:03:52,099 --> 00:03:57,437
リッチテキストや画像
そして動画なども使えます

48
00:03:58,038 --> 00:04:01,675
それでは手順を見ていきましょう

49
00:03:58,038 --> 00:04:01,675
それでは手順を見ていきましょう

50
00:04:03,744 --> 00:04:07,714
これはマークアップで書いた
私の詩です

51
00:04:08,148 --> 00:04:13,086
スラッシュ２本とコロンのあとに
記述したものは

52
00:04:13,220 --> 00:04:16,557
マークアップテキストになります

53
00:04:18,192 --> 00:04:24,164
これを複数行 続けて記述すると
１つのブロックにまとまります

54
00:04:25,432 --> 00:04:30,637
または最初のアスタリスクのあとに
コロンをつけても同じです

55
00:04:31,972 --> 00:04:37,544
こちらがXcode上での
マークアップです

56
00:04:38,011 --> 00:04:41,114
レンダリングされたものを見るには

57
00:04:41,215 --> 00:04:45,152
右上のボタンから
インスペクタを表示します

58
00:04:45,853 --> 00:04:49,923
そして“Render Documentation”を
選択すると―

59
00:04:50,924 --> 00:04:53,327
詩がレンダリングされました

60
00:04:55,462 --> 00:04:59,833
またマークアップで
見出しをつけることも可能なので

61
00:05:00,100 --> 00:05:03,103
Playground内を構造化できます

62
00:05:03,203 --> 00:05:06,907
サイズはナンバーサインの数で
変わります

63
00:05:07,875 --> 00:05:13,113
この例では 詩の題名である
“Roses Are Red”が大見出しです

64
00:05:13,647 --> 00:05:17,384
副題の“An ode to markup”は
中見出しです

65
00:05:17,885 --> 00:05:20,521
そして署名は小見出しです

66
00:05:21,388 --> 00:05:24,992
ナンバーサインまで
一緒に表示されないよう―

67
00:05:25,092 --> 00:05:27,828
必ずスペースを入れてください

68
00:05:29,530 --> 00:05:32,733
では レンダリングしてみましょう

69
00:05:33,667 --> 00:05:39,039
サイズの異なる３つの見出しが
確認できますね

70
00:05:40,674 --> 00:05:43,911
テキストの書式設定も可能です

71
00:05:44,778 --> 00:05:50,918
アスタリスクで囲んだ文字列は
イタリックになります

72
00:05:51,585 --> 00:05:55,088
バッククォートで囲めば
コード記述時のフォント

73
00:05:56,790 --> 00:06:01,228
２つのアスタリスクで囲めば
ボールドになります

74
00:05:56,790 --> 00:06:01,228
２つのアスタリスクで囲めば
ボールドになります

75
00:06:01,728 --> 00:06:03,463
見てみましょう

76
00:06:05,232 --> 00:06:08,535
“red”と“blue”は
イタリックですね

77
00:06:08,635 --> 00:06:12,306
“markup”と“fun”も
変わっています

78
00:06:13,941 --> 00:06:16,677
次はリストについてです

79
00:06:17,244 --> 00:06:23,550
数字とピリオドを記述することで
順序リストを作成できます

80
00:06:24,551 --> 00:06:28,555
この例では
詩を順序リストで示しました

81
00:06:29,289 --> 00:06:32,492
レンダリングしてみましょう

82
00:06:32,593 --> 00:06:36,263
詩の各行に番号が振られました

83
00:06:37,397 --> 00:06:40,100
項目リストも作成できます

84
00:06:40,701 --> 00:06:46,039
数字とピリオドではなく
アスタリスクを記述します

85
00:06:47,641 --> 00:06:50,477
レンダリングしてみましょう

86
00:06:50,577 --> 00:06:55,148
詩の各行の頭が
丸の記号から始まっています

87
00:06:56,950 --> 00:06:59,453
リンクも設定できます

88
00:07:00,053 --> 00:07:03,857
例では“Roses”と
“Violets”に設定しました

89
00:07:04,324 --> 00:07:10,030
文字列を角括弧で囲んだあと
URLを丸括弧で囲みます

90
00:07:11,532 --> 00:07:15,836
または参照表記でも
リンクを設定できます

91
00:07:15,936 --> 00:07:21,708
この例では[1]としましたが
数字でなくても構いません

92
00:07:22,943 --> 00:07:27,014
このようにリンク名を角括弧で囲み

93
00:07:27,114 --> 00:07:31,084
URLはコロンのあとに記述します

94
00:07:32,786 --> 00:07:35,923
レンダリングすると こうなります

95
00:07:36,356 --> 00:07:41,295
“Roses”“Violets”“fun”に
リンクが張れました

96
00:07:43,096 --> 00:07:46,800
Playgroundは複数のページで
開くこともでき

97
00:07:47,100 --> 00:07:52,172
それぞれにマークアップやコードを
記述できます

98
00:07:52,873 --> 00:07:57,845
新しいページを開くには
“File”の“New”から

99
00:07:57,945 --> 00:08:00,280
“Playground Page”を選択します

100
00:07:57,945 --> 00:08:00,280
“Playground Page”を選択します

101
00:08:01,014 --> 00:08:02,916
またはPlayground上で―

102
00:08:03,016 --> 00:08:07,187
controlクリックをしても
作成できます

103
00:08:09,056 --> 00:08:13,060
マークアップで
ページ間のリンクも可能です

104
00:08:13,760 --> 00:08:18,999
前ページに移動するには
“(@previous)”とし

105
00:08:19,600 --> 00:08:23,871
次ページに移動するには
“(@next)”とします

106
00:08:24,438 --> 00:08:30,777
特定のページの場合は
ページのファイル名を記述します

107
00:08:30,878 --> 00:08:33,746
スペースや特殊な文字は

108
00:08:33,847 --> 00:08:37,284
文字コード中の“%”で
置き換えてください

109
00:08:39,520 --> 00:08:43,890
また コンテンツを
埋め込むことも可能です

110
00:08:45,058 --> 00:08:49,997
SourcesフォルダにSwiftファイルを
追加することもできます

111
00:08:50,731 --> 00:08:53,867
Sourcesフォルダは
各ページにもあります

112
00:08:54,168 --> 00:08:59,173
各ソースはコンパイルされ
複数のモジュールが作成されます

113
00:08:59,273 --> 00:09:01,942
インポート命令は不要です

114
00:08:59,273 --> 00:09:01,942
インポート命令は不要です

115
00:09:02,342 --> 00:09:04,912
それぞれのモジュールは

116
00:09:05,012 --> 00:09:10,517
アクセスコントロールで
補助ソースの書き出しを制御します

117
00:09:11,585 --> 00:09:16,290
メインのPlaygroundのソースは
“public”としてください

118
00:09:16,590 --> 00:09:21,094
Sourcesフォルダに置くものの
好例はヘルパーコードでしょう

119
00:09:21,195 --> 00:09:25,766
メインのPlaygroundの外にある
クラスやエクステンションです

120
00:09:28,635 --> 00:09:31,305
他のリソースも追加できます

121
00:09:31,872 --> 00:09:39,213
画像や音声 動画
Storyboardファイル ZIPなどです

122
00:09:40,414 --> 00:09:41,915
Resourcesフォルダは―

123
00:09:42,015 --> 00:09:46,720
Sourcesフォルダと同じく
Playgroundの各ページにあります

124
00:09:48,455 --> 00:09:53,660
リソースはマークアップにも
コードにも追加できます

125
00:09:54,595 --> 00:10:01,735
リンク設定と同じような構文で
画像を埋め込むことが可能です

126
00:09:54,595 --> 00:10:01,735
リンク設定と同じような構文で
画像を埋め込むことが可能です

127
00:10:02,636 --> 00:10:06,940
“MyPicture.jpg”のような
画像ファイルを指定します

128
00:10:07,040 --> 00:10:08,942
ホバータイトルだけでなく

129
00:10:09,042 --> 00:10:14,414
埋め込んだ画像を説明する
代替テキストも指定します

130
00:10:15,082 --> 00:10:21,421
これらの設定は音声ブラウザなどの
ユーザに有用です

131
00:10:22,689 --> 00:10:28,662
そしてUIImageまたはNSImageを使い
この画像にアクセスします

132
00:10:30,164 --> 00:10:34,334
動画ファイルも同様に
埋め込みが可能です

133
00:10:35,002 --> 00:10:38,205
構文も先ほどと似ています

134
00:10:38,305 --> 00:10:44,278
動画のサイズだけでなく
ポスター画像も指定しましょう

135
00:10:46,213 --> 00:10:50,751
この動画など 他のリソースに
アクセスしたい時は

136
00:10:51,051 --> 00:10:55,022
バンドルAPIで
見つけることができます

137
00:10:55,989 --> 00:10:59,760
この例ではリソース名と拡張子から

138
00:10:59,860 --> 00:11:03,831
“MyVideo.mp4”のURLを取得します

139
00:10:59,860 --> 00:11:03,831
“MyVideo.mp4”のURLを取得します

140
00:11:04,932 --> 00:11:10,003
リソースはメインバンドルの
リソースとして扱われます

141
00:11:12,005 --> 00:11:17,945
フレームワークやマークアップの
より詳しい情報は

142
00:11:18,045 --> 00:11:20,280
developer.apple.comで
ご確認ください

143
00:11:21,648 --> 00:11:28,789
続いては 同僚のアレックスから
Playgroundの新機能をご紹介します

144
00:11:29,156 --> 00:11:29,990
どうも

145
00:11:30,090 --> 00:11:38,665
(拍手)

146
00:11:39,066 --> 00:11:40,133
ありがとう

147
00:11:40,367 --> 00:11:43,837
Core OSエンジニアの
アレックスです

148
00:11:44,905 --> 00:11:46,640
皆さんに質問です

149
00:11:46,974 --> 00:11:50,344
思いついたコードを
試してみる前に―

150
00:11:50,444 --> 00:11:53,914
忘れてしまった経験は
ありませんか？

151
00:11:54,748 --> 00:11:58,485
プロジェクトのセットアップを
事前にしていなかったなど

152
00:11:58,585 --> 00:12:01,188
理由は様々でしょう

153
00:11:58,585 --> 00:12:01,188
理由は様々でしょう

154
00:12:02,289 --> 00:12:09,329
今回のお話はAppleのAPIの初心者や
納期を抱える熟練のエンジニア

155
00:12:09,630 --> 00:12:13,133
そしてデータサイエンティストにも
有用です

156
00:12:13,901 --> 00:12:18,238
AppleのAPIに対する
コーディングを始めたいなら

157
00:12:18,338 --> 00:12:21,775
Playgroundは一番の近道です

158
00:12:24,344 --> 00:12:29,483
Xcode 10でPlaygroundは
より速く レスポンシブになり

159
00:12:29,583 --> 00:12:33,120
新たにステップ実行も
可能となりました

160
00:12:34,221 --> 00:12:37,858
そのためのUIをお見せしましょう

161
00:12:41,595 --> 00:12:45,666
Playgroundに
なじみのある方なら まず―

162
00:12:45,966 --> 00:12:49,469
左側の青いラインに気づくでしょう

163
00:12:50,571 --> 00:12:53,841
プレイボタンは
ポインタがある行に表示されます

164
00:12:55,809 --> 00:13:01,014
青くなった行番号のコードは
実行可能なコードです

165
00:12:55,809 --> 00:13:01,014
青くなった行番号のコードは
実行可能なコードです

166
00:13:01,849 --> 00:13:03,650
プレイボタンを押すと

167
00:13:03,984 --> 00:13:10,057
プレイボタンを含む青い行すべての
コードが実行されます

168
00:13:10,157 --> 00:13:11,792
見てみましょう

169
00:13:12,960 --> 00:13:17,764
このとおり 最初の３行のコードが
実行されました

170
00:13:18,031 --> 00:13:20,667
結果は右側に出ています

171
00:13:21,468 --> 00:13:24,371
プレイボタンが灰色になったのは

172
00:13:24,471 --> 00:13:30,143
これらのコードがすでに
実行済みであることを表しています

173
00:13:31,278 --> 00:13:34,815
他にプレイボタンが灰色になるのは

174
00:13:34,915 --> 00:13:39,453
その行がコードの
最上行ではない場合です

175
00:13:39,753 --> 00:13:44,525
例えば関数の括弧の中や
forループの中です

176
00:13:44,792 --> 00:13:46,960
forループを実行するには

177
00:13:47,060 --> 00:13:52,866
ポインタをプレイボタンが青くなる
閉じ波括弧の行に移します

178
00:13:52,966 --> 00:13:54,768
これで実行できます

179
00:13:58,272 --> 00:14:03,010
キーボードショートカットの
“shift + return”も便利です

180
00:13:58,272 --> 00:14:03,010
キーボードショートカットの
“shift + return”も便利です

181
00:14:03,310 --> 00:14:07,848
コードを１行
書き終えたあとに使用すると

182
00:14:07,948 --> 00:14:13,187
その行を実行した上で
カーソルが次の行に移ります

183
00:14:14,555 --> 00:14:17,991
青い行はコードの編集も可能です

184
00:14:18,091 --> 00:14:23,030
手動でPlaygroundをリセットせずに
編集できます

185
00:14:23,297 --> 00:14:27,734
青い行のコードを編集すると
その影響は―

186
00:14:28,469 --> 00:14:31,305
実行済みのコードにも及びます

187
00:14:31,405 --> 00:14:35,709
つまり変更を反映するために
リセットが必要ですが

188
00:14:36,076 --> 00:14:41,181
青い行を編集すると
自動でリセットされるのです

189
00:14:44,518 --> 00:14:48,622
手動でリセットする必要が
ある場合は

190
00:14:48,722 --> 00:14:52,593
デバッグバーにある
停止ボタンを押します

191
00:14:53,627 --> 00:14:57,764
では ステップ実行の利点は
何なのでしょう？

192
00:14:58,031 --> 00:15:01,201
まず １行だけの実行なら一瞬です

193
00:14:58,031 --> 00:15:01,201
まず １行だけの実行なら一瞬です

194
00:15:01,301 --> 00:15:05,873
Playgroundを再起動するより
断然 素早く済みます

195
00:15:06,707 --> 00:15:10,244
また データに瞬時に対応できます

196
00:15:10,344 --> 00:15:14,515
コードを書き 実行し
結果を確認すれば

197
00:15:14,615 --> 00:15:18,118
次のコードを
書く流れにつながります

198
00:15:18,819 --> 00:15:24,191
さらに Playgroundを再実行すると
毎回 値が変わります

199
00:15:24,324 --> 00:15:26,593
ネットワークリソースに
アクセスしたり

200
00:15:26,693 --> 00:15:30,364
ランダムな数値を
生成したりする場合です

201
00:15:30,697 --> 00:15:35,769
ステップ実行ならデータモデルは
不変なので 理解も容易です

202
00:15:36,336 --> 00:15:40,207
それでは簡単な例を
お見せしましょう

203
00:15:42,843 --> 00:15:48,916
私は様々なゲームが好きで
ゲームを書くのも好きですが

204
00:15:49,016 --> 00:15:52,486
強くはないので
単純なゲームをやります

205
00:15:52,586 --> 00:15:55,789
これは“Roshambo”という
ゲームです

206
00:15:55,889 --> 00:16:00,027
グー チョキ パーで競う
子供の遊びですね

207
00:15:55,889 --> 00:16:00,027
グー チョキ パーで競う
子供の遊びですね

208
00:16:00,627 --> 00:16:05,132
勝敗の判定には
チェック関数を使いました

209
00:16:05,532 --> 00:16:09,837
相手プレーヤーは
ランダムに動くようにしました

210
00:16:10,737 --> 00:16:16,276
相手プレーヤーが動く６行目を
ステップ実行すれば

211
00:16:16,677 --> 00:16:19,213
相手の手が分かります

212
00:16:19,413 --> 00:16:24,151
例では 相手はグーを出したので
こちらはパーを出します

213
00:16:25,018 --> 00:16:27,221
無事に勝てました

214
00:16:27,921 --> 00:16:32,993
ずるいかもしれませんが
これは高度なテクニックです

215
00:16:35,896 --> 00:16:41,635
なじみのないAPIを学ぶ際に
使えるテクニックですよ

216
00:16:41,735 --> 00:16:45,839
型や値が分からない
データ構造にも使えます

217
00:16:46,573 --> 00:16:48,509
今のは簡単な例です

218
00:16:48,642 --> 00:16:51,411
次は より踏み込んだデモです

219
00:16:54,615 --> 00:17:01,588
(拍手)

220
00:16:54,615 --> 00:17:01,588
(拍手)

221
00:17:04,525 --> 00:17:08,095
先ほどのゲームとは異なります

222
00:17:08,194 --> 00:17:10,731
こちらは三目並べです

223
00:17:11,698 --> 00:17:13,934
すでにゲームエンジンと―

224
00:17:14,434 --> 00:17:18,204
UIの最初のバージョンは
作ってあります

225
00:17:18,305 --> 00:17:22,209
それらのコードは
補助ソースに移しました

226
00:17:22,309 --> 00:17:26,113
これにより
ゲームの実行とUIの改良に

227
00:17:26,213 --> 00:17:29,750
集中して取り組むことができます

228
00:17:30,884 --> 00:17:37,458
ライブビューも使いますが
まず青い行番号を見てください

229
00:17:37,624 --> 00:17:39,927
ポインタに合わせて動きます

230
00:17:40,394 --> 00:17:44,631
それではまず
ゲーム盤をロードします

231
00:17:45,132 --> 00:17:47,034
回転させます

232
00:17:48,569 --> 00:17:50,971
三目並べのゲーム盤です

233
00:17:51,071 --> 00:17:54,541
このとおり
途中までコードを実行でき

234
00:17:54,641 --> 00:17:57,711
残りも実行可能な状態です

235
00:17:58,145 --> 00:18:00,614
私の第一手もあります

236
00:17:58,145 --> 00:18:00,614
私の第一手もあります

237
00:18:01,281 --> 00:18:02,316
実行しましょう

238
00:18:03,317 --> 00:18:04,318
打てました

239
00:18:04,418 --> 00:18:10,691
コードでゲームを進めながら
結果をライブビューで見られます

240
00:18:11,291 --> 00:18:13,393
相手に打たせましょう

241
00:18:17,931 --> 00:18:18,966
いいですね

242
00:18:19,066 --> 00:18:24,238
相手の動きはランダムなので
私が勝てるはずです

243
00:18:24,338 --> 00:18:27,341
(笑い声)

244
00:18:28,475 --> 00:18:31,578
ここまで複数行のコードを実行し

245
00:18:31,678 --> 00:18:36,283
またステップ実行でも
コードを実行しました

246
00:18:36,383 --> 00:18:40,921
そして さらにコードを
追記することも可能です

247
00:18:41,021 --> 00:18:42,723
やってみましょう

248
00:18:51,665 --> 00:18:52,533
書けました

249
00:18:52,633 --> 00:18:54,968
プレイボタンを押し―

250
00:18:56,470 --> 00:19:02,142
この１行を実行して
さらにもう１行 記述していきます

251
00:18:56,470 --> 00:19:02,142
この１行を実行して
さらにもう１行 記述していきます

252
00:19:07,648 --> 00:19:08,749
よかった

253
00:19:08,849 --> 00:19:12,920
(笑い声)

254
00:19:13,020 --> 00:19:15,089
大事な点があります

255
00:19:15,189 --> 00:19:21,762
最初はゲーム盤が水平だったため
私が回転させて見やすくしましたね

256
00:19:23,397 --> 00:19:28,168
その後 コードを実行しても
盤は水平には戻りません

257
00:19:28,268 --> 00:19:33,040
見やすい位置に回転させるコードは
書いていません

258
00:19:33,140 --> 00:19:37,711
クォータニオンを使うので
私にはまだ難しいです

259
00:19:39,213 --> 00:19:41,615
さらに 大事な点があります

260
00:19:41,715 --> 00:19:47,120
もし新たなコードを実行するたびに
相手がやり直せたとしたら

261
00:19:47,221 --> 00:19:50,457
それは少々 不公平でしょう

262
00:19:51,458 --> 00:19:54,428
進めましょう　たぶん勝てます

263
00:20:04,638 --> 00:20:05,873
どうかな？

264
00:20:08,876 --> 00:20:09,910
勝ちました

265
00:20:10,510 --> 00:20:17,184
(拍手)

266
00:20:17,284 --> 00:20:22,189
今回 ３個そろった列には
赤い丸が付きましたが

267
00:20:23,090 --> 00:20:27,227
もっと勝利の喜びを
感じたいところです

268
00:20:27,327 --> 00:20:30,664
ですのでUIを改良しましょう

269
00:20:30,864 --> 00:20:33,100
従来の開発環境では

270
00:20:33,200 --> 00:20:40,440
ゲームを自動で進行させる際には
複雑なハーネスを設計していました

271
00:20:40,541 --> 00:20:44,678
プログラムの終わりの挙動の
テストには それが必要でした

272
00:20:45,212 --> 00:20:50,384
しかしステップ実行があれば
終わりだけを実行でき

273
00:20:50,484 --> 00:20:55,155
その結果を踏まえて
新たなコードを追記できます

274
00:20:55,255 --> 00:20:56,557
やってみます

275
00:21:01,228 --> 00:21:05,465
パーティクルシステムを用いて
エフェクトを作ります

276
00:21:06,400 --> 00:21:08,836
“shift + return”で実行

277
00:21:09,503 --> 00:21:13,173
いいですね
勝利の実感が得られます

278
00:21:13,774 --> 00:21:17,778
(拍手)

279
00:21:17,878 --> 00:21:20,247
では おさらいです

280
00:21:20,647 --> 00:21:25,786
ステップ実行を使えば
１行ずつコードを吟味でき

281
00:21:26,253 --> 00:21:30,557
コードとデータ間の
会話が可能になります

282
00:21:30,657 --> 00:21:37,097
結果を逐一 確認しながら
より進んだコードを試していけます

283
00:21:37,598 --> 00:21:42,703
“shift + return”を使えば
手も頭も休みなく動かせます

284
00:21:43,136 --> 00:21:49,409
さらにライブビューも活用すれば
別の見方でモデルを確認できます

285
00:21:49,510 --> 00:21:55,716
グラフィカルな環境とコード記述を
シームレスに操れるのです

286
00:21:56,817 --> 00:22:03,156
新しいAppleのAPIを
学んでいる最中の初心者の皆さん

287
00:21:56,817 --> 00:22:03,156
新しいAppleのAPIを
学んでいる最中の初心者の皆さん

288
00:22:03,791 --> 00:22:10,531
新たなアプリケーションを思案中の
経験豊富なプログラマの皆さん

289
00:22:12,132 --> 00:22:18,639
次にコードを思いついた際には
Playgroundを使ってみてください

290
00:22:21,508 --> 00:22:26,580
よいアイデアを思いつくための
ヒントを３つ 提案します

291
00:22:27,014 --> 00:22:30,851
まず APIを自分で作るのなら

292
00:22:30,951 --> 00:22:36,156
チュートリアルの作成は
とても大事なことです

293
00:22:36,256 --> 00:22:41,462
ユーザはステップ実行しながら
コードの動きを確認できます

294
00:22:43,230 --> 00:22:47,834
次に 公開されているデータを
ダウンロードし

295
00:22:47,935 --> 00:22:52,973
ステップ実行しながら自分なりに
掘り下げるのもいいでしょう

296
00:22:53,707 --> 00:22:59,213
地図や自治体のデータ
学校の研究課題も使えます

297
00:23:00,447 --> 00:23:05,319
また ゲームやアニメーションの
作成もお勧めです

298
00:23:05,719 --> 00:23:07,221
難しくはありません

299
00:23:07,788 --> 00:23:13,961
SpriteKitやSyncKitを使い
１行ずつ強化していくのです

300
00:23:16,163 --> 00:23:20,901
Playgroundは
単なるオモチャではありません

301
00:23:21,001 --> 00:23:23,804
真面目に遊べるものです

302
00:23:23,904 --> 00:23:26,640
(笑い声)

303
00:23:26,740 --> 00:23:30,410
インタラクティブに
コードやデータを扱えます

304
00:23:30,644 --> 00:23:36,150
REST APIでJSONの未知の
スニペットをダウンロードした方や

305
00:23:36,250 --> 00:23:42,422
機械学習アプリケーションで
膨大なコードを扱う方にも有用です

306
00:23:42,523 --> 00:23:44,391
特に後者の方には

307
00:23:44,491 --> 00:23:50,898
Create MLに関するセッションの
動画をお勧めします

308
00:23:51,899 --> 00:23:56,670
また Playgroundは
AppleのAPIを学ぶベストな手段です

309
00:23:56,803 --> 00:24:03,243
初心者でも WWDCで学んだAPIを
試したい方でも活用できます

310
00:23:56,803 --> 00:24:03,243
初心者でも WWDCで学んだAPIを
試したい方でも活用できます

311
00:24:04,878 --> 00:24:07,748
AppleのAPIでなくても大丈夫です

312
00:24:07,848 --> 00:24:11,185
ご自身のフレームワークも
インポートできます

313
00:24:11,285 --> 00:24:17,191
それを見せるには データ型の
表現をカスタマイズします

314
00:24:17,291 --> 00:24:21,962
デベロッパが適切な情報を
一目で得られます

315
00:24:22,629 --> 00:24:28,035
こういった高度な概念のお話は
ＴＪにバトンタッチします

316
00:24:28,769 --> 00:24:36,944
(拍手)

317
00:24:37,044 --> 00:24:38,078
ありがとう

318
00:24:38,178 --> 00:24:41,715
私はXcodeエンジニアのＴＪです

319
00:24:42,049 --> 00:24:45,686
あなたのライブラリや
フレームワークは

320
00:24:45,786 --> 00:24:52,559
Playgroundの機能を活用すれば
きっと さらに改善されるはずです

321
00:24:53,460 --> 00:24:58,332
リッチなエクスペリエンスが
反映されるのは―

322
00:24:58,432 --> 00:25:03,237
READMEやチュートリアル
一般的なAPIドキュメントです

323
00:24:58,432 --> 00:25:03,237
READMEやチュートリアル
一般的なAPIドキュメントです

324
00:25:04,805 --> 00:25:08,709
Playgroundを活用することの
利点のひとつは

325
00:25:08,809 --> 00:25:12,279
自由な表現ができることです

326
00:25:12,412 --> 00:25:15,015
それを可能にしてくれるのが―

327
00:25:15,249 --> 00:25:18,552
CustomPlaygroundDisplay
Convertibleです

328
00:25:18,652 --> 00:25:25,492
Playground内の型の表現の
カスタマイズが可能になります

329
00:25:25,592 --> 00:25:28,195
結果が分かりやすくなりますね

330
00:25:28,896 --> 00:25:35,135
まずPlaygroundにフレームワークを
インポートすることから説明します

331
00:25:35,602 --> 00:25:41,141
さらにトラブルシューティングも
ご紹介していきます

332
00:25:43,911 --> 00:25:46,914
それでは早速 始めましょう

333
00:25:47,748 --> 00:25:53,253
ご存知のとおり ユーザが
Playgroundでコードを書くと

334
00:25:53,654 --> 00:25:57,791
結果は右側のサイドバーに
表示されます

335
00:25:59,593 --> 00:26:02,596
Playground用に
最適化されていない型は

336
00:25:59,593 --> 00:26:02,596
Playground用に
最適化されていない型は

337
00:26:02,830 --> 00:26:06,300
次の２通りの方法で
値が表現されます

338
00:26:07,034 --> 00:26:11,672
CustomStringConvertibleに
適合していない型の場合は―

339
00:26:12,906 --> 00:26:17,244
Swiftの型で構造化された
表現を作成します

340
00:26:17,478 --> 00:26:20,447
一方 適合する型の場合は

341
00:26:20,547 --> 00:26:24,151
記述を呼び出し
使用することになります

342
00:26:26,420 --> 00:26:28,255
これが不十分なら―

343
00:26:28,355 --> 00:26:33,961
ユーザはサイドバーにある
クイックルック機能を使うでしょう

344
00:26:35,629 --> 00:26:43,003
もしくは長方形のボタンを選択し
インラインで結果を確認しますね

345
00:26:43,937 --> 00:26:45,472
後者の場合―

346
00:26:46,907 --> 00:26:51,945
テキスト表現で
値が示されることが多いです

347
00:26:52,546 --> 00:26:59,653
大抵の場合はそれで十分ですが
数値を返してほしい場合もあります

348
00:27:00,988 --> 00:27:04,658
またはテキストや数値の
表現ではなく―

349
00:27:04,892 --> 00:27:10,831
画像などグラフィカルな表現を
返してほしい場合もあるでしょう

350
00:27:12,966 --> 00:27:15,536
それらを
コントロールできるのが―

351
00:27:16,203 --> 00:27:19,640
CustomPlaygroundDisplay
Convertibleです

352
00:27:20,007 --> 00:27:26,880
Xcode 9.3とSwift 4.1で新たに
サポートされたプロトコルです

353
00:27:27,147 --> 00:27:33,020
CustomPlaygroundQuickLookableの
後継にあたります

354
00:27:34,655 --> 00:27:37,491
詳しく見ていきましょう

355
00:27:39,993 --> 00:27:46,200
“playgroundDescription”という
プロパティしか返していませんね

356
00:27:46,433 --> 00:27:49,102
これはAny型なので

357
00:27:49,203 --> 00:27:55,042
最もベストと思われる値の表現を
返すことができます

358
00:27:56,443 --> 00:28:03,016
いくつかの型においては
Appleが表現形式を用意しています

359
00:27:56,443 --> 00:28:03,016
いくつかの型においては
Appleが表現形式を用意しています

360
00:28:04,418 --> 00:28:06,186
ここに挙げた型は―

361
00:28:06,286 --> 00:28:12,159
Xcode 9.3とSwift 4.1の時点で
特別な表現形式を使えるものです

362
00:28:12,559 --> 00:28:17,164
左は特にテキスト表現が
用意されている型

363
00:28:17,698 --> 00:28:21,001
そして右はグラフィカル表現です

364
00:28:21,368 --> 00:28:28,342
ご自分が返したい値の表現に
どれが合うか ぜひ試してください

365
00:28:31,111 --> 00:28:36,850
満足いくものが出来上がったら
ユーザに提供したいですよね

366
00:28:38,252 --> 00:28:40,821
Appleのフレームワークと
ともに―

367
00:28:41,255 --> 00:28:46,360
カスタムフレームワークを
インポートする方法をお伝えします

368
00:28:48,395 --> 00:28:53,300
通常 プロジェクトで
単一のフレームワークを作成すると

369
00:28:53,634 --> 00:28:56,770
ビルドプロダクトディレクトリに
入ります

370
00:28:58,539 --> 00:29:03,777
Playgroundは そこを見に行き
フレームワークをインポートします

371
00:28:58,539 --> 00:29:03,777
Playgroundは そこを見に行き
フレームワークをインポートします

372
00:29:04,177 --> 00:29:10,851
そのためには 単純にPlaygroundを
プロジェクトに加えてください

373
00:29:11,752 --> 00:29:18,158
アクセスと編集ができる
単純なプロジェクトにお勧めです

374
00:29:18,692 --> 00:29:21,628
こちらが
プロジェクトナビゲータです

375
00:29:24,965 --> 00:29:30,838
ご自身のプロジェクトに
Playgroundを追加した際には

376
00:29:30,938 --> 00:29:35,008
“ビルドは歩くことと同じだ”と
考えてください

377
00:29:35,242 --> 00:29:39,246
ビルドなしにプログラムを
走らせることはできません

378
00:29:42,349 --> 00:29:46,887
複数のプロジェクトが
ある場合もありますね

379
00:29:46,987 --> 00:29:51,525
フレームワークが３つも４つも
あるかもしれません

380
00:29:52,960 --> 00:29:58,465
プロジェクトが分かれていると
状況はやや複雑化します

381
00:29:58,565 --> 00:30:02,169
ビルドプロダクトディレクトリも
複数になるからです

382
00:29:58,565 --> 00:30:02,169
ビルドプロダクトディレクトリも
複数になるからです

383
00:30:02,269 --> 00:30:06,907
コードをPlaygroundに
インポートするのも大変です

384
00:30:07,007 --> 00:30:09,209
これを解決するには―

385
00:30:09,309 --> 00:30:13,781
各プロジェクトを
単一のワークスペースに追加します

386
00:30:13,881 --> 00:30:17,084
各プロジェクトをビルドした際には

387
00:30:17,684 --> 00:30:24,191
フレームワークはワークスペースの
単一のディレクトリに入ります

388
00:30:24,291 --> 00:30:30,130
その後 そのワークスペースに
Playgroundを追加すればいいのです

389
00:30:31,598 --> 00:30:35,502
プロジェクトナビゲータは
このように見えます

390
00:30:36,837 --> 00:30:43,677
以上のことを説明とおりにやっても
うまくいかなかったとしましょう

391
00:30:43,777 --> 00:30:46,013
“だまされた”と感じますよね

392
00:30:48,482 --> 00:30:54,588
その場合はディレクトリにきちんと
入ったかを確認することになります

393
00:30:56,223 --> 00:30:57,825
その確認方法です

394
00:30:59,026 --> 00:31:02,763
“File”から
“Project Settings”に入り―

395
00:30:59,026 --> 00:31:02,763
“File”から
“Project Settings”に入り―

396
00:31:05,199 --> 00:31:07,701
“Advanced”ボタンを押します

397
00:31:09,736 --> 00:31:17,311
このスクリーンの中には薄い灰色で
プロダクトの宛先が示されています

398
00:31:17,411 --> 00:31:19,346
クリックすれば直接―

399
00:31:19,446 --> 00:31:24,384
今 開いているプロジェクトの
ディレクトリに入れます

400
00:31:27,054 --> 00:31:29,289
Finderではこう見えます

401
00:31:30,657 --> 00:31:34,194
以上のことを
デモでお見せしましょう

402
00:31:35,562 --> 00:31:41,702
(拍手)

403
00:31:43,370 --> 00:31:46,039
私を知っている方は―

404
00:31:46,340 --> 00:31:50,644
私が音楽が好きだということも
ご存知でしょう

405
00:31:51,545 --> 00:31:53,714
無類の音楽好きです

406
00:31:53,814 --> 00:31:59,820
最近“ヘルムホルツ表記法”という
音階の表し方を知りました

407
00:31:59,920 --> 00:32:04,158
そしてこの知識を
広めたいと思いました

408
00:31:59,920 --> 00:32:04,158
そしてこの知識を
広めたいと思いました

409
00:32:05,359 --> 00:32:09,997
そこで私は
フレームワークを作ったのです

410
00:32:10,364 --> 00:32:14,768
ご覧のとおり
Playgroundを加えました

411
00:32:14,868 --> 00:32:19,740
Wikipediaで調べたことを
基にしながら

412
00:32:19,840 --> 00:32:24,078
この表記法についての
説明を書きました

413
00:32:24,178 --> 00:32:27,347
その下には値を書いたので

414
00:32:27,448 --> 00:32:32,853
右側のサイドバーに
音高表記も現れるはずです

415
00:32:35,222 --> 00:32:37,291
レンダリングしてみます

416
00:32:38,192 --> 00:32:44,865
チベットから説明があったように
リンクが青くなっていますね

417
00:32:48,268 --> 00:32:52,172
走らせる前にきちんとビルドします

418
00:32:55,676 --> 00:32:59,146
ここでPlaygroundを実行します

419
00:32:59,413 --> 00:33:00,681
出ました

420
00:32:59,413 --> 00:33:00,681
出ました

421
00:33:00,848 --> 00:33:05,519
(拍手)

422
00:33:05,619 --> 00:33:10,290
サイドバーに
面白い音高表記が出ていますね

423
00:33:10,390 --> 00:33:14,661
この表記は
非常に興味深いものなのです

424
00:33:14,761 --> 00:33:21,001
低音は大文字で表され
高音は小文字で表されています

425
00:33:21,101 --> 00:33:27,040
オクターブはコンマか
アポストロフィで表されます

426
00:33:27,207 --> 00:33:32,146
この説明で興味を持って
いただけたらいいんですが

427
00:33:32,246 --> 00:33:34,448
どうだったでしょうか

428
00:33:34,548 --> 00:33:41,121
残念ながら私の何人かの教え子は
興味を持ってくれませんでしたので

429
00:33:41,255 --> 00:33:44,158
別のフレームワークを作りました

430
00:33:44,458 --> 00:33:50,364
興味を引くことができるよう
鍵盤を表示させたのです

431
00:33:51,131 --> 00:33:55,903
それを使うために
別のPlaygroundを作成し

432
00:33:56,003 --> 00:34:00,407
両方のフレームワークを
インポートします

433
00:33:56,003 --> 00:34:00,407
両方のフレームワークを
インポートします

434
00:34:01,008 --> 00:34:05,078
というわけで
こちらは閉じましょう

435
00:34:07,214 --> 00:34:13,520
新しいワークスペースを
作成することにします

436
00:34:13,620 --> 00:34:18,891
“File”から“New”を開き
“Workspace”で作成できます

437
00:34:21,161 --> 00:34:26,132
名前は“Tutoring”として
デスクトップに置きます

438
00:34:30,938 --> 00:34:36,710
そして“Add Files...”から
各フレームワークを追加します

439
00:34:38,612 --> 00:34:43,083
まずは“Helmholtz”の
フレームワークです

440
00:34:44,184 --> 00:34:48,889
今度は“Keyboard”の
フレームワークを追加します

441
00:34:52,693 --> 00:34:58,565
そして“File”から“New”に入り
新しいPlaygroundを追加します

442
00:35:02,903 --> 00:35:04,605
“Blank”で構いません

443
00:35:05,606 --> 00:35:09,376
名前は“MyPlayground”でも
問題ありません

444
00:35:11,445 --> 00:35:18,152
それでは まず“Helmholtz”と
“Keyboard”をインポートします

445
00:35:22,289 --> 00:35:23,090
いいですね

446
00:35:23,991 --> 00:35:29,096
次に きちんと音高表記が
表示されるかどうか

447
00:35:29,463 --> 00:35:32,332
簡単にチェックしてみます

448
00:35:33,267 --> 00:35:36,537
各フレームワークをビルドします

449
00:35:37,004 --> 00:35:39,907
スキームから選択します

450
00:35:40,007 --> 00:35:44,878
各プロジェクトがまとまった
スキームも作りたいところですが

451
00:35:44,978 --> 00:35:47,514
今日は時間がありません

452
00:35:48,782 --> 00:35:52,352
“MyPlayground”を実行します

453
00:35:52,452 --> 00:35:57,724
挙動は問題ありませんが
ビジュアルが物足りません

454
00:35:57,824 --> 00:36:00,928
なのでピアノしか知らない
教え子のため

455
00:35:57,824 --> 00:36:00,928
なのでピアノしか知らない
教え子のため

456
00:36:01,028 --> 00:36:02,896
スニペットを用意しました

457
00:36:05,032 --> 00:36:10,971
記述の中にインラインで
ビューを作成してくれます

458
00:36:11,071 --> 00:36:14,875
１行 書くのを忘れていました

459
00:36:15,876 --> 00:36:19,680
“view.customText =
description”です

460
00:36:20,914 --> 00:36:25,385
ビューを構成したら
それを返すだけです

461
00:36:25,719 --> 00:36:29,690
元々あったフレームワークで
単純化できました

462
00:36:29,790 --> 00:36:35,195
それではこの４行目を
再実行したいと思います

463
00:36:35,295 --> 00:36:40,534
停止ボタンを押して
Playgroundをリセットします

464
00:36:44,405 --> 00:36:50,911
インラインで結果を表示してから
全体を再実行させます

465
00:36:54,047 --> 00:36:55,148
そして ついに…

466
00:36:55,249 --> 00:37:02,589
(拍手)

467
00:36:55,249 --> 00:37:02,589
(拍手)

468
00:37:02,689 --> 00:37:05,993
ついに鍵盤が現れました

469
00:37:06,093 --> 00:37:11,965
これで教え子には音高表記と併せて
鍵盤も見せることができます

470
00:37:15,536 --> 00:37:21,775
それでは今回 学んだことを
振り返ってみましょう

471
00:37:25,345 --> 00:37:26,580
チベットからは―

472
00:37:26,680 --> 00:37:32,719
レイアウトやマークアップ構文の
説明がありました

473
00:37:33,120 --> 00:37:37,758
アレックスはステップ実行について
教えてくれました

474
00:37:37,858 --> 00:37:43,063
私からはCustomPlaygroundDisplay
Convertibleをご紹介しました

475
00:37:43,864 --> 00:37:48,535
今回 お聴きいただいた
セッションの内容が

476
00:37:48,635 --> 00:37:52,773
皆さんのお役に立てば幸いです

477
00:37:53,841 --> 00:37:55,008
来年には―

478
00:37:55,108 --> 00:37:59,813
全プロジェクトがPlaygroundを
活用していることを願います

479
00:38:03,083 --> 00:38:06,954
質問があれば
いつでもラボへどうぞ

480
00:38:07,354 --> 00:38:08,355
では また

481
00:38:08,455 --> 00:38:13,260
(拍手)