
1
00:00:07,140 --> 00:00:16,717
(音楽)

2
00:00:22,756 --> 00:00:23,557
始めましょう

3
00:00:23,657 --> 00:00:27,628
(拍手)

4
00:00:28,095 --> 00:00:29,796
私 ピエールは―

5
00:00:29,930 --> 00:00:33,834
セキュリティ担当の
技術マネージャーです

6
00:00:34,201 --> 00:00:36,236
私がお話しするのは―

7
00:00:36,336 --> 00:00:40,641
macOS Mojaveの
新しいセキュリティ機能と―

8
00:00:41,074 --> 00:00:42,943
アプリケーションについて

9
00:00:44,878 --> 00:00:49,917
まずはOSに搭載した
高度なセキュリティ機能です

10
00:00:50,317 --> 00:00:56,223
Gatekeeperについても
その後 お話ししましょう

11
00:01:00,093 --> 00:01:04,096
数年前 OSの保護強化を
目的とした―

12
00:01:04,197 --> 00:01:09,803
Systemic Security
Protectionを紹介しました

13
00:01:10,137 --> 00:01:15,342
プラットフォームを
改ざんから守る機能です

14
00:01:16,577 --> 00:01:18,879
今年はプラットフォーム上で

15
00:01:19,546 --> 00:01:23,317
コード署名を
要求するようにしました

16
00:01:24,017 --> 00:01:29,356
システムはプロセス全般に
わたって

17
00:01:29,456 --> 00:01:32,359
有効なコード署名を求めます

18
00:01:32,459 --> 00:01:37,164
コード署名から逸脱した
プロセスや―

19
00:01:37,264 --> 00:01:42,269
Apple以外のコード署名の
使用は強制終了に

20
00:01:43,203 --> 00:01:47,040
さらにApple承認の
ライブラリをはじめ―

21
00:01:47,574 --> 00:01:51,578
フレームワークや
プラグインの

22
00:01:51,678 --> 00:01:55,616
動的ロードについて
監視します

23
00:01:56,817 --> 00:01:59,853
iOSに実装済みですが今回

24
00:01:59,953 --> 00:02:02,389
macOSにも搭載できました

25
00:01:59,953 --> 00:02:02,389
macOSにも搭載できました

26
00:02:03,357 --> 00:02:08,127
アプリケーションには
この機能は適用外です

27
00:02:08,428 --> 00:02:13,767
ですがApp Extensionを
備えていないOSのために

28
00:02:13,867 --> 00:02:18,472
いくつかの
拡張機能を残しました

29
00:02:18,972 --> 00:02:21,975
プラグインローダーは

30
00:02:22,075 --> 00:02:26,580
技術的にプラットフォームとして
見なします

31
00:02:26,680 --> 00:02:30,050
そのため
サードパーティによる署名や

32
00:02:30,150 --> 00:02:35,489
署名のないコードの
ロードも許可されます

33
00:02:37,257 --> 00:02:40,928
あらゆるプラグインが
組み込めるのです

34
00:02:41,028 --> 00:02:44,231
デベロッパプレビューで

35
00:02:44,331 --> 00:02:47,000
ぜひ動作確認してください

36
00:02:49,102 --> 00:02:52,072
次はUI Automationについて

37
00:02:53,307 --> 00:02:57,678
macOSはユーザの
個人情報へのアクセスを

38
00:02:57,778 --> 00:03:02,783
ユーザ自身が行う
セキュリティ設定に委ねています

39
00:02:57,778 --> 00:03:02,783
ユーザ自身が行う
セキュリティ設定に委ねています

40
00:03:03,550 --> 00:03:08,488
ユーザ側の決定は
開く／保存のダイアログや

41
00:03:08,655 --> 00:03:12,993
ドラッグ＆ドロップなどから
判断します

42
00:03:13,160 --> 00:03:18,398
またダイアログによって
ユーザの承認を得たり

43
00:03:18,532 --> 00:03:23,971
システム環境設定の変更を
依頼したりしています

44
00:03:25,339 --> 00:03:29,776
このようにUIをつかさどる
ソフトウェアと

45
00:03:29,877 --> 00:03:33,113
ユーザ設定とを
区別することは

46
00:03:33,647 --> 00:03:37,017
OSにとっては
重要なことです

47
00:03:37,918 --> 00:03:41,655
シンセティック･イベントを
発見し―

48
00:03:41,755 --> 00:03:47,361
ブロックする機能強化を
過去に行いました

49
00:03:47,895 --> 00:03:53,867
しかし決定ポイントが多すぎ
よりよいモデルが必要に

50
00:03:55,869 --> 00:03:59,740
macOS Mojaveでは
UIイベントだけが

51
00:03:59,973 --> 00:04:04,578
許可を受け
効率よく実行されます

52
00:03:59,973 --> 00:04:04,578
許可を受け
効率よく実行されます

53
00:04:05,078 --> 00:04:07,681
ユーザが決めた
UIの環境設定に―

54
00:04:08,515 --> 00:04:10,584
基づいてです

55
00:04:11,218 --> 00:04:11,985
設定は―

56
00:04:12,786 --> 00:04:17,457
“セキュリティと
プライバシー”から行います

57
00:04:17,624 --> 00:04:21,295
現在はキーリストも
並行で使用中です

58
00:04:23,797 --> 00:04:26,934
これは今後
影響のあるAPIです

59
00:04:27,334 --> 00:04:29,503
２つのカテゴリーのうち

60
00:04:29,603 --> 00:04:32,372
１つはHIDのレイヤです

61
00:04:32,472 --> 00:04:33,974
IOHIDPostEventと

62
00:04:34,074 --> 00:04:36,143
IOHIDSetMouseLocation

63
00:04:36,844 --> 00:04:39,279
２つ目はCGのレイヤです

64
00:04:39,379 --> 00:04:42,015
もしCGEventを投稿したり

65
00:04:42,115 --> 00:04:45,452
CGEventTapを作る時には―

66
00:04:45,619 --> 00:04:48,555
listenOnlyのオプションを
提供します

67
00:04:48,956 --> 00:04:51,992
効率的に“修正タブ”を
作成可能です

68
00:04:52,492 --> 00:04:55,028
これはユーザ承認が必要です

69
00:04:57,598 --> 00:05:00,667
続いては
Safariのセキュリティ強化に

70
00:04:57,598 --> 00:05:00,667
続いては
Safariのセキュリティ強化に

71
00:05:00,901 --> 00:05:03,837
フォーカスを当てましょう

72
00:05:04,705 --> 00:05:09,776
インターネットにおいて
一番重要なのがSafariです

73
00:05:10,978 --> 00:05:12,546
特別な注意が必要です

74
00:05:13,647 --> 00:05:17,651
MojaveでのSafariは
他のプラグインや

75
00:05:17,751 --> 00:05:22,322
アプリケーション同様
サンドボックス化されます

76
00:05:23,257 --> 00:05:28,195
ウェブデベロッパにとっては
ワークフローや

77
00:05:28,395 --> 00:05:32,065
リソースに大変
有益でしょう

78
00:05:33,133 --> 00:05:38,338
詳しく知りたい方は
金曜のセッションへどうぞ

79
00:05:39,406 --> 00:05:44,478
WebKitは以前から
サンドボックス化しています

80
00:05:44,578 --> 00:05:46,847
サンドボックス化は

81
00:05:46,947 --> 00:05:51,451
悪意のあるソフトウェアを
ブロックできます

82
00:05:51,585 --> 00:05:54,955
例えばWindowsサーバを
経由せずに―

83
00:05:55,055 --> 00:06:00,360
ドックにアクセスする
ウェブコンテンツがあります

84
00:05:55,055 --> 00:06:00,360
ドックにアクセスする
ウェブコンテンツがあります

85
00:06:01,662 --> 00:06:04,264
WebKitで作られていれば

86
00:06:04,598 --> 00:06:07,301
そのまま受け入れが可能です

87
00:06:07,401 --> 00:06:09,703
自動的に恩恵を受けられます

88
00:06:12,706 --> 00:06:14,174
Gatekeeperは―

89
00:06:16,176 --> 00:06:18,312
何年もいい働きぶりです

90
00:06:18,412 --> 00:06:22,449
マルウェアの攻撃の
拡散を防いでいます

91
00:06:22,783 --> 00:06:27,654
一層 良くなった３つの点を
見てみましょう

92
00:06:29,189 --> 00:06:34,361
新しいセキュリティの説明を
ケリーが行います

93
00:06:34,528 --> 00:06:39,233
個人情報のアクセスを
管理するしくみです

94
00:06:40,634 --> 00:06:45,672
それから アプリケーションの
安全性と透明性を

95
00:06:46,573 --> 00:06:49,243
高める機能もお話しします

96
00:06:50,310 --> 00:06:54,581
それから昨日
セバスチャンが話した―

97
00:06:54,681 --> 00:07:00,888
Developer IDの詳細を
ギャレットから説明します

98
00:06:54,681 --> 00:07:00,888
Developer IDの詳細を
ギャレットから説明します

99
00:07:02,756 --> 00:07:03,957
選手交代です

100
00:07:04,057 --> 00:07:04,758
ケリー

101
00:07:04,858 --> 00:07:10,931
(拍手)

102
00:07:11,031 --> 00:07:12,232
ありがとう

103
00:07:12,566 --> 00:07:16,270
OSセキュリティチームの
ケリーです

104
00:07:16,370 --> 00:07:21,141
macOS Mojaveの新保護機能を
お話しできて光栄です

105
00:07:21,575 --> 00:07:26,146
現在のmacOS
High SierraのAPIは―

106
00:07:29,516 --> 00:07:33,954
個人情報のアクセスに
承認を必要とします

107
00:07:36,657 --> 00:07:41,195
ソフトウェアが
情報を受け取れるかは

108
00:07:41,295 --> 00:07:44,598
ユーザの環境設定に
かかっています

109
00:07:46,366 --> 00:07:51,004
新しいmacOS Mojaveは
ファイルシステム経由でも

110
00:07:51,104 --> 00:07:54,975
ユーザの承認が
必要となりました

111
00:07:55,576 --> 00:07:59,313
データアクセスに
既定のAPIを使えば

112
00:08:00,714 --> 00:08:02,082
対応できるでしょう

113
00:08:02,216 --> 00:08:07,087
今まで同様 最新のmacOSの
テストをお勧めします

114
00:08:07,955 --> 00:08:12,826
アプリケーションが
ファイルシステム経由で

115
00:08:13,427 --> 00:08:17,798
データベースに
アクセスしようとすると

116
00:08:17,898 --> 00:08:21,268
OSはユーザに
許可を求めます

117
00:08:21,668 --> 00:08:25,205
秒速処理の
コンピュータの世界では

118
00:08:25,305 --> 00:08:27,841
待ち時間が生じます

119
00:08:28,075 --> 00:08:30,711
プロンプトが表示されると

120
00:08:30,811 --> 00:08:34,481
ハングアップの状態に
なります

121
00:08:36,482 --> 00:08:41,355
通常 写真ライブラリに
格納されている画像に

122
00:08:42,022 --> 00:08:46,960
ファイルシステム経由で
アクセスする例です

123
00:08:47,361 --> 00:08:53,300
このコードが写真ライブラリに
アクセスを仕掛けると

124
00:08:53,467 --> 00:08:57,337
許可を求める
トリガーとなります

125
00:08:57,571 --> 00:09:00,507
macOS High Sierraにはない
機能です

126
00:08:57,571 --> 00:09:00,507
macOS High Sierraにはない
機能です

127
00:09:02,543 --> 00:09:07,714
ホームフォルダのアクセスは
複数の許可を要します

128
00:09:08,015 --> 00:09:11,552
写真だけでなく連絡先や
カレンダーも

129
00:09:12,186 --> 00:09:17,090
ソフトウェアすべてにおいて
許可を求めます

130
00:09:17,858 --> 00:09:20,627
ユーザはシステム環境設定の

131
00:09:20,761 --> 00:09:24,164
“セキュリティと
プライバシー”ペインで―

132
00:09:24,264 --> 00:09:27,267
事前に許可が出せます

133
00:09:27,868 --> 00:09:34,274
するとプロンプトは出ずに
個人情報にアクセスできます

134
00:09:34,741 --> 00:09:37,144
MDMサーバ経由の

135
00:09:37,277 --> 00:09:40,180
教育や企業の環境下でも

136
00:09:40,314 --> 00:09:44,117
事前に許可することは
可能です

137
00:09:46,220 --> 00:09:50,791
ユーザがアクセスを
承認するにあたっては

138
00:09:50,991 --> 00:09:54,094
その目的を知ることが
重要です

139
00:09:54,428 --> 00:09:58,398
ソフトウェアを初めて
インストールすると―

140
00:09:58,866 --> 00:10:02,736
最初にこのプロンプトを
見るでしょう

141
00:09:58,866 --> 00:10:02,736
最初にこのプロンプトを
見るでしょう

142
00:10:03,036 --> 00:10:04,471
難しい判断ですね

143
00:10:05,205 --> 00:10:09,576
ですから
なぜアクセスを要求するのか

144
00:10:10,110 --> 00:10:13,413
目的を明記し
判断しやすくさせます

145
00:10:13,514 --> 00:10:16,817
拒否した結果についてもです

146
00:10:17,451 --> 00:10:22,856
アプリケーションには
Info.plistファイルによって

147
00:10:23,423 --> 00:10:26,193
承認プロンプトを表示できます

148
00:10:27,427 --> 00:10:31,398
ご存じ APIの
Info.plistキーです

149
00:10:32,266 --> 00:10:36,503
iOSのものと
ほとんど同じですね

150
00:10:37,271 --> 00:10:41,542
違いは位置情報サービスの
キーです

151
00:10:43,210 --> 00:10:46,847
これはiOSでは非推奨ですが

152
00:10:46,947 --> 00:10:50,851
macOS Mojaveでは
正式なキーです

153
00:10:52,286 --> 00:10:57,758
これらのキーは
10.14 SDKに導入されます

154
00:10:58,625 --> 00:11:04,264
これでアクセスしようとした
アプリケーションが―

155
00:10:58,625 --> 00:11:04,264
これでアクセスしようとした
アプリケーションが―

156
00:11:04,464 --> 00:11:10,003
ユーザだけでなくOSでも
判別できるようになりました

157
00:11:10,804 --> 00:11:14,107
情報に
アクセスしようとしても

158
00:11:14,208 --> 00:11:19,146
正確なキーと
目的の明記がなければ

159
00:11:20,080 --> 00:11:25,485
アプリケーションは
macOS Mojaveが終了させます

160
00:11:26,420 --> 00:11:27,554
これらのキーは

161
00:11:27,654 --> 00:11:32,392
旧バージョンのSDKでは
任意の機能でした

162
00:11:33,093 --> 00:11:37,264
10.13 SDKの場合
APIを使って―

163
00:11:37,397 --> 00:11:41,535
情報にアクセスすると
終了はせずに―

164
00:11:42,603 --> 00:11:46,874
目的の記載がない
プロンプトが出ます

165
00:11:46,974 --> 00:11:49,143
先ほど見ましたね

166
00:11:49,243 --> 00:11:53,981
たとえ旧SDKを使用した
アプリケーションでも

167
00:11:54,081 --> 00:11:56,950
Info.plistキーを
設定すると―

168
00:11:57,718 --> 00:12:01,288
ユーザに目的を伝えられます

169
00:11:57,718 --> 00:12:01,288
ユーザに目的を伝えられます

170
00:12:03,557 --> 00:12:06,593
プロンプト表示だけでなく

171
00:12:06,994 --> 00:12:10,664
macOS Mojaveは
個人情報について―

172
00:12:10,764 --> 00:12:13,567
厳しくアクセスを制限します

173
00:12:19,673 --> 00:12:22,376
ファイルシステム経由では

174
00:12:23,110 --> 00:12:26,213
OSはプロンプトを
表示しません

175
00:12:26,446 --> 00:12:31,118
“セキュリティと
プライバシー”ペインで

176
00:12:31,218 --> 00:12:34,621
事前承認を得た
アプリケーションだけが

177
00:12:34,721 --> 00:12:39,560
データにアクセスすることが
できます

178
00:12:40,661 --> 00:12:44,364
さらにMDM経由の場合でも

179
00:12:44,698 --> 00:12:46,300
事前承認が可能です

180
00:12:48,001 --> 00:12:51,905
スクリプトによる
アクセスの場合はどうでしょう

181
00:12:53,040 --> 00:12:56,810
メールやメッセージ
Safariもそうですね

182
00:12:56,910 --> 00:12:59,980
情報アクセスを
自動化できます

183
00:13:00,714 --> 00:13:05,986
メールのデータベースは
個人情報の宝庫ですね

184
00:13:06,153 --> 00:13:08,889
友達や家族
取引先のアドレス

185
00:13:08,989 --> 00:13:13,227
個人的にやり取りした
文面の内容や―

186
00:13:13,427 --> 00:13:18,232
買い物の領収書に
荷物の発送通知

187
00:13:18,532 --> 00:13:22,102
パスワードを忘れた際の
仮パスワード

188
00:13:23,103 --> 00:13:26,907
macOS Mojaveで
アクセスが必要なのは

189
00:13:27,241 --> 00:13:30,878
メールの
アプリケーションだけです

190
00:13:32,546 --> 00:13:36,316
メールが他のAppと
個人情報を共有するのは

191
00:13:36,416 --> 00:13:39,820
承認を得ている場合に
限られます

192
00:13:42,923 --> 00:13:46,860
データへのアクセスは
ユーザ自身が

193
00:13:46,960 --> 00:13:49,062
コントロールすべきです

194
00:13:49,396 --> 00:13:52,032
macOS Mojaveは承認によって

195
00:13:52,132 --> 00:13:55,002
他のアプリケーションも
管理します

196
00:13:55,569 --> 00:14:00,307
デベロッパプレビューでは
自動化されていませんが

197
00:13:55,569 --> 00:14:00,307
デベロッパプレビューでは
自動化されていませんが

198
00:14:00,407 --> 00:14:04,077
今後 試せるように
なるでしょう

199
00:14:05,212 --> 00:14:07,247
承認された場合に限り

200
00:14:08,448 --> 00:14:11,418
メールは自動化を行います

201
00:14:12,753 --> 00:14:15,022
Appleイベントも同様です

202
00:14:17,558 --> 00:14:20,727
個人情報を扱わない場合は
例外です

203
00:14:20,828 --> 00:14:27,134
例えばデフォルトのハンドラや
アプリケーションで―

204
00:14:27,234 --> 00:14:30,504
URLやドキュメントを
開く場合は

205
00:14:31,004 --> 00:14:33,040
例外となります

206
00:14:35,809 --> 00:14:41,615
iOSの機能がmacOS Mojaveに
ついに搭載されました

207
00:14:42,115 --> 00:14:44,585
カメラやマイクの承認です

208
00:14:46,386 --> 00:14:48,088
これは驚きました

209
00:14:51,358 --> 00:14:53,794
アプリケーションは…

210
00:14:53,894 --> 00:14:57,197
承認なしでカメラとマイクを
列挙できますが

211
00:14:58,031 --> 00:15:02,202
キャプチャー時は
内蔵ドライバを使用する―

212
00:14:58,031 --> 00:15:02,202
キャプチャー時は
内蔵ドライバを使用する―

213
00:15:03,070 --> 00:15:06,707
すべてのデバイスで
承認が必要です

214
00:15:09,409 --> 00:15:11,845
現在は権限のステータスを

215
00:15:12,980 --> 00:15:15,849
確認されますよね

216
00:15:17,217 --> 00:15:22,789
これでユーザの決定が
反映されるようになります

217
00:15:23,357 --> 00:15:27,961
iOSと同じくこのAPIは
AVFoundationを使用します

218
00:15:28,662 --> 00:15:33,066
単純なブーリアン型では
ないのが面白いです

219
00:15:33,500 --> 00:15:37,004
ここに値の項目を
４つ挙げて―

220
00:15:37,805 --> 00:15:41,475
さらに掘り下げます

221
00:15:41,842 --> 00:15:43,343
まず最初に

222
00:15:43,443 --> 00:15:47,114
“notDetermined”は
カメラやマイクへのアクセスに

223
00:15:47,214 --> 00:15:50,050
事前承認がないことを
意味します

224
00:15:51,151 --> 00:15:54,655
だからハードウェアに
アクセスすると―

225
00:15:55,189 --> 00:15:58,025
OSはプロンプトを表示します

226
00:16:01,361 --> 00:16:05,232
“restricted”は
承認がなく使用不可です

227
00:16:05,332 --> 00:16:09,636
ペアレンタルコントロールの
設定や

228
00:16:09,736 --> 00:16:12,506
モバイルデバイスの
管理もです

229
00:16:14,741 --> 00:16:19,146
“denied”は
プロンプトが出た時に―

230
00:16:19,246 --> 00:16:22,082
ユーザが拒否したことを
意味します

231
00:16:22,182 --> 00:16:25,586
アクセスを
許可しないわけですね

232
00:16:26,720 --> 00:16:31,692
“authorized”はユーザが
事前承認したということです

233
00:16:31,792 --> 00:16:35,762
ハードウェアへのアクセスの
同意です

234
00:16:40,534 --> 00:16:44,338
プロンプトでは
コンテキストが重要です

235
00:16:44,471 --> 00:16:46,807
だからOSは今のところ―

236
00:16:47,074 --> 00:16:51,712
適切なタイミングで
プロンプトを表示するのです

237
00:16:51,812 --> 00:16:53,547
OSは必要に応じて

238
00:16:54,581 --> 00:16:57,484
プロンプトを表示します

239
00:16:57,584 --> 00:17:01,455
ユーザがアクセスの目的を
理解するのに―

240
00:16:57,584 --> 00:17:01,455
ユーザがアクセスの目的を
理解するのに―

241
00:17:01,555 --> 00:17:04,691
正しいタイミングだと
思います

242
00:17:05,992 --> 00:17:11,397
でもそのタイミングを
管理したい方もいるでしょう

243
00:17:11,498 --> 00:17:15,769
例えばアプリケーションを
開くと―

244
00:17:15,868 --> 00:17:21,074
カメラやマイクの画面が
表示されます

245
00:17:21,340 --> 00:17:25,612
画面が開く前に
プロンプトを表示させれば

246
00:17:26,213 --> 00:17:29,416
空の画面が開くことは
ありません

247
00:17:29,883 --> 00:17:33,220
AVFoundationは
APIを提供するので

248
00:17:33,320 --> 00:17:36,423
プリフライトが可能です

249
00:17:38,091 --> 00:17:42,796
このAPIは非同期で
アプリケーションは

250
00:17:42,896 --> 00:17:45,065
ブール値によって

251
00:17:45,165 --> 00:17:51,238
アクセスの有無にかかわらず
ブロックされるのです

252
00:17:52,206 --> 00:17:56,543
ブール値が出た時点で
すぐに行われます

253
00:17:56,643 --> 00:18:01,248
なのでユーザが承認か拒否か
事前に設定すると―

254
00:17:56,643 --> 00:18:01,248
なのでユーザが承認か拒否か
事前に設定すると―

255
00:18:01,348 --> 00:18:06,520
OSはすぐに次の処理が
できるようになるのです

256
00:18:06,620 --> 00:18:09,623
ペアレンタルコントロールや

257
00:18:10,090 --> 00:18:15,229
MDMサーバについても
偽のブール値であれば

258
00:18:15,762 --> 00:18:20,134
すぐにブロックされ
利用できなくなります

259
00:18:22,703 --> 00:18:28,509
ただ そのコールバックを
遅らせることはできます

260
00:18:28,909 --> 00:18:32,846
プロンプトを表示させ
ユーザの決定でのみ―

261
00:18:32,980 --> 00:18:36,283
コールバックが返るように
するのです

262
00:18:36,717 --> 00:18:41,121
それでアクセスの可否が
分かります

263
00:18:44,691 --> 00:18:48,929
カメラにもマイクにも
目的の明示が必要です

264
00:18:49,396 --> 00:18:51,565
他の目的と同様に

265
00:18:51,665 --> 00:18:57,404
10.14 SDKとのリンクが
求められますが任意です

266
00:18:57,905 --> 00:19:02,176
これは旧SDKよりも
推奨されています

267
00:18:57,905 --> 00:19:02,176
これは旧SDKよりも
推奨されています

268
00:19:05,078 --> 00:19:08,816
さて ここまでの
トピックの要約です

269
00:19:11,452 --> 00:19:15,923
macOS Mojaveは
これらデータのアクセス承認を

270
00:19:16,023 --> 00:19:18,091
要求はしません

271
00:19:18,458 --> 00:19:20,360
アクセスできるのは

272
00:19:20,460 --> 00:19:24,464
“セキュリティと
プライバシー”のペインや

273
00:19:24,565 --> 00:19:28,368
ペアレンタルコントロールや
MDMの設定で

274
00:19:28,635 --> 00:19:30,904
承認された時のみです

275
00:19:33,607 --> 00:19:38,378
ユーザの承認が必要な
データとデバイスの一覧です

276
00:19:39,479 --> 00:19:45,052
アプリケーションが初めて
アクセスを試みると

277
00:19:45,152 --> 00:19:48,055
プロンプトを表示して

278
00:19:48,422 --> 00:19:50,390
ユーザに委ねます

279
00:19:50,490 --> 00:19:54,495
ユーザには
１つのプロンプトで

280
00:19:54,595 --> 00:19:57,731
理解できるように
してあげましょう

281
00:19:58,232 --> 00:20:02,870
開発者には動作性が
気になるでしょう

282
00:19:58,232 --> 00:20:02,870
開発者には動作性が
気になるでしょう

283
00:20:03,170 --> 00:20:07,341
承認　拒否
いずれの場合も

284
00:20:08,342 --> 00:20:13,347
アプリケーションの
動作確認ができます

285
00:20:13,781 --> 00:20:17,818
そこでtccutilという
ツールを提供します

286
00:20:18,418 --> 00:20:21,688
それでOSにプロンプトを
表示させ―

287
00:20:22,422 --> 00:20:24,992
試してみてください

288
00:20:25,492 --> 00:20:30,063
アプリケーションを開くと
OSが承認を要求し

289
00:20:30,164 --> 00:20:32,099
プロンプトを表示します

290
00:20:32,733 --> 00:20:35,435
これはデバッグビルドですが

291
00:20:35,769 --> 00:20:39,907
テスト用なので
自動化しないでください

292
00:20:42,042 --> 00:20:45,946
承認プロンプトは
文章で示すこと

293
00:20:46,046 --> 00:20:49,917
ユーザに理解させることが
重要です

294
00:20:50,951 --> 00:20:53,220
Info.plistキーは

295
00:20:53,320 --> 00:20:57,291
アクセスの目的を
ユーザに理解させ

296
00:20:57,624 --> 00:21:01,462
拒否された場合は
終了します

297
00:20:57,624 --> 00:21:01,462
拒否された場合は
終了します

298
00:21:02,529 --> 00:21:05,899
承認系のリソースに
アクセスしましょう

299
00:21:05,999 --> 00:21:09,203
承認を待つ間も
固まって見えません

300
00:21:09,636 --> 00:21:13,073
ユーザがアクセスを
拒否した場合は

301
00:21:13,173 --> 00:21:15,843
体裁よく扱いましょう

302
00:21:17,344 --> 00:21:19,947
ユーザが承認した場合のみ

303
00:21:20,214 --> 00:21:22,516
個人情報にアクセスします

304
00:21:23,851 --> 00:21:27,654
これらがmacOS Mojaveの
保護機能です

305
00:21:27,754 --> 00:21:32,993
次はピエールからランタイム
プロテクションの話を

306
00:21:33,093 --> 00:21:38,799
(拍手)

307
00:21:38,899 --> 00:21:39,800
ありがとう

308
00:21:41,502 --> 00:21:45,072
ここ数年 Macの
システム保護機能は

309
00:21:45,172 --> 00:21:48,375
高度な成長を見せました

310
00:21:48,475 --> 00:21:52,246
ランタイムプロテクションの
導入に

311
00:21:52,980 --> 00:21:55,415
質問も多くいただきました

312
00:21:56,817 --> 00:22:02,289
今日は新しいランタイム
プロテクションのお話です

313
00:21:56,817 --> 00:22:02,289
今日は新しいランタイム
プロテクションのお話です

314
00:22:03,791 --> 00:22:08,529
10.14 SDKに含まれる
オプトインメカニズムで

315
00:22:09,096 --> 00:22:13,167
アプリケーションに効果的な
セキュリティ機能です

316
00:22:13,267 --> 00:22:16,803
フルセットで使うことと

317
00:22:17,538 --> 00:22:23,577
より冒険的な動作や
アイデアが求められます

318
00:22:24,478 --> 00:22:28,582
エンタイトルメントは
無制限で設定も簡単です

319
00:22:28,682 --> 00:22:30,350
承認がなくても

320
00:22:30,450 --> 00:22:35,122
誰でもエンタイトルメントを
使用できます

321
00:22:36,190 --> 00:22:40,260
Xcode UIで
簡単に設定ができます

322
00:22:40,761 --> 00:22:43,931
さらにはアプリケーションを

323
00:22:44,031 --> 00:22:49,169
旧OSに展開する場合も
完璧に適応できます

324
00:22:49,269 --> 00:22:52,539
将来 さらに機能が
加わっても

325
00:22:52,639 --> 00:22:55,175
悪影響はないでしょう

326
00:22:56,176 --> 00:22:58,512
詳しく見ていきます

327
00:22:59,279 --> 00:23:00,914
１つ目はコード署名

328
00:22:59,279 --> 00:23:00,914
１つ目はコード署名

329
00:23:01,949 --> 00:23:05,752
新しいランタイム
プロテクションは

330
00:23:05,853 --> 00:23:09,289
アドレス空間の
実行可能なページに

331
00:23:09,389 --> 00:23:13,126
コード署名を要求します

332
00:23:16,096 --> 00:23:19,733
悪意のあるソフトウェアへの
対策です

333
00:23:19,833 --> 00:23:22,669
設定を見ていきましょう

334
00:23:24,137 --> 00:23:27,274
スクリプティングランタイムで

335
00:23:27,374 --> 00:23:29,810
高パフォーマンスが
求められる場合は

336
00:23:30,010 --> 00:23:35,215
JITでコンパイルされた
コードを使うことになるでしょう

337
00:23:35,549 --> 00:23:39,353
このリストの
１番目になりますね

338
00:23:39,586 --> 00:23:44,057
MMAPによって作られた
JIT領域と呼ばれる―

339
00:23:44,157 --> 00:23:46,293
MAP JITフラグに
アクセスします

340
00:23:46,393 --> 00:23:50,497
読み込みや書き込みができる
メモリ領域です

341
00:23:52,299 --> 00:23:55,035
さらに自動警戒システムが

342
00:23:55,135 --> 00:24:00,073
適正な署名のない
プラグインを見つけます

343
00:23:55,135 --> 00:24:00,073
適正な署名のない
プラグインを見つけます

344
00:24:00,174 --> 00:24:02,342
するとこの２番目の―

345
00:24:03,143 --> 00:24:05,979
エンタイトルメントを
実行します

346
00:24:06,847 --> 00:24:12,186
アプリケーションに
コードの修正が生じた場合は

347
00:24:12,286 --> 00:24:15,155
コード署名を破棄できます

348
00:24:15,522 --> 00:24:19,726
３番目の
エンタイトルメントです

349
00:24:20,227 --> 00:24:24,498
ほとんどの
アプリケーションには

350
00:24:24,598 --> 00:24:27,201
不要ですが設定しています

351
00:24:28,902 --> 00:24:31,004
次はライブラリの確認です

352
00:24:31,538 --> 00:24:33,340
新しいランタイムでは

353
00:24:33,507 --> 00:24:37,444
どのライブラリにも
コード署名を要求します

354
00:24:37,544 --> 00:24:40,981
フレームワークや
プラグインにも

355
00:24:41,615 --> 00:24:44,384
デフォルトで要求されます

356
00:24:45,352 --> 00:24:50,591
これらのモジュールは
OSの一部としてAppleから―

357
00:24:50,691 --> 00:24:55,729
署名やチームIDが
発行されています

358
00:24:56,597 --> 00:25:00,500
他のチームが署名した
オブジェクトを―

359
00:24:56,597 --> 00:25:00,500
他のチームが署名した
オブジェクトを―

360
00:25:01,335 --> 00:25:04,037
ロードしたい場合は

361
00:25:04,438 --> 00:25:07,341
このポリシーは緩和されます

362
00:25:08,108 --> 00:25:12,880
署名が求められますが
他のチームの署名も有効です

363
00:25:12,980 --> 00:25:16,450
署名がなければ
処理方法を１つ―

364
00:25:16,550 --> 00:25:19,753
エンタイトルメントから
選択します

365
00:25:21,989 --> 00:25:23,290
次はデバッグです

366
00:25:24,424 --> 00:25:27,861
新しいランタイムを
実行しても

367
00:25:28,729 --> 00:25:31,165
デバッグはできません

368
00:25:31,765 --> 00:25:35,169
アプリケーションの
デバッグには

369
00:25:35,269 --> 00:25:37,671
get-task-allowを
ご利用ください

370
00:25:38,672 --> 00:25:41,975
Xcodeに付帯しています

371
00:25:42,075 --> 00:25:47,214
Xcodeを開発ワークフローと
しているなら

372
00:25:47,381 --> 00:25:48,949
操作は不要です

373
00:25:49,249 --> 00:25:53,887
配信のための
エクスポートを行えば―

374
00:25:53,987 --> 00:25:55,556
自動的に実行されます

375
00:25:56,223 --> 00:26:00,561
Xcodeを使わない場合
実行できません

376
00:25:56,223 --> 00:26:00,561
Xcodeを使わない場合
実行できません

377
00:26:01,595 --> 00:26:06,166
デバッガなら２番目の
エンタイトルメントです

378
00:26:06,533 --> 00:26:09,570
まれなケースとして
アプリケーションを

379
00:26:09,736 --> 00:26:14,842
DYLD環境から
BFUに修正する場合は

380
00:26:15,142 --> 00:26:17,377
３番目の
エンタイトルメントです

381
00:26:19,780 --> 00:26:21,715
最後はリソースへのアクセス

382
00:26:22,082 --> 00:26:24,918
このランタイムは
アクセスする―

383
00:26:25,018 --> 00:26:28,722
データクラスの
透明性を要求します

384
00:26:28,856 --> 00:26:31,959
アプリケーションが
ケリーが説明したような

385
00:26:32,059 --> 00:26:36,597
保護されたデータに
アクセスした時は

386
00:26:37,130 --> 00:26:40,000
正しい署名がない場合には

387
00:26:40,100 --> 00:26:42,469
自動的に終了させます

388
00:26:44,371 --> 00:26:48,175
ケリーが話したポイントに
対応する―

389
00:26:48,909 --> 00:26:52,780
エンタイトルメントだけでは
実は不十分です

390
00:26:53,580 --> 00:26:57,184
10.14 SDKで
目的の記述をしてください

391
00:26:57,551 --> 00:27:01,188
情報へのアクセスは
自動で行われず―

392
00:26:57,551 --> 00:27:01,188
情報へのアクセスは
自動で行われず―

393
00:27:01,288 --> 00:27:03,857
ユーザの決定に基づきます

394
00:27:06,293 --> 00:27:09,096
Xcodeの
Capabilitiesのタブから

395
00:27:09,596 --> 00:27:14,468
TARGETSを選んでください

396
00:27:15,068 --> 00:27:19,406
ランタイムのセクションに
先ほど説明した―

397
00:27:20,240 --> 00:27:24,278
エンタイトルメントが
あります

398
00:27:30,017 --> 00:27:33,687
コマンドラインインターフェイスで
調整可能です

399
00:27:33,787 --> 00:27:38,492
署名コマンドでオプションも
選択可能です

400
00:27:39,827 --> 00:27:42,329
これらを有効にするには

401
00:27:42,429 --> 00:27:45,999
“--display”を使います

402
00:27:46,099 --> 00:27:48,602
ここにランタイムフラグと

403
00:27:49,436 --> 00:27:53,640
バージョンが
表示されています

404
00:27:57,244 --> 00:27:59,580
それでは最後のピース

405
00:28:00,080 --> 00:28:01,815
認証済みアプリケーションです

406
00:28:02,182 --> 00:28:02,883
ギャレット

407
00:28:03,183 --> 00:28:07,354
(拍手)

408
00:28:07,454 --> 00:28:08,322
ありがとう

409
00:28:09,223 --> 00:28:13,460
Trusted Executionチームの
ギャレットです

410
00:28:14,962 --> 00:28:20,500
常にデータ管理について
ユーザに確認させることで

411
00:28:20,601 --> 00:28:23,971
マルウェアから個人データを
保護できます

412
00:28:24,338 --> 00:28:27,775
またマルウェアを見つけ出し

413
00:28:27,875 --> 00:28:31,178
ブロックすることでも
保護できます

414
00:28:31,278 --> 00:28:32,880
機会を与えません

415
00:28:34,515 --> 00:28:38,852
Mac App Storeの
ソフトウェアは無害で

416
00:28:39,152 --> 00:28:43,123
自信を持って
インストールできます

417
00:28:43,223 --> 00:28:45,492
ユーザには最適です

418
00:28:46,960 --> 00:28:50,330
Mac App Storeは
注目されていますが

419
00:28:50,430 --> 00:28:55,369
Developer IDには
柔軟性も必要です

420
00:28:56,270 --> 00:28:59,606
Gatekeeperと
Developer IDは

421
00:28:59,706 --> 00:29:02,009
マルウェアの拡大を防ぎます

422
00:28:59,706 --> 00:29:02,009
マルウェアの拡大を防ぎます

423
00:29:02,676 --> 00:29:06,346
ここからは
アプリケーションの認証と

424
00:29:06,447 --> 00:29:08,982
Developer IDを説明します

425
00:29:10,551 --> 00:29:12,519
認証のプロセスは

426
00:29:12,619 --> 00:29:17,424
配信前の マルウェアの
特定と排除が目的です

427
00:29:17,724 --> 00:29:21,595
一方 Developer IDの
改良は続いています

428
00:29:22,162 --> 00:29:25,465
アプリケーションの
性能を落とさずに―

429
00:29:25,566 --> 00:29:27,801
提供ができるようにです

430
00:29:28,168 --> 00:29:31,705
そのカギがDevelop ID
Notary Serviceです

431
00:29:33,841 --> 00:29:38,745
Notary Serviceは
Developer IDの内容を

432
00:29:38,846 --> 00:29:41,048
自動的にチェックします

433
00:29:41,448 --> 00:29:46,420
Developer IDのプログラムを
任意で拡張もできます

434
00:29:48,188 --> 00:29:49,389
まず初めに

435
00:29:49,490 --> 00:29:51,758
開発者はNotary Serviceに

436
00:29:51,859 --> 00:29:54,895
コンテンツを
アップロードします

437
00:29:55,162 --> 00:29:58,398
マルウェアが潜んでいないか

438
00:29:58,499 --> 00:30:01,902
Notary Serviceが確認します

439
00:29:58,499 --> 00:30:01,902
Notary Serviceが確認します

440
00:30:02,002 --> 00:30:06,440
その後認証チケットが
発行されます

441
00:30:07,007 --> 00:30:10,878
Gatekeeperが
認証済みアプリケーションを

442
00:30:10,978 --> 00:30:13,847
初めて立ち上げる時に

443
00:30:13,947 --> 00:30:17,985
認証されていることが
確認できます

444
00:30:19,586 --> 00:30:24,091
配信前の開発ワークフローは
変わりません

445
00:30:27,561 --> 00:30:31,765
一般教書では“将来
必要になるプロセス”と

446
00:30:31,865 --> 00:30:33,734
今は任意のサービスで

447
00:30:33,834 --> 00:30:38,338
フィードバックを
集めている段階です

448
00:30:40,574 --> 00:30:43,177
これはApp Reviewの

449
00:30:44,244 --> 00:30:46,046
対象外です

450
00:30:46,513 --> 00:30:49,783
コンテンツを安全に
配信するために

451
00:30:49,883 --> 00:30:52,786
セキュリティをチェックする
サービスだからです

452
00:30:54,521 --> 00:30:57,991
開発ワークフローが
どんな感じか？

453
00:30:58,425 --> 00:31:02,596
開発プロセスの概要を
まとめました

454
00:30:58,425 --> 00:31:02,596
開発プロセスの概要を
まとめました

455
00:31:03,464 --> 00:31:08,068
左が開発段階の
アプリケーションです

456
00:31:08,168 --> 00:31:12,573
開発用証明書の準備や
デバッグを済ませます

457
00:31:13,173 --> 00:31:15,676
配信の準備ができたら

458
00:31:16,343 --> 00:31:20,747
Developer ID証明書を施し
最終テストを行います

459
00:31:21,482 --> 00:31:24,785
その後
コンテンツが配信され

460
00:31:24,885 --> 00:31:28,355
Gatekeeperが
改ざんのないことを

461
00:31:28,455 --> 00:31:30,324
ユーザに証明します

462
00:31:30,824 --> 00:31:34,561
このためには
もう一段階 必要です

463
00:31:35,596 --> 00:31:38,599
開発がひとまず終わったら

464
00:31:39,133 --> 00:31:41,768
アプリケーションに署名し

465
00:31:42,135 --> 00:31:44,905
Notary Serviceに
アップします

466
00:31:45,339 --> 00:31:48,776
マルウェアの危険性が
なければ

467
00:31:49,276 --> 00:31:54,848
“stapling”のプロセスを経て
証明書が発行されます

468
00:31:55,883 --> 00:32:00,687
そしてコンテンツの配信と
いう流れです

469
00:31:55,883 --> 00:32:00,687
そしてコンテンツの配信と
いう流れです

470
00:32:01,088 --> 00:32:03,023
ユーザのシステムでは

471
00:32:03,123 --> 00:32:07,494
Gatekeeperが認証を確認し
Appを立ち上げます

472
00:32:08,662 --> 00:32:13,167
このプロセスは
高度に自動化されています

473
00:32:13,267 --> 00:32:16,470
１時間以内にチケットを
発行するためです

474
00:32:16,803 --> 00:32:21,408
今後も迅速化と品質の向上を
目指します

475
00:32:22,309 --> 00:32:25,712
セキュリティについて
もう少し話します

476
00:32:26,213 --> 00:32:30,350
まず第一にマルウェアは
排除します

477
00:32:31,218 --> 00:32:35,689
テスト段階で
マルウェアが見つかった場合

478
00:32:35,789 --> 00:32:39,259
取り消しチケットを発行して

479
00:32:39,459 --> 00:32:41,361
開発者へ通知します

480
00:32:42,463 --> 00:32:46,400
第二にアプリケーションは
署名が必要です

481
00:32:46,934 --> 00:32:51,939
アプリケーションは最終的に
ユーザのシステム上で

482
00:32:52,039 --> 00:32:54,608
Gatekeeperが
確認するからです

483
00:32:55,909 --> 00:33:01,248
そして先ほど話したとおり
拡張されたランタイムが

484
00:32:55,909 --> 00:33:01,248
そして先ほど話したとおり
拡張されたランタイムが

485
00:33:01,348 --> 00:33:04,484
OSの保護を強化します

486
00:33:04,585 --> 00:33:06,587
性能は損ないません

487
00:33:07,554 --> 00:33:12,559
認証を受けるための
アップロードの方法を説明します

488
00:33:12,793 --> 00:33:16,697
Xcodeのワークフローに
組み込まれています

489
00:33:16,797 --> 00:33:19,066
使用済みの人は
準備完了です

490
00:33:19,800 --> 00:33:22,135
これが アーカイブの
ペインです

491
00:33:22,236 --> 00:33:25,005
“Watch Grass Grow”が
あります

492
00:33:25,339 --> 00:33:27,674
右側の“Distribute App”を
押します

493
00:33:29,476 --> 00:33:31,612
ここからは選択で―

494
00:33:31,912 --> 00:33:35,649
Developer IDを使っての
配信にします

495
00:33:35,949 --> 00:33:39,753
するとNotary Serviceが
表示されます

496
00:33:40,754 --> 00:33:42,856
クリックすると―

497
00:33:42,956 --> 00:33:46,026
アップロードが始まります

498
00:33:46,193 --> 00:33:48,028
完了すると―

499
00:33:48,529 --> 00:33:51,298
すぐに認証作業が始まります

500
00:33:52,766 --> 00:33:57,337
エクスポートし 並行して
ローカルテストも可能です

501
00:33:57,771 --> 00:34:01,341
画面を閉じると
アーカイブのペインに戻り

502
00:33:57,771 --> 00:34:01,341
画面を閉じると
アーカイブのペインに戻り

503
00:34:01,442 --> 00:34:04,178
進行具合を見られます

504
00:34:05,546 --> 00:34:07,347
認証が完了すると

505
00:34:09,516 --> 00:34:14,087
認証されたことを
Xcodeが通知します

506
00:34:14,888 --> 00:34:17,558
Xcodeは
自動的にチケットを―

507
00:34:17,658 --> 00:34:22,362
ダウンロードして
コンテンツに添付します

508
00:34:22,462 --> 00:34:26,600
認証済みアプリケーションの
でき上がりです

509
00:34:27,801 --> 00:34:29,870
ユーザが使用すると

510
00:34:29,969 --> 00:34:34,141
ダイアログが
初回のみ表示されます

511
00:34:35,842 --> 00:34:39,847
Xcodeのこのワークフローは
利用可能ですが

512
00:34:39,947 --> 00:34:44,051
使っていない人も
いるでしょう

513
00:34:44,351 --> 00:34:50,424
コマンドラインツール一式も
構築済みです

514
00:34:50,858 --> 00:34:54,161
最初は認証のための
アップロードです

515
00:34:56,330 --> 00:35:01,668
ZIP インストーラパッケージ
ディスクイメージが受付可能で

516
00:34:56,330 --> 00:35:01,668
ZIP インストーラパッケージ
ディスクイメージが受付可能で

517
00:35:02,302 --> 00:35:07,041
アプリケーションは
ZIPに圧縮してください

518
00:35:07,374 --> 00:35:10,410
altoolを使うと
よいでしょう

519
00:35:10,944 --> 00:35:12,980
これはWatch Grass Growの

520
00:35:13,080 --> 00:35:16,483
イメージを送るための
コマンドラインです

521
00:35:17,151 --> 00:35:19,453
altoolは認証を求めますが

522
00:35:19,553 --> 00:35:23,257
環境変数やキーチェーンで
パスできます

523
00:35:24,091 --> 00:35:25,692
アップロード完了です

524
00:35:25,859 --> 00:35:29,263
UUIDで進行状況を
見ましょう

525
00:35:30,297 --> 00:35:34,935
進行具合をチェックする
コマンドラインを

526
00:35:35,936 --> 00:35:41,008
altoolが表示しますが
パスしてかまいません

527
00:35:42,009 --> 00:35:45,679
これで認証が
無事終わりました

528
00:35:45,779 --> 00:35:50,150
Notarization Serviceからの
ログをチェックすると

529
00:35:50,250 --> 00:35:53,053
問題の有無を確認できます

530
00:35:53,153 --> 00:35:56,957
もしくは認証チケットで

531
00:35:57,057 --> 00:36:00,661
適切に認証されたことが
確認できます

532
00:35:57,057 --> 00:36:00,661
適切に認証されたことが
確認できます

533
00:36:03,096 --> 00:36:05,332
配信の前の最終段階では

534
00:36:05,432 --> 00:36:09,303
必ず認証チケットを
添付してください

535
00:36:09,837 --> 00:36:12,206
Staplerというツールで

536
00:36:12,372 --> 00:36:18,845
チケットを アプリケーションや
ディスクイメージに添付できます

537
00:36:19,046 --> 00:36:21,749
チケットの回収と

538
00:36:21,849 --> 00:36:24,651
コンテンツへの添付は
ワンステップです

539
00:36:24,751 --> 00:36:27,988
このように
イメージにチケットを

540
00:36:28,322 --> 00:36:31,391
添付すれば配信できます

541
00:36:31,692 --> 00:36:34,828
ユーザには認証済みの
アプリケーションが

542
00:36:37,598 --> 00:36:39,399
覚えておいてください

543
00:36:39,833 --> 00:36:42,836
macOS Mojaveでは
初回のみ―

544
00:36:42,936 --> 00:36:48,408
未認証のアプリケーションは
警告ダイアログが出ます

545
00:36:48,842 --> 00:36:50,577
認証済みだと―

546
00:36:51,345 --> 00:36:55,249
アイコン付きのダイアログが
表示されます

547
00:36:56,683 --> 00:37:01,321
マルウェアが
ダウンロードされた時は

548
00:36:56,683 --> 00:37:01,321
マルウェアが
ダウンロードされた時は

549
00:37:01,889 --> 00:37:04,658
コンテンツは開始されません

550
00:37:05,759 --> 00:37:06,760
警告が出ます

551
00:37:07,427 --> 00:37:11,632
今に始まったことではなく
macOSは―

552
00:37:11,732 --> 00:37:15,235
常にこのような対処を
しています

553
00:37:16,136 --> 00:37:20,607
今回は悪意あるコンテンツを
より早く特定し

554
00:37:20,708 --> 00:37:22,776
開発者は
Developer ID証明書を

555
00:37:22,876 --> 00:37:26,246
無効にすることなく
処理できます

556
00:37:27,314 --> 00:37:32,252
認証アプリケーションと
安全構築について話しました

557
00:37:33,120 --> 00:37:34,254
どうしますか？

558
00:37:34,721 --> 00:37:37,524
Notary Serviceは
もう稼働しています

559
00:37:37,791 --> 00:37:40,794
アップデート版を待たずに―

560
00:37:41,962 --> 00:37:44,331
アップロードを始めてください

561
00:37:44,431 --> 00:37:48,302
リリース済みのものも
受け付けます

562
00:37:49,203 --> 00:37:51,371
フィードバックも光栄です

563
00:37:51,471 --> 00:37:56,143
認証について
問題があればラボへどうぞ

564
00:37:56,977 --> 00:38:02,049
署名のないコンテンツは
今後 エラーとなります

565
00:37:56,977 --> 00:38:02,049
署名のないコンテンツは
今後 エラーとなります

566
00:38:02,816 --> 00:38:05,285
macOS Mojaveは
この秋 登場します

567
00:38:05,652 --> 00:38:08,956
Gatekeeperは
そのハイライトです

568
00:38:09,056 --> 00:38:10,958
将来のOSでは―

569
00:38:11,058 --> 00:38:14,027
デフォルトで
認証が要求されます

570
00:38:15,696 --> 00:38:19,266
Gatekeeperについては
以上です

571
00:38:19,800 --> 00:38:26,073
(拍手)

572
00:38:28,242 --> 00:38:29,343
ギャレットでした

573
00:38:30,377 --> 00:38:32,913
セッションの
おさらいです

574
00:38:34,081 --> 00:38:36,216
macOS Mojaveについて

575
00:38:36,350 --> 00:38:39,019
現在 個人情報への
アクセスは―

576
00:38:39,119 --> 00:38:41,622
ユーザの判断によります

577
00:38:42,556 --> 00:38:46,293
それを受け入れる準備が
必要です

578
00:38:46,393 --> 00:38:50,430
ユーザが判断するには
時間が要りますし

579
00:38:51,064 --> 00:38:53,867
拒否される場合も
あるからです

580
00:38:54,968 --> 00:38:58,705
それからなぜアクセスが
必要なのか

581
00:38:59,106 --> 00:39:02,810
エンタイトルメントと
プロンプトで

582
00:38:59,106 --> 00:39:02,810
エンタイトルメントと
プロンプトで

583
00:39:03,444 --> 00:39:07,047
はっきりと
うたってください

584
00:39:07,681 --> 00:39:10,284
コンテキストで示すことが―

585
00:39:10,384 --> 00:39:14,922
ユーザが一番
理解しやすい方法です

586
00:39:15,489 --> 00:39:17,758
承認の確率も上がります

587
00:39:19,459 --> 00:39:22,496
高度なランタイム
プロテクションは

588
00:39:23,163 --> 00:39:26,867
安全性と透明性を高めます

589
00:39:26,967 --> 00:39:30,037
現在の性能を損なうことなく

590
00:39:30,137 --> 00:39:32,306
使用できるんです

591
00:39:34,208 --> 00:39:37,945
どうかユーザの安全を
考えてください

592
00:39:38,545 --> 00:39:42,816
認証を手に入れ
マルウェアを防ぎましょう

593
00:39:43,450 --> 00:39:46,920
Notary Serviceは
すでに稼働中です

594
00:39:48,422 --> 00:39:52,626
詳細は
デベロッパウェブサイトへ

595
00:39:53,193 --> 00:39:56,830
この後 ３～６時と
明日 ９～12時に

596
00:39:56,930 --> 00:40:00,000
ラボも開催する予定です

597
00:40:00,267 --> 00:40:04,705
木曜のラボは
署名と配信について行います

598
00:40:06,039 --> 00:40:09,409
本日はお越しいただき
感謝します

599
00:40:09,510 --> 00:40:11,678
(拍手)