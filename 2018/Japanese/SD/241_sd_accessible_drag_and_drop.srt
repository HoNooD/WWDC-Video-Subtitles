
1
00:00:07,074 --> 00:00:13,080
(音楽)

2
00:00:17,985 --> 00:00:20,754
今回はiOSで
ドラッグ＆ドロップを

3
00:00:20,854 --> 00:00:24,758
アクセシブルにする方法を
お話しします

4
00:00:24,858 --> 00:00:25,926
始めましょう

5
00:00:27,895 --> 00:00:30,330
まずアジェンダです

6
00:00:30,597 --> 00:00:34,735
ドラッグ＆ドロップの
基本を復習してから―

7
00:00:35,669 --> 00:00:40,007
アクセシブルにするための
APIの概念を説明します

8
00:00:40,574 --> 00:00:42,142
事例も紹介します

9
00:00:42,242 --> 00:00:46,180
基本的な
ドラッグ＆ドロップの例と

10
00:00:46,346 --> 00:00:49,650
ドロップが複数回の場合を
見てみます

11
00:00:50,918 --> 00:00:52,853
ドラッグ＆ドロップは

12
00:00:52,953 --> 00:00:56,156
iOS 11から
追加された機能です

13
00:00:56,256 --> 00:00:59,493
同一アプリケーション内に
限定されず―

14
00:00:59,593 --> 00:01:03,697
手軽なデータ移行を
実現します

15
00:00:59,593 --> 00:01:03,697
手軽なデータ移行を
実現します

16
00:01:04,598 --> 00:01:07,568
ドラッグ＆ドロップの
インタラクションは

17
00:01:07,668 --> 00:01:10,204
アプリケーションの
ビューがホストします

18
00:01:10,571 --> 00:01:15,042
ドラッグを開始するには
UIDragInteractionを

19
00:01:15,809 --> 00:01:19,112
ドロップするにはUIDrop
Interactionを使います

20
00:01:19,546 --> 00:01:21,315
聞きなじみのない方は―

21
00:01:21,415 --> 00:01:26,954
過去のセッション WWDC 2017の
“Introducing Drag and Drop”を

22
00:01:27,054 --> 00:01:28,655
先にご覧ください

23
00:01:30,924 --> 00:01:33,026
アクセシビリティについて
お話しします

24
00:01:33,126 --> 00:01:36,797
やはり
支援技術のユーザにも

25
00:01:36,897 --> 00:01:40,467
ドラッグ＆ドロップを
体験してほしいものです

26
00:01:41,702 --> 00:01:46,807
そのためには いくつか
解決すべき問題があります

27
00:01:47,274 --> 00:01:51,545
アクセシビリティ要素は
インタラクションをホストしません

28
00:01:51,645 --> 00:01:57,050
例えば サブビューが
ホストする場合があります

29
00:01:57,451 --> 00:01:59,686
また それら要素が
インタラクションを―

30
00:01:59,786 --> 00:02:02,990
ホストするビューから
下った場合です

31
00:01:59,786 --> 00:02:02,990
ホストするビューから
下った場合です

32
00:02:03,790 --> 00:02:06,860
アクセシビリティ用の
ドラッグ＆ドロップAPIの出番です

33
00:02:06,960 --> 00:02:10,764
ロジカルな
ドラッグ＆ドロップが

34
00:02:10,864 --> 00:02:14,001
支援技術で
使用可能になります

35
00:02:14,401 --> 00:02:16,170
APIを見てみましょう

36
00:02:17,604 --> 00:02:19,573
非正規プロトコルで

37
00:02:19,673 --> 00:02:23,544
２つのプロパティを
定義しています

38
00:02:23,777 --> 00:02:27,781
Drag Sourcesと
Drop Pointsです

39
00:02:28,482 --> 00:02:32,819
Drag Sourcesは
ドラッグの開始位置を

40
00:02:32,920 --> 00:02:37,524
Drop Pointsは
ドロップ位置を指します

41
00:02:37,891 --> 00:02:42,462
プロパティにデータを
提供すればいいのです

42
00:02:44,064 --> 00:02:47,267
アクセシビリティ向けの
カスタム動作と

43
00:02:47,367 --> 00:02:50,704
同じ操作を
ユーザは体験できます

44
00:02:51,171 --> 00:02:52,539
APIのコードです

45
00:02:55,809 --> 00:03:00,447
多くのドラッグ＆ドロップは
自動で検出され―

46
00:02:55,809 --> 00:03:00,447
多くのドラッグ＆ドロップは
自動で検出され―

47
00:03:01,648 --> 00:03:05,452
その際には
デフォルト名が付与されます

48
00:03:05,853 --> 00:03:09,089
でも それは
要素のサブツリー内の

49
00:03:09,189 --> 00:03:10,991
インタラクションに限ります

50
00:03:12,025 --> 00:03:13,827
UIAccessibilityDragging
プロトコルで―

51
00:03:13,927 --> 00:03:17,497
ビュー階層に関わらず
必要なインタラクションを

52
00:03:17,598 --> 00:03:20,334
すべて拾うことができます

53
00:03:20,901 --> 00:03:23,837
名前も自由に付けられます

54
00:03:24,705 --> 00:03:27,040
支援技術ユーザのために

55
00:03:27,140 --> 00:03:31,812
このプロトコルの導入を
ぜひ検討すべきです

56
00:03:33,714 --> 00:03:36,550
この非正規プロトコルを使い

57
00:03:36,650 --> 00:03:39,686
ドラッグを
実行してみましょう

58
00:03:41,054 --> 00:03:42,990
棒グラフを作ります

59
00:03:43,090 --> 00:03:47,661
CALayerオブジェクトを
設定し グラフを描きました

60
00:03:48,495 --> 00:03:53,834
棒のドラッグに合わせ
データも動くようにします

61
00:03:55,769 --> 00:03:57,471
こんなグラフです

62
00:03:57,571 --> 00:04:00,974
棒はどれも
CALayerオブジェクトです

63
00:03:57,571 --> 00:04:00,974
棒はどれも
CALayerオブジェクトです

64
00:04:02,276 --> 00:04:05,612
いかにドラッグを
実装できるのでしょうか？

65
00:04:07,347 --> 00:04:08,982
コードの一例です

66
00:04:10,317 --> 00:04:13,987
レイヤはインタラクションを
管理できません

67
00:04:14,087 --> 00:04:17,491
だから グラフそのものに
実装させています

68
00:04:17,591 --> 00:04:20,560
そしてこの
コールバックの中では―

69
00:04:21,827 --> 00:04:24,398
タッチされたグラフごとに

70
00:04:24,731 --> 00:04:28,368
異なるデータを戻しています

71
00:04:29,069 --> 00:04:31,572
１つの
ドラッグインタラクションで

72
00:04:31,672 --> 00:04:34,942
複数の論理ドラッグに
対応します

73
00:04:35,108 --> 00:04:39,213
ベースの
ドラッグ＆ドロップAPIが

74
00:04:39,313 --> 00:04:41,448
いかに強力か分かります

75
00:04:43,250 --> 00:04:45,252
ここからが本題です

76
00:04:45,886 --> 00:04:48,555
グラフを
アクセシブルにするには

77
00:04:49,156 --> 00:04:53,260
アクセシビリティ要素に
各棒を指定します

78
00:04:53,760 --> 00:04:54,928
このような感じです

79
00:04:55,596 --> 00:04:58,365
コンテンツに関するデータを

80
00:04:58,465 --> 00:05:02,703
アクセシビリティの
ランタイムに送っています

81
00:04:58,465 --> 00:05:02,703
アクセシビリティの
ランタイムに送っています

82
00:05:02,870 --> 00:05:07,074
これで支援技術の体験が
変わるのです

83
00:05:07,674 --> 00:05:10,544
ドラッグに関しても
同様に行います

84
00:05:10,644 --> 00:05:13,046
UIAccessibilityDragging
について

85
00:05:13,146 --> 00:05:16,016
もう少し学びましょう

86
00:05:18,018 --> 00:05:21,688
UIAccessibilityLocation
Descriptorとは？

87
00:05:23,557 --> 00:05:29,329
インタラクションの位置を
表すデータで―

88
00:05:30,430 --> 00:05:34,168
点をビューの中で
名付けて特定します

89
00:05:34,768 --> 00:05:37,871
先ほどの棒グラフで言えば

90
00:05:38,605 --> 00:05:43,510
位置ディスクリプタは
ご覧のようになるでしょう

91
00:05:43,610 --> 00:05:45,846
名前は
“Drag Bar Data”とされ

92
00:05:46,079 --> 00:05:48,382
ビューは
棒グラフそのものとなります

93
00:05:48,482 --> 00:05:51,251
点は棒の中の１点を指します

94
00:05:54,154 --> 00:05:57,157
このデータをどう処理するか
見てみましょう

95
00:05:57,958 --> 00:06:00,961
２つのプロパティに
アサインします

96
00:05:57,958 --> 00:06:00,961
２つのプロパティに
アサインします

97
00:06:02,296 --> 00:06:05,399
accessibility
DragSourceDescriptorsと

98
00:06:05,499 --> 00:06:08,001
accessibility
DropPointDescriptorsです

99
00:06:09,469 --> 00:06:15,042
要素と関連づけられた
ドラッグの起点と

100
00:06:15,142 --> 00:06:20,714
要素と関連づけられた
ドロップ点を示します

101
00:06:21,181 --> 00:06:23,817
この２つを指定することで

102
00:06:23,917 --> 00:06:27,621
ドラッグ＆ドロップの対象を
伝えます

103
00:06:28,956 --> 00:06:34,595
ただし ディスクリプタの
参照先には注意が必要です

104
00:06:34,695 --> 00:06:40,367
実際にインタラクションを
含んでいるビューそのものを

105
00:06:40,467 --> 00:06:42,436
必ず指定します

106
00:06:45,005 --> 00:06:49,810
ドラッグ１つなら
必要なコードはこれだけです

107
00:06:49,977 --> 00:06:52,045
ビューの中の１点を
指定し―

108
00:06:52,145 --> 00:06:56,016
ドラッグのディスクリプタを
まずは定義します

109
00:06:56,283 --> 00:07:00,087
そしてこのように
ディスクリプタを含む配列に

110
00:06:56,283 --> 00:07:00,087
そしてこのように
ディスクリプタを含む配列に

111
00:07:00,187 --> 00:07:02,256
プロパティを指定します

112
00:07:04,525 --> 00:07:08,629
棒グラフのコードに
戻りましょう

113
00:07:08,829 --> 00:07:11,565
各要素を
ドラッグさせる方法は？

114
00:07:14,268 --> 00:07:19,540
ビューの座標空間内で
要素が表す１点を算出し

115
00:07:19,973 --> 00:07:22,976
適切なディスクリプタを
作成します

116
00:07:23,076 --> 00:07:27,481
最後に要素のプロパティを
指定します

117
00:07:30,384 --> 00:07:32,352
別の例を見てみましょう

118
00:07:32,619 --> 00:07:35,722
要素は１つで
ドロップが複数の例です

119
00:07:36,590 --> 00:07:39,960
連絡先カードなどが
考えられます

120
00:07:40,227 --> 00:07:41,995
カードが小さいので―

121
00:07:43,063 --> 00:07:47,701
１つの要素として
認識させます

122
00:07:47,801 --> 00:07:53,073
しかしカードには
複数の受け皿があります

123
00:07:54,441 --> 00:07:56,743
このように 顔写真と

124
00:07:56,844 --> 00:08:01,014
任意のファイルを
ドロップできるスぺースです

125
00:07:56,844 --> 00:08:01,014
任意のファイルを
ドロップできるスぺースです

126
00:08:02,883 --> 00:08:07,955
以上 UIAccessibilityDragging
非正規プロトコルの使用法です

127
00:08:10,290 --> 00:08:14,394
ビューのゲッターは
オーバーライド可能です

128
00:08:15,996 --> 00:08:18,465
受け皿の中間点を算出し―

129
00:08:18,932 --> 00:08:22,436
位置ディスクリプタを
２つ戻すのです

130
00:08:24,538 --> 00:08:25,439
要約します

131
00:08:25,539 --> 00:08:31,378
アクセシビリティ要素に
関連づけられた処理を―

132
00:08:32,379 --> 00:08:38,385
確実に支援技術に
認識させることが大切です

133
00:08:38,852 --> 00:08:42,256
accessibilityDragSource
Descriptorsのプロパティで

134
00:08:42,356 --> 00:08:45,192
ドラッグ処理を認識させます

135
00:08:45,292 --> 00:08:47,961
accessibilityDropPoint
Descriptorsのプロパティで

136
00:08:48,061 --> 00:08:50,364
ドロップ処理を認識させます

137
00:08:50,464 --> 00:08:51,598
２つのプロパティは

138
00:08:51,698 --> 00:08:55,135
UIAccessibilityLocation
Descriptorのオブジェクトです

139
00:08:55,235 --> 00:08:56,970
アプリケーション内の

140
00:08:57,070 --> 00:09:01,375
ドラッグ＆ドロップ処理の
位置と起動方法を示します

141
00:08:57,070 --> 00:09:01,375
ドラッグ＆ドロップ処理の
位置と起動方法を示します

142
00:09:02,876 --> 00:09:05,279
詳細はウェブをご覧ください

143
00:09:06,146 --> 00:09:07,114
ありがとうございました