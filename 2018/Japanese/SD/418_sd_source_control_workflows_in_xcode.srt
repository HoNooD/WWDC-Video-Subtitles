
1
00:00:07,040 --> 00:00:16,416
(音楽)

2
00:00:17,818 --> 00:00:21,588
Xcodeチーム
エンジニアのエリックです

3
00:00:21,688 --> 00:00:25,492
ソースコントロールの
ワークフローをご説明します

4
00:00:25,859 --> 00:00:30,497
アプリケーションの開発には
コードの変更が必要です

5
00:00:30,597 --> 00:00:34,501
Xcodeでは そのための
ツールを提供します

6
00:00:36,003 --> 00:00:38,505
いくつかをご紹介しましょう

7
00:00:38,705 --> 00:00:43,677
最初にプロジェクトの作成法を
ご説明します

8
00:00:45,579 --> 00:00:49,917
次に変更の加え方や
その確認方法を見ます

9
00:00:51,852 --> 00:00:55,622
また変更の同期を含む
チームとのリポジトリの―

10
00:00:55,722 --> 00:00:57,824
シェアの仕方もお教えします

11
00:00:59,226 --> 00:01:02,863
衝突の解決方法と
回避方法もご説明します

12
00:00:59,226 --> 00:01:02,863
衝突の解決方法と
回避方法もご説明します

13
00:01:03,430 --> 00:01:07,267
最後に
プルリクエストとフォークです

14
00:01:09,102 --> 00:01:12,773
では プロジェクトを
作成しましょう

15
00:01:12,873 --> 00:01:17,477
ソースコントロールシステムの
Gitを使います

16
00:01:19,413 --> 00:01:23,450
最初に名前とEメールを
設定します

17
00:01:23,550 --> 00:01:25,485
これで個人を識別し―

18
00:01:25,586 --> 00:01:30,490
チーム内で誰が何の変更を
加えたか分かります

19
00:01:30,824 --> 00:01:34,561
これは設定画面で
簡単に行えます

20
00:01:34,928 --> 00:01:38,065
Gitのオプションの下です

21
00:01:41,101 --> 00:01:43,470
プロジェクトを
作成したら―

22
00:01:43,570 --> 00:01:46,440
リポジトリを作成します

23
00:01:47,875 --> 00:01:52,045
保存時にボックスに
チェックを入れると―

24
00:01:52,145 --> 00:01:54,882
自動的に作成されます

25
00:01:55,349 --> 00:01:59,253
では それで何をするのか
見てみましょう

26
00:02:00,287 --> 00:02:03,357
典型的な
Xcodeプロジェクトは―

27
00:02:03,457 --> 00:02:06,126
フォルダで表示されます

28
00:02:06,460 --> 00:02:09,729
これにソースファイルなどが
入ります

29
00:02:10,396 --> 00:02:13,967
リポジトリ作成を
チェックしていれば―

30
00:02:14,401 --> 00:02:16,737
そのフォルダも表示されます

31
00:02:17,137 --> 00:02:21,875
プロジェクトのためのリポジトリで
普段は隠れています

32
00:02:23,177 --> 00:02:25,913
プロジェクトフォルダに
それを入れ―

33
00:02:26,113 --> 00:02:28,315
ワーキングコピーとします

34
00:02:30,484 --> 00:02:33,987
Xcodeで作成された
新しいリポジトリでは―

35
00:02:34,087 --> 00:02:39,726
プロジェクト全体のコピーが
ある時点でスナップショット化され

36
00:02:40,127 --> 00:02:42,930
これがコミットと呼ばれます

37
00:02:47,835 --> 00:02:50,838
それぞれに識別名が付きます

38
00:02:51,705 --> 00:02:54,775
ソースコードの
変更をすることで―

39
00:02:54,875 --> 00:02:58,245
さらにコミットを
作ることになります

40
00:02:58,345 --> 00:03:01,915
変更でスナップショットが
撮られるのです

41
00:02:58,345 --> 00:03:01,915
変更でスナップショットが
撮られるのです

42
00:03:04,785 --> 00:03:08,121
スナップショットが
履歴になります

43
00:03:08,722 --> 00:03:12,159
増えるにつれ
時系列に並びます

44
00:03:14,061 --> 00:03:18,098
これがリポジトリを
構成しています

45
00:03:19,766 --> 00:03:22,803
概念的な説明は
ここまでにして―

46
00:03:22,903 --> 00:03:27,708
実際に変更を加え
追跡して見ていきましょう

47
00:03:29,009 --> 00:03:33,413
ソースコントロール
チェンジバーを使います

48
00:03:33,514 --> 00:03:37,451
変更したコード行は
ハイライトされます

49
00:03:38,752 --> 00:03:43,790
それによって 後からでも
変更部分が簡単に分かります

50
00:03:44,091 --> 00:03:49,062
変更されるたびにバーが
変更行をハイライトします

51
00:03:51,698 --> 00:03:55,469
バーを使い
変更箇所を行き来できます

52
00:03:55,569 --> 00:04:00,073
つまりナビゲートメニューから
移動できるのです

53
00:03:55,569 --> 00:04:00,073
つまりナビゲートメニューから
移動できるのです

54
00:04:01,675 --> 00:04:05,979
チェンジバーの他に
ステータスフラグで―

55
00:04:06,079 --> 00:04:09,383
どのファイルを変更したか
分かります

56
00:04:11,985 --> 00:04:15,856
変更を加えた後は
コミットについてです

57
00:04:16,023 --> 00:04:20,994
スナップショットの集まりで
後で参照できます

58
00:04:21,094 --> 00:04:25,098
Xcodeでコミットを
作成してみましょう

59
00:04:27,034 --> 00:04:31,271
先ほど変更箇所を
簡単に見ることができました

60
00:04:31,371 --> 00:04:35,175
今度は変更を
リポジトリに保存して―

61
00:04:35,275 --> 00:04:38,212
メニューで
コミットを作成します

62
00:04:44,218 --> 00:04:48,488
コミットシートに
変更箇所がすべて表示されます

63
00:04:48,589 --> 00:04:51,825
並べて比較し
検討できるのです

64
00:04:51,925 --> 00:04:57,631
コミットにどのファイルや変更を
含めるか選択できます

65
00:04:58,632 --> 00:05:04,338
適切な変更を選択したら
変更の理由を入力します

66
00:04:58,632 --> 00:05:04,338
適切な変更を選択したら
変更の理由を入力します

67
00:05:04,538 --> 00:05:10,010
再検討しようと戻った時に
分かりやすくするためです

68
00:05:12,079 --> 00:05:16,383
コミットした後は
履歴を見る方法です

69
00:05:16,517 --> 00:05:17,818
プロジェクトが―

70
00:05:17,918 --> 00:05:22,923
どう変化したのか
理解するのに役立ちます

71
00:05:23,156 --> 00:05:27,394
コードが入れられた時期や
変更された理由を―

72
00:05:27,494 --> 00:05:29,796
見つけることができます

73
00:05:30,063 --> 00:05:32,900
履歴の確認法は
いくつかあります

74
00:05:35,068 --> 00:05:39,406
１つ目はコミットシートで
触れた比較モードです

75
00:05:39,506 --> 00:05:44,778
ファイルごとに時間に沿って
変更の履歴が見られます

76
00:05:45,612 --> 00:05:50,284
アクセスはツールバーから
バージョンエディタです

77
00:05:52,986 --> 00:05:58,425
セレクタをクリック･ホールドし
特定のモードに移動します

78
00:06:01,562 --> 00:06:05,933
ソースコードを変更した
ファイルを並べ―

79
00:06:06,033 --> 00:06:09,503
２つのバージョンを
比較しましょう

80
00:06:10,404 --> 00:06:15,042
また下部にある
ジャンプバーを使い―

81
00:06:15,142 --> 00:06:17,744
他のバージョンに
変えられます

82
00:06:19,413 --> 00:06:22,850
次はオーサービューを使います

83
00:06:23,350 --> 00:06:26,553
同じように
ツールバーから選びます

84
00:06:29,756 --> 00:06:32,292
ここでは
最新の変更を加えた―

85
00:06:32,392 --> 00:06:36,864
オーサーのコードが
グループ化されています

86
00:06:37,464 --> 00:06:41,602
オーサー メッセージ
コミットの日付も表示されます

87
00:06:42,035 --> 00:06:46,640
クリックでコミットの
詳しい情報が見られます

88
00:06:48,041 --> 00:06:52,479
最後は各変更のログを
見ることができます

89
00:06:52,746 --> 00:06:56,683
こちらもツールバーから
アクセスできます

90
00:06:59,820 --> 00:07:03,690
ログではファイルの
履歴全体を見られます

91
00:06:59,820 --> 00:07:03,690
ログではファイルの
履歴全体を見られます

92
00:07:03,790 --> 00:07:08,896
誰がなぜ変更を加えたのか
確認できるのです

93
00:07:09,897 --> 00:07:15,135
時にはファイルだけではなく
プロジェクト全体の―

94
00:07:15,235 --> 00:07:17,304
変更を確認したいでしょう

95
00:07:17,404 --> 00:07:18,071
その時は―

96
00:07:18,172 --> 00:07:23,844
ソースコントロールナビゲータを
第２のナビゲータとして選択

97
00:07:27,147 --> 00:07:30,150
ブランチとタグが
リスト化され―

98
00:07:30,250 --> 00:07:33,487
リポジトリ全体を
確認できます

99
00:07:34,388 --> 00:07:40,327
ブランチはプロジェクトを
構成する履歴の流れです

100
00:07:40,694 --> 00:07:45,833
新プロジェクト開始時の
ブランチがマスタです

101
00:07:46,533 --> 00:07:50,737
選択すると そのブランチの
履歴が表示されます

102
00:07:51,672 --> 00:07:57,211
この中で紫のタグを
付けられた履歴があります

103
00:07:57,311 --> 00:08:01,415
タグは例えば
出荷バージョンを指すなど―

104
00:07:57,311 --> 00:08:01,415
タグは例えば
出荷バージョンを指すなど―

105
00:08:01,515 --> 00:08:03,650
重要なポイントの目印です

106
00:08:04,785 --> 00:08:08,655
ブランチや履歴の確認などの
詳しい情報は―

107
00:08:09,156 --> 00:08:12,693
WWDC 2017でのセッション

108
00:08:12,826 --> 00:08:16,163
“GitHub and the New Source
Control Workflows in Xcode 9”へ

109
00:08:22,169 --> 00:08:27,875
利点を見てきたところで
さらなる活用法を見てみましょう

110
00:08:29,476 --> 00:08:35,082
今まではローカル管理の
プロジェクトを見てきました

111
00:08:35,515 --> 00:08:39,119
しかし多くの場合
サーバを使うでしょう

112
00:08:39,385 --> 00:08:42,389
機械同士での同期と同様―

113
00:08:42,489 --> 00:08:45,993
オフサイトへの
バックアップを提供します

114
00:08:46,593 --> 00:08:50,764
これがXcodeでの
共同作業の基本です

115
00:08:54,301 --> 00:08:58,572
Gitリポジトリをホストする
サーバで機能します

116
00:08:58,672 --> 00:08:59,840
この場合―

117
00:08:59,940 --> 00:09:04,845
プッシュとプルのような
標準的機能に限られます

118
00:08:59,940 --> 00:09:04,845
プッシュとプルのような
標準的機能に限られます

119
00:09:05,012 --> 00:09:07,080
アカウントはありません

120
00:09:07,247 --> 00:09:10,017
必要に応じて
認証するだけです

121
00:09:11,518 --> 00:09:14,788
多くの
ホスティングサービスに対応

122
00:09:14,888 --> 00:09:19,493
GitHubやBitbucketや
GitLab.comです

123
00:09:19,893 --> 00:09:23,197
これらのサービスには
追加機能があります

124
00:09:23,297 --> 00:09:25,766
リポジトリの検索や―

125
00:09:25,866 --> 00:09:29,803
Xcodeから直接 サーバに
リポジトリが作れます

126
00:09:30,704 --> 00:09:33,474
またクラウドバージョンに
加え―

127
00:09:33,574 --> 00:09:37,678
オンプレミスで使われる
企業バージョンも―

128
00:09:37,778 --> 00:09:40,047
Xcodeでサポートされます

129
00:09:42,349 --> 00:09:45,219
では ホスト型アカウントの
追加です

130
00:09:46,119 --> 00:09:47,988
アカウントの追加は―

131
00:09:48,088 --> 00:09:52,226
Xcodeの設定画面から
行うことができます

132
00:09:54,294 --> 00:09:55,929
サインインには―

133
00:09:56,029 --> 00:10:00,234
ユーザ名とパスワードを使用
ウェブサイトと同じです

134
00:09:56,029 --> 00:10:00,234
ユーザ名とパスワードを使用
ウェブサイトと同じです

135
00:10:00,467 --> 00:10:02,936
セルフホストに
サインインする場合―

136
00:10:03,103 --> 00:10:07,741
使いたいサーバのURLを
指定することもできます

137
00:10:09,676 --> 00:10:13,347
アカウントに
サインインしたら―

138
00:10:13,447 --> 00:10:18,385
サーバに変更を送ったり
取り入れたりできます

139
00:10:19,620 --> 00:10:22,723
しかし
それらを始める前に―

140
00:10:22,990 --> 00:10:25,792
Gitと
ホスティングサービスの―

141
00:10:25,893 --> 00:10:29,196
セキュリティ対策を
ご紹介しましょう

142
00:10:32,199 --> 00:10:36,770
Gitは２つの方法で
安全を確保します

143
00:10:36,870 --> 00:10:39,673
１つ目はHTTPSです

144
00:10:39,940 --> 00:10:42,709
ウェブサイトで よく使われます

145
00:10:43,043 --> 00:10:45,779
証明書のあるサーバを
信頼し―

146
00:10:45,879 --> 00:10:49,550
ユーザ名と
パスワードで認証します

147
00:10:50,517 --> 00:10:53,187
もう１つの方法がSSHです

148
00:10:53,287 --> 00:10:57,291
ホスティングサービスでは
通常と少し違います

149
00:10:58,091 --> 00:11:00,727
一般的にSSH接続は―

150
00:10:58,091 --> 00:11:00,727
一般的にSSH接続は―

151
00:11:00,828 --> 00:11:04,832
公開鍵と秘密鍵の使用で
安全が保たれます

152
00:11:05,265 --> 00:11:07,835
鍵はそれぞれの機械で
生成します

153
00:11:08,469 --> 00:11:12,906
公開鍵はホスティングサイトに
アップロードされます

154
00:11:13,240 --> 00:11:16,810
機械ごとに
鍵を１セット持ちます

155
00:11:16,910 --> 00:11:19,313
サービスごとに
１つ持てば―

156
00:11:19,413 --> 00:11:23,817
パスワードより簡単に
管理や無効化ができます

157
00:11:25,152 --> 00:11:29,857
XcodeでSSHのセットアップは
簡単にできます

158
00:11:30,057 --> 00:11:34,795
ローカルで鍵のペアを作らず
サインインする場合―

159
00:11:34,895 --> 00:11:37,197
Xcodeでペアが作れます

160
00:11:38,298 --> 00:11:43,237
SSHの秘密鍵は
パスフレーズで保護しましょう

161
00:11:43,804 --> 00:11:48,108
これにより安全が強化され
不正使用が防げます

162
00:11:48,208 --> 00:11:52,346
秘密鍵を誰かに
コピーされた場合も安心です

163
00:11:54,248 --> 00:11:56,850
ペアが作られるとすぐに―

164
00:11:56,950 --> 00:12:02,356
公開鍵がホスティングサイトに
アップロードされます

165
00:11:56,950 --> 00:12:02,356
公開鍵がホスティングサイトに
アップロードされます

166
00:12:03,323 --> 00:12:05,626
アップロードの
完了によって―

167
00:12:05,726 --> 00:12:09,196
HTTPSに加え
SSHプロトコルで―

168
00:12:09,296 --> 00:12:13,066
データを安全に
サーバに送れます

169
00:12:13,367 --> 00:12:18,572
これでサーバ上に
リポジトリのコピーを作れるのです

170
00:12:18,672 --> 00:12:20,474
見てみましょう

171
00:12:21,642 --> 00:12:24,878
ローカルの
リポジトリに戻り―

172
00:12:24,978 --> 00:12:27,514
新しいリモートを作ります

173
00:12:27,614 --> 00:12:32,219
そのリポジトリのサイト上の
完全なコピーです

174
00:12:32,319 --> 00:12:35,522
ソースコントロール
ナビゲータから―

175
00:12:35,622 --> 00:12:39,459
“リモートを新規作成”を
選択します

176
00:12:41,128 --> 00:12:44,298
ホスティングサイトに
よっては―

177
00:12:44,398 --> 00:12:47,668
ニーズに合わせて
公開か非公開か―

178
00:12:47,768 --> 00:12:50,437
選ぶこともできます

179
00:12:51,104 --> 00:12:55,042
他のデベロッパとの共有や
同期もできます

180
00:12:55,509 --> 00:12:59,012
チームに
加わった時などに―

181
00:12:59,112 --> 00:13:02,282
プロジェクトを
ダウンロードする場合は―

182
00:12:59,112 --> 00:13:02,282
プロジェクトを
ダウンロードする場合は―

183
00:13:02,382 --> 00:13:05,986
クローンウィンドウで
プロジェクトを探します

184
00:13:06,253 --> 00:13:10,023
ソースコントロールメニューから
行います

185
00:13:13,327 --> 00:13:18,365
すでにURLがあれば
直接 検索に入力できます

186
00:13:18,465 --> 00:13:21,635
さらに
ホスティングサービスでは―

187
00:13:21,735 --> 00:13:26,707
ウェブサイト上で 直接
プロジェクトをコピーできます

188
00:13:27,875 --> 00:13:33,280
リモートを含む
ホスティングサービスについて―

189
00:13:33,413 --> 00:13:38,919
詳しくお知りになりたい方は
WWDC 2017のセッション

190
00:13:39,052 --> 00:13:42,556
“GitHub and the New Source
Control Workflows in Xcode 9”へ

191
00:13:45,492 --> 00:13:49,429
ではローカルとリモートの
コピーができたら―

192
00:13:49,530 --> 00:13:52,432
同期するのを確認しましょう

193
00:13:52,900 --> 00:13:58,572
Gitではプルとプッシュの
操作で同期されます

194
00:14:00,374 --> 00:14:03,377
ローカルで
コミットした後―

195
00:14:03,477 --> 00:14:06,547
プッシュ操作で
アップロードします

196
00:14:06,813 --> 00:14:11,084
これはコミットシートで
直接 行うか―

197
00:14:11,185 --> 00:14:15,088
ソースコントロールメニューから
行います

198
00:14:17,891 --> 00:14:21,795
どのブランチをプッシュするか
選択したり―

199
00:14:21,895 --> 00:14:27,167
ローカルに作成したタグを
含めることもできます

200
00:14:29,436 --> 00:14:33,974
また他の人の変更を
取得する場合もあるでしょう

201
00:14:34,408 --> 00:14:38,412
これはGitで
プルと呼ばれる操作です

202
00:14:38,512 --> 00:14:41,982
同様に
ソースコントロールメニューから

203
00:14:44,151 --> 00:14:47,221
プルには
２つの方法があります

204
00:14:47,321 --> 00:14:49,923
Gitのマージを使うか―

205
00:14:50,023 --> 00:14:53,494
Xcodeの
リベース操作を使います

206
00:14:53,694 --> 00:14:57,598
働きが少し違うので
確認しましょう

207
00:14:59,500 --> 00:15:02,503
ここにコミットが
時系列に並んでいます

208
00:14:59,500 --> 00:15:02,503
ここにコミットが
時系列に並んでいます

209
00:15:02,636 --> 00:15:06,974
あなたの作業中に
他の人が変更をした場合―

210
00:15:07,074 --> 00:15:10,043
プッシュする前に
プルが必要です

211
00:15:10,377 --> 00:15:13,847
この場合
あなたの作業は緑色で―

212
00:15:13,947 --> 00:15:17,551
同僚の作業は
青色で表示されます

213
00:15:20,087 --> 00:15:25,459
これを整えるための方法に
マージとリベースがあります

214
00:15:25,926 --> 00:15:27,461
両方をご説明します

215
00:15:27,995 --> 00:15:32,166
あなたはプッシュが２つと
プルが３つ必要です

216
00:15:32,366 --> 00:15:36,203
マージでは あなたと
同僚のコミットの後に―

217
00:15:36,303 --> 00:15:41,975
分岐の対処法を示す
新しいコミットを作成します

218
00:15:42,609 --> 00:15:46,013
これで１つのブランチに
統合され―

219
00:15:46,113 --> 00:15:50,117
サーバにプッシュして
同期することができます

220
00:15:51,185 --> 00:15:55,222
リベースは新しいコミットを
作成する代わりに―

221
00:15:55,322 --> 00:16:00,694
あなたがプルした変更が
後で再現されます

222
00:15:55,322 --> 00:16:00,694
あなたがプルした変更が
後で再現されます

223
00:16:02,095 --> 00:16:05,332
この方法は
後で履歴を見た時に―

224
00:16:05,432 --> 00:16:09,169
マージコミットなどがなく
シンプルです

225
00:16:11,271 --> 00:16:14,141
プルの時
他の人と同じ場所に―

226
00:16:14,308 --> 00:16:18,479
変更を加えたと
分かることがあります

227
00:16:18,879 --> 00:16:21,682
これはGitで
衝突と呼ばれ―

228
00:16:21,849 --> 00:16:25,552
両方の変更が
共存できない状態です

229
00:16:28,455 --> 00:16:32,459
Xcodeではプルや
マージの時に解決します

230
00:16:32,960 --> 00:16:35,629
あなたの変更を
採用するか―

231
00:16:35,729 --> 00:16:39,700
他の人の変更を
採用するか選べます

232
00:16:40,000 --> 00:16:42,836
またファイルを
編集したり―

233
00:16:42,936 --> 00:16:46,807
結合できるなら
両方の変更も採用できます

234
00:16:48,775 --> 00:16:53,247
この場合 同じラインに
２人のユーザがいます

235
00:16:53,780 --> 00:16:56,583
ローカルでの変更が
最新なので―

236
00:16:56,683 --> 00:17:00,254
左の変更を採用するのが
妥当です

237
00:16:56,683 --> 00:17:00,254
左の変更を採用するのが
妥当です

238
00:17:01,421 --> 00:17:05,058
衝突が解決したら
プルを続けます

239
00:17:05,559 --> 00:17:07,361
これがマージならば―

240
00:17:07,461 --> 00:17:11,765
衝突はすぐに解決され
コミットに蓄積されます

241
00:17:12,699 --> 00:17:14,867
リベースならば―

242
00:17:14,968 --> 00:17:18,571
複数回 衝突を
解決する可能性もあります

243
00:17:18,672 --> 00:17:23,510
個々のコミットが同僚の変更に
加えて再現されるからです

244
00:17:23,777 --> 00:17:26,146
この場合の解決の情報は―

245
00:17:26,246 --> 00:17:30,551
オリジナルのコミットに
蓄積されます

246
00:17:31,418 --> 00:17:33,887
しかし衝突は面倒なので―

247
00:17:33,987 --> 00:17:39,726
最初から予測して
起きないようにしましょう

248
00:17:40,394 --> 00:17:44,698
ソースコントロールでは
同僚のプッシュを示す―

249
00:17:44,798 --> 00:17:48,202
チェンジバーを表示できます

250
00:17:50,737 --> 00:17:54,875
これで どの部分が
古いのかが分かります

251
00:17:54,975 --> 00:17:58,412
変更は10分間隔で
更新されます

252
00:18:00,247 --> 00:18:03,817
以前に
見たチェンジバーが―

253
00:18:04,084 --> 00:18:06,220
アップストリームの変更を
示しています

254
00:18:06,820 --> 00:18:11,458
同僚が変更をした部分は
赤に変わります

255
00:18:11,725 --> 00:18:16,964
これは解決する必要がある衝突を
示しています

256
00:18:17,064 --> 00:18:21,068
多くの場合 変更のあるファイルを
変更する前に―

257
00:18:21,168 --> 00:18:23,504
プルする方が簡単です

258
00:18:24,671 --> 00:18:29,610
衝突の詳細を見るには
バーをクリックします

259
00:18:32,312 --> 00:18:37,417
Xcodeでサポートする
ホスティングサービスには―

260
00:18:37,618 --> 00:18:39,853
プルリクエストと
フォークがあります

261
00:18:40,154 --> 00:18:45,159
これらはGitに基づきますが
Gitの機能ではありません

262
00:18:45,792 --> 00:18:49,129
プルリクエストは
コードのレビューです

263
00:18:49,797 --> 00:18:54,434
ブランチでの作業をする上で
重要な習慣です

264
00:18:54,535 --> 00:19:00,407
ここに履歴から離れた
独立した履歴があります

265
00:18:54,535 --> 00:19:00,407
ここに履歴から離れた
独立した履歴があります

266
00:19:01,408 --> 00:19:06,413
プルする時 ブランチでの作業は
メインから分岐します

267
00:19:06,513 --> 00:19:09,850
そのため
マージで衝突を解決し―

268
00:19:09,950 --> 00:19:11,785
統合する必要があります

269
00:19:12,252 --> 00:19:14,888
黄色で表示された
プルリクエストが―

270
00:19:15,189 --> 00:19:17,458
マージを知らせ―

271
00:19:17,724 --> 00:19:21,128
他の人からのコメントを
可能にします

272
00:19:21,295 --> 00:19:24,298
大抵の場合
マージして統合する前に―

273
00:19:24,398 --> 00:19:26,400
変更が追加されます

274
00:19:26,934 --> 00:19:32,306
プルリクエストがなされた
ブランチのチェックは―

275
00:19:32,406 --> 00:19:36,210
ソースコントロールナビゲータから
できます

276
00:19:36,677 --> 00:19:39,713
承認し
メインにマージする前に―

277
00:19:39,813 --> 00:19:43,817
ローカルでビルドし
テストすることができます

278
00:19:44,985 --> 00:19:48,589
フォークはGitの分散型の特徴を
生かしています

279
00:19:49,189 --> 00:19:53,827
サーバのコピーと
ローカルのコピーが―

280
00:19:53,927 --> 00:19:56,497
同じコピーであるように―

281
00:19:56,597 --> 00:20:00,968
同じサーバに
複数のコピーを作成できます

282
00:19:56,597 --> 00:20:00,968
同じサーバに
複数のコピーを作成できます

283
00:20:02,236 --> 00:20:07,174
これは厳重に管理されたコピーが
ある時に有用です

284
00:20:07,274 --> 00:20:10,577
オープンソースプロジェクトの
時などです

285
00:20:11,044 --> 00:20:16,383
フォークはメインに影響を与えず
試験的な変更ができます

286
00:20:16,783 --> 00:20:20,621
作業者が多い時は
ブランチより便利です

287
00:20:20,721 --> 00:20:23,657
フォークごとに
ブランチがあるので―

288
00:20:23,757 --> 00:20:27,361
メインリポジトリへの影響を
最小限にします

289
00:20:27,794 --> 00:20:31,698
フォークはメインコピーと
同期されます

290
00:20:31,798 --> 00:20:36,503
これはプルリクエストの場所で
PRS形式で行われます

291
00:20:36,837 --> 00:20:39,907
XcodeとGitでは
ローカルリポジトリに―

292
00:20:40,007 --> 00:20:42,309
多数のリモートを置けます

293
00:20:42,409 --> 00:20:44,311
同じローカルコピーから―

294
00:20:44,411 --> 00:20:47,848
メインとフォークの両方に
同期できます

295
00:20:49,983 --> 00:20:54,188
ソースコントロールとGitの
基本をご紹介しました

296
00:20:54,755 --> 00:20:57,958
ローカルでの
Gitの使い方を見て―

297
00:20:58,258 --> 00:21:01,862
変更の作成方法と調べ方を
見ていきました

298
00:20:58,258 --> 00:21:01,862
変更の作成方法と調べ方を
見ていきました

299
00:21:02,262 --> 00:21:07,301
またチーム作業での
変更の同期をご説明しました

300
00:21:07,401 --> 00:21:12,105
この同期の時の
衝突の対処法もありました

301
00:21:12,239 --> 00:21:18,145
最後はプルリクエストとフォークに
軽く触れました

302
00:21:19,646 --> 00:21:23,650
developer.apple.comに
詳しい情報がございます

303
00:21:24,818 --> 00:21:25,886
ありがとう