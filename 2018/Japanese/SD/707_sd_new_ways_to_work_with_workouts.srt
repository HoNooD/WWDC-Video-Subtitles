
1
00:00:07,107 --> 00:00:16,315
(音楽)

2
00:00:19,419 --> 00:00:24,825
(拍手)

3
00:00:24,925 --> 00:00:29,229
皆さん
ご来場ありがとうございます

4
00:00:29,329 --> 00:00:33,200
フィットネスチームの
ニハリカです

5
00:00:33,300 --> 00:00:37,371
今日は ヘルスチームの
カリムと一緒に

6
00:00:37,538 --> 00:00:42,409
HealthKitの新たな特長を
ご紹介します

7
00:00:42,509 --> 00:00:46,513
iOS 12とwatchOS 5で
追加されました

8
00:00:49,183 --> 00:00:51,652
Apple Watchの発売から３年

9
00:00:51,752 --> 00:00:56,557
ヘルス機能は
発売当初から大活躍しています

10
00:00:56,657 --> 00:01:00,794
リングを完成させたり
友達と共有したり

11
00:00:56,657 --> 00:01:00,794
リングを完成させたり
友達と共有したり

12
00:01:00,894 --> 00:01:03,864
何より ユーザは
ワークアウトが大好き

13
00:01:04,164 --> 00:01:09,636
Watchは進化するエコシステムの
入り口にいます

14
00:01:09,736 --> 00:01:13,941
これも デベロッパの
皆さんのおかげです

15
00:01:14,975 --> 00:01:17,578
2017年 第４四半期

16
00:01:17,678 --> 00:01:20,147
ヘルスカテゴリの
アプリケーションは

17
00:01:20,247 --> 00:01:23,684
ダウンロード数が
２億を超えました

18
00:01:24,084 --> 00:01:31,358
この数字は驚くべきものであり
２つのことを証明しています

19
00:01:31,458 --> 00:01:35,529
１つは ユーザの
すばらしい体験のために―

20
00:01:35,629 --> 00:01:38,532
皆さんの貢献があったこと

21
00:01:38,632 --> 00:01:41,502
２つ目は人々の強い関心です

22
00:01:41,602 --> 00:01:44,605
皆さんが発表する
アプリケーションを

23
00:01:44,705 --> 00:01:47,040
ユーザは心待ちにしています

24
00:01:48,275 --> 00:01:52,813
要となるのは
２種類のアプリケーションです

25
00:01:52,913 --> 00:01:57,050
１つは 活動データを
可視化するアクティビティ

26
00:01:57,150 --> 00:02:00,954
カロリーや運動時間が
見られます

27
00:01:57,150 --> 00:02:00,954
カロリーや運動時間が
見られます

28
00:02:01,255 --> 00:02:03,524
もう１つは ヘルスケア

29
00:02:03,790 --> 00:02:09,096
そして その全ての
中心となるのがHealthKitです

30
00:02:10,097 --> 00:02:13,667
今日は たくさんの話をしますが

31
00:02:13,767 --> 00:02:18,138
まず とても重要なことを
お伝えします

32
00:02:18,238 --> 00:02:20,908
プライバシーと権限です

33
00:02:21,008 --> 00:02:23,744
ヘルスデータは
とてもデリケート

34
00:02:23,844 --> 00:02:25,812
アプリケーションの開発では

35
00:02:25,913 --> 00:02:30,150
プライバシーへの
包括的な配慮が重要です

36
00:02:30,684 --> 00:02:34,555
次に カリムが
新しいAPIの話をします

37
00:02:34,655 --> 00:02:39,059
アプリケーション開発が
さらに簡単になります

38
00:02:39,326 --> 00:02:43,363
最後に Quantity Series APIを
ご紹介します

39
00:02:43,463 --> 00:02:47,701
頻度の高いデータを扱う
新しい方法です

40
00:02:48,635 --> 00:02:49,937
では 始めましょう

41
00:02:52,439 --> 00:02:54,675
プライバシーと権限は

42
00:02:54,775 --> 00:02:58,212
開発の最初に
考慮すべきことです

43
00:02:58,312 --> 00:03:01,648
Appleの考え方はシンプル

44
00:02:58,312 --> 00:03:01,648
Appleの考え方はシンプル

45
00:03:02,082 --> 00:03:04,251
“プライバシーは
人に関すること”

46
00:03:04,818 --> 00:03:06,954
これを念頭に置いたHealthKitは

47
00:03:07,054 --> 00:03:11,024
ユーザがデータを
管理できる設計です

48
00:03:11,124 --> 00:03:15,896
いつでもデータにアクセスし
消去もできます

49
00:03:16,330 --> 00:03:19,600
このパズルの最後を担うのは
皆さんです

50
00:03:19,700 --> 00:03:22,736
プライバシー尊重を
徹底するため―

51
00:03:22,836 --> 00:03:26,139
私たちがツールを提供します

52
00:03:26,940 --> 00:03:29,610
単純なルールで考えましょう

53
00:03:29,710 --> 00:03:33,280
１つは比例的なデータ収集

54
00:03:33,380 --> 00:03:38,685
必要なデータだけを
集めるという考え方です

55
00:03:38,886 --> 00:03:43,223
決まった量でなく
最初は少しだけ集め

56
00:03:43,323 --> 00:03:48,729
用途が増えたら
集めるデータを増やしましょう

57
00:03:48,829 --> 00:03:53,467
その時点で必要なものだけを
集めることが重要です

58
00:03:54,168 --> 00:03:58,472
２つ目は 権限は変わるという
考え方です

59
00:03:58,772 --> 00:04:00,140
少し微妙な問題です

60
00:03:58,772 --> 00:04:00,140
少し微妙な問題です

61
00:04:00,240 --> 00:04:04,278
ユーザが 位置情報や
プライバシーの設定を

62
00:04:04,378 --> 00:04:06,280
初期化したとします

63
00:04:06,380 --> 00:04:12,786
必ず それを尊重することが
デベロッパとしての責任です

64
00:04:13,020 --> 00:04:21,461
権限の状態を反映するHealthKitを
真実の情報源とするのが最善策です

65
00:04:21,562 --> 00:04:24,565
決してキャッシュに残さず

66
00:04:24,665 --> 00:04:29,436
アクセス可能なデータを
常にHealthKitに尋ねましょう

67
00:04:30,103 --> 00:04:33,941
この考え方を
３つのルールにしました

68
00:04:34,508 --> 00:04:37,477
プライバシーと権限を考慮し

69
00:04:37,578 --> 00:04:42,716
必要なことだけを 必要な時に
そのつど尋ねること

70
00:04:44,218 --> 00:04:47,487
コードもシンプルです

71
00:04:47,621 --> 00:04:50,657
ワークアウトアプリケーションを
例にして

72
00:04:50,757 --> 00:04:54,094
プライバシーと権限の処理を
行ってみます

73
00:04:54,228 --> 00:05:00,501
まずワークアウトのタイプを
共有するということを

74
00:04:54,228 --> 00:05:00,501
まずワークアウトのタイプを
共有するということを

75
00:05:00,601 --> 00:05:02,402
明確に宣言します

76
00:05:02,870 --> 00:05:07,307
最初なので
追跡したい情報は少数です

77
00:05:07,407 --> 00:05:12,713
ユーザの心拍数とカロリー
歩行や走行の距離

78
00:05:12,813 --> 00:05:16,517
要求したい情報は
これだけです

79
00:05:17,951 --> 00:05:21,688
最後にhealthStoreに
権限を要求し

80
00:05:21,788 --> 00:05:24,558
共有したいタイプを求めます

81
00:05:24,825 --> 00:05:27,628
この３ステップを行えば

82
00:05:27,728 --> 00:05:31,732
ユーザのプライバシーを
尊重できます

83
00:05:33,734 --> 00:05:37,304
優れたアプリケーションを
作るには

84
00:05:37,404 --> 00:05:42,409
必ず 最初の段階で
プライバシーを考慮しましょう

85
00:05:42,643 --> 00:05:44,945
ここまで話したところで

86
00:05:45,045 --> 00:05:50,484
カリムが 新しいAPIについて
ご紹介します

87
00:05:51,051 --> 00:05:56,023
(拍手)

88
00:05:56,890 --> 00:05:58,358
皆さん こんにちは

89
00:05:58,458 --> 00:06:01,094
来てくれてありがとう

90
00:05:58,458 --> 00:06:01,094
来てくれてありがとう

91
00:06:01,195 --> 00:06:05,666
新しいワークアウトAPIの
ご紹介です

92
00:06:06,433 --> 00:06:10,938
HealthKitが初めての人は
アプリケーションが

93
00:06:11,038 --> 00:06:14,808
簡単に作れることを
知るでしょう

94
00:06:15,275 --> 00:06:18,779
すでにアプリケーションを
作っている人なら

95
00:06:18,979 --> 00:06:24,585
APIの優れた新機能を
すぐに役立てられるはず

96
00:06:25,152 --> 00:06:26,820
では 始めます

97
00:06:27,387 --> 00:06:30,257
まず
ワークアウトアプリケーションの

98
00:06:30,357 --> 00:06:33,794
ライフサイクルを
考えてみましょう

99
00:06:34,127 --> 00:06:38,799
例えばユーザのアクティビティを
追跡するアプリケーションなら

100
00:06:39,199 --> 00:06:43,804
最初のステップは
アプリケーションの設定です

101
00:06:44,171 --> 00:06:46,874
この段階で分かっているのは

102
00:06:46,974 --> 00:06:50,844
ユーザは
ワークアウトがしたいということ

103
00:06:50,944 --> 00:06:54,815
UIはそれに
備える必要があります

104
00:06:55,883 --> 00:07:00,787
設定が済んだら
ワークアウトを始められます

105
00:06:55,883 --> 00:07:00,787
設定が済んだら
ワークアウトを始められます

106
00:07:01,688 --> 00:07:06,360
ここから ユーザは活発に運動し

107
00:07:07,194 --> 00:07:12,933
一定時間が経過したあと
ワークアウトを終えます

108
00:07:13,634 --> 00:07:16,036
ここでワークアウトの内容や

109
00:07:16,136 --> 00:07:19,573
関連データを
HealthKitに保存できます

110
00:07:20,807 --> 00:07:25,746
これがアプリケーションの
一般的なライフサイクルです

111
00:07:26,246 --> 00:07:30,517
では ワークアウト中は
どうでしょう

112
00:07:32,486 --> 00:07:38,525
この中央部分で
行いたいタスクがあります

113
00:07:38,625 --> 00:07:42,596
ワークアウトのデータを
収集して

114
00:07:42,963 --> 00:07:45,666
UIに表示することです

115
00:07:46,266 --> 00:07:51,505
また ユーザが自分で
ワークアウトの状態を管理し

116
00:07:51,605 --> 00:07:55,375
中断や再開ができるようにも
したいですね

117
00:07:57,678 --> 00:08:00,380
HealthKitに詳しい人なら

118
00:07:57,678 --> 00:08:00,380
HealthKitに詳しい人なら

119
00:08:00,681 --> 00:08:05,152
watchOSのHKWorkoutSessionを
知っているでしょう

120
00:08:06,353 --> 00:08:10,557
このライフサイクルの
いくつかの段階を

121
00:08:10,657 --> 00:08:12,960
これで操作できます

122
00:08:14,228 --> 00:08:17,664
センサーが
ワークアウト関連のデータを

123
00:08:18,065 --> 00:08:23,270
正確に収集できるよう
デバイスに備えさせます

124
00:08:23,370 --> 00:08:26,640
カロリーや心拍数などの
データです

125
00:08:27,875 --> 00:08:30,844
ワークアウト中に
バックグラウンドで

126
00:08:30,944 --> 00:08:34,280
アプリケーションを
実行させることも可能です

127
00:08:36,616 --> 00:08:40,419
HKWorkoutSessionでは

128
00:08:40,520 --> 00:08:43,357
ワークアウトの状態も
管理できます

129
00:08:44,324 --> 00:08:50,230
さらに往復水泳などの
イベントも生成できます

130
00:08:51,865 --> 00:08:54,134
これでも まだ不十分ですね

131
00:08:54,234 --> 00:08:59,506
デバイスが生成した
ワークアウトの関連データを

132
00:08:59,606 --> 00:09:03,210
収集する必要があります

133
00:08:59,606 --> 00:09:03,210
収集する必要があります

134
00:09:03,710 --> 00:09:06,446
保存もしたいですよね

135
00:09:07,414 --> 00:09:10,918
そのために
これから紹介するのが

136
00:09:11,018 --> 00:09:14,521
HKWorkoutBuilderという
新しいクラスです

137
00:09:15,222 --> 00:09:18,759
データの収集と
HealthKitへの保存が

138
00:09:18,859 --> 00:09:22,095
これ１つで可能になります

139
00:09:23,330 --> 00:09:28,435
ワークアウトを表す
HKWorkoutオブジェクトを

140
00:09:28,535 --> 00:09:31,705
作成して保存します

141
00:09:33,273 --> 00:09:37,110
サンプルやイベントや

142
00:09:37,211 --> 00:09:42,082
カスタムのメタデータも
追加が可能です

143
00:09:43,584 --> 00:09:45,419
watchOSの場合は

144
00:09:45,519 --> 00:09:49,756
HKLiveWorkoutBuilderという
サブクラスを使えます

145
00:09:50,791 --> 00:09:52,593
これはwatchOSのみです

146
00:09:53,293 --> 00:09:57,097
HKWorkoutBuilderの
サブクラスですから―

147
00:09:57,197 --> 00:10:00,033
その利点を
全て備えています

148
00:09:57,197 --> 00:10:00,033
その利点を
全て備えています

149
00:10:00,701 --> 00:10:02,836
watchOS上にあり

150
00:10:02,936 --> 00:10:05,973
HKWorkoutSessionと
連携しています

151
00:10:06,240 --> 00:10:12,412
そのため サンプルやイベントの
自動収集機能などもあります

152
00:10:12,513 --> 00:10:14,148
後ほど話します

153
00:10:15,983 --> 00:10:19,253
アプリケーションの
ライフサイクルに戻り

154
00:10:20,387 --> 00:10:26,326
この新APIを用いた
設定と開始のやり方をご説明します

155
00:10:29,563 --> 00:10:33,066
まずはHKWorkoutBuilderを
作成します

156
00:10:33,800 --> 00:10:36,036
イニシャライザを使い

157
00:10:36,136 --> 00:10:39,006
healthStoreオブジェクトを
渡します

158
00:10:39,306 --> 00:10:44,344
またワークアウトのタイプや
屋内外などの情報を含んだ

159
00:10:44,444 --> 00:10:48,115
configurationを渡します

160
00:10:48,882 --> 00:10:51,451
最後はデバイスです

161
00:10:51,585 --> 00:10:55,189
外部デバイスから
データを取る場合などです

162
00:10:56,223 --> 00:10:58,225
作成が完了したら

163
00:10:58,492 --> 00:11:03,330
beginCollectionを呼び出し
開始日時を渡します

164
00:10:58,492 --> 00:11:03,330
beginCollectionを呼び出し
開始日時を渡します

165
00:11:04,031 --> 00:11:05,265
簡単ですね

166
00:11:06,300 --> 00:11:08,268
watchOSなら

167
00:11:08,702 --> 00:11:11,104
HKLiveWorkoutBuilderを
使えます

168
00:11:11,305 --> 00:11:14,608
まず sessionを作成します

169
00:11:15,242 --> 00:11:18,245
healthStoreと
workoutConfigurationを渡します

170
00:11:18,645 --> 00:11:22,382
builderは自分では作成せず

171
00:11:22,482 --> 00:11:26,887
コールを用いてsessionから
直接 読み出します

172
00:11:27,821 --> 00:11:31,792
これで sessionとbuilderを
開始できます

173
00:11:32,926 --> 00:11:36,797
開始日時を渡して
startActivityと―

174
00:11:37,030 --> 00:11:41,468
beginCollectionを
呼び出すだけです

175
00:11:43,103 --> 00:11:48,242
以上が builderを用いた
設定と開始の方法です

176
00:11:48,809 --> 00:11:55,315
次は データを収集して
UIに直接 表示し

177
00:11:55,782 --> 00:12:00,487
さらに ユーザが状態を
管理できるようにします

178
00:11:55,782 --> 00:12:00,487
さらに ユーザが状態を
管理できるようにします

179
00:12:03,223 --> 00:12:04,925
まず データ収集です

180
00:12:05,025 --> 00:12:09,463
ワークアウト関連のサンプル
例えば―

181
00:12:09,696 --> 00:12:14,201
カロリー 距離 心拍数などを
追加するには？

182
00:12:14,334 --> 00:12:18,872
builder.addという
シンプルなコールを用いて

183
00:12:18,972 --> 00:12:21,842
HKSampleの配列を与えます

184
00:12:23,944 --> 00:12:28,415
ワークアウトに
イベントを追加したい場合は

185
00:12:29,016 --> 00:12:32,319
builder.addWorkoutEventsを
呼び出します

186
00:12:33,687 --> 00:12:35,923
メタデータも同様です

187
00:12:36,757 --> 00:12:41,695
builder.addMetadataを
呼び出し

188
00:12:41,795 --> 00:12:44,264
ディクショナリを渡します

189
00:12:46,233 --> 00:12:50,871
Apple Watchの場合
デバイスが手首にあり

190
00:12:51,071 --> 00:12:54,007
さまざまなセンサーも
備えているので

191
00:12:54,107 --> 00:12:59,146
実際に カロリーや距離の
データを生成できます

192
00:12:59,479 --> 00:13:03,584
そうしたデータを
自動的に収集できたら

193
00:12:59,479 --> 00:13:03,584
そうしたデータを
自動的に収集できたら

194
00:13:03,784 --> 00:13:06,587
いいと思いませんか？

195
00:13:07,221 --> 00:13:09,423
watchOS 5からは

196
00:13:10,157 --> 00:13:14,194
自動的なデータ収集が
可能になります

197
00:13:14,294 --> 00:13:18,131
HKLiveWorkoutDataSourceを
使うのです

198
00:13:20,234 --> 00:13:22,603
これで収集するのは

199
00:13:22,703 --> 00:13:27,441
現在のワークアウトに
関連するサンプルです

200
00:13:29,143 --> 00:13:34,581
収集するタイプの
カスタマイズも可能で

201
00:13:34,681 --> 00:13:38,886
自由に追加したり
削除したりできます

202
00:13:39,153 --> 00:13:40,854
お見せしましょう

203
00:13:41,388 --> 00:13:44,091
まず data sourceを作成

204
00:13:45,425 --> 00:13:47,161
healthStoreと

205
00:13:47,261 --> 00:13:50,130
workoutConfigurationを
渡します

206
00:13:50,230 --> 00:13:55,335
活動のタイプに関する情報を含む
configurationを渡したので

207
00:13:55,435 --> 00:13:58,505
data sourceが
収集するタイプを

208
00:13:58,605 --> 00:14:01,808
推定することができます

209
00:13:58,605 --> 00:14:01,808
推定することができます

210
00:14:03,143 --> 00:14:08,315
次に HKLiveWorkoutBuilderに
このdata sourceをセットします

211
00:14:09,483 --> 00:14:14,354
収集するタイプは
追加や削除ができます

212
00:14:14,655 --> 00:14:17,457
では 追加してみましょう

213
00:14:17,558 --> 00:14:21,228
追加したいタイプを指定して

214
00:14:21,328 --> 00:14:27,067
optionalPredicateで
収集するタイプも限定できます

215
00:14:27,901 --> 00:14:32,806
dataSource.collectStatisticsを
呼び出して

216
00:14:33,373 --> 00:14:37,878
収集するタイプと
optionalPredicateを渡します

217
00:14:40,147 --> 00:14:42,683
これでデータが収集されます

218
00:14:42,783 --> 00:14:47,688
それをUIに表示する方法を
見てみましょう

219
00:14:49,723 --> 00:14:55,762
builderのデリゲートメソッドに
データが入ってくると

220
00:14:55,863 --> 00:15:00,634
そのつど didCollectDataOf
collectedTypesが呼び出されます

221
00:14:55,863 --> 00:15:00,634
そのつど didCollectDataOf
collectedTypesが呼び出されます

222
00:15:00,968 --> 00:15:05,639
心拍数を知りたいなら
収集するタイプに―

223
00:15:05,739 --> 00:15:09,176
それを含めるようにします

224
00:15:09,443 --> 00:15:11,612
そして
quantityTypeメソッドに

225
00:15:11,712 --> 00:15:15,749
statisticsを使います

226
00:15:15,916 --> 00:15:19,419
HKStatisticsオブジェクトが
得られます

227
00:15:19,586 --> 00:15:22,256
今回の場合 含まれる情報は

228
00:15:22,356 --> 00:15:27,294
心拍数の最小値 最大値
平均値 最新値など

229
00:15:27,394 --> 00:15:31,064
ワークアウト中に
記録されたものです

230
00:15:31,965 --> 00:15:34,902
これでUIを更新できます

231
00:15:36,570 --> 00:15:40,741
ワークアウトアプリケーションで
よくあるのが

232
00:15:40,841 --> 00:15:43,544
経過時間のタイマーです

233
00:15:44,178 --> 00:15:48,715
ワークアウト開始時に
タイマーをスタートしますが

234
00:15:48,916 --> 00:15:50,684
それでは不十分です

235
00:15:50,784 --> 00:15:55,556
中断や再開によって
経過時間は変わるからです

236
00:15:56,123 --> 00:15:59,893
そこで 新たなイベントを
追加する度に

237
00:16:00,260 --> 00:16:05,799
workoutBuilderDidCollectEventsを
呼び出します

238
00:16:06,066 --> 00:16:11,104
あとは builderの
elapsedTimeプロパティを使って

239
00:16:11,205 --> 00:16:15,242
現在の経過時間を取得できます

240
00:16:16,076 --> 00:16:17,377
簡単でしょう

241
00:16:19,646 --> 00:16:23,584
次に ワークアウトの
状態の管理です

242
00:16:25,118 --> 00:16:27,221
まず ワークアウトの

243
00:16:27,721 --> 00:16:32,459
さまざまな状態について
話したいと思います

244
00:16:33,126 --> 00:16:35,896
１つ目は“開始前”です

245
00:16:36,263 --> 00:16:38,499
始まっていない状態です

246
00:16:40,367 --> 00:16:44,938
ユーザはワークアウトを
始めていません

247
00:16:45,038 --> 00:16:49,109
次に“準備完了”の状態に
移ります

248
00:16:49,576 --> 00:16:54,715
この段階ではシステムが
Session Modeになります

249
00:16:54,815 --> 00:16:58,719
アプリケーションが
バックグラウンドで実行され

250
00:16:58,819 --> 00:17:02,456
センサーは
アクティビティの追跡に備えます

251
00:16:58,819 --> 00:17:02,456
センサーは
アクティビティの追跡に備えます

252
00:17:02,789 --> 00:17:05,125
しかし開始は まだです

253
00:17:06,226 --> 00:17:11,265
例えば アプリケーションに
カウントダウン機能があれば

254
00:17:11,598 --> 00:17:14,935
その前に
“準備完了”に移行します

255
00:17:15,035 --> 00:17:19,106
デバイスがアクティビティの
追跡に備えるためです

256
00:17:20,641 --> 00:17:23,277
次に“活動中”の状態

257
00:17:23,609 --> 00:17:27,181
ユーザはワークアウト中です

258
00:17:27,448 --> 00:17:32,252
途中で“中断”に
切り替えることも可能で

259
00:17:32,419 --> 00:17:37,958
これを繰り返したあと
“停止”の段階に移ります

260
00:17:39,126 --> 00:17:42,696
デバイスは
まだSession Modeなので

261
00:17:42,796 --> 00:17:46,633
アプリケーションは
バックグラウンドで実行中です

262
00:17:46,733 --> 00:17:51,338
つまりワークアウトを
保存する時間も取れます

263
00:17:52,706 --> 00:17:55,709
その後
ワークアウトを終了すれば

264
00:17:55,976 --> 00:17:59,913
Session Modeは終わります

265
00:18:01,682 --> 00:18:04,551
それぞれの状態間の移行は

266
00:18:04,751 --> 00:18:09,523
直接 このようなコールを
使うだけです

267
00:18:14,795 --> 00:18:19,833
こうして
集めたデータをUIに表示でき

268
00:18:19,933 --> 00:18:22,803
ワークアウトの状態を
管理できます

269
00:18:23,704 --> 00:18:27,441
では次に 終了と保存です

270
00:18:29,676 --> 00:18:34,147
終了するには まず
session.endを呼び出します

271
00:18:34,915 --> 00:18:40,621
builder.endCollectionも呼び出し
終了日時を渡します

272
00:18:41,088 --> 00:18:45,759
これ以降 ワークアウトのデータは
収集されません

273
00:18:46,960 --> 00:18:49,830
HealthKitに保存するには

274
00:18:49,930 --> 00:18:53,634
builder.finishWorkoutを
呼び出します

275
00:18:53,867 --> 00:18:58,138
完了ハンドラに
オブジェクトが戻ります

276
00:18:58,238 --> 00:19:02,609
すでに関連データとともに
保存された状態です

277
00:18:58,238 --> 00:19:02,609
すでに関連データとともに
保存された状態です

278
00:19:04,611 --> 00:19:09,449
新しいAPIを使った
アプリケーション作成でした

279
00:19:10,250 --> 00:19:14,788
実際に どう動くかを
デモでお見せしましょう

280
00:19:14,988 --> 00:19:18,392
Apple Watch向けの
アプリケーションです

281
00:19:19,660 --> 00:19:24,832
(拍手)

282
00:19:30,204 --> 00:19:33,640
今 私が作っているのは

283
00:19:33,740 --> 00:19:40,514
とてもシンプルな仕組みの
ランニング用アプリケーションです

284
00:19:40,614 --> 00:19:47,521
ここにある大きなRUNボタンを
タップするとUIが現れ

285
00:19:47,621 --> 00:19:52,392
ワークアウトの経過時間や
測定値が表示されます

286
00:19:52,493 --> 00:19:56,196
例えば 消費カロリー
最新の心拍数

287
00:19:56,463 --> 00:20:00,467
ワークアウト中に
走った距離などです

288
00:19:56,463 --> 00:20:00,467
ワークアウト中に
走った距離などです

289
00:20:01,001 --> 00:20:05,839
もちろん ユーザは状態を管理でき

290
00:20:05,939 --> 00:20:09,343
中断 再開 終了が可能です

291
00:20:11,912 --> 00:20:16,216
このように すでにUIは
実装されています

292
00:20:16,316 --> 00:20:18,285
他にやるべきことは

293
00:20:18,385 --> 00:20:22,656
新しいAPIを使って
機能させるだけです

294
00:20:24,124 --> 00:20:29,897
最初に必要なのは
プロジェクトの適切な設定です

295
00:20:30,564 --> 00:20:33,700
そのためには 設定画面に進み

296
00:20:34,167 --> 00:20:36,370
Capabilitiesタブへ

297
00:20:36,670 --> 00:20:41,241
HealthKitのCapabilityを
オンにします

298
00:20:42,042 --> 00:20:46,113
WatchKit App Extensionでも
同じように―

299
00:20:46,213 --> 00:20:50,717
HealthKitのCapabilityを
オンにしておきます

300
00:20:51,285 --> 00:20:58,292
さらに info.plistファイルに
２つの目的文字列を追加し

301
00:20:58,492 --> 00:21:03,030
データにアクセスする理由を
ユーザに伝えます

302
00:20:58,492 --> 00:21:03,030
データにアクセスする理由を
ユーザに伝えます

303
00:21:03,664 --> 00:21:08,902
１つ目は“Health Share
Usage Description”

304
00:21:09,203 --> 00:21:14,107
データを保存する理由を
ユーザに伝えるものです

305
00:21:14,341 --> 00:21:17,444
２つ目は“Health Update
Usage Description”

306
00:21:17,544 --> 00:21:20,614
データを読み取る理由の説明です

307
00:21:23,116 --> 00:21:27,688
これが済めば
新しいAPIを使えます

308
00:21:28,188 --> 00:21:32,226
もちろん その前にまず
するべきことは

309
00:21:32,526 --> 00:21:37,865
必要なデータに関する
権限を要求することです

310
00:21:38,599 --> 00:21:41,034
アプリケーションにより
異なりますが

311
00:21:41,135 --> 00:21:44,571
私のアプリケーションの場合は

312
00:21:45,005 --> 00:21:49,376
ここでワークアウトを
保存したいと思います

313
00:21:49,543 --> 00:21:53,814
アクセスが必要となる
タイプの１つです

314
00:21:53,914 --> 00:21:58,886
カロリー 心拍数 距離も
読み取る必要があるので

315
00:21:59,219 --> 00:22:00,287
そうします

316
00:21:59,219 --> 00:22:00,287
そうします

317
00:22:01,321 --> 00:22:06,760
もちろん 必要な時に
そのつど権限を要求します

318
00:22:07,094 --> 00:22:13,400
今回は このUIが表示される度に
要求したいと思います

319
00:22:13,667 --> 00:22:18,038
ワークアウト開始の前に
権限を得るためです

320
00:22:18,972 --> 00:22:21,575
この画面で使っているのは

321
00:22:21,742 --> 00:22:25,345
WorkoutStartViewの
WKInterfaceControllerです

322
00:22:25,612 --> 00:22:31,218
これからdidAppearメソッドで
権限を実行します

323
00:22:33,854 --> 00:22:40,227
最後に保存したいので
typesToShareはワークアウトです

324
00:22:42,262 --> 00:22:47,534
読み取りたいのは heartRateと
activeEnergyBurned

325
00:22:47,935 --> 00:22:50,404
そして
distanceWalkingRunningです

326
00:22:51,672 --> 00:22:54,208
この２つを指定したら

327
00:22:54,741 --> 00:23:00,447
requestAuthorizationを呼び出し
タイプを渡します

328
00:22:54,741 --> 00:23:00,447
requestAuthorizationを呼び出し
タイプを渡します

329
00:23:01,882 --> 00:23:05,185
では コードを
実行してみましょう

330
00:23:06,153 --> 00:23:09,056
Watchの画面が小さいため

331
00:23:09,156 --> 00:23:15,162
権限シートはユーザの
iPhoneに表示されます

332
00:23:15,662 --> 00:23:20,400
ですから iPhone上でも
権限の操作が必要です

333
00:23:22,736 --> 00:23:28,008
では この画面を閉じて
iPhoneを開きます

334
00:23:28,208 --> 00:23:31,979
権限シートが表示されました

335
00:23:32,279 --> 00:23:37,284
アクセスを許可するかを
ここで決定します

336
00:23:37,718 --> 00:23:43,223
デモなので全てをオンにして
“Allow”をタップします

337
00:23:44,057 --> 00:23:48,328
アプリケーションに
権限を許可しました

338
00:23:49,229 --> 00:23:53,534
いよいよ
ワークアウトAPIの開始です

339
00:23:54,301 --> 00:23:59,506
このボタンをタップすると
画面が表示されます

340
00:23:59,606 --> 00:24:02,242
ワークアウトの
情報を含んだ―

341
00:23:59,606 --> 00:24:02,242
ワークアウトの
情報を含んだ―

342
00:24:02,342 --> 00:24:04,845
workoutConfigurationの
オブジェクトです

343
00:24:04,945 --> 00:24:07,314
この例ではランニングです

344
00:24:07,681 --> 00:24:11,418
では ワークアウトの
設定をしましょう

345
00:24:11,985 --> 00:24:17,791
この画面に使っているのは
WKInterfaceControllerです

346
00:24:18,058 --> 00:24:21,228
awakeメソッドで設定します

347
00:24:22,463 --> 00:24:28,168
まず HKWorkoutSessionと
HKLiveWorkoutBuilderを作成

348
00:24:30,571 --> 00:24:34,441
イニシャライザを使って
作成します

349
00:24:34,675 --> 00:24:37,177
workoutConfigurationを
渡します

350
00:24:37,778 --> 00:24:43,083
あとは sessionから直接
builderを読み出します

351
00:24:44,351 --> 00:24:48,989
configurationが無効の場合
作成はできません

352
00:24:49,289 --> 00:24:53,060
そのため
do-catchブロックを用いて

353
00:24:53,160 --> 00:24:56,163
不備があれば却下します

354
00:24:58,232 --> 00:25:01,068
次に sessionとbuilderの
設定です

355
00:24:58,232 --> 00:25:01,068
次に sessionとbuilderの
設定です

356
00:25:02,169 --> 00:25:05,739
ここでは
interface controllerに

357
00:25:05,839 --> 00:25:09,676
sessionとbuilderを
デリゲートします

358
00:25:09,977 --> 00:25:14,047
デバイスが生成する
サンプルも集めたいので

359
00:25:14,147 --> 00:25:19,853
HKLiveWorkoutDataSourceを用いて
workoutConfigurationを渡し

360
00:25:20,120 --> 00:25:23,857
自動的にタイプを
推定するようにします

361
00:25:25,859 --> 00:25:31,532
そして sessionとbuilderを
開始します

362
00:25:33,901 --> 00:25:38,438
ワークアウトを始めて
最初にすることは

363
00:25:38,539 --> 00:25:41,341
タイマーを
スタートさせることです

364
00:25:41,708 --> 00:25:46,580
beginCollectionの
コールバックで行います

365
00:25:49,783 --> 00:25:52,553
これが そのメソッドです

366
00:25:52,953 --> 00:25:59,426
中断や再開のイベントが
経過時間に影響するので

367
00:25:59,526 --> 00:26:04,665
workoutBuilberDidCollectEventも
使います

368
00:25:59,526 --> 00:26:04,665
workoutBuilberDidCollectEventも
使います

369
00:26:07,835 --> 00:26:09,603
では 実行します

370
00:26:10,504 --> 00:26:15,142
このUIで使用するのは
WKInterfaceTimerです

371
00:26:15,275 --> 00:26:17,478
このオブジェクトは

372
00:26:18,078 --> 00:26:23,383
カウントを開始する
過去の日時を必要とします

373
00:26:23,917 --> 00:26:26,520
そこで
Dateオブジェクトを作成

374
00:26:26,687 --> 00:26:29,990
elapsedTimeプロパティを
用います

375
00:26:30,624 --> 00:26:36,096
過去の日時が必要なので
マイナス記号を入れます

376
00:26:36,997 --> 00:26:42,436
そして UIなので
メインキューで実行します

377
00:26:42,536 --> 00:26:45,038
あとはタイマーの日時を
設定するだけ

378
00:26:46,473 --> 00:26:53,413
ワークアウト中だけ
タイマーを実行するには

379
00:26:53,614 --> 00:26:54,715
こうします

380
00:26:55,616 --> 00:26:57,785
まず sessionStateを挿入

381
00:26:58,452 --> 00:27:00,888
メインキューで実行です

382
00:26:58,452 --> 00:27:00,888
メインキューで実行です

383
00:27:00,988 --> 00:27:04,591
ワークアウト中なら
タイマーを開始

384
00:27:04,858 --> 00:27:07,694
それ以外なら止めます

385
00:27:08,595 --> 00:27:12,933
これで タイマーが
経過時間を追跡します

386
00:27:13,901 --> 00:27:19,306
次に UIに表示される測定値が
正確かを確認しましょう

387
00:27:19,907 --> 00:27:24,578
builderが新たなサンプルを
収集する度に

388
00:27:24,678 --> 00:27:27,047
このメソッドが呼び出されます

389
00:27:27,614 --> 00:27:32,252
ここでは collectedTypesを
反復します

390
00:27:36,623 --> 00:27:42,229
今回 欲しいデータは
全て数量サンプルなので

391
00:27:42,329 --> 00:27:45,732
それだけを扱うようにします

392
00:27:47,501 --> 00:27:51,004
ここで 新しいメソッド―

393
00:27:51,104 --> 00:27:56,443
workoutBuilder.statistics
(for: quantityType)を利用

394
00:27:56,543 --> 00:27:59,513
HKStatisticsオブジェクトが
得られます

395
00:27:59,613 --> 00:28:06,487
各タイプの最大値 最小値
平均値 最新値が含まれています

396
00:27:59,613 --> 00:28:06,487
各タイプの最大値 最小値
平均値 最新値が含まれています

397
00:28:07,855 --> 00:28:10,324
statisticsオブジェクトを挿入

398
00:28:11,358 --> 00:28:14,828
すでに実行したメソッドが

399
00:28:14,962 --> 00:28:19,833
特定の数量タイプに
UIラベルを与えてくれます

400
00:28:20,567 --> 00:28:25,572
あとはstatisticsオブジェクトで
ラベルが更新されます

401
00:28:27,508 --> 00:28:32,246
次に ユーザが状態を
管理できるようにしましょう

402
00:28:33,413 --> 00:28:38,685
中断ボタンが押されると
このメソッドが呼び出されます

403
00:28:38,986 --> 00:28:42,923
session.pauseを
呼び出しましょう

404
00:28:43,924 --> 00:28:48,929
再開する時は
session.resumeです

405
00:28:50,197 --> 00:28:55,435
ワークアウトを
終了するにはsession.end

406
00:28:55,903 --> 00:29:01,041
そして builder.endCollectionに
終了日時を渡します

407
00:28:55,903 --> 00:29:01,041
そして builder.endCollectionに
終了日時を渡します

408
00:29:01,742 --> 00:29:06,880
finishWorkoutを呼び出し
ワークアウトと関連データを

409
00:29:06,980 --> 00:29:09,516
全て保存します

410
00:29:10,217 --> 00:29:11,985
これで終わりです

411
00:29:12,386 --> 00:29:16,857
では このコードを
実行してみましょう

412
00:29:24,298 --> 00:29:27,468
ワークアウトを開始します

413
00:29:28,235 --> 00:29:33,006
ご覧のとおり
タイマーが更新されていきます

414
00:29:33,106 --> 00:29:36,643
データは直接 収集され

415
00:29:36,743 --> 00:29:39,746
UIに表示されます

416
00:29:40,114 --> 00:29:45,385
もちろん 状態の変化にも
対応できます

417
00:29:45,485 --> 00:29:48,522
ワークアウトを中断すると

418
00:29:49,323 --> 00:29:52,726
タイマーとデータ収集が
止まります

419
00:29:52,993 --> 00:29:54,928
再開しましょう

420
00:29:57,397 --> 00:30:03,003
わずか数行のコードで
完全な機能を備えました

421
00:29:57,397 --> 00:30:03,003
わずか数行のコードで
完全な機能を備えました

422
00:30:03,570 --> 00:30:08,876
(拍手)

423
00:30:09,276 --> 00:30:11,745
ワークアウトを停止します

424
00:30:14,081 --> 00:30:20,087
どのように保存されたか
iPhoneで見てみましょう

425
00:30:22,456 --> 00:30:26,727
これが今 保存した
ワークアウトです

426
00:30:26,927 --> 00:30:30,597
これほど豊富な情報が
HealthKit内に

427
00:30:30,731 --> 00:30:33,667
直接 保存されているのです

428
00:30:33,901 --> 00:30:35,969
デバイスの詳細

429
00:30:36,069 --> 00:30:42,943
心拍数 距離 消費エネルギーなど
関連するサンプル

430
00:30:43,110 --> 00:30:48,916
そして 中断や再開などの
イベントも記録されます

431
00:30:57,257 --> 00:30:59,359
このように 簡単に

432
00:30:59,459 --> 00:31:03,931
ワークアウトアプリケーションを
構築できます

433
00:30:59,459 --> 00:31:03,931
ワークアウトアプリケーションを
構築できます

434
00:31:04,832 --> 00:31:09,603
(拍手)

435
00:31:10,170 --> 00:31:14,474
しかし 常にうまくいくとは
限りません

436
00:31:14,808 --> 00:31:20,114
初めてのマラソンで
このアプリケーションを使おうと

437
00:31:20,214 --> 00:31:23,884
楽しみにしていたとしましょう

438
00:31:24,184 --> 00:31:26,787
ところが 終わってみると

439
00:31:27,120 --> 00:31:30,390
途中でアプリケーションが
クラッシュ

440
00:31:30,490 --> 00:31:32,392
全データが消えてしまった

441
00:31:33,026 --> 00:31:37,731
そんな時はwatchOS 5の
Workout Recoveryで

442
00:31:37,998 --> 00:31:40,033
問題を解決できます

443
00:31:40,567 --> 00:31:44,438
(拍手)

444
00:31:44,538 --> 00:31:48,809
アプリケーションが
ワークアウト中にクラッシュしても

445
00:31:49,209 --> 00:31:54,248
自動的に再起動して
復元するのです

446
00:31:55,282 --> 00:32:01,188
sessionとbuilderが
以前の状態に修復されます

447
00:31:55,282 --> 00:32:01,188
sessionとbuilderが
以前の状態に修復されます

448
00:32:01,455 --> 00:32:06,560
startActivityなどを
呼び出す必要はありません

449
00:32:07,761 --> 00:32:12,332
データの自動収集に
data sourceを用いている場合は

450
00:32:12,432 --> 00:32:14,434
再設定が必要です

451
00:32:15,636 --> 00:32:17,070
見てみましょう

452
00:32:18,605 --> 00:32:21,575
クラッシュ後 再起動すると

453
00:32:21,675 --> 00:32:25,913
WKExtensionDelegateメソッドを
呼び出します

454
00:32:26,013 --> 00:32:28,315
それから
handleActiveWorkoutRecoveryも

455
00:32:28,982 --> 00:32:33,053
healthStoreオブジェクトを
作成して

456
00:32:33,554 --> 00:32:38,158
recoverActiveWorkoutSessionを
呼び出します

457
00:32:38,358 --> 00:32:42,129
完了ハンドラに
sessionが戻ります

458
00:32:42,729 --> 00:32:43,997
これだけです

459
00:32:47,134 --> 00:32:49,803
これが新しいAPIです

460
00:32:49,970 --> 00:32:54,474
これまで以上に 簡単に
アプリケーションを構築できます

461
00:32:54,875 --> 00:32:58,378
さらに 新しい
Quantity Series APIもあります

462
00:32:58,479 --> 00:33:03,383
これについては ニハリカが
詳しく紹介します

463
00:32:58,479 --> 00:33:03,383
これについては ニハリカが
詳しく紹介します

464
00:33:04,017 --> 00:33:08,322
(拍手)

465
00:33:08,956 --> 00:33:10,157
すごいですね

466
00:33:10,257 --> 00:33:14,561
完全なアプリケーションが
10分未満で作れました

467
00:33:14,661 --> 00:33:20,567
ユーザはワークアウトが好きなので
これは とても重要なことです

468
00:33:21,034 --> 00:33:24,037
ワークアウトは
大量のデータを生みます

469
00:33:24,138 --> 00:33:26,607
サッカーのアプリケーションなら

470
00:33:26,840 --> 00:33:30,244
ユーザの動きを
理解する必要があります

471
00:33:30,344 --> 00:33:35,616
フィールド上をどのくらい
動いたかという距離も―

472
00:33:35,716 --> 00:33:37,651
追跡したいですね

473
00:33:38,285 --> 00:33:42,556
ワークアウトが始まれば
サンプルが入ってきます

474
00:33:42,890 --> 00:33:47,661
まず2.25m進み 次に0.6m進み

475
00:33:47,761 --> 00:33:50,864
また さらに進んで
終わりました

476
00:33:50,998 --> 00:33:54,234
これまでは それぞれの距離が

477
00:33:54,334 --> 00:33:57,337
個別のHKQuantityとして
保存されました

478
00:33:57,504 --> 00:34:00,974
それぞれが独立していたのです

479
00:33:57,504 --> 00:34:00,974
それぞれが独立していたのです

480
00:34:01,341 --> 00:34:05,579
これを１つにできたら
便利ですよね

481
00:34:05,679 --> 00:34:11,585
累計を追跡しつつ
個別の数字も保存するのです

482
00:34:12,018 --> 00:34:15,922
そこで紹介するのが HKCumulative
QuantitySeriesSample

483
00:34:16,023 --> 00:34:21,395
頻度の高いデータを
効率的に保存する新機能です

484
00:34:21,562 --> 00:34:22,996
利点は２つです

485
00:34:23,096 --> 00:34:28,101
まず １つのサンプルを
保存すればよいので

486
00:34:28,202 --> 00:34:33,607
頻繁に生じるデータを
効率的に保存できる点です

487
00:34:33,774 --> 00:34:37,411
２つ目は
サンプルを構成する数字の

488
00:34:37,511 --> 00:34:40,347
連結が保たれている点です

489
00:34:41,215 --> 00:34:43,484
これは おなじみの

490
00:34:43,583 --> 00:34:48,121
HKQuantitySampleの
サブクラスです

491
00:34:48,222 --> 00:34:54,194
以前に使ったことがあれば
ほぼ同じだと分かります

492
00:34:55,329 --> 00:34:57,498
では どう役立つのか？

493
00:34:57,731 --> 00:35:00,100
例えばデータの可視化

494
00:34:57,731 --> 00:35:00,100
例えばデータの可視化

495
00:35:00,200 --> 00:35:03,604
複雑な表やグラフを使って

496
00:35:03,704 --> 00:35:07,941
ユーザのデータを
美しく見せたい時は

497
00:35:08,342 --> 00:35:12,446
HKStatisticsQueryを
使いましょう

498
00:35:12,546 --> 00:35:15,282
またはHKStatistics
CollectionQueryです

499
00:35:15,382 --> 00:35:19,153
この目的に使える
既存のクエリです

500
00:35:19,253 --> 00:35:22,589
きめ細かいデータにアクセスでき

501
00:35:22,689 --> 00:35:27,895
新しいSeriesSampleの
データも取得できます

502
00:35:27,995 --> 00:35:31,398
余分な処理は不要です

503
00:35:32,366 --> 00:35:37,037
データ解析がしたい場合は
もう一歩 踏み込んで

504
00:35:37,137 --> 00:35:40,841
個々の数字を
知る必要があります

505
00:35:41,341 --> 00:35:45,679
HKQuantitySeriesSampleQueryを
使いましょう

506
00:35:45,979 --> 00:35:48,849
最後に サッカーのように

507
00:35:48,949 --> 00:35:52,753
頻繁なデータ収集を
要する場合です

508
00:35:53,053 --> 00:35:56,356
HKQuantitySeriesSampleBuilderを
使いましょう

509
00:35:56,457 --> 00:36:01,562
累積的な数量サンプルを作る
新しい方法で

510
00:35:56,457 --> 00:36:01,562
累積的な数量サンプルを作る
新しい方法で

511
00:36:01,662 --> 00:36:04,097
保存も効率的にできます

512
00:36:05,933 --> 00:36:07,935
では やってみましょう

513
00:36:08,035 --> 00:36:09,603
この方法では

514
00:36:09,703 --> 00:36:15,142
QuantitySeriesSampleを構成する
個別のHKQuantityを

515
00:36:15,242 --> 00:36:17,711
深く調べ
理解することができます

516
00:36:18,579 --> 00:36:23,717
コードでは まず
数量の保存場所を決めます

517
00:36:23,817 --> 00:36:26,520
ここでは数量の配列に
保存します

518
00:36:27,888 --> 00:36:33,260
次に 取得したいサンプルで
クエリを初期化

519
00:36:33,360 --> 00:36:37,197
大部分の処理は
完了ハンドラで発生します

520
00:36:37,297 --> 00:36:40,534
analyzeQuantityという
メソッドは

521
00:36:40,634 --> 00:36:43,804
関心のある数量について
処理します

522
00:36:43,904 --> 00:36:47,808
この例では
数量の配列に追加します

523
00:36:48,342 --> 00:36:50,944
最後に クエリを実行

524
00:36:51,145 --> 00:36:52,780
これだけです

525
00:36:52,980 --> 00:36:57,818
皆さんの知っている
他のクエリとほぼ同じです

526
00:36:59,453 --> 00:37:02,656
次に HKQuantitySeries
SampleBuilder

527
00:36:59,453 --> 00:37:02,656
次に HKQuantitySeries
SampleBuilder

528
00:37:02,756 --> 00:37:07,995
頻繁にデータを取得するのに
非常に優れています

529
00:37:08,095 --> 00:37:12,032
より効率的に
データを保存しながら

530
00:37:12,132 --> 00:37:14,568
データ間の連結も可能です

531
00:37:15,002 --> 00:37:19,740
まずは SampleBuilderを
作ります

532
00:37:19,840 --> 00:37:24,678
最初はhealthStoreと
quantityTypeです

533
00:37:25,012 --> 00:37:30,284
次に サンプルに入れたい
データがあれば挿入します

534
00:37:30,384 --> 00:37:32,786
例えばサッカーの場合は

535
00:37:32,886 --> 00:37:37,024
関心があるのは
ユーザが動いた距離です

536
00:37:37,124 --> 00:37:41,461
そこで 単位として
メートルを宣言します

537
00:37:41,562 --> 00:37:44,531
これをseriesBuilderに
挿入します

538
00:37:46,166 --> 00:37:49,737
最後に
finishを呼び出します

539
00:37:49,837 --> 00:37:53,273
新しいQuantitySeriesSampleを
入手すれば

540
00:37:53,374 --> 00:37:56,376
保存も より効率的にできます

541
00:37:56,610 --> 00:38:02,516
皆さんのアプリケーションに
ぜひ このAPIを使ってください

542
00:37:56,610 --> 00:38:02,516
皆さんのアプリケーションに
ぜひ このAPIを使ってください

543
00:38:02,616 --> 00:38:05,419
データ保存の新しい方法です

544
00:38:05,786 --> 00:38:11,391
データを関連付けて
興味深い分析もできます

545
00:38:14,194 --> 00:38:17,698
今日は
いろいろな話をしました

546
00:38:17,798 --> 00:38:21,935
それぞれをパーツとして
考えてみてください

547
00:38:22,035 --> 00:38:24,438
組み合わせることによって

548
00:38:24,538 --> 00:38:29,009
最初から最後まで
ユーザを尊重できます

549
00:38:29,176 --> 00:38:32,880
まず尊重すべきはプライバシー

550
00:38:32,980 --> 00:38:37,184
ユーザの個人データに
アクセスするからには

551
00:38:37,284 --> 00:38:42,222
相応の敬意をもって
扱うことが重要です

552
00:38:42,589 --> 00:38:48,996
そしてカリムが紹介した新機能で
シームレスな体験を提供しましょう

553
00:38:49,096 --> 00:38:56,036
クラッシュ対策などの機能で
ユーザの期待に応えられます

554
00:38:56,203 --> 00:39:00,073
最後に 新しいAPIを活用して

555
00:38:56,203 --> 00:39:00,073
最後に 新しいAPIを活用して

556
00:39:00,174 --> 00:39:05,379
デバイスの能力を
最大限に引き出してください

557
00:39:05,479 --> 00:39:08,649
最高の体験を
ユーザに提供しましょう

558
00:39:08,749 --> 00:39:13,120
ワークアウトアプリケーションは
成長を続け

559
00:39:13,220 --> 00:39:17,658
それを使うユーザも
増え続けています

560
00:39:17,758 --> 00:39:20,194
大いに期待しています

561
00:39:21,161 --> 00:39:24,231
Developer Documentationに
詳しい情報があります

562
00:39:24,331 --> 00:39:29,403
今日 このあとのセッションにも
お越しください

563
00:39:29,503 --> 00:39:33,040
ヘルスケアとフィットネスの
集まりもあるので

564
00:39:33,140 --> 00:39:37,911
直接 お目にかかれるのを
楽しみにしています

565
00:39:38,011 --> 00:39:41,849
HealthKitの
新機能については

566
00:39:41,949 --> 00:39:46,353
“Accessing Health Records with
HealthKit”をお聞きください

567
00:39:47,221 --> 00:39:50,424
皆さんに期待しています

568
00:39:50,924 --> 00:39:51,658
ありがとう

569
00:39:51,759 --> 00:39:56,330
(拍手)