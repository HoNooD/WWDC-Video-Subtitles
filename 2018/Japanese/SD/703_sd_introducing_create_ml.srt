
1
00:00:07,107 --> 00:00:16,350
(音楽)

2
00:00:21,054 --> 00:00:27,227
(拍手)

3
00:00:29,530 --> 00:00:31,832
皆さん こんにちは

4
00:00:32,399 --> 00:00:36,737
私はガウラフ
今日は機械学習の話をします

5
00:00:38,872 --> 00:00:40,974
昨年 Core MLを発表しました

6
00:00:41,775 --> 00:00:46,213
デベロッパの皆さんからの
反響は大きく

7
00:00:46,513 --> 00:00:51,418
すばらしいアプリケーションが
たくさん生まれました

8
00:00:52,085 --> 00:00:54,454
お礼を言わせてください

9
00:00:54,588 --> 00:00:56,490
ありがとうございます

10
00:00:56,590 --> 00:01:00,460
大勢の方がCore MLを活用し

11
00:00:56,590 --> 00:01:00,460
大勢の方がCore MLを活用し

12
00:01:00,561 --> 00:01:04,263
ユーザに貢献したことを
うれしく思います

13
00:01:04,364 --> 00:01:06,567
私たちは仲間です

14
00:01:07,434 --> 00:01:10,504
(拍手)

15
00:01:10,604 --> 00:01:12,606
皆さんへの拍手です

16
00:01:14,274 --> 00:01:15,876
Core MLを使うと

17
00:01:15,976 --> 00:01:20,247
アプリケーションに
機械学習モデルを組み込めます

18
00:01:21,281 --> 00:01:22,816
やり方はシンプルです

19
00:01:22,916 --> 00:01:26,787
機械学習モデルを
Xcodeにドロップして

20
00:01:26,887 --> 00:01:32,492
たった３行のコードを書けば
リアルタイムで計算を行う―

21
00:01:32,593 --> 00:01:36,730
最先端の機械学習モデルを
実行できます

22
00:01:36,830 --> 00:01:38,065
すばらしいですね

23
00:01:38,999 --> 00:01:42,402
ユーザは
プライバシーに配慮した―

24
00:01:42,503 --> 00:01:45,038
機械学習を利用できるのです

25
00:01:46,006 --> 00:01:52,279
モデルをXcodeにドロップすれば
あとはCore MLが処理します

26
00:01:54,348 --> 00:01:58,385
どこで機械学習モデルを
入手できるのか？

27
00:02:00,187 --> 00:02:02,923
昨年 ２つの方法をご紹介しました

28
00:02:03,023 --> 00:02:09,930
１つは AppleのWebサイトから
ダウンロードする方法です

29
00:02:11,331 --> 00:02:15,002
もう１つは
Core ML Toolsを使う方法

30
00:02:16,136 --> 00:02:22,476
機械学習コミュニティが作った
既存のモデルを利用できます

31
00:02:23,644 --> 00:02:25,979
これも手順はシンプルです

32
00:02:26,380 --> 00:02:31,351
ライブラリを選び
モデルをトレーニングしたら

33
00:02:31,451 --> 00:02:36,823
変換して アプリケーションに
組み込むだけです

34
00:02:39,259 --> 00:02:45,232
当初 サポートできる
ライブラリは５つか６つでした

35
00:02:45,766 --> 00:02:50,571
しかし この１年で
有名なライブラリを全て―

36
00:02:50,671 --> 00:02:53,240
サポート可能にしました

37
00:02:53,874 --> 00:02:58,078
Core ML Toolsの
機能も強化中ですが

38
00:02:58,178 --> 00:03:03,050
詳細は明日のセッションで
お話しします

39
00:02:58,178 --> 00:03:03,050
詳細は明日のセッションで
お話しします

40
00:03:05,686 --> 00:03:12,092
また 昨年の年末に
Turi Createをリリースしました

41
00:03:12,426 --> 00:03:15,829
この詳細も明日 お話しします

42
00:03:17,231 --> 00:03:19,833
今年の発表は
もっとすごいですよ

43
00:03:19,967 --> 00:03:21,702
Appleは止まりません

44
00:03:23,070 --> 00:03:25,072
皆さんに届けたいのは―

45
00:03:25,739 --> 00:03:30,744
SwiftやXcodeを活用できるもの

46
00:03:31,178 --> 00:03:34,515
デベロッパに焦点を当てたもの

47
00:03:34,615 --> 00:03:37,851
機械学習を単純化するものです

48
00:03:38,218 --> 00:03:41,255
その名は Create ML

49
00:03:42,456 --> 00:03:47,928
(拍手)

50
00:03:48,028 --> 00:03:50,364
機械学習フレームワークです

51
00:03:52,165 --> 00:03:56,870
この図式の左側を
埋めてくれます

52
00:03:57,538 --> 00:04:02,476
Create MLでモデルを作り
Core MLで実行

53
00:03:57,538 --> 00:04:02,476
Create MLでモデルを作り
Core MLで実行

54
00:04:02,676 --> 00:04:08,081
機械学習は全て
Swift内で完結します

55
00:04:08,182 --> 00:04:11,785
トレーニングで使った言語と
違う言語で―

56
00:04:11,885 --> 00:04:14,755
実行する必要はありません

57
00:04:16,523 --> 00:04:18,559
Create MLはシンプルで

58
00:04:19,259 --> 00:04:20,394
とてもパワフル

59
00:04:20,494 --> 00:04:25,399
アプリケーションに合わせて
調整でき

60
00:04:26,466 --> 00:04:29,002
しかも Macで作業可能です

61
00:04:31,338 --> 00:04:35,209
今年は３つのユースケースに着目

62
00:04:35,309 --> 00:04:37,411
まずは画像です

63
00:04:38,145 --> 00:04:42,115
次にテキスト
最後は表形式データです

64
00:04:42,883 --> 00:04:47,321
この３つは
最も役立つユースケースでしょう

65
00:04:49,122 --> 00:04:52,226
例えば 画像分類器

66
00:04:52,559 --> 00:04:55,195
独自の画像分類器を作り

67
00:04:55,295 --> 00:04:58,599
あなたのカタログにある製品を
認識させます

68
00:04:59,399 --> 00:05:01,668
テキスト分類器を作れば

69
00:04:59,399 --> 00:05:01,668
テキスト分類器を作れば

70
00:05:01,768 --> 00:05:06,273
センチメント分析やトピック分析
ドメイン分析が行えます

71
00:05:07,908 --> 00:05:13,447
表形式データの
回帰や分類も可能で

72
00:05:13,547 --> 00:05:19,119
例えば 化学成分から
ワインの品質を予測できます

73
00:05:19,653 --> 00:05:25,859
可能性を無限に広げる
使い方の詳細を30分でご説明します

74
00:05:27,895 --> 00:05:32,032
その前に 一般的な
ワークフローを説明しましょう

75
00:05:34,234 --> 00:05:38,805
あなたのアプリケーションで
考えてみてください

76
00:05:39,006 --> 00:05:43,844
むやみに機械学習を使わずに
その必要性を確認し―

77
00:05:43,944 --> 00:05:48,282
機械学習の問題点を
理解してから使いましょう

78
00:05:49,883 --> 00:05:52,386
次に データ集めです

79
00:05:53,220 --> 00:05:58,192
アプリケーションの趣旨に合った
データを集めます

80
00:05:58,392 --> 00:06:06,099
例えばiPhoneユーザのための
画像分類器を作る場合は

81
00:05:58,392 --> 00:06:06,099
例えばiPhoneユーザのための
画像分類器を作る場合は

82
00:06:06,200 --> 00:06:08,569
iPhoneから写真を集めます

83
00:06:08,669 --> 00:06:13,040
スクリーンショットより
写真が必要です

84
00:06:14,741 --> 00:06:16,944
次は トレーニング

85
00:06:18,545 --> 00:06:22,916
最後に 学習済みの
モデルを評価します

86
00:06:23,250 --> 00:06:28,655
評価結果は
サンプルとして出力されます

87
00:06:29,156 --> 00:06:32,659
結果に満足なら
モデルを出力します

88
00:06:33,627 --> 00:06:35,996
結果に満足できない場合は

89
00:06:36,096 --> 00:06:41,335
やり直すか より多くの
データを集めましょう

90
00:06:43,670 --> 00:06:48,442
Create MLは
４つのステージ全てで役立ちます

91
00:06:49,877 --> 00:06:55,315
データソースなど
パワフルなデータを内蔵しています

92
00:06:55,415 --> 00:06:58,352
詳細はこのあと お話しします

93
00:07:00,187 --> 00:07:03,590
コード１行で
トレーニングできます

94
00:07:04,324 --> 00:07:07,794
ハードウェアに
適したトレーニングです

95
00:07:10,464 --> 00:07:17,471
評価基準が内蔵されているので
自分で作る必要はありません

96
00:07:18,539 --> 00:07:23,010
結果に満足なら
モデルを出力すれば完了です

97
00:07:24,478 --> 00:07:27,714
ユースケースごとに
見ていきましょう

98
00:07:27,814 --> 00:07:30,951
画像 テキスト
表形式データです

99
00:07:32,853 --> 00:07:35,222
まずは画像から

100
00:07:35,322 --> 00:07:39,560
機械学習チームの
リジーにお願いします

101
00:07:39,660 --> 00:07:45,265
(拍手)

102
00:07:45,365 --> 00:07:46,466
ありがとう

103
00:07:50,003 --> 00:07:52,639
画像に基づいた体験は

104
00:07:52,739 --> 00:07:57,377
アプリケーションにとって
極めてパワフルな要素です

105
00:07:57,477 --> 00:08:02,583
今日は 画像分類モデルの
学習方法を説明します

106
00:07:57,477 --> 00:08:02,583
今日は 画像分類モデルの
学習方法を説明します

107
00:08:03,217 --> 00:08:06,186
画像分類で識別が難しいのは

108
00:08:06,286 --> 00:08:10,657
どのラベルを
画像に適用するかです

109
00:08:11,525 --> 00:08:13,427
学習データのタイプによって

110
00:08:13,527 --> 00:08:18,065
特定の領域だけを
ターゲットにできます

111
00:08:19,199 --> 00:08:22,369
まずは学習データを集めます

112
00:08:23,704 --> 00:08:28,609
果物の分類器を例に
説明しましょう

113
00:08:29,510 --> 00:08:34,448
正解データを反映する
さまざまな画像を大量に集め

114
00:08:34,548 --> 00:08:37,083
ラベルを付けます

115
00:08:37,518 --> 00:08:39,785
ディクショナリとして

116
00:08:40,020 --> 00:08:43,789
画像に対応する
ラベルを付けるのです

117
00:08:44,258 --> 00:08:47,327
または 階層のある
ディレクトリで

118
00:08:47,427 --> 00:08:50,330
データセットを構成します

119
00:08:50,430 --> 00:08:55,369
つまり ラベルを
フォルダの名前と同じにします

120
00:08:56,637 --> 00:09:02,075
ラベルをファイル名にして
１つのフォルダに入れる場合も

121
00:08:56,637 --> 00:09:02,075
ラベルをファイル名にして
１つのフォルダに入れる場合も

122
00:09:02,176 --> 00:09:07,214
Create MLのAPIで
簡単に構成を抽出できます

123
00:09:08,982 --> 00:09:12,786
トレーニングは もっと複雑です

124
00:09:12,886 --> 00:09:16,223
データを集めたら
次に進みましょう

125
00:09:16,924 --> 00:09:20,961
非常に複雑なモデルの
トレーニングを

126
00:09:21,061 --> 00:09:23,564
一から始めます

127
00:09:23,831 --> 00:09:26,733
これには たくさんのデータと

128
00:09:26,833 --> 00:09:29,937
大量の計算処理と
忍耐が必要です

129
00:09:30,270 --> 00:09:34,408
ただし 転移学習という
方法があります

130
00:09:34,841 --> 00:09:39,880
Appleはモデルの学習において
経験豊富なので

131
00:09:39,980 --> 00:09:44,051
すでにOSに組み込まれた
モデルがあります

132
00:09:44,151 --> 00:09:49,723
つまり 私たちは転移学習を
既存のモデルに適用させ

133
00:09:49,823 --> 00:09:54,328
特定のデータだけ
トレーニングすればいいのです

134
00:09:54,461 --> 00:09:57,264
大量の画像は必要なく

135
00:09:57,364 --> 00:10:01,668
手持ちの画像で
高度なトレーニングができます

136
00:09:57,364 --> 00:10:01,668
手持ちの画像で
高度なトレーニングができます

137
00:10:03,437 --> 00:10:05,973
結果 迅速な学習が可能です

138
00:10:06,073 --> 00:10:11,845
デベロッパが何時間もかけていた
トレーニングは―

139
00:10:12,479 --> 00:10:14,848
数分で完了します

140
00:10:14,948 --> 00:10:17,618
小さいデータなら数秒です

141
00:10:19,753 --> 00:10:24,458
これにより
数百MBだったモデルが

142
00:10:24,558 --> 00:10:29,363
数MB さらには数KBに減りました

143
00:10:31,965 --> 00:10:35,502
Create MLの目的は
機械学習を

144
00:10:35,602 --> 00:10:37,938
使いやすくすることです

145
00:10:38,238 --> 00:10:40,741
デモをお見せしましょう

146
00:10:47,447 --> 00:10:50,751
まず アプリケーションを
起動します

147
00:10:50,851 --> 00:10:55,489
最先端の分類モデルを
使用しているものです

148
00:10:56,190 --> 00:11:00,093
サイズが大きく 100MBあります

149
00:10:56,190 --> 00:11:00,093
サイズが大きく 100MBあります

150
00:11:00,561 --> 00:11:03,864
起動すると果物の画像が出ます

151
00:11:05,032 --> 00:11:08,135
でも正しく認識されていませんね

152
00:11:08,502 --> 00:11:10,537
残念です

153
00:11:11,605 --> 00:11:13,707
これらを分類しましょう

154
00:11:14,174 --> 00:11:17,578
新しいPlaygroundを表示

155
00:11:19,079 --> 00:11:23,050
CreateMLUIを
インポートして―

156
00:11:23,750 --> 00:11:25,085
UIを使います

157
00:11:26,019 --> 00:11:27,588
Builderを定義

158
00:11:28,655 --> 00:11:34,495
liveViewで
Builderを表示することができます

159
00:11:38,298 --> 00:11:43,570
画像をドラッグすると
トレーニングの開始です

160
00:11:44,771 --> 00:11:48,008
果物の画像を
用意しておきました

161
00:11:48,675 --> 00:11:51,111
ブルーベリーの画像です

162
00:11:51,612 --> 00:11:57,751
ドラッグすると 分類モデルが
Mac上でトレーニングを開始します

163
00:11:57,851 --> 00:12:00,587
GPUで処理が加速するので

164
00:11:57,851 --> 00:12:00,587
GPUで処理が加速するので

165
00:12:00,921 --> 00:12:03,857
カテゴリが多くても完了します

166
00:12:04,625 --> 00:12:08,395
データセットの精度を
自動で通知

167
00:12:08,495 --> 00:12:13,700
モデルが見たことのない
未知の画像を試して

168
00:12:13,800 --> 00:12:17,471
実際の精度を
予測することもできます

169
00:12:17,638 --> 00:12:21,174
未知の画像が
入ったフォルダをドラッグ

170
00:12:21,675 --> 00:12:24,978
すると
モデルが評価を行います

171
00:12:25,145 --> 00:12:29,082
スクロールすれば
画像の正解ラベルと

172
00:12:29,249 --> 00:12:32,085
予測されたラベルが
分かります

173
00:12:34,221 --> 00:12:36,890
精度に満足できたら―

174
00:12:37,357 --> 00:12:40,861
モデルを
アプリケーションにドラッグ

175
00:12:44,665 --> 00:12:47,034
追加してから見てみると

176
00:12:47,734 --> 00:12:50,170
モデルは83KBです

177
00:12:50,270 --> 00:12:53,707
バイト数が大きく減りましたね

178
00:12:53,807 --> 00:12:59,813
(拍手)

179
00:13:00,080 --> 00:13:03,116
古いモデルを削除したら

180
00:13:03,217 --> 00:13:08,121
画像分類器を初期化します

181
00:13:10,424 --> 00:13:11,959
再起動して―

182
00:13:13,060 --> 00:13:14,361
シミュレータを起動

183
00:13:17,464 --> 00:13:19,700
モデルの動きを確認します

184
00:13:23,904 --> 00:13:26,540
学習したことでラズベリーを

185
00:13:26,640 --> 00:13:30,244
正しく認識できるように
なりました

186
00:13:30,577 --> 00:13:34,515
イチゴとブルーベリーの
区別も可能です

187
00:13:37,851 --> 00:13:39,953
ワークフローは他にもあります

188
00:13:40,521 --> 00:13:44,358
この流れを
自動化したいですよね

189
00:13:44,992 --> 00:13:48,428
Create MLを使えば可能です

190
00:13:51,732 --> 00:13:56,670
まずは
Create MLをインポート

191
00:13:57,738 --> 00:14:01,708
Foundationも
インポートします

192
00:13:57,738 --> 00:14:01,708
Foundationも
インポートします

193
00:14:03,577 --> 00:14:07,548
先ほど使ったフォルダが
まだありますね

194
00:14:08,882 --> 00:14:10,317
フォルダの場所と―

195
00:14:12,653 --> 00:14:15,856
テスト画像の場所を明示します

196
00:14:16,290 --> 00:14:18,959
次は トレーニングです

197
00:14:19,226 --> 00:14:20,894
モデルを定義して―

198
00:14:22,129 --> 00:14:24,698
画像分類器を初期化します

199
00:14:25,065 --> 00:14:28,969
何が使えるか見てみましょう

200
00:14:29,069 --> 00:14:34,007
画像の配列にラベルが付いた
辞書形式のデータや

201
00:14:35,142 --> 00:14:40,347
データソースやパラメータなどを
使うことができます

202
00:14:41,348 --> 00:14:46,253
データソースと
ラベルディレクトリを使いましょう

203
00:14:46,353 --> 00:14:48,755
次に ディレクトリを明記

204
00:14:50,390 --> 00:14:55,295
シフトキーと
エンターキーを押すだけで

205
00:14:55,796 --> 00:14:58,098
トレーニングを開始します

206
00:14:59,066 --> 00:15:01,168
コンソールを表示すれば

207
00:14:59,066 --> 00:15:01,168
コンソールを表示すれば

208
00:15:01,468 --> 00:15:07,608
抽出した特徴量や
処理の回数などを確認できます

209
00:15:08,442 --> 00:15:11,044
その後 クイックルックで

210
00:15:11,144 --> 00:15:14,882
モデル名と
使用したデータの数が分かります

211
00:15:16,083 --> 00:15:19,987
では テストデータを
評価しましょう

212
00:15:20,420 --> 00:15:21,522
見てください

213
00:15:22,222 --> 00:15:25,559
evaluationを呼び出します

214
00:15:25,659 --> 00:15:27,928
フォルダ構成は同じなので

215
00:15:28,028 --> 00:15:32,232
データのURLを特定し
エンターキーを押下

216
00:15:32,866 --> 00:15:35,869
すると モデルが評価します

217
00:15:36,036 --> 00:15:41,241
完了したら クイックルックで
評価した画像の数と

218
00:15:41,341 --> 00:15:45,646
フォルダのクラス数や
精度を確認できます

219
00:15:46,747 --> 00:15:49,149
結果に満足なら 出力です

220
00:15:58,525 --> 00:16:02,963
名前を付けて
デスクトップに保存します

221
00:15:58,525 --> 00:16:02,963
名前を付けて
デスクトップに保存します

222
00:16:04,731 --> 00:16:07,935
デスクトップに
モデルが現れました

223
00:16:08,469 --> 00:16:12,472
ダブルクリックすると
同じものだと分かります

224
00:16:12,573 --> 00:16:14,708
83KBですね

225
00:16:16,877 --> 00:16:19,980
さらに 組み込み直しも
可能です

226
00:16:21,081 --> 00:16:22,015
まとめましょう

227
00:16:25,886 --> 00:16:30,724
(拍手)

228
00:16:31,892 --> 00:16:36,063
画像分類の学習方法を
２つ紹介しました

229
00:16:36,163 --> 00:16:39,533
１つは UIを使った簡単な方法で

230
00:16:39,633 --> 00:16:44,571
ドラッグ＆ドロップで
モデルを作成できます

231
00:16:45,305 --> 00:16:48,475
もう１つは
APIを使う方法です

232
00:16:48,575 --> 00:16:53,914
まず初めに Create MLを
インポートします

233
00:16:54,348 --> 00:16:58,151
次に データの場所を指定

234
00:16:58,652 --> 00:17:03,190
その後
トレーニングを開始します

235
00:16:58,652 --> 00:17:03,190
その後
トレーニングを開始します

236
00:17:04,090 --> 00:17:08,595
データを評価したら
モデルを保存します

237
00:17:11,431 --> 00:17:14,835
自動化する場合
スクリプトに書けば

238
00:17:14,935 --> 00:17:19,540
処理を保存しておいて
いつでも再実行できます

239
00:17:21,608 --> 00:17:25,412
ファイルの権限を
変更することもできますし

240
00:17:25,945 --> 00:17:30,584
Swiftのコマンドラインでも
実行可能です

241
00:17:31,084 --> 00:17:36,723
画像分類のさまざまな学習方法を
紹介しました

242
00:17:36,823 --> 00:17:42,062
次は タオに自然言語処理を
説明してもらいます

243
00:17:42,262 --> 00:17:46,900
(拍手)

244
00:17:50,604 --> 00:17:51,538
ありがとう

245
00:17:54,541 --> 00:17:56,643
こんにちは　私はタオ

246
00:17:56,743 --> 00:18:00,414
Core MLチームのエンジニアです

247
00:17:56,743 --> 00:18:00,414
Core MLチームのエンジニアです

248
00:18:00,881 --> 00:18:05,519
画像分類の学習が
いかに簡単にできるかを

249
00:18:05,619 --> 00:18:07,788
ご覧いただきました

250
00:18:08,121 --> 00:18:12,726
今度は 自然言語処理の
簡単さをお話しします

251
00:18:14,361 --> 00:18:18,732
今年から 自然言語処理の
２つのタスクをサポートします

252
00:18:19,366 --> 00:18:22,336
テキスト分類とタグ付けです

253
00:18:22,970 --> 00:18:26,507
今日は
テキスト分類について説明し

254
00:18:26,707 --> 00:18:31,812
タグ付けの詳細は
明日のセッションでお話しします

255
00:18:32,546 --> 00:18:37,050
テキスト分類はいくつかの
アプリケーションで利用可能です

256
00:18:37,718 --> 00:18:40,287
例えば センチメント分析

257
00:18:40,654 --> 00:18:43,557
“デベロッパの
行動力は すごい！”

258
00:18:43,724 --> 00:18:47,060
これは肯定的だと
認識させたい文です

259
00:18:47,427 --> 00:18:49,830
(拍手)

260
00:18:50,364 --> 00:18:52,065
スパム分析

261
00:18:52,199 --> 00:18:57,237
明らかにスパムと分かる
こんなメッセージも―

262
00:18:57,638 --> 00:18:59,940
アプリケーションに
認識させたいですね

263
00:19:01,942 --> 00:19:03,510
トピック分析

264
00:19:03,710 --> 00:19:06,680
“すばらしい
逆転勝利を収めた”

265
00:19:07,047 --> 00:19:11,452
これがスポーツ関連の
投稿だと認識させたい

266
00:19:12,286 --> 00:19:17,724
分類器をトレーニングするために
データを集めます

267
00:19:18,325 --> 00:19:23,964
学習データの構成を
複数の方法でサポートします

268
00:19:24,231 --> 00:19:27,234
例えば ラベルディレクトリ

269
00:19:27,367 --> 00:19:32,272
“肯定的”と“否定的”という名の
フォルダがあります

270
00:19:32,739 --> 00:19:37,678
各フォルダには
多くの記事が入っており

271
00:19:37,778 --> 00:19:41,849
ラベルはフォルダ名と同じです

272
00:19:43,283 --> 00:19:47,354
データをCSVで
用意することもできます

273
00:19:47,521 --> 00:19:52,259
テキストとラベルを
コンマで分けておくのです

274
00:19:52,926 --> 00:19:55,929
JSON形式のデータも使えます

275
00:19:56,196 --> 00:19:59,500
これまでに
話したような方法で

276
00:19:59,600 --> 00:20:03,637
テストデータを
構成することができます

277
00:19:59,600 --> 00:20:03,637
テストデータを
構成することができます

278
00:20:06,273 --> 00:20:09,409
データを準備する他に―

279
00:20:09,643 --> 00:20:13,514
トレーニングに
必要なことは何でしょう？

280
00:20:16,216 --> 00:20:18,952
典型的なワークフローを説明します

281
00:20:19,953 --> 00:20:21,755
まず テキストが―

282
00:20:22,156 --> 00:20:26,193
どの言語を含んでいるか
認識します

283
00:20:27,161 --> 00:20:29,363
次に トークン化

284
00:20:30,230 --> 00:20:33,200
その後 特徴量に変換します

285
00:20:34,268 --> 00:20:36,970
そして モデルに適用

286
00:20:37,504 --> 00:20:42,376
モデルがラベルに対応する
予想値を出します

287
00:20:42,843 --> 00:20:47,681
そのラベルと正解ラベルの
比較を繰り返します

288
00:20:49,383 --> 00:20:54,054
でもCreate MLを使えば
とても簡単

289
00:20:54,354 --> 00:20:59,827
テキストと正解ラベルを
準備するだけで

290
00:20:59,993 --> 00:21:02,663
すぐに
トレーニングができます

291
00:20:59,993 --> 00:21:02,663
すぐに
トレーニングができます

292
00:21:03,497 --> 00:21:09,102
(拍手)

293
00:21:09,770 --> 00:21:15,109
では トレーニング方法と
使用例を紹介しましょう

294
00:21:16,376 --> 00:21:20,414
このアプリケーションで
説明します

295
00:21:20,848 --> 00:21:24,318
肯定的な投稿を
勧めるためのものです

296
00:21:25,686 --> 00:21:28,155
“渋滞は嫌い”と入力すれば

297
00:21:28,355 --> 00:21:32,125
背景を赤くして
投稿ボタンを無効にします

298
00:21:32,593 --> 00:21:35,162
(笑い声)

299
00:21:35,262 --> 00:21:40,434
“時速８キロで渋滞の中
運転するのが大好き”なら

300
00:21:41,535 --> 00:21:44,705
肯定的なので投稿を勧めます

301
00:21:46,006 --> 00:21:51,612
誰もがこの機能を使ったら
どうなるでしょう？

302
00:21:51,712 --> 00:21:55,582
(拍手)

303
00:21:56,783 --> 00:21:59,553
では デモをお見せします

304
00:22:07,261 --> 00:22:12,633
まずトレーニングするために
データを集めます

305
00:22:15,335 --> 00:22:19,740
学習フォルダと
テストフォルダを用意しました

306
00:22:20,007 --> 00:22:24,878
学習フォルダの中には
“肯定的”と“否定的”のフォルダ

307
00:22:25,312 --> 00:22:28,749
それぞれに記事が入っています

308
00:22:29,416 --> 00:22:32,686
テストフォルダの構成も
同じです

309
00:22:33,353 --> 00:22:34,354
では―

310
00:22:35,989 --> 00:22:39,860
Create MLを
インポートします

311
00:22:41,328 --> 00:22:46,233
次に 学習データの場所を
明示します

312
00:22:47,668 --> 00:22:50,904
URLを取得しましょう

313
00:22:51,205 --> 00:22:54,041
次に トレーニングを開始

314
00:22:54,141 --> 00:22:57,311
ラベルディレクトリを使います

315
00:22:59,413 --> 00:23:01,048
始まりました

316
00:22:59,413 --> 00:23:01,048
始まりました

317
00:23:02,282 --> 00:23:06,487
下段に 進捗状況が
表示されています

318
00:23:06,820 --> 00:23:08,422
完了したようです

319
00:23:10,290 --> 00:23:14,261
モデルが処理した数を
確認しましょう

320
00:23:14,361 --> 00:23:17,998
インスタンスを呼び出すと―

321
00:23:18,599 --> 00:23:22,569
2000以上のデータで
学習したと分かります

322
00:23:22,903 --> 00:23:25,005
精度は100％です

323
00:23:27,808 --> 00:23:30,878
未知のデータでは
どうでしょう？

324
00:23:31,311 --> 00:23:34,715
同様にテストデータを
定義します

325
00:23:36,550 --> 00:23:37,417
それから―

326
00:23:38,285 --> 00:23:41,755
そのデータで
モデルを評価します

327
00:23:43,557 --> 00:23:47,661
テストに使ったデータの数は77

328
00:23:47,928 --> 00:23:51,465
精度は94％以上です

329
00:23:52,299 --> 00:23:53,567
上出来ですね

330
00:23:54,468 --> 00:23:59,339
より高い精度を求めて
やり直しもできますが

331
00:23:59,606 --> 00:24:02,609
私は この精度で十分です

332
00:23:59,606 --> 00:24:02,609
私は この精度で十分です

333
00:24:02,876 --> 00:24:04,745
実際に使ってみましょう

334
00:24:05,212 --> 00:24:06,780
モデルを保存するため―

335
00:24:07,347 --> 00:24:11,752
保存先のURLを
定義する必要があります

336
00:24:12,653 --> 00:24:16,457
そしてデスクトップに
出力します

337
00:24:17,658 --> 00:24:19,960
モデルが保存されました

338
00:24:22,429 --> 00:24:26,633
アプリケーションに戻り
モデルをドロップ

339
00:24:28,035 --> 00:24:29,069
これでよし

340
00:24:33,540 --> 00:24:36,610
これでモデルを使えます

341
00:24:37,377 --> 00:24:42,816
オートコンプリート機能で
コードを書いたら―

342
00:24:43,283 --> 00:24:47,488
推論コードを
インサートします

343
00:24:49,323 --> 00:24:52,526
ご覧のとおり
推論コードの１行目で

344
00:24:52,626 --> 00:24:55,596
predictionを取得しています

345
00:24:55,696 --> 00:25:00,767
その後 UIと接続するために
doubleValueに変換

346
00:24:55,696 --> 00:25:00,767
その後 UIと接続するために
doubleValueに変換

347
00:25:02,736 --> 00:25:03,871
試してみます

348
00:25:16,650 --> 00:25:18,886
先ほどの例を使いましょう

349
00:25:19,586 --> 00:25:21,088
“渋滞は嫌い”

350
00:25:22,022 --> 00:25:23,090
否定的です

351
00:25:24,892 --> 00:25:29,630
“時速８キロで
渋滞の中―”

352
00:25:30,464 --> 00:25:32,366
“運転するのが大好き”

353
00:25:33,634 --> 00:25:34,601
肯定的です

354
00:25:35,068 --> 00:25:38,005
別の文章でも
試してみましょう

355
00:25:38,605 --> 00:25:40,207
“機械学習は難しい”

356
00:25:41,575 --> 00:25:45,712
“でもCreate MLで簡単になる”

357
00:25:46,413 --> 00:25:47,381
肯定的です

358
00:25:47,981 --> 00:25:52,519
(拍手)

359
00:25:53,487 --> 00:25:57,291
このように 分類器を
トレーニングして

360
00:25:57,391 --> 00:25:59,493
アプリケーションで使えます

361
00:26:05,265 --> 00:26:06,066
おさらいです

362
00:26:08,035 --> 00:26:12,606
トレーニングする場合
まずはデータを明示します

363
00:26:13,173 --> 00:26:16,777
学習データと
テストデータの両方です

364
00:26:17,845 --> 00:26:21,148
そして モデルを作成

365
00:26:22,015 --> 00:26:26,854
テストデータで
モデルの性能を評価します

366
00:26:27,688 --> 00:26:34,928
最後に アプリケーションで
モデルを使うために保存します

367
00:26:38,365 --> 00:26:39,533
まとめましょう

368
00:26:40,434 --> 00:26:42,836
たった数行のコードで

369
00:26:42,936 --> 00:26:48,809
あなただけの分類器を
簡単にトレーニングできます

370
00:26:50,611 --> 00:26:55,048
次は 表形式データの
話をしてもらいましょう

371
00:26:55,249 --> 00:26:55,949
ありがとう

372
00:26:56,450 --> 00:26:59,753
(拍手)

373
00:27:01,355 --> 00:27:02,356
ありがとう タオ

374
00:27:04,758 --> 00:27:06,660
機械学習においては

375
00:27:06,760 --> 00:27:13,233
画像やテキストに並び
表形式データも頻繁に登場します

376
00:27:13,867 --> 00:27:19,506
表形式データとは
テーブル形式のデータです

377
00:27:19,606 --> 00:27:22,009
よくある形式ですね

378
00:27:22,643 --> 00:27:26,146
例えば 住宅価格を
予測するとします

379
00:27:26,246 --> 00:27:29,182
寝室や浴室の数 面積は―

380
00:27:29,716 --> 00:27:32,920
一般的に 表形式で表します

381
00:27:34,254 --> 00:27:38,091
ワインの品質を
化学成分で予測したい場合も

382
00:27:38,192 --> 00:27:40,727
データは表形式で表します

383
00:27:41,061 --> 00:27:44,698
今夜どのバーに行くか
決める場合も

384
00:27:44,798 --> 00:27:49,703
価格などのデータは
表形式で表します

385
00:27:51,905 --> 00:27:56,310
表形式データを扱うために
導入したのが

386
00:27:56,410 --> 00:28:01,982
MLDataTableという
新しいデータ構造です

387
00:27:56,410 --> 00:28:01,982
MLDataTableという
新しいデータ構造です

388
00:28:02,382 --> 00:28:06,353
MLDataTableの
技術については

389
00:28:06,453 --> 00:28:08,822
明日 詳細をお話しします

390
00:28:10,057 --> 00:28:12,726
このような表は面白いですね

391
00:28:13,794 --> 00:28:17,164
行に含まれるのは記録や実例

392
00:28:17,264 --> 00:28:22,102
２番目の家には寝室が４つ
浴室が３つあります

393
00:28:23,403 --> 00:28:26,039
列は 特徴量です

394
00:28:26,140 --> 00:28:28,041
つまり 寝室の数は特徴量

395
00:28:28,542 --> 00:28:32,446
浴室の数や
面積なども特徴量です

396
00:28:33,113 --> 00:28:36,316
この列の中で
予測したいのは―

397
00:28:36,750 --> 00:28:38,452
価格です

398
00:28:39,253 --> 00:28:43,557
応答変数 または
目的変数と呼ばれる列です

399
00:28:43,957 --> 00:28:48,195
表形式データの目的は
特徴量としての

400
00:28:48,295 --> 00:28:52,432
目的変数を予測することです

401
00:28:54,968 --> 00:29:02,543
我々がサポートしているのは
CSVやJSONなどのソースです

402
00:28:54,968 --> 00:29:02,543
我々がサポートしているのは
CSVやJSONなどのソースです

403
00:29:02,643 --> 00:29:04,177
では もう少し―

404
00:29:05,379 --> 00:29:08,182
詳細をお話ししましょう

405
00:29:09,449 --> 00:29:14,588
初めに CSVデータを
読み込みます

406
00:29:16,089 --> 00:29:20,761
サブスクリプトでも
列へのアクセスが可能です

407
00:29:20,861 --> 00:29:25,499
次に 価格の列全体の
情報を取得します

408
00:29:27,367 --> 00:29:32,439
２つの列で
四則計算もできます

409
00:29:33,607 --> 00:29:36,543
これは自然な
シンタックスです

410
00:29:36,643 --> 00:29:38,979
価格を面積で割れば

411
00:29:39,079 --> 00:29:42,015
面積あたりの価格が
分かります

412
00:29:43,050 --> 00:29:48,121
この計算に使っているのは
簡単な評価と―

413
00:29:48,722 --> 00:29:50,724
ベクトル演算です

414
00:29:51,992 --> 00:29:55,495
他にも面白いことができますよ

415
00:29:55,596 --> 00:30:00,467
テーブルの分割や
フィルタリングなどです

416
00:29:55,596 --> 00:30:00,467
テーブルの分割や
フィルタリングなどです

417
00:30:00,567 --> 00:30:04,071
例えば大きい家にしか
興味がないなら

418
00:30:04,171 --> 00:30:07,341
大きい家だけを表示できます

419
00:30:08,041 --> 00:30:10,777
さまざまな機能があるので

420
00:30:10,878 --> 00:30:14,615
Playgroundで
試してみてください

421
00:30:14,715 --> 00:30:15,482
楽しいですよ

422
00:30:18,085 --> 00:30:21,889
データを入力したら
トレーニングをします

423
00:30:22,790 --> 00:30:27,127
Create MLは
ランダムフォレストなど―

424
00:30:27,461 --> 00:30:30,464
多くのアルゴリズムをサポート

425
00:30:31,165 --> 00:30:35,235
アルゴリズムは
クラスによって表されます

426
00:30:36,537 --> 00:30:40,107
１行のコードで
トレーニング可能です

427
00:30:40,207 --> 00:30:42,709
ターゲットや
データの場所―

428
00:30:42,976 --> 00:30:47,047
使用するアルゴリズムを
書きます

429
00:30:47,347 --> 00:30:51,351
線形回帰アルゴリズムを
実行したいなら

430
00:30:51,518 --> 00:30:54,454
このように書きましょう

431
00:30:54,721 --> 00:30:58,225
データと列の情報も必要です

432
00:31:01,395 --> 00:31:07,167
別のアルゴリズムを使う場合は
冒頭部分を書き換えるだけ

433
00:31:07,568 --> 00:31:10,337
ランダムフォレストなら こうです

434
00:31:11,205 --> 00:31:13,106
さらに 利用可能なのが―

435
00:31:13,607 --> 00:31:16,310
MLRegressorです

436
00:31:16,410 --> 00:31:20,914
最適なアルゴリズムを
自動で選んでくれます

437
00:31:21,148 --> 00:31:26,854
(拍手)

438
00:31:27,654 --> 00:31:30,958
これで 本来の仕事に
集中できます

439
00:31:31,058 --> 00:31:36,697
アルゴリズムではなく
価格の予想に焦点を絞れますね

440
00:31:36,964 --> 00:31:43,771
ですが あなたが専門家なら
パラメータの変更もできます

441
00:31:48,375 --> 00:31:51,512
処理の全体像をお見せします

442
00:31:51,945 --> 00:31:56,417
画像やテキストの時と
同じパターンです

443
00:31:56,517 --> 00:31:58,819
まずは データを指定

444
00:32:00,020 --> 00:32:02,923
次に モデルを作ります

445
00:32:03,557 --> 00:32:06,160
そして モデルを評価

446
00:32:07,227 --> 00:32:09,563
結果に満足なら 保存します

447
00:32:10,364 --> 00:32:13,300
表形式データと画像データ

448
00:32:13,467 --> 00:32:16,837
テキストデータは
どれも同じ流れです

449
00:32:20,073 --> 00:32:24,511
このセッションの
まとめをしましょう

450
00:32:27,881 --> 00:32:31,118
Create MLは
機械学習フレームワークで

451
00:32:31,218 --> 00:32:34,121
使い方は簡単でも
パワフルです

452
00:32:34,521 --> 00:32:40,460
Mac上のSwift内で
機械学習を完結できます

453
00:32:43,497 --> 00:32:45,999
ワークフローも説明しましたね

454
00:32:47,067 --> 00:32:52,639
どんな体験を実現したいかを
考えることから始まります

455
00:32:53,640 --> 00:32:57,277
そして問題を明確にして
データを集めます

456
00:32:57,377 --> 00:33:01,281
必ず データが
実用的であることを―

457
00:32:57,377 --> 00:33:01,281
必ず データが
実用的であることを―

458
00:33:01,849 --> 00:33:03,083
確認しましょう

459
00:33:03,517 --> 00:33:07,621
その後 モデルを
トレーニングして評価

460
00:33:07,955 --> 00:33:11,158
結果に満足なら 保存します

461
00:33:14,528 --> 00:33:15,696
Create MLは―

462
00:33:16,296 --> 00:33:19,800
macOS Mojaveで
入手できます

463
00:33:22,736 --> 00:33:27,608
Xcode Playgroundなどで
使用可能です

464
00:33:29,276 --> 00:33:31,044
試してみてください

465
00:33:32,212 --> 00:33:36,617
フィードバックを
お待ちしています

466
00:33:36,884 --> 00:33:39,686
気に入ってもらえたら
うれしいですね

467
00:33:41,722 --> 00:33:47,194
明日は 機械学習の会合と
ラボがありますので

468
00:33:47,294 --> 00:33:50,664
フィードバックを
聞かせてください

469
00:33:51,231 --> 00:33:57,237
明朝には Create MLの
セッションがあります

470
00:33:57,337 --> 00:34:01,141
午後のセッションは
機械学習です

471
00:33:57,337 --> 00:34:01,141
午後のセッションは
機械学習です

472
00:34:01,241 --> 00:34:03,076
木曜日にもあります

473
00:34:05,479 --> 00:34:09,116
ラボは水曜日と金曜日の
予定です

474
00:34:09,349 --> 00:34:10,050
ありがとう

475
00:34:10,784 --> 00:34:13,853
(拍手)