
1
00:00:07,107 --> 00:00:16,350
（音楽）

2
00:00:22,189 --> 00:00:26,093
“MapKit JSキーの取得
及び使用”へようこそ

3
00:00:26,326 --> 00:00:28,629
エリック･ジェリナです

4
00:00:29,096 --> 00:00:33,233
このビデオでは
MapKit JSの認証と

5
00:00:33,667 --> 00:00:37,905
MapKit JSキー及び
認証トークンの作成方法を学び

6
00:00:38,005 --> 00:00:39,540
マップを作成します

7
00:00:40,807 --> 00:00:44,478
MapKit JSにおける認証を
見ていきましょう

8
00:00:45,879 --> 00:00:49,550
ウェブ上でホストするものは
全てプレーンテキストです

9
00:00:49,850 --> 00:00:55,022
ありがたいことに
ソースを表示して技術を学べます

10
00:00:56,190 --> 00:00:58,859
ウェブインスペクタを
開いてみましょう

11
00:00:59,193 --> 00:01:04,298
気に入ったマップがあったら
ソースを表示して確認します

12
00:00:59,193 --> 00:01:04,298
気に入ったマップがあったら
ソースを表示して確認します

13
00:01:05,799 --> 00:01:09,670
時にはあなたの許可なく
API認証クレデンシャルが

14
00:01:09,770 --> 00:01:12,940
誤ってコピーされ
使用される場合も

15
00:01:13,640 --> 00:01:17,477
不正でも使用限度に対して
カウントされます

16
00:01:18,178 --> 00:01:22,683
限度に達すると
サイトはマップが表示不能に

17
00:01:23,150 --> 00:01:28,655
MapKit JS認証システムなら
クレデンシャル管理を強化できます

18
00:01:29,056 --> 00:01:32,726
アクセスの有効期限を設定して

19
00:01:33,627 --> 00:01:36,530
特定ドメインへのアクセスを
制限します

20
00:01:36,663 --> 00:01:41,168
他者はウェブインスペクタ内で
閲覧できますが

21
00:01:41,502 --> 00:01:46,306
他者がクレデンシャルを取得すれば
使用法が制限されます

22
00:01:47,608 --> 00:01:52,012
高レベルでのMapKit JS認証を
見てみましょう

23
00:01:52,880 --> 00:01:57,251
MapKit JSキーを入手したら
安全な場所に保存します

24
00:01:57,551 --> 00:02:00,287
ウェブ上で共有されることはなく

25
00:01:57,551 --> 00:02:00,287
ウェブ上で共有されることはなく

26
00:02:00,387 --> 00:02:04,324
あなたのキーが署名された
制限付きトークンが作成されます

27
00:02:04,558 --> 00:02:09,930
このトークンはMapKit JS APIの
認証に使用します

28
00:02:10,830 --> 00:02:14,368
MapKit JSキーの
作成方法を説明しましょう

29
00:02:15,602 --> 00:02:20,207
このキーはMapKit JS APIで
使用するクレデンシャルです

30
00:02:20,507 --> 00:02:22,743
ワンタイムセットアップです

31
00:02:23,243 --> 00:02:24,878
まずマップIDを作成

32
00:02:25,479 --> 00:02:29,550
MapKit JSキーを作成し
そのIDと関連付けます

33
00:02:30,350 --> 00:02:33,353
キーをダウンロードし
安全な場所へ保存します

34
00:02:34,621 --> 00:02:39,660
developer.apple.com/accountへ
始める前にログインします

35
00:02:40,427 --> 00:02:45,032
左のメニューから“証明書･ID･
プロファイル”をクリックします

36
00:02:47,067 --> 00:02:50,037
まずはマップIDの作成です

37
00:02:50,370 --> 00:02:54,074
Apple Developerウェブサイトの
プロジェクト特定に使用しますが

38
00:02:54,274 --> 00:02:57,010
使用限度も追跡されます

39
00:02:58,946 --> 00:03:03,851
開発環境においては
別IDを作成しましょう

40
00:02:58,946 --> 00:03:03,851
開発環境においては
別IDを作成しましょう

41
00:03:04,318 --> 00:03:09,389
メニューから“マップID”を
選択して

42
00:03:10,357 --> 00:03:12,726
右上の“+”を
クリックした後―

43
00:03:13,994 --> 00:03:15,929
IDに説明を加えます

44
00:03:16,263 --> 00:03:20,167
ユーザーに表示される
ウェブサイト名を入力したら

45
00:03:21,335 --> 00:03:23,537
固有のIDをあてがいます

46
00:03:23,871 --> 00:03:27,441
このIDには
逆ドメインスタイルを推奨

47
00:03:27,541 --> 00:03:30,110
文字列マップで開始します

48
00:03:32,045 --> 00:03:38,151
例えば“maps.com.
あなたのドメイン名.yourapp”

49
00:03:40,420 --> 00:03:42,489
次はMapKit JSキーの
作成です

50
00:03:42,689 --> 00:03:45,626
このキーはあなたと
Apple間の秘密なので

51
00:03:45,759 --> 00:03:49,463
フロントエンドコード格納や
ソースコントロールチェックは

52
00:03:49,563 --> 00:03:50,931
控えてください

53
00:03:52,065 --> 00:03:57,037
まず左メニューの“キー”下の
“すべて”をクリックします

54
00:03:58,338 --> 00:04:01,408
次にヘッダの“+”を
クリックします

55
00:03:58,338 --> 00:04:01,408
次にヘッダの“+”を
クリックします

56
00:04:02,776 --> 00:04:05,045
この新規キーに名前を付けたら

57
00:04:06,880 --> 00:04:10,017
“MapKit JS”を
チェックします

58
00:04:11,318 --> 00:04:13,420
次に“設定”をクリック

59
00:04:14,188 --> 00:04:16,023
新規キーが作成され

60
00:04:16,857 --> 00:04:20,293
前に作成したマップIDとの
関連付けを―

61
00:04:20,394 --> 00:04:23,230
ドロップダウンメニューから
行います

62
00:04:23,997 --> 00:04:27,768
マップIDへの関連付けは
１つのキーと一度のみです

63
00:04:28,936 --> 00:04:32,472
マップIDを選択したら
“続行”をクリック

64
00:04:33,874 --> 00:04:38,879
変更内容に目を通したら
最後に“確認”をクリックします

65
00:04:40,814 --> 00:04:42,916
これでキーが
ダウンロード可能に

66
00:04:43,050 --> 00:04:46,920
“ダウンロード”ボタンを
クリックして保存します

67
00:04:47,120 --> 00:04:50,991
１回しかダウンロードできません
安全な場所に保管を

68
00:04:51,091 --> 00:04:55,796
損失した場合 新規キーを作成し
古いキーを無効にします

69
00:04:57,130 --> 00:05:01,034
ダウンロードした認証キーは
このようになります

70
00:04:57,130 --> 00:05:01,034
ダウンロードした認証キーは
このようになります

71
00:05:01,235 --> 00:05:06,340
お伝えしたようにこのキーは
あなたとApple間の秘密です

72
00:05:07,074 --> 00:05:10,611
認証キーをダウンロードできるのは
今回のみです

73
00:05:10,844 --> 00:05:13,313
すぐ安全な場所に保存を

74
00:05:14,481 --> 00:05:17,551
キーを損失 または
不正侵入された場合は

75
00:05:17,651 --> 00:05:22,623
常時 Apple Developerのサイトで
無効にして新規キーを作成できます

76
00:05:25,192 --> 00:05:27,461
MapKit JSキーが
作成されました

77
00:05:27,928 --> 00:05:33,467
次にMapKit JSの認証に使う
認証トークンを作成します

78
00:05:36,170 --> 00:05:39,740
デベロッパクレデンシャルを
含めて作成され

79
00:05:39,840 --> 00:05:42,242
認証キーファイルとともに
署名されます

80
00:05:42,876 --> 00:05:48,615
トークンに追加されるクレームは
クライアント認証に使用されます

81
00:05:49,816 --> 00:05:53,654
作成方法を
詳しく見ていきましょう

82
00:05:55,255 --> 00:05:58,559
MapKit JS認証トークンは

83
00:05:58,725 --> 00:06:04,498
JSON Web Tokens RFC 7519
略してJWTに基づいています

84
00:05:58,725 --> 00:06:04,498
JSON Web Tokens RFC 7519
略してJWTに基づいています

85
00:06:04,865 --> 00:06:08,969
これはウェブ上の
認証クレーム送信に特化した―

86
00:06:09,069 --> 00:06:11,238
業界標準になっています

87
00:06:12,072 --> 00:06:16,476
詳細は jwt.ioをご覧ください

88
00:06:17,778 --> 00:06:23,717
大半のプログラム言語を網羅する
JWTトークン署名用のライブラリも

89
00:06:25,085 --> 00:06:28,889
全てのJWTトークンは
以下の３部分からなります

90
00:06:29,356 --> 00:06:34,127
ヘッダ ペイロード
そして署名です

91
00:06:34,928 --> 00:06:38,999
ピリオドで区切られ
Base64 URLでエンコード

92
00:06:39,099 --> 00:06:43,337
要求ヘッダに容易にパスされ
トークンを作成します

93
00:06:44,738 --> 00:06:49,376
認証トークンの推奨JWT構成が
２つあります

94
00:06:49,476 --> 00:06:52,579
短期トークンと長期トークンです

95
00:06:54,648 --> 00:06:56,717
短期トークンから始めましょう

96
00:06:56,950 --> 00:07:01,021
このタイプは不正に対し
最大の保護を提供し

97
00:06:56,950 --> 00:07:01,021
このタイプは不正に対し
最大の保護を提供し

98
00:07:01,221 --> 00:07:06,894
ソースコードがコピーされても
長期の使用を防ぎます

99
00:07:07,794 --> 00:07:11,532
このアプローチではサーバーに
エンドポイントを提供し

100
00:07:11,632 --> 00:07:15,302
MapKit JSの要求に
応える必要があります

101
00:07:15,602 --> 00:07:18,672
ユーザーセッション中に
認証する際には

102
00:07:18,772 --> 00:07:21,909
このエンドポイントからの
再読込が必要です

103
00:07:23,310 --> 00:07:27,848
まずペイロードは Apple
Developer Program IDである―

104
00:07:27,981 --> 00:07:30,951
ISSクレームを
含む必要があります

105
00:07:31,385 --> 00:07:36,890
チームIDはApple Developerの
サイトのアカウントセクションに

106
00:07:37,658 --> 00:07:43,630
認証トークン発行時を
秒表示したIATクレーム

107
00:07:44,398 --> 00:07:50,370
そして認証トークン有効期限を
秒表示したEXPクレーム

108
00:07:50,971 --> 00:07:54,007
短期トークンの場合は
30分を推奨します

109
00:07:54,441 --> 00:07:56,844
最後に起源のクレームです

110
00:07:57,010 --> 00:08:02,382
元のヘッダ文字列を一致させて
ブラウザへのアクセスを制限します

111
00:07:57,010 --> 00:08:02,382
元のヘッダ文字列を一致させて
ブラウザへのアクセスを制限します

112
00:08:02,983 --> 00:08:04,518
オプションですが

113
00:08:04,618 --> 00:08:09,156
特に制作中は 全ての
認証トークンでの使用を勧めます

114
00:08:10,390 --> 00:08:15,295
次は 前にダウンロードした
認証キーファイルのコンテンツ

115
00:08:15,629 --> 00:08:19,800
余白 ヘッダ フッタを含む
このフルファイルは

116
00:08:19,900 --> 00:08:22,135
トークンへの署名に
使われます

117
00:08:22,269 --> 00:08:26,173
プログラミング言語固有の
指示については

118
00:08:26,273 --> 00:08:29,443
JWT署名ライブラリの
マニュアルをご覧ください

119
00:08:30,043 --> 00:08:34,481
最後に JWTトークンの
ヘッダセクションには

120
00:08:34,581 --> 00:08:39,119
MapKit JSキーIDである
KIDクレームが含まれます

121
00:08:39,486 --> 00:08:42,422
これはマップIDとは違います

122
00:08:43,222 --> 00:08:46,493
TYPクレームは
文字列JWTで

123
00:08:46,593 --> 00:08:50,430
JWTスタイルのトークンを
識別します

124
00:08:50,797 --> 00:08:55,102
ALGクレームは
ハッシングアルゴリズム

125
00:08:55,502 --> 00:08:58,605
これは ES256に
設定する必要があり

126
00:09:00,040 --> 00:09:03,544
JWT署名ライブラリに
パスされると

127
00:09:03,644 --> 00:09:08,382
MapKit JSが使用可能な
JWTトークンが出力されます

128
00:09:08,515 --> 00:09:12,619
短期トークンの有効期限が
セッション中に切れた時は

129
00:09:12,719 --> 00:09:18,492
サーバーはMapKit JSへの
エンドポイントの提供が必要です

130
00:09:18,826 --> 00:09:23,230
エンドポイント認識方法は
後ほど示すとして

131
00:09:23,330 --> 00:09:28,101
エクスプレスJSルートの
エンドポイント例をお見せします

132
00:09:28,502 --> 00:09:32,239
このルートは
呼び出されるたびに

133
00:09:32,339 --> 00:09:36,677
30分後に期限が切れる新しい
アクセストークンを返します

134
00:09:36,844 --> 00:09:41,248
トークンの期限にかかわらず
セッション中に認証が必要なら

135
00:09:41,348 --> 00:09:45,252
MapKit JSが この
エンドポイントを呼び出します

136
00:09:46,687 --> 00:09:50,657
呼び出されるたびに
新規トークンを返すため

137
00:09:50,757 --> 00:09:53,594
ブラウザのキャッシュを
止めましょう

138
00:09:53,760 --> 00:09:57,130
キャッシュコントロールヘッダで
設定できます

139
00:09:57,698 --> 00:10:03,337
サーバー上に このような
トークンのルートが現れます

140
00:09:57,698 --> 00:10:03,337
サーバー上に このような
トークンのルートが現れます

141
00:10:05,439 --> 00:10:09,543
一方 長期トークンは
有効期限がずっと長く

142
00:10:09,776 --> 00:10:14,181
多くの要求に対して
同じトークンが長期間使えます

143
00:10:14,348 --> 00:10:17,117
このタイプは
サーバーが不要です

144
00:10:17,217 --> 00:10:20,988
セッション中にトークンの
期限が切れにくいため―

145
00:10:21,922 --> 00:10:27,361
静的ウェブサイトや
開発環境で簡単に使用できます

146
00:10:27,895 --> 00:10:33,000
また有効期限や更新が
リリースサイクルと同期可能です

147
00:10:33,200 --> 00:10:37,437
起源のクレームの添付を
強く推奨します

148
00:10:37,604 --> 00:10:38,939
次の方法で

149
00:10:40,274 --> 00:10:44,912
この例では長期トークンの
有効期限を６か月に設定

150
00:10:45,245 --> 00:10:49,082
前に説明したように
ニーズに応じた調整が可能です

151
00:10:49,249 --> 00:10:52,753
チームのリリースサイクルが
２週間の場合は

152
00:10:52,853 --> 00:10:58,258
それに同期させるか
数週間の猶予を追加できます

153
00:10:59,526 --> 00:11:06,033
特に長期トークンの場合は
起源のクレームが推奨されます

154
00:10:59,526 --> 00:11:06,033
特に長期トークンの場合は
起源のクレームが推奨されます

155
00:11:06,133 --> 00:11:09,636
クレデンシャル悪用に対する
最大の防御です

156
00:11:11,171 --> 00:11:14,341
トークンが用意できたので
マップの作成を

157
00:11:15,475 --> 00:11:18,879
最も簡単なのは
HTMLページの作成です

158
00:11:19,112 --> 00:11:24,818
MapKit JSへリンクする
スクリプトタグを含めます

159
00:11:26,019 --> 00:11:31,124
トークンエンドポイントを
認識させると言いましたよね？

160
00:11:31,925 --> 00:11:37,130
初期化の際にコールバック関数を
指定する時に起こります

161
00:11:37,464 --> 00:11:43,770
短期トークンではセッション中に
新しいトークンをフェッチします

162
00:11:46,206 --> 00:11:50,277
MapKit JSが
コールバック関数を呼び出す時

163
00:11:50,377 --> 00:11:54,414
done関数を呼び出す
関数をパスします

164
00:11:55,048 --> 00:11:57,584
この関数を
新規トークンで呼び出し

165
00:11:57,684 --> 00:12:01,955
MapKit JSが認証プロセスを
進められるようにします

166
00:11:57,684 --> 00:12:01,955
MapKit JSが認証プロセスを
進められるようにします

167
00:12:03,223 --> 00:12:07,528
長期トークンでは
認証コールバック関数の本文で

168
00:12:07,661 --> 00:12:10,564
直ちにdone関数を
呼び出します

169
00:12:11,031 --> 00:12:14,034
MapKit JSは
同じ長期トークンを―

170
00:12:14,134 --> 00:12:17,738
認証を再読込する際に
使用します

171
00:12:19,473 --> 00:12:23,544
最後に マップコンテナと
マップの中心の設定です

172
00:12:25,779 --> 00:12:29,049
サーバーを起動して
実際に見てみましょう

173
00:12:31,051 --> 00:12:35,189
設定が正しければ
ブラウザにマップが表示されます

174
00:12:36,490 --> 00:12:39,893
ウェブインスペクタで
短期トークン使用なら

175
00:12:39,993 --> 00:12:43,630
サーバーのエンドポイントが
呼び出され

176
00:12:43,697 --> 00:12:45,999
認証トークンが返されます

177
00:12:46,767 --> 00:12:50,838
MapKit JSに認証が付与され
残りの作業へ

178
00:12:51,004 --> 00:12:56,143
MapKit JSは 随時ルートから
新規トークンを要求します

179
00:12:57,778 --> 00:13:01,281
以上がMapKit JSの
認証方法です

180
00:12:57,778 --> 00:13:01,281
以上がMapKit JSの
認証方法です

181
00:13:02,015 --> 00:13:04,618
MapKit JSキーの作成方法

182
00:13:05,252 --> 00:13:07,688
認証トークンの作成方法と

183
00:13:07,788 --> 00:13:12,526
新規トークンを用いた
マップの初期化を学びました

184
00:13:14,228 --> 00:13:18,899
MapKit JSキーを取得したら
安全な場所に保管しましょう

185
00:13:19,032 --> 00:13:22,269
認証トークンの送信は
ウェブ上だけにします

186
00:13:22,736 --> 00:13:27,341
不正使用された場合は
ウェブサイトを差し替えて

187
00:13:27,441 --> 00:13:31,278
キーは Apple Developerの
サイトで無効にします

188
00:13:32,746 --> 00:13:34,348
詳細の確認は―

189
00:13:34,481 --> 00:13:42,089
developer.apple.com/
wwdc18/508で

190
00:13:43,490 --> 00:13:46,326
MapKit JSを紹介する
セッションは

191
00:13:46,426 --> 00:13:50,264
エグゼクティブボールルーム
火曜日の午後５時です

192
00:13:50,797 --> 00:13:51,765
どうも