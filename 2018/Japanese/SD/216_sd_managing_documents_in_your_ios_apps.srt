
1
00:00:07,074 --> 00:00:16,717
(音楽)

2
00:00:20,187 --> 00:00:23,290
(拍手)

3
00:00:23,390 --> 00:00:25,392
こんにちは

4
00:00:25,492 --> 00:00:30,097
Managing Documents In Your iOS
Appsにようこそ

5
00:00:30,731 --> 00:00:35,002
ドキュメント管理チームの
ブランドンです

6
00:00:35,269 --> 00:00:39,173
同僚のトマとロニーも
後に登壇します

7
00:00:40,741 --> 00:00:44,978
iOSでのドキュメント管理の
概要を説明した後

8
00:00:45,078 --> 00:00:47,581
新機能を説明します

9
00:00:48,282 --> 00:00:54,521
Document Management APIの
使い方をトマが説明し

10
00:00:54,888 --> 00:01:01,094
最後に Appを向上させるコツを
ロニーが解説します

11
00:00:54,888 --> 00:01:01,094
最後に Appを向上させるコツを
ロニーが解説します

12
00:01:03,230 --> 00:01:07,334
iOSでのドキュメント管理は―

13
00:01:08,368 --> 00:01:10,304
複数の技術の集合体です

14
00:01:10,404 --> 00:01:13,340
Appデベロッパ用のAPIや

15
00:01:13,874 --> 00:01:16,844
クラウドベンダ用の
File Provider API

16
00:01:17,244 --> 00:01:19,112
ファイルAppもあります

17
00:01:20,981 --> 00:01:22,115
iOS 11では

18
00:01:22,216 --> 00:01:24,885
UIDocumentBrowserViewController
を発表しました

19
00:01:24,985 --> 00:01:28,889
UIDocumentPickerViewController
も大幅に改善されています

20
00:01:30,057 --> 00:01:34,394
これらのコントローラは
クラウドベンダの

21
00:01:34,494 --> 00:01:37,998
ファイルの管理とブラウズを
可能にします

22
00:01:38,298 --> 00:01:42,336
クラウドベンダ全体の
検索も可能です

23
00:01:43,170 --> 00:01:45,506
フォルダをお気に入りにすると

24
00:01:45,606 --> 00:01:48,208
サイドバーに表示されます

25
00:01:48,542 --> 00:01:52,412
またファイルをタグ付けし
整理できます

26
00:01:53,046 --> 00:01:56,917
使用したファイルは
最近使った項目に表示されます

27
00:02:00,087 --> 00:02:03,524
UIDocumentBrowser
ViewControllerにより

28
00:02:03,624 --> 00:02:09,395
ユーザはファイルAppと同じ
エクスペリエンスが得られます

29
00:02:09,663 --> 00:02:13,000
文書ブラウザの提供は
不要となります

30
00:02:14,301 --> 00:02:18,071
その分 表示や編集での

31
00:02:18,405 --> 00:02:20,941
エクスペリエンス向上に
集中できます

32
00:02:21,608 --> 00:02:23,110
まずは昨年のセッション

33
00:02:23,210 --> 00:02:27,447
Building Great Document-based 
Apps in iOSをご覧ください

34
00:02:29,783 --> 00:02:32,419
クラウドベンダ用APIも
あります

35
00:02:33,654 --> 00:02:35,856
File Provider APIです

36
00:02:36,290 --> 00:02:38,725
File Provider Extensionや

37
00:02:38,826 --> 00:02:43,697
サインインなどのUIアクションを
書くために使用されます

38
00:02:45,899 --> 00:02:50,771
ユーザによるファイルアクセスには
必要ありません

39
00:02:53,240 --> 00:02:55,642
File Provider Extensionを
書く場合に

40
00:02:55,742 --> 00:02:59,246
UIDocumentBrowserViewController
に表示されます

41
00:02:59,346 --> 00:03:02,182
Locationsの下ですね

42
00:02:59,346 --> 00:03:02,182
Locationsの下ですね

43
00:03:03,851 --> 00:03:05,118
またサインインには

44
00:03:05,485 --> 00:03:09,957
FPUIActionExtensionView
Controllerが使用されています

45
00:03:10,257 --> 00:03:11,258
これにより―

46
00:03:11,358 --> 00:03:15,696
ユーザは より簡単に
サービスにログインできます

47
00:03:15,996 --> 00:03:17,865
例を見てみましょう

48
00:03:20,100 --> 00:03:22,069
サインインの例です

49
00:03:22,803 --> 00:03:28,175
ユーザはワークフローを
中断せずにサインインできます

50
00:03:28,275 --> 00:03:32,579
Appから出ることなく
作業を続けられるのです

51
00:03:34,047 --> 00:03:37,784
避けるべき例も
お見せしましょう

52
00:03:38,018 --> 00:03:40,554
UI要素の重複です

53
00:03:40,654 --> 00:03:43,957
取り消しボタンが
２つありますよね

54
00:03:45,025 --> 00:03:46,927
他の例も見てみましょう

55
00:03:47,494 --> 00:03:49,329
Appを立ち上げるだけの

56
00:03:49,429 --> 00:03:52,533
サインインボタンも
避けるべきです

57
00:03:52,966 --> 00:03:56,870
ユーザのワークフローを
妨げてしまいます

58
00:03:58,772 --> 00:04:01,909
昨年 これらは多くの
デベロッパや

59
00:03:58,772 --> 00:04:01,909
昨年 これらは多くの
デベロッパや

60
00:04:02,009 --> 00:04:04,811
クラウドベンダに
採用されました

61
00:04:05,112 --> 00:04:08,148
多くのAppにも
使用されています

62
00:04:08,615 --> 00:04:10,517
未使用の方はぜひ

63
00:04:10,617 --> 00:04:14,021
UIDocumentBrowserViewController
を試してください

64
00:04:14,321 --> 00:04:19,827
File Provider Extensionを
未提供の方もお試しください

65
00:04:20,861 --> 00:04:22,663
次は新機能についてです

66
00:04:24,598 --> 00:04:26,300
クラウドベンダが―

67
00:04:26,400 --> 00:04:31,071
File Provider Extensionの
作成に苦労している

68
00:04:31,338 --> 00:04:34,241
そう聞いて
新ツールを開発しました

69
00:04:34,341 --> 00:04:37,144
File Provider-Validationです

70
00:04:37,644 --> 00:04:40,914
これはテストの実行を
サポートし

71
00:04:41,014 --> 00:04:45,152
問題の表示と
修正の手助けをするツールです

72
00:04:45,385 --> 00:04:48,555
デベロッパWebサイトで
ダウンロードできます

73
00:04:48,922 --> 00:04:52,159
ツールには次のものが
含まれています

74
00:04:52,593 --> 00:04:57,464
File Provider Extension用の
ソースファイルと

75
00:04:57,664 --> 00:05:01,668
iPad用のiOSアプリケーションです

76
00:04:57,664 --> 00:05:01,668
iPad用のiOSアプリケーションです

77
00:05:02,936 --> 00:05:08,742
プロジェクトを修正し そのAppを
iPadにインストールすると

78
00:05:08,842 --> 00:05:11,111
このような画面になります

79
00:05:11,745 --> 00:05:14,848
“File Provider...”が左側に
表示されます

80
00:05:14,948 --> 00:05:17,484
それをタップし
実行ボタンを押すと

81
00:05:17,584 --> 00:05:21,455
File Provider Extensionの
テストが実行されます

82
00:05:22,155 --> 00:05:25,726
そして成功と失敗が
リスト化されます

83
00:05:25,926 --> 00:05:30,731
失敗をタップし
コードを修正しましょう

84
00:05:31,131 --> 00:05:35,102
これは木曜と金曜の
ラボでサポートします

85
00:05:38,405 --> 00:05:43,010
なお 今年発表された
Siriのショートカットにも

86
00:05:43,110 --> 00:05:47,681
File Provider Extensionが
対応します

87
00:05:48,248 --> 00:05:53,253
これは 最近開いたか
作成したドキュメントを

88
00:05:53,887 --> 00:05:58,258
検索またはロック画面に
表示します

89
00:05:59,426 --> 00:06:02,496
またユーザはデバイス間で
同期された―

90
00:05:59,426 --> 00:06:02,496
またユーザはデバイス間で
同期された―

91
00:06:02,729 --> 00:06:05,365
ショートカットを作成できます

92
00:06:05,532 --> 00:06:08,035
同期している点が重要です

93
00:06:08,569 --> 00:06:11,171
これを実現するには―

94
00:06:11,271 --> 00:06:15,609
File Providerは
デバイス間にわたる各ファイルに

95
00:06:15,709 --> 00:06:18,979
固有の識別子を
使用する必要があります

96
00:06:19,913 --> 00:06:22,216
このためには

97
00:06:22,316 --> 00:06:25,986
File Provider Extensionで
Siriショートカットを有効にします

98
00:06:26,086 --> 00:06:31,525
NSFileProviderUsesUniqueItem
IdentifiersAcrossDevicesを

99
00:06:31,625 --> 00:06:34,761
File Provider Extensionの
Info.plistファイルに追加します

100
00:06:35,028 --> 00:06:38,198
あとはApple Storeに
提出するだけです

101
00:06:39,299 --> 00:06:42,102
デベロッパは何も
しなくていいのです

102
00:06:42,603 --> 00:06:44,872
Siriのショートカットの詳細は

103
00:06:45,038 --> 00:06:48,308
Introduction to Siri
Shortcutsをご覧ください

104
00:06:50,477 --> 00:06:51,712
今年は―

105
00:06:53,614 --> 00:06:56,783
Particles見本Appを
リリースします

106
00:06:57,117 --> 00:07:02,322
UIDocumentBrowserViewController
のデモに使用したコードです

107
00:06:57,117 --> 00:07:02,322
UIDocumentBrowserViewController
のデモに使用したコードです

108
00:07:02,890 --> 00:07:04,191
これですね

109
00:07:04,958 --> 00:07:09,930
UIDocumentBrowserViewController
が主なView Controllerで―

110
00:07:11,031 --> 00:07:13,200
ファイルのフォーマットを
定義します

111
00:07:15,269 --> 00:07:17,371
そして状態復旧を実行し

112
00:07:18,505 --> 00:07:22,342
UIDocumentPickerViewController
でアセットをインポートします

113
00:07:23,310 --> 00:07:25,112
今日からダウンロード可能です

114
00:07:25,212 --> 00:07:29,550
WWDCのAppにリンクがあります

115
00:07:30,684 --> 00:07:32,186
Particlesについては以上です

116
00:07:33,287 --> 00:07:36,890
ここからはトマがご説明します

117
00:07:37,958 --> 00:07:41,862
(拍手)

118
00:07:41,962 --> 00:07:43,096
こんにちは

119
00:07:43,197 --> 00:07:46,233
ソフトウェアエンジニアのトマです

120
00:07:46,433 --> 00:07:49,303
iOSのドキュメント管理機能を

121
00:07:49,403 --> 00:07:53,740
App内で活用する方法を
説明します

122
00:07:54,842 --> 00:08:00,414
まず ドキュメントピッカーと
文書ブラウザの説明と

123
00:07:54,842 --> 00:08:00,414
まず ドキュメントピッカーと
文書ブラウザの説明と

124
00:08:00,781 --> 00:08:02,916
使い方を解説します

125
00:08:03,483 --> 00:08:08,222
その後 Particles Appに
ドキュメントピッカーを追加

126
00:08:09,256 --> 00:08:12,259
最後にドキュメントタイプと

127
00:08:12,359 --> 00:08:14,995
Xcodeでの設定を説明します

128
00:08:17,197 --> 00:08:21,468
ドキュメントとの相互作用が
意味するものは？

129
00:08:22,402 --> 00:08:26,173
ユーザにUIを提供し

130
00:08:26,273 --> 00:08:29,643
ドキュメント管理を
可能にすることです

131
00:08:29,910 --> 00:08:32,779
Appコンテナ内の
ドキュメントが対象です

132
00:08:33,947 --> 00:08:37,384
最近それらの多くは
クラウド上にあります

133
00:08:37,650 --> 00:08:41,587
故にユーザはクラウド上の
ドキュメントへの

134
00:08:41,822 --> 00:08:43,756
アクセスが必要です

135
00:08:45,058 --> 00:08:46,260
これを実現する―

136
00:08:47,427 --> 00:08:50,497
２つの方法があります

137
00:08:51,231 --> 00:08:52,566
ドキュメントピッカーと

138
00:08:52,699 --> 00:08:54,168
文書ブラウザです

139
00:08:55,135 --> 00:08:57,604
この２つの違いは何でしょう？

140
00:08:59,506 --> 00:09:05,212
いずれも iOSデバイスまたは
クラウド上にあるファイルの

141
00:08:59,506 --> 00:09:05,212
いずれも iOSデバイスまたは
クラウド上にあるファイルの

142
00:09:05,312 --> 00:09:07,281
ブラウズが可能です

143
00:09:08,282 --> 00:09:11,385
別のAppからのアクセスも
可能です

144
00:09:13,754 --> 00:09:16,390
しかし それぞれ用途が違います

145
00:09:17,591 --> 00:09:21,929
ドキュメントピッカーは
ファイルにアクセスするため

146
00:09:22,362 --> 00:09:26,867
ユーザが一時的に
使用するものです

147
00:09:28,702 --> 00:09:30,737
一方 文書ブラウザは

148
00:09:31,505 --> 00:09:35,542
Appの主な文書ブラウズUIです

149
00:09:38,879 --> 00:09:41,882
文書ブラウザから説明しましょう

150
00:09:45,152 --> 00:09:46,553
文書ブラウザは

151
00:09:46,787 --> 00:09:51,191
UIのAppを起動すると
表示されるものです

152
00:09:52,292 --> 00:09:54,361
ドキュメントベースのAppは

153
00:09:54,595 --> 00:09:59,032
文書ブラウザを使って
表示するといいでしょう

154
00:10:00,200 --> 00:10:02,002
その場合―

155
00:10:02,603 --> 00:10:06,073
Appを起動すると
このように表示されます

156
00:10:07,174 --> 00:10:11,378
ユーザはすぐにファイルを
使えるわけです

157
00:10:13,380 --> 00:10:15,782
文書ブラウザは
フルスクリーン表示です

158
00:10:16,250 --> 00:10:21,455
Appが扱うドキュメントを
開いたり管理できます

159
00:10:25,292 --> 00:10:28,795
ファイルAppと同様の
機能があります

160
00:10:29,530 --> 00:10:33,233
検索 タグ お気に入り
最近使った項目など

161
00:10:33,333 --> 00:10:37,471
編集済みの機能が
すべて無料です

162
00:10:40,908 --> 00:10:42,576
カスタマイズも可能です

163
00:10:43,076 --> 00:10:48,182
右上のボタンのように
独自のボタンに変更したり

164
00:10:48,715 --> 00:10:51,818
Appの見た目に
合わせることもできます

165
00:10:52,186 --> 00:10:55,656
NumbersとKeynoteは
見た目が異なりますが

166
00:10:55,789 --> 00:10:58,959
いずれもDocumentView
BrowserControllerがベースです

167
00:11:00,794 --> 00:11:04,231
ユーザがドキュメントを
開きます

168
00:11:04,565 --> 00:11:09,169
すると独自のUIが
ブラウザ上に展開され

169
00:11:09,336 --> 00:11:11,905
ドキュメントUIを表示できます

170
00:11:12,139 --> 00:11:16,276
文書ブラウザは
Appの開始点なので

171
00:11:16,410 --> 00:11:19,546
ルートView Controllerに
設定するといいでしょう

172
00:11:20,714 --> 00:11:24,117
しかし昨年のフィードバックで

173
00:11:24,484 --> 00:11:27,955
ルートView Controllerの作成が
難しいと聞きました

174
00:11:29,156 --> 00:11:33,527
そこで昨年のガイドラインの
補足説明をします

175
00:11:34,695 --> 00:11:38,765
文書ブラウザはフルスクリーンで
モーダル表示できます

176
00:11:40,467 --> 00:11:42,369
起動後すぐにです

177
00:11:43,704 --> 00:11:47,708
とはいえ 文書ブラウザは
Appの開始点です

178
00:11:48,342 --> 00:11:53,313
まずドキュメントが
表示されるべきでしょう

179
00:11:55,849 --> 00:12:01,722
従って ブラウザ外に出られる
仕様は推奨しません

180
00:11:55,849 --> 00:12:01,722
従って ブラウザ外に出られる
仕様は推奨しません

181
00:12:03,023 --> 00:12:05,726
ブラウザを隠したいのであれば

182
00:12:06,260 --> 00:12:11,431
後にお話しする
ドキュメントピッカーがお勧めです

183
00:12:14,001 --> 00:12:17,538
新しいDocumentViewBrowser
Controllerの始め方は？

184
00:12:18,505 --> 00:12:20,474
Xcodeで新たなAppを作ると

185
00:12:20,807 --> 00:12:23,443
Appテンプレートが使用できます

186
00:12:24,344 --> 00:12:28,448
DocumentViewBrowserController
ベースとなるわけです

187
00:12:29,316 --> 00:12:30,851
既存のAppに

188
00:12:30,951 --> 00:12:35,122
DocumentViewBrowserControllerを
追加することもできます

189
00:12:35,856 --> 00:12:38,525
文書ブラウザをStoryboardに
ドラッグし

190
00:12:38,859 --> 00:12:43,063
Is Initial View Controllerを
チェックします

191
00:12:47,501 --> 00:12:51,271
DocumentViewBrowserControllerで
カスタマイズできます

192
00:12:52,139 --> 00:12:55,776
独自のボタンを
バーやメニューに追加したり

193
00:12:57,044 --> 00:13:01,415
色やテーマを設定して
Appに合わせられます

194
00:12:57,044 --> 00:13:01,415
色やテーマを設定して
Appに合わせられます

195
00:13:04,751 --> 00:13:09,022
ドキュメントを開く
アニメーションも変更できるため

196
00:13:09,122 --> 00:13:14,795
サムネールから編集UIに
ズームすることも可能です

197
00:13:14,928 --> 00:13:19,700
詳細は昨年のセッションを
ご覧ください

198
00:13:22,269 --> 00:13:23,871
ブランドンが触れたとおり

199
00:13:24,538 --> 00:13:30,043
そのセッションに基づいた
サンプルコードも提供しています

200
00:13:32,980 --> 00:13:37,684
さて ドキュメントピッカーは
また違うものです

201
00:13:39,353 --> 00:13:43,757
クラウド上や他のAppにある
ドキュメントや

202
00:13:43,857 --> 00:13:45,726
アセットを開くものです

203
00:13:46,026 --> 00:13:50,564
しかしファイルを選択すると
消えていきます

204
00:13:51,465 --> 00:13:54,601
これはメールで使われています

205
00:13:55,669 --> 00:13:58,772
メールにファイルを添付するには

206
00:13:59,006 --> 00:14:01,675
“添付ファイルを追加”ボタンを
押します

207
00:13:59,006 --> 00:14:01,675
“添付ファイルを追加”ボタンを
押します

208
00:14:02,176 --> 00:14:06,380
このシートが
ドキュメントピッカーです

209
00:14:06,947 --> 00:14:11,618
添付するファイルを選択すると
シートは消えます

210
00:14:13,287 --> 00:14:15,522
iWorkでも同様です

211
00:14:15,856 --> 00:14:20,961
Pagesのドキュメントに
PDFを挿入する場合

212
00:14:21,962 --> 00:14:26,567
“挿入元”ボタンを押して
ファイルを選択すると

213
00:14:27,000 --> 00:14:28,869
シートは消えます

214
00:14:29,770 --> 00:14:33,941
ユーザがクラウド上にある
ファイルを開けるように

215
00:14:34,775 --> 00:14:37,077
UIを表示したいとします

216
00:14:37,544 --> 00:14:43,217
そしてファイル選択後に隠すなら
ドキュメントピッカーが最適です

217
00:14:45,519 --> 00:14:49,089
ドキュメントピッカーが
必要な理由は？

218
00:14:49,990 --> 00:14:55,028
ファイルが複数の場所に
あるかもしれないからです

219
00:14:55,162 --> 00:14:58,599
クラウド上や他の
Appコンテナ内ですね

220
00:14:59,133 --> 00:15:02,703
デフォルトでは
アクセスできません

221
00:14:59,133 --> 00:15:02,703
デフォルトでは
アクセスできません

222
00:15:03,704 --> 00:15:05,138
故に場所と場所の間で

223
00:15:05,439 --> 00:15:11,111
ドキュメントへのアクセスや
コピー･移動の手段が必要です

224
00:15:11,879 --> 00:15:14,548
ドキュメントピッカーが
それを可能にします

225
00:15:17,518 --> 00:15:20,354
ファイルを選択すると消えるので

226
00:15:20,454 --> 00:15:26,727
画面に長く表示させたい場合は
文書ブラウザを推奨します

227
00:15:31,298 --> 00:15:35,903
ドキュメントピッカーには
様々な用途があります

228
00:15:36,270 --> 00:15:39,807
クラウド上にあるファイルに
直接アクセスできます

229
00:15:42,743 --> 00:15:46,813
また作成したコピーを使い―

230
00:15:48,415 --> 00:15:53,287
クラウド上に移動して
安全に保管することも可能です

231
00:15:54,822 --> 00:15:58,058
ファイルのコピーは
混乱するものです

232
00:15:58,358 --> 00:16:01,128
しかし どうしても必要な場合は

233
00:15:58,358 --> 00:16:01,128
しかし どうしても必要な場合は

234
00:16:01,228 --> 00:16:05,132
クラウド上からのコピーや
その逆にも使用できます

235
00:16:09,603 --> 00:16:11,839
クラウド上の映画に

236
00:16:11,939 --> 00:16:16,009
ユーザがアクセスできるように
したいとします

237
00:16:16,410 --> 00:16:19,079
DocumentPickerViewControllerが
最適です

238
00:16:20,013 --> 00:16:22,449
DocumentPickerViewControllerを
作成し

239
00:16:22,683 --> 00:16:27,754
ユーザが最初に選択する
ファイルのタイプを指定します

240
00:16:28,288 --> 00:16:32,292
２番目のドキュメントは
定数を指定します

241
00:16:34,261 --> 00:16:37,197
そして デリゲートを設定

242
00:16:37,297 --> 00:16:43,470
これでユーザがファイルを
選択した時に通知が来ます

243
00:16:44,371 --> 00:16:45,572
そしてpresentとします

244
00:16:47,207 --> 00:16:49,042
ファイルの選択後は

245
00:16:49,143 --> 00:16:52,479
このデリゲートメソッドに
コールバックされます

246
00:16:54,081 --> 00:16:58,919
これでファイルを直接
使用できるようになります

247
00:16:59,887 --> 00:17:03,490
１つではなく多くのURLが
ありますよね

248
00:16:59,887 --> 00:17:03,490
１つではなく多くのURLが
ありますよね

249
00:17:03,590 --> 00:17:06,792
複数のファイル選択が
可能になるプロパティが

250
00:17:06,993 --> 00:17:10,864
ドキュメントピッカーに
あるからです

251
00:17:15,269 --> 00:17:17,838
ではドキュメントピッカーを

252
00:17:18,839 --> 00:17:22,843
デモ用Appの
Particlesに追加します

253
00:17:26,646 --> 00:17:28,749
これは昨年使ったAppです

254
00:17:28,849 --> 00:17:32,819
文書ブラウザにより
ファイルが選択できます

255
00:17:33,587 --> 00:17:39,560
ご覧のように 最近使った項目や
タグ 検索などがあります

256
00:17:39,660 --> 00:17:41,461
すべて無料です

257
00:17:42,396 --> 00:17:45,799
こうしてファイルを開き

258
00:17:46,767 --> 00:17:49,870
パーティクルシステムを
調整できます

259
00:17:51,839 --> 00:17:54,074
人気のAppですが

260
00:17:54,341 --> 00:17:58,479
見た目を良くしたいという
要望が寄せられました

261
00:18:00,013 --> 00:18:05,018
それを受けて新たに作られた
デザインイメージが

262
00:18:05,185 --> 00:18:08,789
iCloud上で共有されました

263
00:18:09,256 --> 00:18:12,759
これらをカスタマイズ
してみましょう

264
00:18:13,327 --> 00:18:18,432
ナビゲーションバーに
“イメージを選択”ボタンを追加し

265
00:18:19,233 --> 00:18:23,737
iCloudからファイルを選択して
パーティクルをカスタマイズします

266
00:18:25,405 --> 00:18:27,441
Storyboardを開くと

267
00:18:28,041 --> 00:18:30,244
Editor View Controllerが
立ち上がります

268
00:18:30,711 --> 00:18:35,616
エディタに新たなバーボタンを
ドラッグして追加します

269
00:18:40,821 --> 00:18:45,893
“イメージを選択”と
名付けます

270
00:18:51,165 --> 00:18:51,865
おっと…

271
00:18:53,867 --> 00:18:55,068
“イメージを選択”

272
00:18:56,437 --> 00:19:00,908
ドキュメントピッカーの
コントローラに表示させます

273
00:18:56,437 --> 00:19:00,908
ドキュメントピッカーの
コントローラに表示させます

274
00:19:01,041 --> 00:19:03,710
そのために アクションを

275
00:19:04,478 --> 00:19:09,216
ボタンからソースコードに
ドラッグします

276
00:19:09,516 --> 00:19:12,419
“イメージを選択”と
名付けます

277
00:19:12,553 --> 00:19:15,322
送信者はバーボタン項目です

278
00:19:16,290 --> 00:19:17,858
コードが倍になりました

279
00:19:18,258 --> 00:19:22,763
コードを大きなウィンドウに
映しますね

280
00:19:25,966 --> 00:19:28,802
chooseImageメソッドの部分です

281
00:19:29,469 --> 00:19:32,906
まずDocumentPickerViewController
を作成します

282
00:19:33,173 --> 00:19:36,243
ユーザが選択するファイルタイプを
指定しましょう

283
00:19:36,343 --> 00:19:40,781
UTTypeImageとモードです

284
00:19:40,881 --> 00:19:45,919
パーティクルの画像を埋め込むため
.importとしていますが

285
00:19:46,153 --> 00:19:49,623
多くの場合は.openを
使うと思います

286
00:19:51,758 --> 00:19:53,927
デリゲートを設定し

287
00:19:54,995 --> 00:19:56,430
presentとします

288
00:19:57,297 --> 00:20:00,801
ドキュメントピッカーが
呼び出され

289
00:19:57,297 --> 00:20:00,801
ドキュメントピッカーが
呼び出され

290
00:20:01,835 --> 00:20:04,605
ファイルが選択されると
コールバックされます

291
00:20:04,705 --> 00:20:07,508
そのため 次のメソッドを入れます

292
00:20:08,008 --> 00:20:10,811
“documentPicker...didPick
DocumentsAt”ですね

293
00:20:11,478 --> 00:20:14,248
ドキュメントを選択する
プロパティが

294
00:20:14,348 --> 00:20:16,750
まだ設定されていません

295
00:20:17,584 --> 00:20:22,156
URLが１つしかないことを
確認します

296
00:20:24,525 --> 00:20:28,729
そのURLを取得して
イメージを作成し

297
00:20:29,196 --> 00:20:32,599
SceneKit内の
パーティクルシステムに設定します

298
00:20:34,334 --> 00:20:35,869
では実行します

299
00:20:38,071 --> 00:20:42,042
間もなくシミュレータが
開くでしょう

300
00:20:47,948 --> 00:20:51,418
シミュレータで
ファイルを開けると

301
00:20:51,518 --> 00:20:58,592
“イメージを選択”ボタンから
ドキュメントピッカーにいけます

302
00:20:59,259 --> 00:21:02,196
ファイルAppの画像が
全部あります

303
00:20:59,259 --> 00:21:02,196
ファイルAppの画像が
全部あります

304
00:21:02,296 --> 00:21:05,265
ファイルの検索やタグ付け
ブラウズが可能です

305
00:21:05,732 --> 00:21:08,035
すべての機能が無料です

306
00:21:09,236 --> 00:21:15,042
“最近使った項目”に
iCloud上のイメージがあります

307
00:21:15,409 --> 00:21:18,479
ここで星のイメージを
選択すると―

308
00:21:19,146 --> 00:21:22,115
パーティクルが星に変わります

309
00:21:22,849 --> 00:21:26,253
(拍手)

310
00:21:29,323 --> 00:21:30,490
簡単でしたね

311
00:21:30,591 --> 00:21:32,426
実際の作業でもすぐに

312
00:21:32,526 --> 00:21:37,064
ドキュメントピッカーを
Appに追加できます

313
00:21:37,898 --> 00:21:43,036
他社製のライブラリに依存しない
短いコードです

314
00:21:43,470 --> 00:21:48,275
ファイルの場所に関わらず
アクセス可能になります

315
00:21:49,843 --> 00:21:53,981
先ほどファイルタイプについて
話しましたが

316
00:21:54,081 --> 00:21:56,984
何だか分からない人も
多いでしょう

317
00:21:57,217 --> 00:21:59,686
では 説明します

318
00:22:02,089 --> 00:22:07,828
ドキュメントタイプはシステムに
処理可能なファイルを知らせます

319
00:22:09,630 --> 00:22:13,901
ファイルAppで
ファイルが選択された際に

320
00:22:15,002 --> 00:22:18,172
iOSでAppを起動させるわけです

321
00:22:19,006 --> 00:22:22,776
また共有シートにAppを表示します

322
00:22:24,044 --> 00:22:28,282
そしてiOSが適切なアイコンを
選択するようにします

323
00:22:29,483 --> 00:22:33,687
タイプを適切に設定し
サムネールExtensionを書けば

324
00:22:33,821 --> 00:22:37,090
ファイルApp内に
表示されるはずです

325
00:22:37,791 --> 00:22:38,826
間違えると―

326
00:22:39,893 --> 00:22:42,863
このように表示されてしまいます

327
00:22:42,963 --> 00:22:46,266
ファイルも開けなくなります

328
00:22:47,167 --> 00:22:49,436
では設定してみましょう

329
00:22:51,572 --> 00:22:55,342
ドキュメントタイプの設定は
２段階あります

330
00:22:55,843 --> 00:22:59,880
iOSが宣言していなければ
タイプを宣言し

331
00:23:00,280 --> 00:23:06,887
ファイルの閲覧や編集ができるよう
iOSに要求します

332
00:23:08,489 --> 00:23:10,624
では始めましょう

333
00:23:11,825 --> 00:23:16,029
まずタイプの宣言が
必要かどうかを見極めます

334
00:23:16,430 --> 00:23:20,968
一般的なファイルタイプを
扱うことが多いからです

335
00:23:21,068 --> 00:23:25,205
動画 画像 PDF
プレゼンテーションなどですね

336
00:23:25,839 --> 00:23:30,744
その場合 既にiOSが
宣言をしているはずです

337
00:23:31,411 --> 00:23:33,347
それを確認するには

338
00:23:34,047 --> 00:23:37,718
このURLにある一覧表を
ご覧ください

339
00:23:40,754 --> 00:23:45,025
この一覧表にあれば
もう宣言済みなので

340
00:23:45,125 --> 00:23:47,761
タイプの要求に移ります

341
00:23:50,697 --> 00:23:52,666
他のよくあるケースは

342
00:23:52,766 --> 00:23:56,970
独自のファイルフォーマットの
場合です

343
00:23:57,738 --> 00:24:01,842
独自のフォーマットなので
定義が必要です

344
00:23:57,738 --> 00:24:01,842
独自のフォーマットなので
定義が必要です

345
00:24:02,409 --> 00:24:05,312
この場合はタイプを
exportedと宣言します

346
00:24:05,479 --> 00:24:10,017
これで権限はあなたにあると
iOSに通知されました

347
00:24:12,386 --> 00:24:17,791
これはParticles Appでの
ケースですね

348
00:24:19,159 --> 00:24:22,296
パーティクルファイルは
独自のフォーマットです

349
00:24:23,797 --> 00:24:26,733
そこでXcodeで
タイプを設定します

350
00:24:29,436 --> 00:24:35,309
エクスポートされたUI内で
Info.plistが編集できるので

351
00:24:35,542 --> 00:24:38,212
タイプ識別子を指定します

352
00:24:38,312 --> 00:24:41,115
私が選択した文字列を
使います

353
00:24:41,448 --> 00:24:45,385
com.example.apple-samplecode.
Particles.Particlesです

354
00:24:46,920 --> 00:24:49,423
そして親タイプのリストを

355
00:24:49,790 --> 00:24:53,460
Conforms Toフィールドに
宣言します

356
00:24:54,294 --> 00:24:56,029
親タイプとは？

357
00:24:58,398 --> 00:25:03,270
タイプは関数ツリーを形成します

358
00:24:58,398 --> 00:25:03,270
タイプは関数ツリーを形成します

359
00:25:03,804 --> 00:25:09,943
Swiftなど オブジェクト指向言語の
継承ツリーと似ています

360
00:25:10,444 --> 00:25:11,478
例えば―

361
00:25:12,012 --> 00:25:17,851
JPEG及びHEIFは
いずれも画像です

362
00:25:18,519 --> 00:25:22,923
ユーザが作成または
見られる.imageファイルは

363
00:25:23,023 --> 00:25:25,425
ルートタイプに従います

364
00:25:25,893 --> 00:25:28,328
public.contentのことですね

365
00:25:29,730 --> 00:25:34,501
これにはpublic.spreadsheetなど
他の子ファイルもあります

366
00:25:36,203 --> 00:25:41,241
タイプの一覧は前述の
ドキュメントをご覧ください

367
00:25:42,476 --> 00:25:46,079
このツリーに
Particlesタイプを追加します

368
00:25:47,314 --> 00:25:51,118
パーティクルシステムは
一般的なファイルではなく

369
00:25:51,518 --> 00:25:53,854
カテゴリがありません

370
00:25:54,021 --> 00:25:57,724
故にpublic.contentの
直下には置けません

371
00:25:58,759 --> 00:26:02,296
public.contentか
public.spreadsheetや.imageに

372
00:25:58,759 --> 00:26:02,296
public.contentか
public.spreadsheetや.imageに

373
00:26:02,396 --> 00:26:05,799
直接または間接的に
従う必要があります

374
00:26:06,066 --> 00:26:09,903
最近使った項目や
検索に表示させるためです

375
00:26:12,372 --> 00:26:15,809
物理ツリーという
別の方式もあります

376
00:26:15,943 --> 00:26:19,746
ファイルの表示方法を
iOSに知らせるものです

377
00:26:20,314 --> 00:26:24,284
２つの選択肢のみと
より単純な作りです

378
00:26:25,285 --> 00:26:26,653
多くの場合

379
00:26:27,054 --> 00:26:31,892
ドキュメント用として
１つのファイルを使います

380
00:26:33,660 --> 00:26:37,097
複数のリソースをまとめたい場合

381
00:26:37,631 --> 00:26:42,269
ファイルパッケージがあれば
com.apple.packageを使います

382
00:26:42,369 --> 00:26:45,606
ファイルが１つなら
public.dataです

383
00:26:47,875 --> 00:26:52,513
Particlesなので
public.dataに従います

384
00:26:54,815 --> 00:26:56,150
ツリーなので

385
00:26:56,250 --> 00:27:02,222
.dataと.packageはいずれも
ルートタイプに従います

386
00:26:56,250 --> 00:27:02,222
.dataと.packageはいずれも
ルートタイプに従います

387
00:27:02,589 --> 00:27:04,691
public.itemですね

388
00:27:04,825 --> 00:27:09,062
それは考える必要がないので
.dataか.packageを選びます

389
00:27:10,931 --> 00:27:14,935
親はpublic.dataとpublic.content
の２つになりました

390
00:27:15,502 --> 00:27:18,438
では Xcode UIで

391
00:27:18,539 --> 00:27:22,109
その２つに従うよう
設定しましょう

392
00:27:23,610 --> 00:27:25,245
最後に―

393
00:27:25,812 --> 00:27:30,450
タイプとひもづいた
ExtensionをiOSに通知します

394
00:27:32,953 --> 00:27:38,125
これで.particlesファイルが
今定義したタイプだと認識されます

395
00:27:39,326 --> 00:27:42,663
このため UTTypeTagSpecification
プロパティを

396
00:27:43,297 --> 00:27:46,099
エクスポートされた
UTIプロパティに追加します

397
00:27:48,035 --> 00:27:52,606
public.filename-extensionを
このディクショナリに追加します

398
00:27:52,806 --> 00:27:57,177
これはタイプにひもづけたい一連の
ファイルExtensionです

399
00:27:58,979 --> 00:28:02,416
新たな項目 Particlesが
出来ました

400
00:27:58,979 --> 00:28:02,416
新たな項目 Particlesが
出来ました

401
00:28:04,251 --> 00:28:07,621
これで宣言は完了です

402
00:28:09,089 --> 00:28:12,226
もう１つ
付け加えることがあります

403
00:28:13,527 --> 00:28:19,366
独自のタイプを宣言しつつ
別のAppが定義したタイプを

404
00:28:19,666 --> 00:28:23,237
使いたいこともあるでしょう

405
00:28:24,805 --> 00:28:27,708
Appが未インストールの
場合に備え

406
00:28:28,108 --> 00:28:31,945
当該のタイプも宣言する
必要があります

407
00:28:32,846 --> 00:28:35,816
これはインポートされた
タイプの宣言です

408
00:28:38,385 --> 00:28:44,124
故に その定義がどこかに
別途存在していると

409
00:28:44,224 --> 00:28:46,660
iOSはそちらを優先します

410
00:28:47,361 --> 00:28:49,029
iOSが宣言していない―

411
00:28:49,129 --> 00:28:53,834
一般的なファイルタイプを
使うにはこうです

412
00:28:54,434 --> 00:28:59,606
前述のUIと同様なので
安心してください

413
00:29:01,041 --> 00:29:04,578
違うのはインポートに
あることだけです

414
00:29:07,948 --> 00:29:09,917
タイプを定義した後は

415
00:29:10,017 --> 00:29:15,322
info.plistまたはXcode UIで
サポートを要求できます

416
00:29:16,723 --> 00:29:17,691
このためには

417
00:29:18,592 --> 00:29:22,162
定義したタイプ識別子を
指定します

418
00:29:23,697 --> 00:29:27,601
後はランクを定義するだけです

419
00:29:27,868 --> 00:29:31,905
ファイルを開くAppが
複数ある際の

420
00:29:32,005 --> 00:29:34,741
iOSの動作を設定するわけです

421
00:29:37,010 --> 00:29:39,346
３つの選択肢があります

422
00:29:42,216 --> 00:29:46,787
独自のファイルタイプなら
“Owner”を選択します

423
00:29:46,920 --> 00:29:52,326
これは自分で作った独自の
タイプの場合のみ選択します

424
00:29:53,861 --> 00:29:57,397
多くの場合は
“Default”になるでしょう

425
00:29:57,498 --> 00:30:01,201
タイプが編集可能であれば
これを選びます

426
00:29:57,498 --> 00:30:01,201
タイプが編集可能であれば
これを選びます

427
00:30:01,468 --> 00:30:05,906
読めるが編集不可であれば
“Alternate”を選びます

428
00:30:07,708 --> 00:30:11,545
macOSではランクの
ルールが異なります

429
00:30:11,645 --> 00:30:14,148
macOS用のAppの場合は

430
00:30:14,515 --> 00:30:17,184
こちらのリンクを ご覧ください

431
00:30:20,821 --> 00:30:24,458
タイプのサポートの要求は
明確に指定します

432
00:30:24,992 --> 00:30:29,296
今回.particlesという
特定のファイル用に要求しましたが

433
00:30:29,496 --> 00:30:34,501
public.imageを使用する
カテゴリでも要求できます

434
00:30:35,235 --> 00:30:38,605
しかし 希望どおりに
表示させるには

435
00:30:38,705 --> 00:30:42,176
できる限り詳細に
指定してください

436
00:30:42,943 --> 00:30:45,512
また public.dataや
public.contentなどの

437
00:30:45,612 --> 00:30:48,749
ワイルドカードに
サポートを要求しないでください

438
00:30:49,850 --> 00:30:53,187
想定外の場所にAppが表示され

439
00:30:53,287 --> 00:30:56,757
ユーザを混乱させてしまいます

440
00:31:00,194 --> 00:31:02,663
では セッションのまとめです

441
00:31:03,797 --> 00:31:07,701
クラウド上にあるファイルへの
アクセスは

442
00:31:07,801 --> 00:31:11,939
文書ブラウザか ドキュメント
ピッカーを使いましょう

443
00:31:12,573 --> 00:31:15,876
多くのクラウドベンダが
当社のAPIを採用しています

444
00:31:17,611 --> 00:31:19,746
これらのView Controllerにより

445
00:31:19,847 --> 00:31:24,484
ユーザはファイルの場所に関わらず
アクセス可能です

446
00:31:24,818 --> 00:31:28,088
クラウドベンダ別の
コードは不要です

447
00:31:30,124 --> 00:31:36,063
iOS 11の登場以前に独自の
文書ブラウズUIを書いているなら

448
00:31:36,263 --> 00:31:39,766
UIDocumentBrowserViewController
に変更する良い機会です

449
00:31:40,801 --> 00:31:43,136
たくさんの機能が…

450
00:31:45,706 --> 00:31:51,879
たくさんの機能が搭載されており
すべて無料で使用できます

451
00:31:54,148 --> 00:32:00,387
Xcode内でドキュメントを
正しく設定することも忘れずに

452
00:31:54,148 --> 00:32:00,387
Xcode内でドキュメントを
正しく設定することも忘れずに

453
00:32:01,054 --> 00:32:06,193
Appを適切な場所に
表示させるためです

454
00:32:07,628 --> 00:32:10,297
では ロニーに引き継ぎます

455
00:32:10,964 --> 00:32:15,402
(拍手)

456
00:32:15,903 --> 00:32:16,870
どうも

457
00:32:17,438 --> 00:32:18,372
こんにちは

458
00:32:18,572 --> 00:32:22,276
ドキュメント管理チームの
ロニー･ファデルです

459
00:32:23,343 --> 00:32:27,347
文書ブラウザや
ドキュメントピッカーの

460
00:32:27,448 --> 00:32:30,584
Appへの適用は容易です

461
00:32:31,418 --> 00:32:35,622
では ベストプラクティスを
紹介します

462
00:32:35,722 --> 00:32:38,792
iOS上で皆さんのAppが

463
00:32:38,892 --> 00:32:43,263
問題なく動くのかを
確認できる事例です

464
00:32:44,832 --> 00:32:50,370
文書ブラウザか
ドキュメントピッカーを導入し

465
00:32:51,205 --> 00:32:53,774
ドキュメントを選択します

466
00:32:54,408 --> 00:32:57,678
ここではコピーを作成せずに

467
00:32:57,811 --> 00:33:02,115
ドキュメントに
直接アクセスするとします

468
00:32:57,811 --> 00:33:02,115
ドキュメントに
直接アクセスするとします

469
00:33:02,750 --> 00:33:05,252
直接編集したい場合は

470
00:33:05,419 --> 00:33:08,589
オープン操作を実行します

471
00:33:09,523 --> 00:33:16,029
例えばParticles Appを
使用しているとします

472
00:33:16,430 --> 00:33:20,400
システムのイメージを変更します

473
00:33:22,002 --> 00:33:27,040
ドキュメントの選択で
コールバックが出ます

474
00:33:27,541 --> 00:33:31,245
１つ目は
ブラウザで選択した場合―

475
00:33:31,812 --> 00:33:36,683
２つ目は
ピッカーで選択した場合に出ます

476
00:33:38,585 --> 00:33:43,924
このドキュメントとピッカーは
選択したURLを

477
00:33:44,024 --> 00:33:47,227
Appに提供しています

478
00:33:48,395 --> 00:33:54,401
ドキュメントに直接アクセスすると
許可エラーが出かねません

479
00:33:55,702 --> 00:33:58,005
詳しく見てみましょう

480
00:33:58,572 --> 00:34:02,309
Appはサンドボックス内にあります

481
00:33:58,572 --> 00:34:02,309
Appはサンドボックス内にあります

482
00:34:02,810 --> 00:34:05,245
アクセスできるのは

483
00:34:05,445 --> 00:34:11,118
自分のAppコンテナだけに
制限されます

484
00:34:11,485 --> 00:34:17,024
他のAppのコンテナには
アクセスできません

485
00:34:17,123 --> 00:34:20,661
iCloudコンテナも同様です

486
00:34:21,460 --> 00:34:26,600
これはAppやプロセスを守る
仕組みです

487
00:34:26,800 --> 00:34:31,237
他のコンテナを
のぞき見ることはできません

488
00:34:31,338 --> 00:34:36,409
ドキュメントへの
アクセスを行う場合には

489
00:34:36,510 --> 00:34:39,646
ユーザの同意が必要です

490
00:34:41,315 --> 00:34:45,918
他のコンテナへのアクセスは
制限されますが

491
00:34:46,085 --> 00:34:50,924
Appが他のコンテナに
アクセスする方法は？

492
00:34:51,658 --> 00:34:56,530
サンドボックスに
それらドキュメントを含めます

493
00:34:57,097 --> 00:35:00,734
ブラウザやピッカーが
URLを返します

494
00:34:57,097 --> 00:35:00,734
ブラウザやピッカーが
URLを返します

495
00:35:01,702 --> 00:35:05,539
セキュリティ対応の
リソース付きです

496
00:35:06,306 --> 00:35:10,844
システムが承認した
トークンとも言えます

497
00:35:11,011 --> 00:35:16,517
トークンでAppから
ドキュメントにアクセスします

498
00:35:18,052 --> 00:35:21,822
次のURL APIでアクセスします

499
00:35:22,923 --> 00:35:26,860
startAccessingSecurityScoped
Resourceをコールすると

500
00:35:27,027 --> 00:35:32,699
Appはドキュメントの表示と編集を
許可されます

501
00:35:32,866 --> 00:35:35,636
表示と編集を終えたら

502
00:35:36,336 --> 00:35:40,908
stopAccessingSecurityScoped
Resourceをコールします

503
00:35:41,008 --> 00:35:45,746
すると再び
アクセス制限がかかります

504
00:35:48,482 --> 00:35:54,521
以上が サンドボックス内の
ドキュメントの使用方法です

505
00:35:56,189 --> 00:35:59,193
コードをコールする場所は？

506
00:36:00,394 --> 00:36:06,767
startAccessingのコードは
冒頭でコールし

507
00:36:07,401 --> 00:36:13,240
stopAccessingは
作業終了時にコールします

508
00:36:14,508 --> 00:36:17,578
startが“true”なら―

509
00:36:18,145 --> 00:36:23,116
stopをコールするというように
単純です

510
00:36:25,285 --> 00:36:28,522
アクセス時間を最小限に抑え

511
00:36:28,855 --> 00:36:35,662
startをコールする際の
Appのリソース消費量を節約します

512
00:36:35,762 --> 00:36:39,900
そしてタスク終了時に
リソースを放棄し

513
00:36:40,000 --> 00:36:45,939
追加のドキュメントへの
アクセスができるようにします

514
00:36:47,374 --> 00:36:51,812
ドキュメントが
自分のコンテナ内にあるなら

515
00:36:51,912 --> 00:36:54,014
コールは不要です

516
00:36:54,248 --> 00:36:57,451
不安ならコール可能ですが

517
00:36:57,718 --> 00:37:00,921
実際は何もしなくていいのです

518
00:36:57,718 --> 00:37:00,921
実際は何もしなくていいのです

519
00:37:03,457 --> 00:37:06,793
アクセス方法は分かりましたね

520
00:37:06,894 --> 00:37:12,966
事例で説明した方法で
ドキュメントにアクセスしましょう

521
00:37:14,401 --> 00:37:19,907
ご覧のとおり
クラウド上の複数のAppからの

522
00:37:20,007 --> 00:37:24,545
ドキュメントへの
同時アクセスも可能です

523
00:37:25,212 --> 00:37:28,582
ここではアクセスするための

524
00:37:28,715 --> 00:37:32,452
システムの仕組みが必要となります

525
00:37:32,619 --> 00:37:38,659
この仕組みにより
他からのドキュメントの読み書きを

526
00:37:38,759 --> 00:37:39,793
防ぐのです

527
00:37:41,228 --> 00:37:45,332
ファイルコーディネーション
という仕組みです

528
00:37:45,432 --> 00:37:50,938
NSFileCoordinatorと
NSFilePresenterで実行します

529
00:37:51,572 --> 00:37:55,776
このコードは
読み書きをロックします

530
00:37:57,111 --> 00:38:03,984
ローカルにないドキュメントの
ダウンロードの命令もします

531
00:37:57,111 --> 00:38:03,984
ローカルにないドキュメントの
ダウンロードの命令もします

532
00:38:04,117 --> 00:38:09,556
ローカルに存在しない
ドキュメントも多いからです

533
00:38:10,891 --> 00:38:15,496
ファイルコーディネーションの
操作では

534
00:38:15,596 --> 00:38:19,199
冗長で誤ったコードを書きがちです

535
00:38:19,833 --> 00:38:24,371
ドキュメントの表示と編集を
するだけなら

536
00:38:24,471 --> 00:38:30,010
UIDocumentという簡単な方法が
あります

537
00:38:30,310 --> 00:38:33,414
iOS 5以降で使用可能です

538
00:38:33,914 --> 00:38:38,685
ドキュメントの表示と編集に
お勧めの方法です

539
00:38:39,386 --> 00:38:44,925
この方法ならstartやstopの
コールは不要です

540
00:38:45,426 --> 00:38:47,895
ファイルコーディネーションにも
対応します

541
00:38:47,995 --> 00:38:52,132
つまりマニュアル作業が
不要となります

542
00:38:53,600 --> 00:38:57,838
詳細は“Building Document
Based Apps”という―

543
00:38:57,938 --> 00:39:02,943
セッションのビデオを活用し
ご確認ください

544
00:38:57,938 --> 00:39:02,943
セッションのビデオを活用し
ご確認ください

545
00:39:03,043 --> 00:39:08,148
WWDC 2015に行われた
詳細セッションです

546
00:39:10,017 --> 00:39:15,989
これで パーティクルシステムの
ドキュメントにアクセスし

547
00:39:16,423 --> 00:39:18,392
編集ができます

548
00:39:18,492 --> 00:39:23,564
ここからは少し
WWDCのサイトについて確認し

549
00:39:23,764 --> 00:39:25,566
再びAppの話に戻ります

550
00:39:27,201 --> 00:39:31,872
では少しブラウザの話をします

551
00:39:32,406 --> 00:39:37,878
ユーザはAppを使用中
元に戻す機能を期待します

552
00:39:39,079 --> 00:39:42,583
これまでの例を元に話します

553
00:39:42,983 --> 00:39:46,086
これがAppのライフサイクルです

554
00:39:47,187 --> 00:39:51,491
Appの編集は最前面で行います

555
00:39:51,859 --> 00:39:58,165
Appスイッチャーを使うと
Appは背面に移動します

556
00:39:59,366 --> 00:40:02,636
Appは背面に移ると停止します

557
00:39:59,366 --> 00:40:02,636
Appは背面に移ると停止します

558
00:40:03,003 --> 00:40:06,974
Appを停止させることにより

559
00:40:07,207 --> 00:40:10,043
メモリの負荷を減らすのです

560
00:40:10,878 --> 00:40:15,983
前面に移動させると
Appは再起動されます

561
00:40:16,316 --> 00:40:19,620
ここでUIの状態の
リストアを行います

562
00:40:19,787 --> 00:40:25,125
これでユーザは
元のAppでの作業に戻れます

563
00:40:26,193 --> 00:40:29,129
状態復旧の方法は？

564
00:40:29,396 --> 00:40:30,864
簡単なのは

565
00:40:30,964 --> 00:40:38,138
ブラウザやピッカーが示したURLを
リストアする方法でしょう

566
00:40:39,206 --> 00:40:41,975
しかし２つの原因で失敗します

567
00:40:42,276 --> 00:40:47,448
１つ目はドキュメントの
移動や改名による―

568
00:40:47,548 --> 00:40:50,918
リンクの無効化という原因です

569
00:40:51,185 --> 00:40:55,823
２つ目はURLの
セキュリティ対応リソースの

570
00:40:56,457 --> 00:40:59,493
未暗号化という原因です

571
00:40:59,827 --> 00:41:04,898
そしてドキュメントへの
アクセスが失われます

572
00:40:59,827 --> 00:41:04,898
そしてドキュメントへの
アクセスが失われます

573
00:41:05,032 --> 00:41:07,935
移動や改名がなくても
失われます

574
00:41:09,903 --> 00:41:15,609
セキュリティ対応ブックマークを
使用すれば解決します

575
00:41:15,843 --> 00:41:19,680
参照先URLが正確なものになります

576
00:41:19,780 --> 00:41:22,349
移動や改名にも対応します

577
00:41:27,287 --> 00:41:32,559
セキュリティ対応ブックマークを
保存するには

578
00:41:32,726 --> 00:41:37,931
bookmarkData APIを適用します

579
00:41:38,732 --> 00:41:40,300
App再起動後に

580
00:41:40,467 --> 00:41:45,806
bookmarkDataをコールし
URLを変更します

581
00:41:47,741 --> 00:41:52,312
以上がUIの状態の
リストア方法です

582
00:41:52,412 --> 00:41:55,148
ここで少しデモを行います

583
00:42:01,922 --> 00:42:03,223
ご覧ください

584
00:42:03,824 --> 00:42:09,163
Particles Appを
シミュレータで走らせます

585
00:42:10,297 --> 00:42:13,367
次にAppを背面に移動させます

586
00:42:13,600 --> 00:42:17,671
Appは一時停止状態となります

587
00:42:18,672 --> 00:42:20,207
Xcodeを用います

588
00:42:23,043 --> 00:42:27,748
Appを再起動すると
ブラウザに戻ります

589
00:42:28,048 --> 00:42:32,653
ここでは
状態保存と復旧を実行し

590
00:42:32,753 --> 00:42:34,855
元の状態に戻します

591
00:42:35,756 --> 00:42:37,925
Xcodeに移動します

592
00:42:38,492 --> 00:42:45,132
ここではAppに対し デリゲートで
保存と復旧を宣言します

593
00:42:47,067 --> 00:42:52,139
shouldSaveApplicationStateに
“true”を返します

594
00:42:52,506 --> 00:42:56,276
shouldRestoreApplicationState
でも “true”を返します

595
00:42:58,045 --> 00:43:00,480
次にStoryboardに移動し

596
00:42:58,045 --> 00:43:00,480
次にStoryboardに移動し

597
00:43:00,581 --> 00:43:04,985
DocumentBrowserViewControllerに
復旧IDを与えます

598
00:43:05,085 --> 00:43:09,423
するとシステムがオブジェクトを
リストアします

599
00:43:09,857 --> 00:43:13,327
ここではStoryboard IDを
使用します

600
00:43:16,563 --> 00:43:20,634
次に
DocumentBrowserViewControllerに

601
00:43:20,734 --> 00:43:23,737
状態の保存と復旧を実装します

602
00:43:26,306 --> 00:43:30,544
つまりencodeRestorableStateから
スタートし

603
00:43:31,745 --> 00:43:35,916
次にeditorViewControllerを
取得します

604
00:43:36,016 --> 00:43:38,452
そしてdocumentURLを取得します

605
00:43:39,720 --> 00:43:41,421
URLを取得したら…

606
00:43:41,855 --> 00:43:43,190
字が小さいですね

607
00:43:43,357 --> 00:43:45,225
URLを取得したら

608
00:43:45,426 --> 00:43:49,596
アクセスし
サンドボックスを拡張します

609
00:43:50,731 --> 00:43:54,435
そしてdeferブロックで
アクセスを終了します

610
00:43:57,871 --> 00:43:58,705
もしも…

611
00:44:00,140 --> 00:44:02,476
アクセスを開始する際は

612
00:44:03,577 --> 00:44:08,415
bookmarkDataブロックを作成し
暗号化します

613
00:44:10,718 --> 00:44:12,953
最後にsuperをコールします

614
00:44:14,121 --> 00:44:17,724
RestorableStateの暗号化と

615
00:44:17,824 --> 00:44:20,828
復号化の説明に移ります

616
00:44:21,562 --> 00:44:27,701
decodeRestorableStateから
逆の手順を踏みます

617
00:44:28,035 --> 00:44:31,271
まずcoderからbookmarkDataを
取得します

618
00:44:31,405 --> 00:44:33,374
そして該当する場合のみ

619
00:44:33,674 --> 00:44:38,779
URL(resolvingBookmarkDataで
ドキュメントのURLを作成します

620
00:44:41,315 --> 00:44:44,284
そしてURLに
ドキュメントを表示させます

621
00:44:45,486 --> 00:44:49,590
ここでもsuperをコールします

622
00:44:50,424 --> 00:44:52,926
では Appを起動します

623
00:44:57,631 --> 00:45:01,101
シミュレータで起動されます

624
00:44:57,631 --> 00:45:01,101
シミュレータで起動されます

625
00:45:02,102 --> 00:45:06,140
これでドキュメントの使用を
開始できます

626
00:45:06,607 --> 00:45:12,713
ここでAppを背面に移動させ
Appの停止をシミュレート

627
00:45:16,483 --> 00:45:21,889
そしてAppの再起動で
Editorに戻ります

628
00:45:22,322 --> 00:45:26,960
(拍手)

629
00:45:28,996 --> 00:45:35,202
破損を恐れることなく
ドキュメントにアクセスできます

630
00:45:35,302 --> 00:45:41,175
restoreを宣言すれば
元の状態に戻せます

631
00:45:41,375 --> 00:45:43,610
App停止中も戻せます

632
00:45:45,312 --> 00:45:49,950
ファイルを開き
コールアウトメニューから

633
00:45:50,050 --> 00:45:52,319
“共有”をタップすれば

634
00:45:52,519 --> 00:45:55,589
共有シートにAppが追加されます

635
00:45:56,156 --> 00:46:00,327
しかし “Open in”ではなく
“Copy to”と表示されます

636
00:45:56,156 --> 00:46:00,327
しかし “Open in”ではなく
“Copy to”と表示されます

637
00:46:00,828 --> 00:46:05,399
共有シートで
Appアイコンをタップすると

638
00:46:05,499 --> 00:46:10,504
システムによりドキュメントが
コピーされます

639
00:46:10,904 --> 00:46:16,076
つまり ここではコピーを
編集するということです

640
00:46:17,377 --> 00:46:21,381
ユーザが原本の編集をするには

641
00:46:21,882 --> 00:46:28,288
iOSのOpen in Placeという
機能を適用する必要があります

642
00:46:30,357 --> 00:46:32,326
この機能を適用すると

643
00:46:32,426 --> 00:46:37,231
共有シートには
“Open in”が表示されます

644
00:46:38,799 --> 00:46:41,535
この機能の適用は簡単です

645
00:46:41,869 --> 00:46:46,673
ドキュメントベースAppの
Xcodeのテンプレートなら

646
00:46:47,041 --> 00:46:50,310
“Open in”がデフォルトで
有効です

647
00:46:50,844 --> 00:46:56,216
または Info.plistにLSSupports
OpeningDocumentInPlaceの追加です

648
00:46:57,718 --> 00:47:02,122
Open in Placeの使用を
宣言すれば

649
00:46:57,718 --> 00:47:02,122
Open in Placeの使用を
宣言すれば

650
00:47:02,222 --> 00:47:06,560
UIApplicationのデリゲート
メソッドでアクセスします

651
00:47:08,062 --> 00:47:11,031
Appが文書ブラウザベースなら

652
00:47:12,032 --> 00:47:18,605
DocumentBrowserViewControllerで
revealDocumentをコールします

653
00:47:19,439 --> 00:47:24,878
完了ハンドラをコールすれば
ドキュメントが表示されます

654
00:47:25,345 --> 00:47:28,248
これはXcodeのテンプレートで
設定済みです

655
00:47:29,483 --> 00:47:34,021
共有シートのAppをタップして
アクセスできます

656
00:47:34,455 --> 00:47:40,127
クラウド上のドキュメントも
あるため 進捗を表示します

657
00:47:41,261 --> 00:47:46,000
ダウンロードに時間がかかれば
取り消しもできます

658
00:47:46,100 --> 00:47:49,770
ドキュメントの開封を中止し
ブラウザに戻れます

659
00:47:51,638 --> 00:47:54,741
Appで進捗を表示する方法は？

660
00:47:56,410 --> 00:48:00,314
revealDocumentをコールすれば

661
00:47:56,410 --> 00:48:00,314
revealDocumentをコールすれば

662
00:48:00,414 --> 00:48:04,051
無料で進捗のUIを使用できます

663
00:48:04,151 --> 00:48:08,855
ブラウザ上のアイコンに
UIが反映されます

664
00:48:09,623 --> 00:48:13,827
独自の進捗UIを
表示する方法もあります

665
00:48:14,328 --> 00:48:20,534
UIDocumentは Progress
Reportingに準拠しています

666
00:48:20,901 --> 00:48:23,637
独自の進捗UIを表示するには

667
00:48:23,737 --> 00:48:27,808
進捗プロパティに
表示させればいいのです

668
00:48:29,877 --> 00:48:34,214
これでAppは
配信の準備が整いました

669
00:48:36,783 --> 00:48:40,287
今日 持ち帰ってほしい知識は

670
00:48:40,387 --> 00:48:43,891
Appにおける
ドキュメント管理の方法です

671
00:48:45,259 --> 00:48:48,962
ドキュメントの編集が
必要になったら

672
00:48:49,062 --> 00:48:52,866
UIDocumentを適用します

673
00:48:54,768 --> 00:48:59,406
UIDocumentを適用しない
ドキュメントの場合は？

674
00:48:59,506 --> 00:49:06,380
サンドボックス内のドキュメントに
アクセスできることを確認し

675
00:48:59,506 --> 00:49:06,380
サンドボックス内のドキュメントに
アクセスできることを確認し

676
00:49:06,980 --> 00:49:10,050
ベストプラクティスを適用します

677
00:49:11,418 --> 00:49:14,455
ドキュメントへのアクセスでは

678
00:49:14,555 --> 00:49:18,325
編集ができることを確認しましょう

679
00:49:19,860 --> 00:49:23,997
状態復旧を実装すれば
Appが停止中でも―

680
00:49:24,097 --> 00:49:27,868
元の状態のファイルに戻れます

681
00:49:29,036 --> 00:49:34,107
Open in Placeを適用すれば

682
00:49:34,208 --> 00:49:38,412
常にコピーではなく
原本を編集できます

683
00:49:39,079 --> 00:49:45,419
クラウド上にあるドキュメント
などは進捗をレポートしましょう

684
00:49:47,087 --> 00:49:49,523
本日の内容を確認します

685
00:49:49,923 --> 00:49:55,562
ブラウザとピッカーの
APIの適用は簡単でしたね

686
00:49:55,662 --> 00:49:57,865
本日中に試しましょう

687
00:49:58,999 --> 00:50:02,035
ベストプラクティスも扱いました

688
00:49:58,999 --> 00:50:02,035
ベストプラクティスも扱いました

689
00:50:02,135 --> 00:50:05,672
Appでドキュメント管理ができます

690
00:50:06,707 --> 00:50:08,509
クラウドベンダには

691
00:50:08,976 --> 00:50:13,447
Siriのショートカットについて
お話ししました

692
00:50:13,614 --> 00:50:20,721
ユーザに ドキュメントへの
スムーズなアクセスを提供できます

693
00:50:22,189 --> 00:50:25,526
File Provider-Validation
ツールにも触れました

694
00:50:25,626 --> 00:50:30,631
FileProviderUI Extentionにおける
認証フロー適用の

695
00:50:30,731 --> 00:50:33,200
ガイドラインも説明しました

696
00:50:34,802 --> 00:50:39,740
セッションのサイトでは
更なる情報が得られます

697
00:50:40,040 --> 00:50:44,244
Introduction to Siri Shortcuts
にもご参加ください

698
00:50:44,611 --> 00:50:48,649
本日はありがとうございました

699
00:50:48,749 --> 00:50:52,419
(拍手)