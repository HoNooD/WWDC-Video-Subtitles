
1
00:00:07,074 --> 00:00:15,849
(音楽)

2
00:00:20,954 --> 00:00:25,993
(拍手)

3
00:00:26,093 --> 00:00:27,961
おはようございます

4
00:00:28,695 --> 00:00:30,531
私はスカイラー

5
00:00:30,631 --> 00:00:34,234
iOSアクセシビリティチームの
一員です

6
00:00:34,334 --> 00:00:38,906
Mac アクセシビリティチームの
バビヤもいます

7
00:00:39,006 --> 00:00:42,576
極上のアクセシビリティ体験を
実現する―

8
00:00:42,676 --> 00:00:46,680
アプリケーションの
開発について話します

9
00:00:47,981 --> 00:00:50,884
一般的にアクセシビリティとは

10
00:00:50,984 --> 00:00:54,855
技術を誰でも
使えるようにすることです

11
00:00:55,789 --> 00:01:02,162
Appleではアクセシビリティを
４つの領域に分けて考えます

12
00:00:55,789 --> 00:01:02,162
Appleではアクセシビリティを
４つの領域に分けて考えます

13
00:01:02,262 --> 00:01:08,902
学習と読み書き
身体機能 視覚 聴覚です

14
00:01:09,636 --> 00:01:14,308
アクセシビリティへの配慮は
OSにも多数あります

15
00:01:14,541 --> 00:01:19,780
でも アプリケーションが
支援技術に対応してこそ―

16
00:01:19,880 --> 00:01:23,717
障がい者の方々に選ばれる
プラットフォームになります

17
00:01:24,318 --> 00:01:28,889
皆さんの秀逸なコンテンツを
アクセシブルにして

18
00:01:28,989 --> 00:01:32,626
誰もがつながれる社会を
作りましょう

19
00:01:32,726 --> 00:01:36,697
そして世界の人々の生活を
向上させるのです

20
00:01:37,865 --> 00:01:43,303
今日の私たちの話では
基本的な内容は飛ばします

21
00:01:43,537 --> 00:01:46,673
アクセシビリティの話が
初めての人や

22
00:01:46,773 --> 00:01:50,010
APIを見たことがない人は
いますか？

23
00:01:50,110 --> 00:01:54,982
その場合 2017年のWWDCも
ご確認ください

24
00:01:55,082 --> 00:01:58,185
私たちの話は
初心者にも有益ですが

25
00:01:58,285 --> 00:02:01,054
話の流れが
早く感じるでしょう

26
00:01:58,285 --> 00:02:01,054
話の流れが
早く感じるでしょう

27
00:02:01,288 --> 00:02:04,758
応用の話が主だからです

28
00:02:05,392 --> 00:02:08,562
まず この言葉に
着目してください

29
00:02:09,429 --> 00:02:10,430
“使用可能”

30
00:02:10,997 --> 00:02:12,399
大事なことです

31
00:02:12,499 --> 00:02:17,237
支援技術が全コンテンツを
認識していることは

32
00:02:17,337 --> 00:02:19,206
重要な第一歩です

33
00:02:19,573 --> 00:02:24,578
そうは言っても
ただ使えるだけでは不十分です

34
00:02:24,678 --> 00:02:28,749
理想は使用可能な
アプリケーションではなく

35
00:02:29,183 --> 00:02:31,785
極上のアプリケーションです

36
00:02:32,019 --> 00:02:35,722
私たちはユーザを
喜ばせたいのです

37
00:02:36,089 --> 00:02:40,427
それを具体的に
どう実現するのかを

38
00:02:40,527 --> 00:02:42,829
これから説明します

39
00:02:42,930 --> 00:02:47,234
皆さんの開発のヒントになれば
幸いです

40
00:02:48,635 --> 00:02:52,906
アクセシビリティの評価や検討は

41
00:02:53,006 --> 00:02:56,910
主に２つの見地から
行ってください

42
00:02:57,110 --> 00:03:00,180
１つ目はビジュアルデザインで

43
00:02:57,110 --> 00:03:00,180
１つ目はビジュアルデザインで

44
00:03:00,280 --> 00:03:04,251
２つ目は
アクセシビリティユーザの体験です

45
00:03:05,185 --> 00:03:07,321
まずビジュアルデザインです

46
00:03:09,957 --> 00:03:14,528
第１に 透過とぼかしについて
考えてみます

47
00:03:15,429 --> 00:03:19,466
iOSでは透過とぼかしを
よく使います

48
00:03:19,933 --> 00:03:23,804
鮮やかで独特な感覚を
生むからです

49
00:03:24,404 --> 00:03:31,011
しかし 低視力の人などには
文字が読みにくくなるため

50
00:03:31,111 --> 00:03:33,714
目を酷使する原因にも
なります

51
00:03:33,814 --> 00:03:37,751
そこで この効果を
低減させる設定を実現

52
00:03:37,851 --> 00:03:41,488
画面を このように
大きく変えられます

53
00:03:41,989 --> 00:03:44,191
背景が暗くなるのです

54
00:03:44,291 --> 00:03:49,796
最低限の情報を出しつつ
視覚的なノイズを排除

55
00:03:49,897 --> 00:03:55,002
にじんで見えていた背景は
無地になりました

56
00:03:55,702 --> 00:03:57,237
フォルダも同様です

57
00:03:58,372 --> 00:03:59,940
Spotlightも

58
00:04:00,841 --> 00:04:05,879
この例では ユーザの壁紙から
色を取ったのが分かります

59
00:04:05,979 --> 00:04:11,318
よって 無地であっても
パーソナライズできていて

60
00:04:11,418 --> 00:04:15,956
コントラストと読みやすさが
向上しました

61
00:04:17,324 --> 00:04:20,961
皆さんも
各自のアプリケーションのUIで

62
00:04:21,060 --> 00:04:25,999
透明度を下げる設定を生かせるか
試してください

63
00:04:26,233 --> 00:04:31,138
iOSでは UIAccessibilityで
isReduceTransparencyEnabledとし

64
00:04:31,405 --> 00:04:33,273
macOSでは NSWorkspaceで

65
00:04:33,373 --> 00:04:37,110
accessibilityDisplayShould
ReduceTransparencyとします

66
00:04:38,645 --> 00:04:40,881
第２にコントラストです

67
00:04:42,015 --> 00:04:47,855
コンテンツと背景のコントラストは
見やすさに影響します

68
00:04:48,222 --> 00:04:52,793
色が似ていると
識別しづらくなります

69
00:04:53,560 --> 00:04:58,398
小さくなると
読みにくくなる色もあります

70
00:04:58,699 --> 00:05:02,903
字が小さいと
にじんで見えるのです

71
00:04:58,699 --> 00:05:02,903
字が小さいと
にじんで見えるのです

72
00:05:04,371 --> 00:05:08,342
色の組み合わせの
コントラスト比を計算し

73
00:05:08,442 --> 00:05:11,245
読めるか確認してください

74
00:05:11,345 --> 00:05:15,549
Web Content Accessibility
Guidelinesに従って

75
00:05:15,649 --> 00:05:21,188
皆さんも 最低限の
4.5：１以上を目指すべきです

76
00:05:22,623 --> 00:05:26,560
最もコントラストが高いのは
白と黒で

77
00:05:26,727 --> 00:05:28,762
比は21：１です

78
00:05:28,862 --> 00:05:31,765
どの文字サイズにも
適しています

79
00:05:32,099 --> 00:05:34,034
グレーの文字は―

80
00:05:34,968 --> 00:05:40,007
大きければ読めますが
小さいと見えにくいです

81
00:05:40,107 --> 00:05:42,876
文字の形が分かりません

82
00:05:42,976 --> 00:05:47,614
これがコントラスト比4.5：１で
最低限です

83
00:05:48,081 --> 00:05:50,317
さらに別のグレーです

84
00:05:51,285 --> 00:05:55,155
この大画面では
読めるかもしれませんが

85
00:05:55,255 --> 00:06:00,894
小さなデバイスでは
フォントが大きくても判読不能です

86
00:05:55,255 --> 00:06:00,894
小さなデバイスでは
フォントが大きくても判読不能です

87
00:06:00,994 --> 00:06:05,098
コントラスト比2.9：１は
低すぎます

88
00:06:08,335 --> 00:06:12,706
XcodeのAccessibility Inspector
内蔵ツールを使えば

89
00:06:12,806 --> 00:06:16,076
コントラスト比が分かります

90
00:06:16,176 --> 00:06:21,281
及第点になる色のペアや
文字サイズが分かるツールで

91
00:06:21,381 --> 00:06:24,785
先に述べたガイドラインに
従うものです

92
00:06:25,419 --> 00:06:32,092
ただし これで推奨されている
4.5：１という数値を超えていても

93
00:06:32,226 --> 00:06:38,599
低視力の人にとっては
まだ読みにくいかもしれません

94
00:06:39,199 --> 00:06:43,203
そこで コントラストを
上げる設定を作りました

95
00:06:43,437 --> 00:06:47,541
以前のiOSで Darken Colorsと
呼んでいた機能です

96
00:06:47,841 --> 00:06:51,912
isDarkerSystemColorsEnabledと
入れてください

97
00:06:52,012 --> 00:06:56,049
標準のUIKitコントロールで
tintColorをオンに設定しても

98
00:06:56,150 --> 00:06:58,218
それで機能します

99
00:06:59,052 --> 00:07:03,657
macOSではaccessibilityDisplay
ShouldIncreaseContrastとします

100
00:06:59,052 --> 00:07:03,657
macOSではaccessibilityDisplay
ShouldIncreaseContrastとします

101
00:07:05,392 --> 00:07:07,027
第３にサイズです

102
00:07:08,529 --> 00:07:15,669
コンテンツのサイズを変えても
読みやすさは劇的に向上します

103
00:07:15,769 --> 00:07:18,805
低視力者には非常に有益です

104
00:07:18,906 --> 00:07:21,041
カレンダーの例です

105
00:07:21,141 --> 00:07:24,344
左はデフォルトのサイズで

106
00:07:24,444 --> 00:07:29,416
右はテキストサイズを
大きくしたものです

107
00:07:29,516 --> 00:07:33,153
低視力の人に
この２つを見せたら

108
00:07:33,253 --> 00:07:38,959
右の画面なら
文字が読める可能性が高いでしょう

109
00:07:40,227 --> 00:07:44,398
iOSでは ユーザが
テキストサイズを指定でき

110
00:07:44,498 --> 00:07:48,235
デフォルトは
７段階の真ん中です

111
00:07:48,669 --> 00:07:53,540
アクセシビリティ設定では
さらに５段階 増やせます

112
00:07:54,875 --> 00:07:59,146
Dynamic Typeの話は
このくらいにしましょう

113
00:07:59,246 --> 00:08:03,350
アプリケーションで
Dynamic Typeを活用する方法は

114
00:07:59,246 --> 00:08:03,350
アプリケーションで
Dynamic Typeを活用する方法は

115
00:08:03,450 --> 00:08:07,554
どうぞご自身で
チェックしてください

116
00:08:09,189 --> 00:08:12,626
テキストサイズを
変えるのが嫌でも

117
00:08:12,726 --> 00:08:17,698
やはりデフォルトでは
読みにくいフォントがあります

118
00:08:17,798 --> 00:08:20,934
その場合 文字を太くできます

119
00:08:21,034 --> 00:08:23,804
これでグリフの線も
濃くなります

120
00:08:24,938 --> 00:08:29,009
標準のUIコントロールと
システムフォントなら

121
00:08:29,109 --> 00:08:33,313
iOSの太文字設定が
おそらくそのまま使えます

122
00:08:33,480 --> 00:08:37,451
カスタムフォントを
使っている場合や

123
00:08:37,551 --> 00:08:43,023
境界線を太くするといったことが
したい場合は―

124
00:08:43,123 --> 00:08:46,793
必要に応じて
変更してください

125
00:08:48,962 --> 00:08:50,497
第４に動きです

126
00:08:50,964 --> 00:08:55,669
アニメーションは楽しく
画面が活気づきますし

127
00:08:55,769 --> 00:09:02,442
ユーザインタラクションと
そのアクションの効果を増やします

128
00:08:55,769 --> 00:09:02,442
ユーザインタラクションと
そのアクションの効果を増やします

129
00:09:02,876 --> 00:09:08,749
ただ 内耳の症状などで
平衡感覚に問題がある人には

130
00:09:08,849 --> 00:09:11,585
アニメーションは厄介です

131
00:09:11,852 --> 00:09:16,323
めまいや吐き気の
原因となるからです

132
00:09:17,457 --> 00:09:21,628
これから具体的な例を
お見せします

133
00:09:21,728 --> 00:09:24,898
動きの知覚に問題のある人は

134
00:09:24,998 --> 00:09:30,170
しばらく 画面を
直視しないようにお願いします

135
00:09:31,405 --> 00:09:33,807
最初は拡大とズームです

136
00:09:33,907 --> 00:09:40,547
左が アプリケーションを開く時の
デフォルトの動きです

137
00:09:41,715 --> 00:09:46,119
例えば時計を開くと
アイコンが拡大します

138
00:09:46,220 --> 00:09:52,793
右は 視差効果を減らした場合で
クロスフェードで切り替わります

139
00:09:54,728 --> 00:09:57,231
次は回転と渦巻きです

140
00:09:57,497 --> 00:10:02,269
メッセージで
フルスクリーンエフェクトを使うと

141
00:09:57,497 --> 00:10:02,269
メッセージで
フルスクリーンエフェクトを使うと

142
00:10:02,569 --> 00:10:07,341
吹き出しが回転し
大きさも変わります

143
00:10:07,441 --> 00:10:10,544
これが問題になることも

144
00:10:11,144 --> 00:10:16,717
視差効果を減らすと
自動再生ではなくプロンプトが出て

145
00:10:16,817 --> 00:10:22,623
エフェクトを再生するか
ユーザが選べるようになります

146
00:10:24,291 --> 00:10:26,793
次はプレーンシフトです

147
00:10:26,894 --> 00:10:32,399
Safariで すべてのタブを
見るボタンを押すと

148
00:10:32,766 --> 00:10:37,137
カードが傾き
3D空間が演出されます

149
00:10:37,771 --> 00:10:42,142
右では 動きが少なく
クロスフェードです

150
00:10:42,242 --> 00:10:44,211
カードが一度 点滅し―

151
00:10:44,311 --> 00:10:50,050
最後に見ていたページがどれか
分かる仕組みです

152
00:10:54,221 --> 00:10:58,058
多方向や多速度も
問題になり得ます

153
00:10:58,292 --> 00:11:01,795
例えばメッセージの
吹き出しです

154
00:10:58,292 --> 00:11:01,795
例えばメッセージの
吹き出しです

155
00:11:01,895 --> 00:11:05,933
実物は この動画より
もっと派手な動きです

156
00:11:06,500 --> 00:11:09,403
スクロールすると跳ねます

157
00:11:09,503 --> 00:11:13,373
吹き出しが拡大縮小し
隙間も変動します

158
00:11:14,107 --> 00:11:20,047
視差効果を減らしておくと
この動きもなくなります

159
00:11:23,083 --> 00:11:25,519
最後に 周辺視野の動きです

160
00:11:25,919 --> 00:11:28,322
天気アプリケーションの背景は

161
00:11:28,422 --> 00:11:32,426
アニメーションで
現在の天気を表現します

162
00:11:32,526 --> 00:11:38,832
左の背景では 雲が流れ
わずかな日射しも見えています

163
00:11:38,932 --> 00:11:43,804
ところが 下部の予報を見る時
これが視野に入るので

164
00:11:43,904 --> 00:11:49,843
車の中で読書をした時と同様に
酔う可能性があります

165
00:11:49,943 --> 00:11:54,748
焦点より上の水平な動きに
脳が反応するからです

166
00:11:54,882 --> 00:11:58,652
視差効果を減らせば
背景は静止します

167
00:12:00,220 --> 00:12:03,323
アニメーションを
減らすべきかは

168
00:12:03,423 --> 00:12:08,495
各OSで設定を確認し
適切な変更を行ってください

169
00:12:08,996 --> 00:12:11,798
iOSでは isReducedMotionEnabled

170
00:12:11,899 --> 00:12:15,969
macOSではaccessibilityDisplay
ShouldReduceMotionです

171
00:12:16,436 --> 00:12:22,476
ただ動きを排除するだけでは
不十分なことが多いです

172
00:12:22,576 --> 00:12:25,846
体験を貧弱にするのではなく

173
00:12:25,946 --> 00:12:30,651
実用的で 同等に楽しい
別の効果を加えるべきです

174
00:12:32,419 --> 00:12:36,690
第５に UIを複雑にしない
配慮が必要です

175
00:12:37,024 --> 00:12:39,626
アプリケーションの
重要性が増し

176
00:12:39,726 --> 00:12:44,898
シンプルで使いやすい技術が
求められています

177
00:12:45,165 --> 00:12:49,303
人間に負担を
かけないことが大事です

178
00:12:50,470 --> 00:12:54,741
米国だけでも
発達障がい児は６人に１人

179
00:12:54,842 --> 00:13:00,247
発語を含む言語の障がいから
自閉症まで様々です

180
00:12:54,842 --> 00:13:00,247
発語を含む言語の障がいから
自閉症まで様々です

181
00:13:00,647 --> 00:13:04,251
認知障がいや慢性病を
持つ人にとって

182
00:13:04,351 --> 00:13:09,122
アプリケーションの使用は
体力を要します

183
00:13:09,223 --> 00:13:14,194
シンプルに使える
アプリケーションが必要です

184
00:13:15,529 --> 00:13:22,135
似た構造を持ち 論理的で
画面操作が楽でなければなりません

185
00:13:23,103 --> 00:13:29,309
一般的なタスクを障壁なく
完了できるようにすべきです

186
00:13:30,277 --> 00:13:33,447
そして 動作の一貫性も必要です

187
00:13:33,547 --> 00:13:37,351
学びを応用できる環境に
するのです

188
00:13:37,584 --> 00:13:42,990
標準のUIKitを使えば
ユーザが慣れますし

189
00:13:43,090 --> 00:13:46,560
iOSの設計言語としても
機能します

190
00:13:46,660 --> 00:13:48,395
カスタム設計でも―

191
00:13:48,495 --> 00:13:54,168
UIKitと統一していれば
ユーザは直感的に操作できます

192
00:13:55,235 --> 00:13:58,772
これがユーザの使用体験に
直結します

193
00:13:58,872 --> 00:14:03,644
VoiceOverなどの利用者にも
大事なことです

194
00:13:58,872 --> 00:14:03,644
VoiceOverなどの利用者にも
大事なことです

195
00:14:04,378 --> 00:14:09,817
では アクセシビリティユーザの
体験を向上させるには？

196
00:14:11,218 --> 00:14:17,057
支援技術を使ったユーザ体験は
通常画面のそれとは異なります

197
00:14:17,758 --> 00:14:22,229
例えば スワイプや
複数指でのタップの多用です

198
00:14:25,332 --> 00:14:29,503
操作方法を設定できる
スイッチコントロールにも

199
00:14:29,770 --> 00:14:34,274
VoiceOverにも
標準的な動作が組み込まれています

200
00:14:35,242 --> 00:14:38,879
では 極上のユーザ体験を
生み出すには？

201
00:14:39,446 --> 00:14:44,318
“使用可能”では不十分で
いい体験が欲しいのです

202
00:14:45,719 --> 00:14:50,691
体験自体は異なっても
支援技術を使うユーザも

203
00:14:50,791 --> 00:14:56,263
いい体験をすべきだというのが
私たちの設計理念です

204
00:14:56,563 --> 00:14:59,733
画面操作が簡単で
挙動が予測でき

205
00:14:59,833 --> 00:15:03,403
優先順位が合理的で
一貫していることです

206
00:14:59,833 --> 00:15:03,403
優先順位が合理的で
一貫していることです

207
00:15:03,971 --> 00:15:09,076
別の要素がコンテキストを
伝えているなら

208
00:15:09,176 --> 00:15:12,579
それも伝えられるべきです

209
00:15:13,280 --> 00:15:15,482
では ここでバビヤが―

210
00:15:15,582 --> 00:15:19,219
アクセシビリティの査定を
実演します

211
00:15:19,486 --> 00:15:20,187
どうぞ

212
00:15:20,454 --> 00:15:25,292
(拍手)

213
00:15:25,392 --> 00:15:30,197
私はバビヤ
ソフトウェアエンジニアです

214
00:15:30,297 --> 00:15:34,535
アクセシビリティ体験の
向上について

215
00:15:34,635 --> 00:15:37,805
試作アプリケーションを使い
説明します

216
00:15:38,005 --> 00:15:40,474
名前はExceptional Dogs

217
00:15:40,574 --> 00:15:43,877
保護犬の譲渡を
容易にするために

218
00:15:43,977 --> 00:15:47,915
ユーザが候補の犬を
閲覧するものです

219
00:15:48,015 --> 00:15:49,283
見てみましょう

220
00:15:56,590 --> 00:15:58,292
こちらです

221
00:15:58,692 --> 00:16:04,965
トップのUIはカルーセルで
ここに様々な犬の写真が出ます

222
00:15:58,692 --> 00:16:04,965
トップのUIはカルーセルで
ここに様々な犬の写真が出ます

223
00:16:05,699 --> 00:16:10,103
左下のボタンを押せば
お気に入りに登録でき

224
00:16:10,370 --> 00:16:16,310
右下のボタンを押せば モーダルで
ギャラリーが表示されます

225
00:16:18,178 --> 00:16:21,081
ギャラリーボタンは
オプションで

226
00:16:21,181 --> 00:16:26,420
次のレイラのように
写真が複数ない時は消えます

227
00:16:27,287 --> 00:16:32,693
カルーセルの下は
犬の名前や品種などのデータです

228
00:16:33,126 --> 00:16:36,964
カルーセルをスワイプすると
更新されます

229
00:16:38,532 --> 00:16:42,135
一番下は
その犬がいる保護施設名で

230
00:16:42,236 --> 00:16:46,140
マップを開いたり
電話したりできます

231
00:16:49,910 --> 00:16:53,146
視覚的には かなり複雑です

232
00:16:53,247 --> 00:16:58,685
でも私とスカイラーは
アクセシビリティを意識して

233
00:16:58,785 --> 00:17:02,322
VoiceOverでの読み上げを
可能にしました

234
00:16:58,785 --> 00:17:02,322
VoiceOverでの読み上げを
可能にしました

235
00:17:02,756 --> 00:17:04,724
では VoiceOverで―

236
00:17:04,825 --> 00:17:09,997
低視力者が この複雑な画面を
どう把握するか確認します

237
00:17:14,701 --> 00:17:16,002
“VoiceOver オン”

238
00:17:16,103 --> 00:17:18,571
“Exceptional Dogs　ピンキー”

239
00:17:19,006 --> 00:17:23,242
画像を認識し
犬の名前を読み上げました

240
00:17:23,676 --> 00:17:26,613
スワイプで写真をスクロール

241
00:17:27,181 --> 00:17:30,350
“レイラ ブロ プディング”

242
00:17:30,751 --> 00:17:33,253
“お気に入りボタン オフ”

243
00:17:33,687 --> 00:17:35,556
“プディング ブロ”

244
00:17:35,956 --> 00:17:38,926
犬の名前を全部
読み上げたあと

245
00:17:39,026 --> 00:17:43,363
ようやくお気に入りボタンに
言及しました

246
00:17:43,530 --> 00:17:48,035
指をボタンの上に置けば
読み上げますが…

247
00:17:48,302 --> 00:17:50,804
“お気に入りボタン オフ”

248
00:17:50,904 --> 00:17:55,042
VoiceOverユーザは
典型的には―

249
00:17:55,142 --> 00:17:58,579
スワイプで
次の要素を見つけます

250
00:17:58,679 --> 00:18:05,385
現状 スワイプでは最後まで
画像上のボタンが見つかりません

251
00:17:58,679 --> 00:18:05,385
現状 スワイプでは最後まで
画像上のボタンが見つかりません

252
00:18:05,619 --> 00:18:07,688
体験としては貧弱です

253
00:18:07,788 --> 00:18:13,260
犬を全部 見るまで
ボタンにアクセスできないからです

254
00:18:14,228 --> 00:18:17,965
今は強制的に
ギャラリーを起動します

255
00:18:18,265 --> 00:18:19,366
“ギャラリーを見る”

256
00:18:19,466 --> 00:18:20,567
“ギャラリーを見る”

257
00:18:20,667 --> 00:18:23,170
“ブロの写真１　画像”

258
00:18:23,504 --> 00:18:25,038
ギャラリーをスクロール

259
00:18:25,139 --> 00:18:26,673
“ブロの写真２”

260
00:18:26,773 --> 00:18:28,542
“ブロの写真３”

261
00:18:28,642 --> 00:18:29,977
“ピンキー”

262
00:18:30,611 --> 00:18:31,512
“レイラ”

263
00:18:32,513 --> 00:18:35,849
ギャラリーを
スクロールできましたが

264
00:18:35,949 --> 00:18:39,853
フォーカスが
バックグラウンドに行きました

265
00:18:40,053 --> 00:18:44,625
必要なコンテンツには
たどり着けますが

266
00:18:44,725 --> 00:18:46,527
極上体験とは言えません

267
00:18:46,627 --> 00:18:51,498
フォーカスがモーダルから外れると
混乱します

268
00:18:52,099 --> 00:18:55,035
ダブルタップで
モーダルを閉じます

269
00:18:55,769 --> 00:18:56,803
“閉じる”

270
00:18:56,904 --> 00:18:57,905
“閉じる”

271
00:18:58,005 --> 00:18:58,839
“レイラ”

272
00:18:59,706 --> 00:19:01,808
データ部分をスワイプします

273
00:18:59,706 --> 00:19:01,808
データ部分をスワイプします

274
00:19:02,676 --> 00:19:05,078
“名前 品種”

275
00:19:05,612 --> 00:19:08,148
“レイラ ラブラドール”

276
00:19:08,882 --> 00:19:12,920
“名前”と聞いた直後が
犬の名前ではなく

277
00:19:13,020 --> 00:19:14,521
“品種”でした

278
00:19:15,122 --> 00:19:18,192
視覚的には
いいレイアウトですが

279
00:19:18,292 --> 00:19:23,063
VoiceOverが
読み上げにくい構造なのです

280
00:19:23,163 --> 00:19:27,901
よって 聞き手の認知に
負担がかかります

281
00:19:29,269 --> 00:19:32,806
保護施設名から
ボタンへスワイプします

282
00:19:33,574 --> 00:19:35,576
“スカイラー保護施設”

283
00:19:36,310 --> 00:19:38,779
“マップで場所を表示　ボタン”

284
00:19:38,879 --> 00:19:40,647
“発信　ボタン”

285
00:19:40,747 --> 00:19:46,620
ボタンを押すことは可能ですが
コンテキストが欠けています

286
00:19:46,753 --> 00:19:50,858
“発信”と聞くだけでは
何のことか分かりません

287
00:19:50,958 --> 00:19:55,696
ボタンが施設名の横にあることが
明白でないからです

288
00:19:57,498 --> 00:19:58,932
“VoiceOver オフ”

289
00:20:01,068 --> 00:20:06,707
今のような問題があっても
アプリケーションは使えますが

290
00:20:06,807 --> 00:20:10,210
ユーザに負担がかかります

291
00:20:10,844 --> 00:20:15,149
目標は極上の体験を
創り出すことです

292
00:20:15,482 --> 00:20:17,551
改めて スカイラーから―

293
00:20:17,651 --> 00:20:22,589
Exceptional Dogsを
極上にする方法を説明します

294
00:20:23,624 --> 00:20:28,495
(拍手)

295
00:20:28,595 --> 00:20:30,898
いくつか問題が発覚したので

296
00:20:31,098 --> 00:20:35,402
アクセシビリティAPIを
確認しましょう

297
00:20:36,637 --> 00:20:39,673
まずカルーセルの問題です

298
00:20:39,940 --> 00:20:45,846
画像上のボタン２つに
最後まで言及しませんでしたね

299
00:20:46,280 --> 00:20:50,918
個別データの読み上げも
後回しでした

300
00:20:51,852 --> 00:20:55,189
データとアクションに
早く到達するため―

301
00:20:56,223 --> 00:20:59,493
使うのは
UIAccessibilityElementです

302
00:20:59,593 --> 00:21:02,863
これで新しい要素を
作るのです

303
00:20:59,593 --> 00:21:02,863
これで新しい要素を
作るのです

304
00:21:03,163 --> 00:21:07,367
UIAccessibilityElementは
カスタム要素を作るクラスで

305
00:21:07,468 --> 00:21:13,373
大抵は アクセス不能な
UI上のパーツに使います

306
00:21:13,841 --> 00:21:19,379
でも 今回のように
カスタム体験を作る時にも使えます

307
00:21:20,114 --> 00:21:23,517
ビューのaccessibilityElements
プロパティから

308
00:21:23,617 --> 00:21:25,986
任意のカスタム要素を
返します

309
00:21:26,086 --> 00:21:30,023
すると その特定のビューの
子要素と

310
00:21:30,124 --> 00:21:34,862
それを読み上げる順序が
支援技術に伝わります

311
00:21:36,563 --> 00:21:41,135
これで スワイプで
各犬のコンテンツに進めます

312
00:21:41,435 --> 00:21:44,171
では 別の犬を
閲覧するには？

313
00:21:45,239 --> 00:21:49,276
インクリメントと
デクリメントを使います

314
00:21:49,476 --> 00:21:52,346
カスタム要素に
可変のTraitを加え

315
00:21:52,446 --> 00:21:56,750
要素が コールバックに応答すると
支援技術に理解させます

316
00:21:56,850 --> 00:22:01,088
これで VoiceOver起動中は
上下のスワイプで

317
00:21:56,850 --> 00:22:01,088
これで VoiceOver起動中は
上下のスワイプで

318
00:22:01,188 --> 00:22:04,258
ビューが前後にスクロールされます

319
00:22:06,360 --> 00:22:09,396
次に情報のラベルを
見ましょう

320
00:22:09,530 --> 00:22:11,999
先ほどは順序がバラバラで

321
00:22:12,099 --> 00:22:15,969
値とラベルのコンテキストが
欠けていました

322
00:22:16,670 --> 00:22:19,206
コンテキストは重要です

323
00:22:19,306 --> 00:22:22,809
譲渡済みか知ろうと
ラベルに触れたのに

324
00:22:22,910 --> 00:22:27,314
“イエス”とだけ返されたら
途方に暮れるでしょう

325
00:22:27,414 --> 00:22:30,050
何を肯定したのか
分かりません

326
00:22:30,751 --> 00:22:33,220
画面操作も問題でした

327
00:22:33,320 --> 00:22:37,991
情報を得るため
14ものラベルをスワイプしましたね

328
00:22:38,091 --> 00:22:43,397
組み合わせれば
操作が半分になり 早くなります

329
00:22:44,364 --> 00:22:47,935
ラベルをグループ化し
１要素にすれば

330
00:22:48,035 --> 00:22:51,071
ラベルと値の関係が
理解できます

331
00:22:51,238 --> 00:22:54,541
ここでも使うのは
UIAccessibilityElementです

332
00:22:54,641 --> 00:22:56,977
ラベル１組に対して要素を作り

333
00:22:57,077 --> 00:23:00,681
ビューのaccessibilityElements
プロパティから返すのです

334
00:22:57,077 --> 00:23:00,681
ビューのaccessibilityElements
プロパティから返すのです

335
00:23:02,416 --> 00:23:05,018
また 先ほどのデモでは

336
00:23:05,119 --> 00:23:08,755
施設のビューが
３要素に分かれていました

337
00:23:08,856 --> 00:23:12,125
施設名 マップボタン
発信ボタンです

338
00:23:13,560 --> 00:23:16,897
ボタンにも
コンテキストが欠けていました

339
00:23:17,097 --> 00:23:22,469
施設名より先に触ると
何のボタンか分かりません

340
00:23:23,504 --> 00:23:27,141
３つが分離していると
要素の数が増え

341
00:23:27,241 --> 00:23:30,444
情報を探すのに
時間がかかります

342
00:23:30,544 --> 00:23:34,948
だから１要素にまとめ
操作を簡略化するのです

343
00:23:36,116 --> 00:23:39,019
優先順位も考慮すべきです

344
00:23:39,119 --> 00:23:42,689
最も必要な情報は
その犬がいる施設名です

345
00:23:42,789 --> 00:23:48,028
よってそれを最初に伝え
場所の特定と発信はあとにします

346
00:23:48,962 --> 00:23:53,000
これを実現するAPIは
accessibilityCustomActionsです

347
00:23:53,200 --> 00:23:57,271
これなら要素に
アクションを加えられて

348
00:23:57,371 --> 00:24:00,240
ユーザは順に
情報に当たれます

349
00:23:57,371 --> 00:24:00,240
ユーザは順に
情報に当たれます

350
00:24:00,741 --> 00:24:04,278
特定のビューに
カスタムアクション配列を返せて

351
00:24:04,745 --> 00:24:07,448
アクションに名前もつきます

352
00:24:07,548 --> 00:24:12,019
ユーザが聞けば
アクションの内容が分かる名前です

353
00:24:12,119 --> 00:24:16,256
ターゲットとセレクタも
関連づけられます

354
00:24:17,958 --> 00:24:22,930
これで施設ビューの
アクセシビリティが向上します

355
00:24:24,364 --> 00:24:26,166
あとはギャラリーです

356
00:24:26,467 --> 00:24:31,538
先ほどはバックグラウンドでの
スワイプが可能でした

357
00:24:31,705 --> 00:24:35,709
モーダルビューに見えて
違ったわけです

358
00:24:35,809 --> 00:24:40,247
View Controllerで
モーダルにするのではなく

359
00:24:40,347 --> 00:24:44,117
階層のトップに
加えていただけだからです

360
00:24:44,384 --> 00:24:48,489
バックグラウンドの
コンテンツが見えるため

361
00:24:48,589 --> 00:24:50,891
VoiceOverが除外しません

362
00:24:51,892 --> 00:24:56,864
VoiceOverが 認識した
全ギャラリーを読み上げれば

363
00:24:56,964 --> 00:25:01,034
ユーザはコンテキストを見失い
混乱します

364
00:24:56,964 --> 00:25:01,034
ユーザはコンテキストを見失い
混乱します

365
00:25:02,102 --> 00:25:06,940
そこでaccessibilityViewIsModalと
オーバーライドして

366
00:25:07,040 --> 00:25:11,912
今 アクセスできる要素は
ビュー内だけだと認識させます

367
00:25:13,180 --> 00:25:16,550
オンスクリーン要素が
変わった時に

368
00:25:16,650 --> 00:25:20,821
再フォーカスを
促す通知も必要です

369
00:25:21,655 --> 00:25:24,525
これにはScreen Changeの
通知が使えます

370
00:25:26,193 --> 00:25:31,798
ここからはバビヤが
今 紹介したAPIの実装をします

371
00:25:32,332 --> 00:25:33,033
よろしく

372
00:25:34,501 --> 00:25:38,539
(拍手)

373
00:25:38,639 --> 00:25:39,640
ありがとう

374
00:25:39,740 --> 00:25:44,077
アクセシビリティ体験を
極上にしましょう

375
00:25:44,177 --> 00:25:45,579
Xcodeを開きます

376
00:25:53,120 --> 00:25:56,623
まずトップのカルーセルです

377
00:25:56,723 --> 00:25:59,560
DogCarouselContainerViewクラスに

378
00:25:59,660 --> 00:26:04,398
犬のコレクションビューと
２つのボタンが入っています

379
00:25:59,660 --> 00:26:04,398
犬のコレクションビューと
２つのボタンが入っています

380
00:26:04,598 --> 00:26:08,135
ここにインクリメントと
デクリメントを実装し

381
00:26:08,235 --> 00:26:11,405
上下スワイプでのスクロールを
可能にします

382
00:26:11,638 --> 00:26:14,541
そこで ここに
プロパティを作ります

383
00:26:14,641 --> 00:26:16,810
CarouselAccessibilityElementです

384
00:26:17,144 --> 00:26:21,048
これはカスタムの
UIAccessibilityElementです

385
00:26:22,382 --> 00:26:24,885
では実装しましょう

386
00:26:29,056 --> 00:26:31,758
UIAccessibilityElementの
サブクラスになります

387
00:26:31,859 --> 00:26:36,597
現在のオブジェクトを特定する
プロパティも作ります

388
00:26:39,266 --> 00:26:41,368
イニシャライザと―

389
00:26:43,036 --> 00:26:46,507
ラベルや値も記述しましょう

390
00:26:48,976 --> 00:26:50,844
ラベルは“Dog Picker”で

391
00:26:51,211 --> 00:26:55,582
値は犬の名前と
“お気に入り”のステータスです

392
00:26:58,285 --> 00:27:01,221
次にインクリメントと
デクリメントの機能です

393
00:26:58,285 --> 00:27:01,221
次にインクリメントと
デクリメントの機能です

394
00:27:01,321 --> 00:27:05,559
まず accessibilityTraitsを
オーバーライド

395
00:27:09,129 --> 00:27:11,498
先に インクリメントで―

396
00:27:15,002 --> 00:27:21,008
コレクションビューを
先に送る機能を実装します

397
00:27:27,881 --> 00:27:31,251
一番上の機能名を
見てください

398
00:27:31,351 --> 00:27:36,089
スクロールで送るか戻すか
ブーリアンで決めます

399
00:27:36,490 --> 00:27:38,091
細かく見ていきます

400
00:27:38,759 --> 00:27:44,498
containerViewとcurrentDogと
リスト全体を参照

401
00:27:45,265 --> 00:27:48,836
fowardsで currentDogの
インデックスが

402
00:27:48,936 --> 00:27:52,206
境界を超えないか確認します

403
00:27:52,940 --> 00:27:56,743
超えないなら
１つ先のインデックスへ

404
00:27:57,244 --> 00:28:03,016
戻る時は インデックスが
マイナスにならないか確かめて

405
00:27:57,244 --> 00:28:03,016
戻る時は インデックスが
マイナスにならないか確かめて

406
00:28:03,817 --> 00:28:07,054
コレクションビューを
１インデックス戻します

407
00:28:08,255 --> 00:28:11,191
ではインクリメントの
実装です

408
00:28:16,130 --> 00:28:18,866
前へのスクロールはtrueに

409
00:28:19,833 --> 00:28:22,870
デクリメントも
同様にできます

410
00:28:25,339 --> 00:28:29,343
違いは 戻るため
falseにする点です

411
00:28:29,710 --> 00:28:31,945
カルーセルの設定は以上です

412
00:28:32,312 --> 00:28:34,281
containerViewに戻ります

413
00:28:38,352 --> 00:28:41,588
CarouselAccessibilityElementを
開示するため

414
00:28:41,688 --> 00:28:44,858
accessibilityElementsを
オーバーライドします

415
00:28:50,130 --> 00:28:53,033
この機能で
currentDogを参照し

416
00:28:53,133 --> 00:28:56,336
要素を作る前に
有効か確認します

417
00:28:57,671 --> 00:29:00,874
CarouselAccessibilityElementの
インスタンスを生成します

418
00:28:57,671 --> 00:29:00,874
CarouselAccessibilityElementの
インスタンスを生成します

419
00:29:06,313 --> 00:29:10,918
もしこれが既存なら先に参照し
なければ―

420
00:29:11,018 --> 00:29:13,687
インスタンスを生成します

421
00:29:15,089 --> 00:29:19,193
アクセシビリティフレームを
dogCollectionViewにし

422
00:29:19,293 --> 00:29:21,328
ここに参照を保存

423
00:29:21,762 --> 00:29:24,865
最後に要素の配列を返します

424
00:29:25,532 --> 00:29:30,304
その前に 要素を少し
配列に加えたく思います

425
00:29:35,142 --> 00:29:38,412
currentDogに
写真が複数あるか確認します

426
00:29:38,512 --> 00:29:41,682
CarouselAccessibilityElementと
２つのボタンで

427
00:29:41,782 --> 00:29:43,984
配列を構成したいからです

428
00:29:44,084 --> 00:29:48,622
写真が１枚なら
ギャラリーボタンは省きます

429
00:29:51,658 --> 00:29:57,164
containerViewで
当該のプロパティが更新されれば

430
00:29:57,264 --> 00:30:01,235
CarouselAccessibilityElementで
currentDogプロパティも更新します

431
00:29:57,264 --> 00:30:01,235
CarouselAccessibilityElementで
currentDogプロパティも更新します

432
00:30:05,973 --> 00:30:07,040
あと少しです

433
00:30:07,274 --> 00:30:10,043
カルーセルをスワイプした時

434
00:30:10,544 --> 00:30:14,214
犬の情報も
連動して変わりましたね

435
00:30:14,448 --> 00:30:17,851
だからVoiceOverの起動中も

436
00:30:17,951 --> 00:30:22,589
画像が更新されたら
VoiceOverに理解させるべきです

437
00:30:22,956 --> 00:30:26,927
そこで スクロール時に
レイアウト変更通知を出します

438
00:30:28,562 --> 00:30:33,634
そこでView Controllerに行き
scrollViewDidScroll機能の中で

439
00:30:33,734 --> 00:30:37,805
最後にこのように
レイアウト変更通知を書きます

440
00:30:40,474 --> 00:30:42,509
containerViewはこれで万全

441
00:30:43,944 --> 00:30:48,582
アクセシビリティ要素を
使ったり作ったりするのがカギです

442
00:30:48,715 --> 00:30:53,420
データ部分の問題にも
同じ発想を応用できます

443
00:30:53,720 --> 00:30:58,659
情報が分断され
コンテキストが欠けていましたね

444
00:30:58,759 --> 00:31:00,794
そこで カルーセルと同様に

445
00:30:58,759 --> 00:31:00,794
そこで カルーセルと同様に

446
00:31:00,894 --> 00:31:05,132
データ部分の情報も
グループ化します

447
00:31:08,168 --> 00:31:11,638
データはDogStatsViewに
入っています

448
00:31:14,908 --> 00:31:18,645
まずaccessibilityElementsを
オーバーライド

449
00:31:25,119 --> 00:31:30,691
作った要素をキャッシュすれば
何度も再計算せずに済みます

450
00:31:30,791 --> 00:31:34,461
そこでプライベートプロパティ
 accessibilityElementsを作成

451
00:31:34,561 --> 00:31:37,264
これがキャッシュになります

452
00:31:38,398 --> 00:31:39,833
そして機能です

453
00:31:42,903 --> 00:31:47,708
キャッシュを確認し
空なら要素を追加します

454
00:31:48,709 --> 00:31:50,944
全titleLabelsを反復し

455
00:31:51,044 --> 00:31:55,549
“品種”といった
タイトルラベルを参照します

456
00:31:56,049 --> 00:31:59,953
“ラブラドール”など
該当する値も参照

457
00:32:01,522 --> 00:32:04,591
タイトルと値を参照したら

458
00:32:04,691 --> 00:32:09,696
アクセシビリティ要素を作り
両者をつなぎます

459
00:32:21,241 --> 00:32:26,747
ここに要素を作り
ラベルとフレームを設定して

460
00:32:26,847 --> 00:32:31,452
該当するタイトルと値を
組み合わせます

461
00:32:33,387 --> 00:32:36,123
この要素を配列に追加

462
00:32:37,491 --> 00:32:41,228
タイトルと値の全ペアを
ループしたら

463
00:32:41,328 --> 00:32:45,833
キャッシュをこの配列と等しくして
要素を返します

464
00:32:47,367 --> 00:32:49,937
犬オブジェクトが
更新されたら

465
00:32:50,037 --> 00:32:55,609
都度キャッシュをリセットし
新しい犬の要素も計算させます

466
00:32:56,577 --> 00:32:59,713
そのため ここはnilに設定します

467
00:33:02,616 --> 00:33:04,451
DogStatsViewは以上です

468
00:33:05,252 --> 00:33:09,790
次に 発信とマップのボタンに
コンテキストを加えます

469
00:33:11,391 --> 00:33:13,460
施設情報はShelterInfoView

470
00:33:14,561 --> 00:33:19,266
施設名 マップボタン
発信ボタンを参照しています

471
00:33:20,868 --> 00:33:26,039
両ボタンは
カスタムアクションにしたいので

472
00:33:26,140 --> 00:33:30,577
アクセシビリティ要素として
ビューを開示します

473
00:33:34,548 --> 00:33:38,051
施設名なので
記述式ラベルにします

474
00:33:42,589 --> 00:33:45,759
accessibilityCustomActionsを
オーバーライド

475
00:33:50,297 --> 00:33:53,267
カスタムアクションは
２つ作ります

476
00:33:53,367 --> 00:33:55,903
mapActionとcallActionです

477
00:33:56,370 --> 00:34:00,107
“マップで場所を表示”
“発信”と発声されます

478
00:33:56,370 --> 00:34:00,107
“マップで場所を表示”
“発信”と発声されます

479
00:34:00,207 --> 00:34:02,443
ストリングはローカライズを

480
00:34:04,178 --> 00:34:08,815
各アクションが機能を呼び出し
ボタンがアクティブになります

481
00:34:09,116 --> 00:34:12,886
mapActionなら
activateMapButtonが呼び出され

482
00:34:12,985 --> 00:34:14,321
マップボタンがアクティブに

483
00:34:15,522 --> 00:34:19,458
機能はこちらで定義しました

484
00:34:21,161 --> 00:34:24,665
メソッドが成功すれば
trueを返します

485
00:34:25,666 --> 00:34:27,034
以上が施設のビューで―

486
00:34:28,402 --> 00:34:32,438
最後にモーダルビューも
改善しましょう

487
00:34:33,974 --> 00:34:36,476
DogModalViewで定義します

488
00:34:36,810 --> 00:34:40,681
VoiceOverにモーダルビューだと
認識させるため

489
00:34:40,781 --> 00:34:43,317
accessibilityViewIsModalと
オーバーライド

490
00:34:47,920 --> 00:34:49,089
あと少しです

491
00:34:50,090 --> 00:34:52,926
ギャラリーボタンを
押した時には

492
00:34:53,327 --> 00:34:56,996
レイアウト変更を
アプリケーションに伝え―

493
00:34:57,097 --> 00:35:00,000
VoiceOverの
フォーカスを保ちます

494
00:35:00,334 --> 00:35:05,239
そこで ギャラリーボタン押下で
画面変更を通知します

495
00:35:06,673 --> 00:35:08,642
View Controllerに入ります

496
00:35:10,844 --> 00:35:13,280
ギャラリーボタンを
押した時の機能で

497
00:35:14,014 --> 00:35:18,852
モーダルビューで動きがあれば
変更通知を入れます

498
00:35:21,488 --> 00:35:22,890
これだけです

499
00:35:24,324 --> 00:35:27,327
アクセシビリティを
更新したので

500
00:35:27,427 --> 00:35:30,831
体験が改善されたか
確認しましょう

501
00:35:35,369 --> 00:35:36,937
VoiceOverをオンにします

502
00:35:38,272 --> 00:35:39,373
“VoiceOver オン”

503
00:35:39,473 --> 00:35:40,741
“Exceptional Dogs”

504
00:35:40,841 --> 00:35:42,609
“犬を選択　ピンキー”

505
00:35:42,709 --> 00:35:43,877
“調整可能”

506
00:35:44,845 --> 00:35:48,348
“１本指で上下にスワイプして
値を調整”

507
00:35:48,515 --> 00:35:52,152
上下スワイプが可能だと
言いましたね

508
00:35:52,452 --> 00:35:54,788
カルーセルを動かしましょう

509
00:35:55,088 --> 00:35:55,956
“レイラ”

510
00:35:56,356 --> 00:35:58,992
下にスワイプします

511
00:35:59,293 --> 00:36:00,294
“ピンキー”

512
00:35:59,293 --> 00:36:00,294
“ピンキー”

513
00:36:00,761 --> 00:36:05,065
左から右にスワイプして
ボタンを見つけます

514
00:36:05,165 --> 00:36:07,267
“お気に入りボタン オフ”

515
00:36:07,367 --> 00:36:09,436
“ギャラリーを見る ボタン”

516
00:36:10,070 --> 00:36:13,240
これですべての犬に
アクセスでき

517
00:36:13,340 --> 00:36:17,211
２つのボタンも
すぐ見つかりました

518
00:36:17,811 --> 00:36:22,950
左から右にスワイプすれば
データ部分に飛べます

519
00:36:23,684 --> 00:36:25,419
“名前 ピンキー”

520
00:36:25,686 --> 00:36:30,457
カルーセル閲覧を中断でき
体験が改善しました

521
00:36:31,058 --> 00:36:34,661
データ部分の操作を
続けましょう

522
00:36:34,761 --> 00:36:37,264
左から右にスワイプします

523
00:36:37,598 --> 00:36:39,333
“品種 ミックス”

524
00:36:39,433 --> 00:36:42,202
“年齢 7.0歳”

525
00:36:42,936 --> 00:36:47,274
情報がグループ化され
コンテキストができ

526
00:36:47,374 --> 00:36:52,045
全ラベルを開かなくてよくなり
操作が早くなりました

527
00:36:52,913 --> 00:36:55,749
施設名の上に指を置きます

528
00:36:56,250 --> 00:36:58,218
“スカイラー保護施設”

529
00:36:59,186 --> 00:37:00,688
“アクション可能”

530
00:36:59,186 --> 00:37:00,688
“アクション可能”

531
00:37:01,188 --> 00:37:05,259
アクションがあるとのことなので
上にスワイプ

532
00:37:05,526 --> 00:37:07,361
“マップで場所を表示”

533
00:37:07,828 --> 00:37:08,729
“発信”

534
00:37:09,096 --> 00:37:14,868
施設名に関連のある
アクションであることが明白になり

535
00:37:14,968 --> 00:37:16,803
コンテキストができました

536
00:37:17,471 --> 00:37:21,308
最後にギャラリーボタンを
ダブルタップ

537
00:37:21,608 --> 00:37:23,677
“ギャラリーを見る ボタン”

538
00:37:25,078 --> 00:37:27,081
“ピンキーの写真１　画像”

539
00:37:27,181 --> 00:37:29,449
左から右にスワイプ

540
00:37:29,550 --> 00:37:31,185
“写真２ 写真３”

541
00:37:31,285 --> 00:37:33,821
“閉じる 閉じる 閉じる”

542
00:37:33,921 --> 00:37:34,688
“ボタン”

543
00:37:34,788 --> 00:37:39,059
フォーカスは
モーダルビューから外れません

544
00:37:40,227 --> 00:37:41,695
“VoiceOver オフ”

545
00:37:45,132 --> 00:37:50,604
(拍手)

546
00:37:50,704 --> 00:37:56,777
これでアクセシビリティ体験が
使用可能から極上になりました

547
00:37:56,877 --> 00:38:02,449
実際の操作感を確認しながら
開発を行ったことで

548
00:37:56,877 --> 00:38:02,449
実際の操作感を確認しながら
開発を行ったことで

549
00:38:02,549 --> 00:38:06,453
ユーザの負担を
劇的に軽減させました

550
00:38:06,753 --> 00:38:13,093
ユーザはデベロッパの努力を喜び
アプリケーションを楽しめます

551
00:38:13,193 --> 00:38:14,928
締めはスカイラーから

552
00:38:16,563 --> 00:38:20,200
(拍手)

553
00:38:20,300 --> 00:38:21,501
ありがとう

554
00:38:22,736 --> 00:38:24,838
今のバビヤのデモで

555
00:38:24,938 --> 00:38:29,309
微調整が生む変化が
分かったと思います

556
00:38:29,843 --> 00:38:33,847
インターフェイスを
カスタムにしなくても

557
00:38:33,947 --> 00:38:39,486
単純な修正で
アクセシビリティを向上できます

558
00:38:39,953 --> 00:38:43,757
アプリケーションを
アクセシブルにする際は

559
00:38:44,157 --> 00:38:46,293
表面的な考え方を捨て―

560
00:38:46,393 --> 00:38:51,999
支援技術を使うユーザにとって
何が大事か考えるのです

561
00:38:53,167 --> 00:38:56,303
まとめとして
冒頭の話に戻ります

562
00:38:56,603 --> 00:39:00,174
使えることは
大きな第一歩ですが

563
00:38:56,603 --> 00:39:00,174
使えることは
大きな第一歩ですが

564
00:39:00,474 --> 00:39:02,476
上を目指しましょう

565
00:39:03,210 --> 00:39:05,979
各ユーザの
ニーズに応える―

566
00:39:06,079 --> 00:39:10,450
極上の楽しい体験を
提供できるはずです

567
00:39:11,618 --> 00:39:15,889
アプリケーションを
極上にする方法はいくつもあります

568
00:39:16,723 --> 00:39:20,294
アクセシブルな設計には
利点があります

569
00:39:20,394 --> 00:39:25,098
色のコントラスト比を
推奨値以上にしたり

570
00:39:25,198 --> 00:39:31,338
レイアウトを変えられたりすれば
全ユーザが恩恵を受けます

571
00:39:31,672 --> 00:39:36,543
ユーザの設定に合わせて
デフォルト設計を拡張してください

572
00:39:38,045 --> 00:39:42,616
支援技術を使った
アクセシビリティ体験には

573
00:39:42,716 --> 00:39:46,320
目的意識と
優先順位が大事です

574
00:39:46,420 --> 00:39:50,824
簡単で直感的な操作と
コンテキストを忘れずに

575
00:39:52,359 --> 00:39:58,499
このセッションの詳細と
デモをしたアプリケーションは

576
00:39:58,599 --> 00:40:01,235
画面のURLにあります

577
00:39:58,599 --> 00:40:01,235
画面のURLにあります

578
00:40:01,401 --> 00:40:03,437
また 私たちは―

579
00:40:03,537 --> 00:40:07,574
アクセシビリティに関する
ラボも行います

580
00:40:07,674 --> 00:40:13,013
ご自分のアプリケーションを
アクセシブルにする方法など

581
00:40:13,113 --> 00:40:15,115
具体的な質問にも答えます

582
00:40:15,215 --> 00:40:17,718
そちらもご参加ください

583
00:40:18,218 --> 00:40:20,921
では 楽しいWWDCを

584
00:40:21,021 --> 00:40:23,156
(拍手)