
1
00:00:07,074 --> 00:00:16,483
(音楽)

2
00:00:17,518 --> 00:00:26,193
(拍手)

3
00:00:26,827 --> 00:00:27,427
こんにちは

4
00:00:27,528 --> 00:00:31,832
私ポールと同僚のジョシュが
話すテーマは

5
00:00:31,932 --> 00:00:35,002
Siriの文字盤の
Siri Shortcutsです

6
00:00:36,303 --> 00:00:40,974
昨年 一目で分かる
Siriの文字盤を発表

7
00:00:41,074 --> 00:00:43,944
手首を上げると
情報が表示されます

8
00:00:44,278 --> 00:00:47,481
ユーザが今一番
欲しい情報を

9
00:00:47,581 --> 00:00:50,751
自動で更新し提供するのです

10
00:00:51,718 --> 00:00:54,821
watchOS 5では
アプリケーションも文字盤の

11
00:00:54,922 --> 00:00:57,124
データソースになります

12
00:00:58,125 --> 00:01:02,229
ショートカットは文字盤の
“プラッター”で見られます

13
00:00:58,125 --> 00:01:02,229
ショートカットは文字盤の
“プラッター”で見られます

14
00:01:02,496 --> 00:01:06,166
使う際は
これをタップするだけです

15
00:01:06,466 --> 00:01:07,835
状況に合わせて―

16
00:01:07,935 --> 00:01:10,604
アプリケーションを
起動できます

17
00:01:11,271 --> 00:01:14,107
バックグラウンド処理
対応なら

18
00:01:14,641 --> 00:01:16,944
文字盤上で使えます

19
00:01:17,511 --> 00:01:19,980
アプリケーションの機能を

20
00:01:20,080 --> 00:01:21,782
すぐに使えるのです

21
00:01:22,616 --> 00:01:24,618
では本日の概要です

22
00:01:24,818 --> 00:01:28,255
まずは文字盤の
コンテンツ表示について

23
00:01:29,122 --> 00:01:31,425
次はコンテンツ表示のための

24
00:01:31,525 --> 00:01:34,828
Relevant Shortcuts APIの
話です

25
00:01:36,029 --> 00:01:41,034
iOSから文字盤への
コンテンツ提供も説明します

26
00:01:41,735 --> 00:01:45,072
ジョシュは予測エンジンと

27
00:01:45,405 --> 00:01:49,309
APIの最適な使用方法を
紹介します

28
00:01:51,078 --> 00:01:54,047
まずは文字盤での
表示方法です

29
00:01:55,115 --> 00:01:58,519
すべてユーザとの関連で
ソートします

30
00:01:58,752 --> 00:02:02,656
関連性が高い順に
上から表示されます

31
00:01:58,752 --> 00:02:02,656
関連性が高い順に
上から表示されます

32
00:02:02,990 --> 00:02:06,894
多数のインプットから
関連を計算します

33
00:02:06,994 --> 00:02:10,264
例えば 時刻 位置情報
日々の行動

34
00:02:10,364 --> 00:02:12,432
データへの関与などです

35
00:02:13,433 --> 00:02:17,771
Relevant Shortcutsが
提供するコンテンツには

36
00:02:17,971 --> 00:02:22,042
UIや表示のタイミングも
紐づいています

37
00:02:22,910 --> 00:02:26,380
そしてユーザの
使用履歴に基づき

38
00:02:26,480 --> 00:02:29,383
コンテンツの関連性が
決まります

39
00:02:29,550 --> 00:02:34,154
しかし 最適な情報や
未使用のショートカットを

40
00:02:34,321 --> 00:02:37,357
提案したいと思いますよね

41
00:02:37,457 --> 00:02:39,927
そこでRelevance
Providerを使います

42
00:02:40,727 --> 00:02:42,629
ユーザが簡単に

43
00:02:42,729 --> 00:02:45,699
データソースの
オンとオフができます

44
00:02:45,799 --> 00:02:48,802
文字盤の
設定画面で行います

45
00:02:50,370 --> 00:02:53,373
APIの話を進める前に

46
00:02:53,473 --> 00:02:56,276
関連の計算について
補足します

47
00:02:56,376 --> 00:02:58,178
ショートカットの表示を

48
00:02:58,278 --> 00:03:00,280
決める手順です

49
00:02:58,278 --> 00:03:00,280
決める手順です

50
00:03:00,647 --> 00:03:01,548
開発中は

51
00:03:01,648 --> 00:03:05,452
iOS設定の
開発画面にいきます

52
00:03:05,919 --> 00:03:07,788
そこのテストセクションに

53
00:03:08,922 --> 00:03:12,359
“最近のショートカットを
表示”があります

54
00:03:12,459 --> 00:03:14,127
これをオンにすれば

55
00:03:14,228 --> 00:03:16,930
最新のショートカットが
上に表示されます

56
00:03:20,067 --> 00:03:24,238
また このAPIで
iOSアプリケーションでも

57
00:03:24,605 --> 00:03:28,876
ショートカットをWatchと
同期できます

58
00:03:28,976 --> 00:03:32,145
“Watchと同期”を
タップするだけです

59
00:03:33,914 --> 00:03:35,916
Relevant Shortcutsの話に
戻ります

60
00:03:36,049 --> 00:03:38,552
そのコアは
ショートカットです

61
00:03:39,253 --> 00:03:42,523
ショートカットで
アプリケーションを

62
00:03:42,623 --> 00:03:44,892
より簡単に利用できます

63
00:03:45,225 --> 00:03:47,961
Siriにキーワードを言うか

64
00:03:48,061 --> 00:03:49,863
タップで実行します

65
00:03:49,963 --> 00:03:53,300
Watchだと文字盤の
プラッターです

66
00:03:54,434 --> 00:03:57,771
今年のショートカットの
開発では

67
00:03:57,871 --> 00:04:01,642
watchOSでの使用が
話の焦点です

68
00:03:57,871 --> 00:04:01,642
watchOSでの使用が
話の焦点です

69
00:04:01,742 --> 00:04:04,745
“Introduction to
Siri Shortcuts”と

70
00:04:04,845 --> 00:04:08,916
“Building for Voice with
Siri Shortcuts”もぜひ

71
00:04:10,117 --> 00:04:12,786
ショートカットの
作り方は２つ

72
00:04:13,220 --> 00:04:14,521
１つは
NSUserActivity

73
00:04:14,621 --> 00:04:18,192
ユーザの使用状態を指します

74
00:04:18,791 --> 00:04:22,329
２つ目のIntentは
タスクを実行します

75
00:04:23,030 --> 00:04:26,833
バックグラウンド処理が
可能なので

76
00:04:26,934 --> 00:04:31,004
アプリケーション起動の
手間が省けます

77
00:04:31,238 --> 00:04:33,974
Apple Watchや
HomePodのIntentを

78
00:04:34,074 --> 00:04:37,044
iPhoneでも使えます

79
00:04:38,045 --> 00:04:41,615
既存のIntentは
多くあります

80
00:04:41,715 --> 00:04:44,885
メッセージ送信
運動 配車など

81
00:04:45,219 --> 00:04:47,354
しかし watchOS 5と
iOS 12では

82
00:04:47,454 --> 00:04:49,189
Intentを作れます

83
00:04:49,289 --> 00:04:51,725
カスタマイズできるのです

84
00:04:52,326 --> 00:04:56,930
Xcodeに定義ファイルと
エディタがあります

85
00:04:57,030 --> 00:04:59,466
Relevant Shortcutsの
要旨を話しますが

86
00:04:59,566 --> 00:05:02,302
前出のプレゼンも
ご覧ください

87
00:04:59,566 --> 00:05:02,302
前出のプレゼンも
ご覧ください

88
00:05:03,704 --> 00:05:06,640
では Watchの
ショートカット使用例を

89
00:05:06,740 --> 00:05:08,242
見ていきましょう

90
00:05:09,510 --> 00:05:12,646
ユーザがショートカットを
利用する際

91
00:05:12,746 --> 00:05:16,550
タップするか
キーワードを言います

92
00:05:16,783 --> 00:05:18,352
それにWatchが反応し

93
00:05:18,519 --> 00:05:22,589
対応可能な
アプリケーションを探します

94
00:05:22,923 --> 00:05:25,425
この例では見つかりました

95
00:05:25,526 --> 00:05:28,996
それにショートカットを
割り当てます

96
00:05:29,596 --> 00:05:33,500
バックグラウンド処理が
可能な場合

97
00:05:34,067 --> 00:05:37,137
Intentが
ショートカットを実行

98
00:05:37,404 --> 00:05:41,842
NSUserActivityなど
バックグラウンドの対象外は

99
00:05:41,942 --> 00:05:44,878
アプリケーションが
実行します

100
00:05:45,746 --> 00:05:49,917
その後 結果が
画面に表示されます

101
00:05:51,084 --> 00:05:52,653
次の例です

102
00:05:52,986 --> 00:05:56,490
ユーザが
タップかキーワードで

103
00:05:56,590 --> 00:05:58,692
ショートカットを使います

104
00:05:59,059 --> 00:06:00,527
Watchが検証します

105
00:05:59,059 --> 00:06:00,527
Watchが検証します

106
00:06:00,661 --> 00:06:05,165
今回は対応できる
アプリケーションがありません

107
00:06:05,532 --> 00:06:10,470
iPhone内でも検索され
見つかりました

108
00:06:10,571 --> 00:06:16,276
そこで要請を転送し
ショートカットを実行します

109
00:06:17,511 --> 00:06:22,649
iPhoneで結果が出たら
Watchに戻ります

110
00:06:24,651 --> 00:06:28,755
以上がショートカットの
作成と実行の概要です

111
00:06:28,856 --> 00:06:30,424
次はRelevant Shortcutsの
話です

112
00:06:30,657 --> 00:06:33,894
関連の高さで表示を決めます

113
00:06:34,962 --> 00:06:38,298
その時に
必要なショートカットを

114
00:06:38,398 --> 00:06:40,100
自動的に文字盤に表示します

115
00:06:40,467 --> 00:06:44,872
プラッター画面は
カスタマイズも可能です

116
00:06:46,573 --> 00:06:49,776
もちろん実行にはタップだけ

117
00:06:50,177 --> 00:06:52,579
それでは見ていきましょう

118
00:06:53,380 --> 00:06:55,582
UserActivityの場合

119
00:06:55,682 --> 00:06:58,619
タップすると
アプリケーションは起動します

120
00:06:59,119 --> 00:07:00,988
ショートカット完了です

121
00:06:59,119 --> 00:07:00,988
ショートカット完了です

122
00:07:02,055 --> 00:07:05,359
Intentを使った場合

123
00:07:05,559 --> 00:07:08,762
タップすると
“確認”が出ます

124
00:07:09,396 --> 00:07:13,834
タップすると
Intentが直接実行するか

125
00:07:14,468 --> 00:07:20,007
アプリケーションを起動後
実行します

126
00:07:21,175 --> 00:07:23,710
Relevant Shortcutsの
APIを見ましょう

127
00:07:24,244 --> 00:07:26,680
そのコアは
ショートカットです

128
00:07:27,014 --> 00:07:30,784
Relevance Provider
については

129
00:07:30,884 --> 00:07:32,119
あとで説明します

130
00:07:33,120 --> 00:07:37,124
ショートカットに加えて
UIをカスタマイズする場合

131
00:07:37,224 --> 00:07:40,327
DefaultCardTemplateを
使います

132
00:07:42,162 --> 00:07:45,866
Relevant Shortcutsの
作成後は

133
00:07:45,966 --> 00:07:48,435
ストアにセットします

134
00:07:48,669 --> 00:07:50,771
配列を渡してください

135
00:07:50,938 --> 00:07:55,075
すると 過去のコンテンツが
上書きされ

136
00:07:55,209 --> 00:07:57,945
ストアが更新されます

137
00:07:58,045 --> 00:08:02,382
関連する事柄を すべて
網羅することが重要です

138
00:07:58,045 --> 00:08:02,382
関連する事柄を すべて
網羅することが重要です

139
00:08:04,184 --> 00:08:06,553
次は表示についてです

140
00:08:06,720 --> 00:08:11,058
左上にアイコン
続いてアプリケーション名

141
00:08:11,492 --> 00:08:13,327
次に見出しがあり

142
00:08:13,427 --> 00:08:17,231
もう１行
補足文も入れられます

143
00:08:17,331 --> 00:08:18,932
イタリック体です

144
00:08:19,233 --> 00:08:22,369
左側にカスタム画像も
出せます

145
00:08:22,736 --> 00:08:26,173
透過して
角が丸いタイプです

146
00:08:26,707 --> 00:08:28,909
寸法の詳細については

147
00:08:29,009 --> 00:08:32,044
watchOSのHIGを
ご覧ください

148
00:08:32,645 --> 00:08:37,116
枠内はショートカットから
自動で表示されます

149
00:08:38,085 --> 00:08:39,586
カスタムIntentでは

150
00:08:39,820 --> 00:08:44,491
すべてのパラメータに
関連する見出しがあります

151
00:08:45,459 --> 00:08:48,428
また どのパラメータにも
コードで

152
00:08:48,795 --> 00:08:51,031
画像を設定できます

153
00:08:51,365 --> 00:08:53,167
パラメータの関連性の高さで

154
00:08:53,267 --> 00:08:56,670
表示される画像が
選択されます

155
00:08:57,237 --> 00:09:02,576
定義ファイル内の順番で
パラメータの特異性を定義します

156
00:08:57,237 --> 00:09:02,576
定義ファイル内の順番で
パラメータの特異性を定義します

157
00:09:04,311 --> 00:09:08,815
NSUserActivityで
ショートカットを作る場合

158
00:09:08,982 --> 00:09:13,020
Info.plistからuserActivityタイプ
を指定します

159
00:09:13,153 --> 00:09:17,825
見出しは“Title”に
設定してください

160
00:09:18,525 --> 00:09:22,229
iOSではCSSearchableItem
AttributeSetを使い

161
00:09:22,329 --> 00:09:25,299
補足文と画像を設定できます

162
00:09:26,200 --> 00:09:29,937
補足文は
contentDescriptionに

163
00:09:30,304 --> 00:09:32,539
画像はthumbnailDataに
セット

164
00:09:33,407 --> 00:09:38,479
属性セットはcontent
AttributeSetに設定

165
00:09:40,380 --> 00:09:44,117
ショートカットの
コンテンツを使わない場合

166
00:09:44,218 --> 00:09:48,288
DefaultCardTemplateを
使用します

167
00:09:48,455 --> 00:09:51,992
内容に応じて
レイアウトが決まります

168
00:09:52,459 --> 00:09:55,162
右２つは画像がありません

169
00:09:55,262 --> 00:09:58,966
その場合 テキストを
左に寄せます

170
00:09:59,666 --> 00:10:02,002
下２つは補足文がないので

171
00:09:59,666 --> 00:10:02,002
下２つは補足文がないので

172
00:10:02,102 --> 00:10:04,671
見出しを２行にできます

173
00:10:06,807 --> 00:10:10,077
Intentのショートカットでは

174
00:10:10,177 --> 00:10:12,146
確認画面が現れます

175
00:10:12,646 --> 00:10:15,549
左上はアイコンで
少し大きめです

176
00:10:15,649 --> 00:10:17,117
隣にアプリケーション名

177
00:10:17,384 --> 00:10:21,221
下に見出しと補足文が
表示されます

178
00:10:21,688 --> 00:10:23,857
ユーザの選択肢は３つ

179
00:10:24,091 --> 00:10:27,828
中央のピンクのボタンを
タップして実行

180
00:10:28,061 --> 00:10:31,265
“Dismiss”か
Digital Crownで終了

181
00:10:31,498 --> 00:10:33,400
３つ目の選択肢は

182
00:10:33,867 --> 00:10:38,105
ショートカットの内容を
変更する場合です

183
00:10:38,238 --> 00:10:40,974
上の枠をタップします

184
00:10:41,074 --> 00:10:44,578
アプリケーションが起動し
Intentが戻ります

185
00:10:44,678 --> 00:10:47,915
そこでユーザが
編集できるように

186
00:10:48,015 --> 00:10:49,583
UIを作れます

187
00:10:50,684 --> 00:10:53,754
確認ボタンについて
説明します

188
00:10:55,255 --> 00:10:57,090
“Action Verb”の文字列は

189
00:10:57,191 --> 00:11:01,495
定義ファイルの
カテゴリーから取得されます

190
00:10:57,191 --> 00:11:01,495
定義ファイルの
カテゴリーから取得されます

191
00:11:02,729 --> 00:11:08,302
色はアプリケーションの
Global Tintの色です

192
00:11:09,636 --> 00:11:13,106
Watchのアプリケーションは

193
00:11:13,207 --> 00:11:16,477
iOSのものと同じになります

194
00:11:16,643 --> 00:11:22,082
つまり 見出しや補足文の
文字列が同一です

195
00:11:22,249 --> 00:11:25,686
Watchは小さく
文字の制限が厳しい

196
00:11:25,953 --> 00:11:28,255
NSStringVariable
WidthRuleTypeを使った

197
00:11:28,355 --> 00:11:31,258
文字列辞書をお勧めします

198
00:11:31,492 --> 00:11:35,195
これで表示に合うサイズの
文字列を

199
00:11:35,362 --> 00:11:37,231
渡すことができます

200
00:11:38,432 --> 00:11:42,336
watchOSの
文字列のルールは

201
00:11:42,436 --> 00:11:45,539
38ミリのWatchには
20が良く

202
00:11:45,639 --> 00:11:48,475
42ミリには24が最適です

203
00:11:50,077 --> 00:11:52,746
このAPIの詳細は

204
00:11:52,846 --> 00:11:55,949
昨年の“Localizing with
Xcode 9”をご覧ください

205
00:11:57,751 --> 00:11:59,887
次はRelevance Providerの
話です

206
00:12:01,154 --> 00:12:05,492
これは情報をいつ出すかの
ヒントを与えます

207
00:12:06,326 --> 00:12:09,396
時間や位置情報などの
インプットの

208
00:12:09,496 --> 00:12:12,599
関連性の高さを
教えてくれます

209
00:12:13,167 --> 00:12:16,203
１つのショートカットに
Providerが２つの場合

210
00:12:16,637 --> 00:12:18,739
両方に該当すれば有効です

211
00:12:19,039 --> 00:12:22,209
例えば １つは時間の情報

212
00:12:22,543 --> 00:12:24,645
もう１つは場所の情報です

213
00:12:25,012 --> 00:12:28,215
時間と場所の両方に
合致すると

214
00:12:28,315 --> 00:12:30,050
関連が高くなります

215
00:12:30,484 --> 00:12:32,920
片方でも有効とする場合は

216
00:12:33,020 --> 00:12:37,691
２つのショートカットを
作成してください

217
00:12:38,892 --> 00:12:40,861
では具体例に移ります

218
00:12:41,461 --> 00:12:44,064
INDateRelevance
Providerには

219
00:12:44,498 --> 00:12:47,868
startDateとendDateを
設定します

220
00:12:48,402 --> 00:12:50,537
開始日に近づくと

221
00:12:50,838 --> 00:12:55,609
このProviderの関連性が
上がります

222
00:12:56,109 --> 00:12:59,246
その日を過ぎると
関連性が下がり

223
00:12:59,346 --> 00:13:01,448
他の情報が上にきます

224
00:12:59,346 --> 00:13:01,448
他の情報が上にきます

225
00:13:01,648 --> 00:13:05,619
終了日も設定した場合
その曲線が調整されます

226
00:13:07,120 --> 00:13:09,890
位置情報が重要な時は

227
00:13:09,990 --> 00:13:12,359
INLocationRelevance
Providerです

228
00:13:13,060 --> 00:13:16,997
CLRegionをパラメータと
しています

229
00:13:17,097 --> 00:13:19,299
そこにユーザが近づくと

230
00:13:19,500 --> 00:13:22,669
このProviderの関連性が上昇

231
00:13:23,670 --> 00:13:25,939
次は特定の時間も場所も

232
00:13:26,039 --> 00:13:28,742
決まっていない例です

233
00:13:30,177 --> 00:13:33,814
予定や好きな場所は
人それぞれです

234
00:13:33,914 --> 00:13:36,817
すべてを
追跡したくありません

235
00:13:36,917 --> 00:13:41,455
INDailyRoutineRelevance
Providerを使えば

236
00:13:41,555 --> 00:13:45,792
賢いSiriが適切な
時と場所を判断します

237
00:13:46,260 --> 00:13:50,497
例えばユーザが朝
天気予報を見る場合

238
00:13:50,631 --> 00:13:53,033
起床時間の設定は不要です

239
00:13:53,133 --> 00:13:55,169
“朝”と設定するだけです

240
00:13:55,669 --> 00:13:58,705
ジムでの運動を提案するなら

241
00:13:58,805 --> 00:14:00,774
“ジム”という状況だけ

242
00:13:58,805 --> 00:14:00,774
“ジム”という状況だけ

243
00:14:03,010 --> 00:14:07,214
では実際にRelevant
Shorcutsを作りましょう

244
00:14:07,881 --> 00:14:11,518
この架空の
アプリケーションでは

245
00:14:11,618 --> 00:14:14,822
課題を決め
食事をログします

246
00:14:14,922 --> 00:14:17,991
今週の課題は野菜です

247
00:14:18,292 --> 00:14:20,561
食事ログの
userActivityを―

248
00:14:21,128 --> 00:14:22,362
生成します

249
00:14:22,462 --> 00:14:25,699
タイプは
com.myapp.LogMealです

250
00:14:25,899 --> 00:14:27,968
夕食時に表示させるため

251
00:14:28,068 --> 00:14:32,072
userInfoの辞書に
“夕食”と設定

252
00:14:32,873 --> 00:14:34,608
userActivityのあとは

253
00:14:34,708 --> 00:14:37,911
ショートカットとRelevant
Shortcutsを作成します

254
00:14:38,679 --> 00:14:43,684
さて 課題は野菜だと
文字盤に出したいですね

255
00:14:43,784 --> 00:14:46,854
UIをカスタマイズし見出しを

256
00:14:47,020 --> 00:14:48,689
“夕食をログ”とします

257
00:14:48,889 --> 00:14:52,759
補足文と画像には
“野菜が課題”と出ます

258
00:14:53,827 --> 00:14:57,231
夕食のログは毎日しなくても

259
00:14:57,331 --> 00:14:58,665
課題は継続します

260
00:14:58,765 --> 00:15:02,002
そのため夕食時には
表示したい

261
00:14:58,765 --> 00:15:02,002
そのため夕食時には
表示したい

262
00:15:02,102 --> 00:15:04,338
DailyRoutineRelevance
Providerを渡し

263
00:15:04,438 --> 00:15:05,939
“夕方”と設定

264
00:15:06,540 --> 00:15:10,878
設定したRelevant
Shorcutsをストアに渡します

265
00:15:12,279 --> 00:15:13,614
次の例です

266
00:15:13,714 --> 00:15:16,950
ユーザは
このアプリケーションで

267
00:15:17,050 --> 00:15:20,120
いろいろな好物を
設定できます

268
00:15:20,220 --> 00:15:23,557
LogFavoritelntentを
使います

269
00:15:24,258 --> 00:15:29,196
文字盤に表示すれば
より簡単にログできますね

270
00:15:29,630 --> 00:15:31,732
そこでインスタンスを利用し

271
00:15:32,099 --> 00:15:34,401
好物の１つをパラメータに

272
00:15:34,501 --> 00:15:37,137
この例では“クッキー”です

273
00:15:37,604 --> 00:15:40,040
画像も設定されるため

274
00:15:40,140 --> 00:15:44,311
ユーザはログする内容を
思い出せます

275
00:15:45,279 --> 00:15:49,616
続いてIntentで
ショートカットの作成後

276
00:15:50,484 --> 00:15:52,820
Relevant Shortcutsを作り

277
00:15:52,920 --> 00:15:54,555
ストアに渡します

278
00:15:54,655 --> 00:15:57,825
見出し文字列と画像が
あるので

279
00:15:57,925 --> 00:16:00,394
テンプレートは不要です

280
00:15:57,925 --> 00:16:00,394
テンプレートは不要です

281
00:16:00,828 --> 00:16:05,466
Relevance Providerも
今回は要りません

282
00:16:05,566 --> 00:16:07,134
習慣だからです

283
00:16:07,234 --> 00:16:12,539
Siriの予測エンジンが
適切な時間に表示します

284
00:16:13,740 --> 00:16:17,311
Relevant Shortcutsの
作成後に

285
00:16:17,477 --> 00:16:19,246
まだ処理が必要です

286
00:16:19,346 --> 00:16:20,747
watchOS 5では

287
00:16:20,848 --> 00:16:25,252
WKExtensionDelegateに
メソッドを追加

288
00:16:26,220 --> 00:16:30,157
最初の例はタップで
アプリケーションを起動し

289
00:16:30,257 --> 00:16:32,993
userActivityを
メソッドに渡します

290
00:16:33,093 --> 00:16:35,996
タイプは
com.myapp.LogMealです

291
00:16:36,530 --> 00:16:39,566
次に 正しく動作するため

292
00:16:39,666 --> 00:16:41,602
rootInterface
Controllerにポップし

293
00:16:41,702 --> 00:16:44,138
LogMealInterface
Controllerをプッシュ

294
00:16:44,338 --> 00:16:49,743
userInfo辞書の
内容を必ず渡しましょう

295
00:16:51,545 --> 00:16:55,349
次の例では多くの場合
バックグラウンドで

296
00:16:55,449 --> 00:16:58,118
Intentが実行されます

297
00:16:58,285 --> 00:17:02,422
しかしアプリケーションが
コールバックされる例があり

298
00:16:58,285 --> 00:17:02,422
しかしアプリケーションが
コールバックされる例があり

299
00:17:02,589 --> 00:17:04,691
実行時のエラーなら

300
00:17:04,791 --> 00:17:06,727
アプリケ－ション内で
処理します

301
00:17:07,027 --> 00:17:10,696
ユーザが内容を
変更したい場合もあります

302
00:17:10,797 --> 00:17:14,667
例えばクッキーの数の
修正などです

303
00:17:14,768 --> 00:17:19,339
上の枠をタップ後
コールバックを受けます

304
00:17:19,540 --> 00:17:21,275
userActivityタイプは

305
00:17:21,375 --> 00:17:25,179
Intentのクラスと
同じです

306
00:17:26,280 --> 00:17:29,516
userActivityから
Intentが取得でき

307
00:17:29,616 --> 00:17:34,788
そこに設定したパラメータが
すべてあります

308
00:17:36,290 --> 00:17:39,760
これでRelevant Shortcutsを
作成できます

309
00:17:39,860 --> 00:17:43,964
ただ文字盤に表示中でも
アプリケーションが

310
00:17:44,064 --> 00:17:46,266
動いていない時もあります

311
00:17:46,500 --> 00:17:49,336
ランタイムを増やす機能が

312
00:17:49,436 --> 00:17:53,707
WKRelevantShortcut
RefreshBackgroundTaskです

313
00:17:54,474 --> 00:17:58,612
このタスクを提供する
アプリケーションは

314
00:17:58,712 --> 00:18:03,283
便利なショートカットがあり
ユーザに人気です

315
00:17:58,712 --> 00:18:03,283
便利なショートカットがあり
ユーザに人気です

316
00:18:04,184 --> 00:18:08,722
このタスクを取得したら
データを更新する機会です

317
00:18:08,822 --> 00:18:12,926
新たなRelevant Shortcutsを
提供してください

318
00:18:13,794 --> 00:18:15,095
補足すると―

319
00:18:15,596 --> 00:18:19,666
バックグラウンドで動く
IntentはExtension内です

320
00:18:19,766 --> 00:18:21,368
データストアの更新で

321
00:18:21,468 --> 00:18:24,705
UIなどが古くなる可能性が
あります

322
00:18:25,439 --> 00:18:27,641
そのためwatchOS 5では

323
00:18:28,075 --> 00:18:30,978
WKIntentDidRunRefresh
BackgroundTaskを使用

324
00:18:31,078 --> 00:18:32,880
Intentがショートカットを
実行したら

325
00:18:32,980 --> 00:18:36,216
ランタイムとともに
提供されます

326
00:18:36,984 --> 00:18:39,920
この機会に
UIを更新ください

327
00:18:40,220 --> 00:18:42,256
スナップショットや
再読み込み

328
00:18:42,356 --> 00:18:45,192
コンプリケーションの更新も
いいでしょう

329
00:18:47,294 --> 00:18:51,231
では このAPIを
iOSで利用するには？

330
00:18:51,565 --> 00:18:55,269
WKRefreshBackgroundTaskを
除き

331
00:18:55,369 --> 00:18:59,373
まったく同じAPIを
iOSでも利用できます

332
00:19:00,174 --> 00:19:02,276
iOSのRelevant
Shortcutsは

333
00:19:02,376 --> 00:19:04,478
定期的にWatchに同期され

334
00:19:04,578 --> 00:19:09,182
Watchの文字盤に
表示可能になります

335
00:19:09,817 --> 00:19:12,786
UIのカスタマイズも
同様にできます

336
00:19:12,886 --> 00:19:16,290
違いはバックグラウンドの
ショートカットでは

337
00:19:16,390 --> 00:19:20,194
iOSのアイコンが
表示されることです

338
00:19:21,462 --> 00:19:25,299
次はショートカットの
実行についてです

339
00:19:25,399 --> 00:19:28,168
どこで
実行されるのでしょうか？

340
00:19:29,770 --> 00:19:33,841
Watchのローカルにある
アプリケーションでは

341
00:19:33,941 --> 00:19:38,412
ショートカットはwatchOSで
実行されます

342
00:19:38,512 --> 00:19:42,115
これは負荷が低く
待ち時間もありません

343
00:19:42,916 --> 00:19:46,620
watchOSでショートカットを
実行するため

344
00:19:46,720 --> 00:19:52,092
NSUserActivityTypeは
Info.plist内に設定します

345
00:19:52,493 --> 00:19:55,996
一方Intentは
Intents Extension内です

346
00:19:57,431 --> 00:20:01,034
もしWatchで
実行できない場合は

347
00:19:57,431 --> 00:20:01,034
もしWatchで
実行できない場合は

348
00:20:01,168 --> 00:20:05,539
iPhoneが近くになくても
iOSで実行されます

349
00:20:07,141 --> 00:20:09,576
この場合ユーザには

350
00:20:09,676 --> 00:20:13,981
Watchをタップせず
iPhoneを探してほしい

351
00:20:14,181 --> 00:20:16,216
そのためiPhoneに戻す
ショートカットには

352
00:20:16,316 --> 00:20:18,786
いくつかルールがあります

353
00:20:19,186 --> 00:20:24,124
バックグラウンド処理が
可能なIntentを使用し

354
00:20:24,224 --> 00:20:26,326
保護データが必要ないこと

355
00:20:26,427 --> 00:20:29,563
これはロック時に
暗号化されたデータです

356
00:20:30,130 --> 00:20:33,233
カスタムIntentの内容や
バックグランド処理の―

357
00:20:33,333 --> 00:20:38,872
サポートの有無で
条件に合うか確認できます

358
00:20:38,972 --> 00:20:44,778
また認証制限の設定について
確認してください

359
00:20:45,279 --> 00:20:47,614
選択肢は３つあります

360
00:20:47,714 --> 00:20:49,716
１つ目は“制限なし”

361
00:20:49,850 --> 00:20:53,320
２つ目は
“ロック時のみ制限”で

362
00:20:53,420 --> 00:20:56,290
実行にはアンロックが必要

363
00:20:56,723 --> 00:21:00,761
最後は“ロック時のみ制限
または保護データなし”

364
00:20:56,723 --> 00:21:00,761
最後は“ロック時のみ制限
または保護データなし”

365
00:21:01,828 --> 00:21:06,467
これでWatchとiPhoneの両方で
ショートカットを作れます

366
00:21:06,567 --> 00:21:09,837
ではジョシュに交代します

367
00:21:09,937 --> 00:21:10,571
ありがとう

368
00:21:10,671 --> 00:21:17,244
(拍手)

369
00:21:17,811 --> 00:21:20,480
どうも
おはようございます

370
00:21:20,614 --> 00:21:23,684
watchOSチームの
ジョシュです

371
00:21:23,784 --> 00:21:28,956
私たちはSiri文字盤の
ショートカットが楽しみです

372
00:21:29,723 --> 00:21:33,227
ポールがAPIと
Relevant Shortcutsの

373
00:21:33,327 --> 00:21:36,230
提供方法について話しました

374
00:21:36,497 --> 00:21:40,000
私はシステムが関連性を
どう予測するかと

375
00:21:40,100 --> 00:21:45,772
ユーザに最適な情報を
出す方法について話します

376
00:21:48,008 --> 00:21:49,710
前述のとおり

377
00:21:49,810 --> 00:21:53,614
文字盤の内容は
関連順に表示されます

378
00:21:53,847 --> 00:21:58,552
手首を上げると
ユーザに必要な情報が出ます

379
00:21:58,652 --> 00:22:01,021
それは時間や位置情報

380
00:21:58,652 --> 00:22:01,021
それは時間や位置情報

381
00:22:01,121 --> 00:22:03,323
その他の要素から
計算されます

382
00:22:05,159 --> 00:22:07,394
ユーザの好みを知るため

383
00:22:07,494 --> 00:22:11,965
他のプラッターの
使用状況を調べます

384
00:22:12,065 --> 00:22:15,269
何をタップするか？
何を見ているか？

385
00:22:15,369 --> 00:22:18,472
何をスクロールして
飛ばすのか？

386
00:22:18,672 --> 00:22:21,408
システムは
このすべての情報から

387
00:22:21,508 --> 00:22:25,379
ユーザがすぐに見たい
内容を探ります

388
00:22:27,748 --> 00:22:32,219
最適なコンテンツを
表示したいので

389
00:22:32,319 --> 00:22:37,324
関連性が高く魅力的な
内容を提供してください

390
00:22:40,694 --> 00:22:45,666
では具体的な表示方法を
見ていきましょう

391
00:22:45,766 --> 00:22:47,367
前述のとおり

392
00:22:47,468 --> 00:22:53,173
まずはRelevant Shortcutsを
ストアに設定します

393
00:22:53,941 --> 00:22:58,679
そのショートカットを
機械学習モデルに入力

394
00:22:58,779 --> 00:23:02,749
そして最適な表示方法を
見つけます

395
00:22:58,779 --> 00:23:02,749
そして最適な表示方法を
見つけます

396
00:23:02,916 --> 00:23:06,220
ではモデルの項目を
見ていきましょう

397
00:23:07,488 --> 00:23:10,390
まずはRelevance
Providerです

398
00:23:10,691 --> 00:23:14,428
これはアプリケーションの
追加情報を

399
00:23:14,528 --> 00:23:15,863
知らせてくれます

400
00:23:15,963 --> 00:23:19,933
特定の時間や場所
その他の情報です

401
00:23:21,168 --> 00:23:26,140
ショートカットの使用履歴も
考慮されます

402
00:23:26,240 --> 00:23:29,743
文字盤の何をタップし
見ていたか？

403
00:23:29,843 --> 00:23:33,013
何をスクロールで
飛ばしたか？

404
00:23:34,414 --> 00:23:38,418
システムの様々な要素も
判断材料です

405
00:23:38,519 --> 00:23:44,391
例えば 日時や現在地
ユーザの日課などです

406
00:23:44,491 --> 00:23:47,694
これらの要素を考慮し

407
00:23:47,794 --> 00:23:52,666
ショートカットの有効な
状況を探ります

408
00:23:55,235 --> 00:24:01,041
重要なのはモデルの安全性と
カスタマイズ性です

409
00:23:55,235 --> 00:24:01,041
重要なのはモデルの安全性と
カスタマイズ性です

410
00:24:01,175 --> 00:24:03,777
デバイスの情報を基に―

411
00:24:04,645 --> 00:24:08,715
各ユーザに応じたモデルを
構築します

412
00:24:08,816 --> 00:24:13,020
文字盤の使い方は
十人十色だからです

413
00:24:14,254 --> 00:24:19,092
モデルの訓練が済めば
Relevant Shortcutsを

414
00:24:19,426 --> 00:24:22,596
関連性順に
文字盤に表示できます

415
00:24:26,366 --> 00:24:30,871
前のセッションで既出の
情報の“提供”は

416
00:24:31,071 --> 00:24:35,676
ユーザの動向を
システムに伝える方法です

417
00:24:36,844 --> 00:24:41,115
Siriの文字盤のUIには
現れませんが

418
00:24:41,415 --> 00:24:45,252
ユーザの行動を知るのに
利用します

419
00:24:48,021 --> 00:24:52,759
重要なタスクや
アプリケーション内の―

420
00:24:52,860 --> 00:24:57,464
ユーザの行動を
システムに伝えられるのです

421
00:24:58,565 --> 00:25:03,670
ユーザの行動パターンが
これで理解できます

422
00:24:58,565 --> 00:25:03,670
ユーザの行動パターンが
これで理解できます

423
00:25:03,771 --> 00:25:05,839
例えばユーザが―

424
00:25:06,540 --> 00:25:11,812
毎日決まった行動を取ると
それをシステムが学習

425
00:25:11,912 --> 00:25:17,818
最適なショートカットを
表示できるというわけです

426
00:25:20,754 --> 00:25:24,658
NSUserActivityで
情報提供する場合

427
00:25:24,758 --> 00:25:28,395
いくつかの手順を踏みます

428
00:25:28,695 --> 00:25:35,469
まずNSUserActivityの２つの
設定を“true”にします

429
00:25:37,004 --> 00:25:42,743
userActivityのサポートを
Info.plistで確認

430
00:25:43,944 --> 00:25:49,216
コンテンツ表示中に
システムに情報提供すれば

431
00:25:49,316 --> 00:25:51,919
システムがパターンを
学習します

432
00:25:53,253 --> 00:25:56,890
この情報提供を
可能にするのが

433
00:25:56,990 --> 00:25:59,927
NSUserActivityの
becomeCurrentです

434
00:26:01,161 --> 00:26:07,334
一方 今回導入の
updateUserActivityは

435
00:26:07,434 --> 00:26:10,904
インターフェイス
コントローラを使用

436
00:26:11,071 --> 00:26:13,640
これが表示されると

437
00:26:13,740 --> 00:26:17,644
userActivityは
自動的に提供されます

438
00:26:18,212 --> 00:26:23,383
iOSなどに使用される
類似のAPIは

439
00:26:23,484 --> 00:26:27,421
NSUserActivityと
UIを紐づけます

440
00:26:28,355 --> 00:26:33,360
以上がwatchOSで
推奨する提供方法です

441
00:26:35,963 --> 00:26:39,733
ショートカットが
Intentで作られる時

442
00:26:39,833 --> 00:26:43,136
INInteraction APIで
Intentを提供できます

443
00:26:43,871 --> 00:26:47,241
これも以前のセッションで
既出です

444
00:26:48,442 --> 00:26:51,078
まずはIntentを作成

445
00:26:51,178 --> 00:26:54,982
ユーザに応じて
パラメータを調整します

446
00:26:55,449 --> 00:26:58,318
次にIntentと
INInteractionを作成

447
00:26:58,418 --> 00:27:02,256
提供用メソッドを
呼び出します

448
00:26:58,418 --> 00:27:02,256
提供用メソッドを
呼び出します

449
00:27:04,191 --> 00:27:09,897
もう１つ大事なのが
watchOSの予測に要る―

450
00:27:09,997 --> 00:27:11,632
主要ショートカットです

451
00:27:13,333 --> 00:27:16,904
Xcodeの
Intentエディタ内で

452
00:27:17,004 --> 00:27:19,773
主要ショートカットが
選べます

453
00:27:20,340 --> 00:27:25,045
システムに最重要の
ユースケースを示せますが

454
00:27:25,145 --> 00:27:27,714
それが意味するのは？

455
00:27:30,384 --> 00:27:34,121
主要ショートカットの
ユースケースの指定で

456
00:27:34,221 --> 00:27:40,160
ユーザに重要なユースケースが
システムに伝わります

457
00:27:41,295 --> 00:27:44,231
これをIntentごとに
行えます

458
00:27:45,632 --> 00:27:49,203
指定したパラメータは
Relevant Shortcuts内の

459
00:27:49,303 --> 00:27:52,773
パラメータのサブセットを
含みます

460
00:27:52,873 --> 00:27:56,143
いくつか例を見てみましょう

461
00:27:58,412 --> 00:28:04,251
この情報を基に より早く
ユーザの行動パターンや

462
00:27:58,412 --> 00:28:04,251
この情報を基に より早く
ユーザの行動パターンや

463
00:28:04,351 --> 00:28:09,289
関心のあるRelevant
Shortcutsが分かります

464
00:28:10,824 --> 00:28:15,262
ポールと私は
チャットアプリケーションで

465
00:28:15,362 --> 00:28:17,631
毎朝やり取りします

466
00:28:17,731 --> 00:28:22,803
今日の準備や
お昼のクッキーについてです

467
00:28:24,805 --> 00:28:27,908
これにSiri Shortcutsを
搭載し

468
00:28:28,008 --> 00:28:31,078
異なるパラメータを
定義しました

469
00:28:31,178 --> 00:28:34,681
その１つが
メールの受信者です

470
00:28:35,149 --> 00:28:39,520
そして もう１つは
メールの内容です

471
00:28:40,854 --> 00:28:44,758
ポールとは
毎朝メールで話します

472
00:28:44,858 --> 00:28:48,862
しかし内容は
日によって様々なので

473
00:28:49,263 --> 00:28:53,500
主要ショートカットには
向きません

474
00:28:53,600 --> 00:28:56,904
どのショートカットが適切か

475
00:28:57,004 --> 00:28:59,339
システムが迷います

476
00:28:59,439 --> 00:29:03,510
しかし メールの頻度が
非常に高く

477
00:28:59,439 --> 00:29:03,510
しかし メールの頻度が
非常に高く

478
00:29:03,610 --> 00:29:08,315
この行為はパターンとして
覚えやすいのです

479
00:29:10,851 --> 00:29:15,122
私は毎朝アプリケーションで
コーヒーを買います

480
00:29:15,823 --> 00:29:18,725
Siri Shortcuts
搭載です

481
00:29:19,159 --> 00:29:23,864
異なるパラメータは
コーヒーの種類

482
00:29:23,964 --> 00:29:27,167
砂糖やクリームなどの
トッピング

483
00:29:27,534 --> 00:29:31,371
コーヒーショップの場所です

484
00:29:31,905 --> 00:29:35,976
私は毎朝
コーヒーを買いますが

485
00:29:36,076 --> 00:29:40,881
どこで会議があるかで
購入場所を変えます

486
00:29:40,981 --> 00:29:45,018
会議がどこでも
注文したコーヒーを

487
00:29:45,119 --> 00:29:47,788
近場で受け取りたい

488
00:29:48,789 --> 00:29:52,326
場所は様々に変化するため

489
00:29:52,426 --> 00:29:55,262
主要ショートカットには
向きません

490
00:29:55,629 --> 00:29:59,867
システムの学習に
時間がかかります

491
00:29:59,967 --> 00:30:04,004
しかし注文内容は一定で
常にラテと

492
00:29:59,967 --> 00:30:04,004
しかし注文内容は一定で
常にラテと

493
00:30:04,104 --> 00:30:07,074
同じトッピングです

494
00:30:07,174 --> 00:30:10,510
主要ショートカット向きです

495
00:30:12,913 --> 00:30:16,150
コーヒーだけでは不十分で

496
00:30:16,250 --> 00:30:20,988
トッピングが加わると
条件を満たします

497
00:30:22,589 --> 00:30:27,861
アプリケーションを介した
情報提供の方法でした

498
00:30:27,961 --> 00:30:31,432
次はRelevant Shortcutsの
予測です

499
00:30:32,599 --> 00:30:35,702
具体例を見ながら説明します

500
00:30:37,037 --> 00:30:41,175
これは私が毎日使う
アプリケーションで

501
00:30:41,275 --> 00:30:44,278
レシピを提案してくれます

502
00:30:46,013 --> 00:30:50,984
夜の運動を知らせてくれる
運動用アプリケーション

503
00:30:52,986 --> 00:30:57,691
旅先で面白い場所を
提案してくれる―

504
00:30:57,791 --> 00:31:00,094
旅行ガイドアプリケーション

505
00:30:57,791 --> 00:31:00,094
旅行ガイドアプリケーション

506
00:31:01,328 --> 00:31:06,867
それぞれ３つのカテゴリーに
当てはまります

507
00:31:07,067 --> 00:31:09,403
“ダウンタイム”は

508
00:31:09,670 --> 00:31:13,607
時間や場所が
関係ないものです

509
00:31:14,675 --> 00:31:19,379
いつレシピが必要かは
人それぞれです

510
00:31:19,780 --> 00:31:23,884
しかし運動には
時間が関係します

511
00:31:23,984 --> 00:31:29,189
私には午後８時の通知が
最も適しています

512
00:31:29,890 --> 00:31:32,259
この情報でシステムは

513
00:31:32,359 --> 00:31:37,798
Relevant Shortcutsを
より正確に順位づけできます

514
00:31:39,166 --> 00:31:42,002
旅行用のアプリケーションは

515
00:31:42,102 --> 00:31:45,072
位置情報を判断します

516
00:31:45,172 --> 00:31:48,709
例えば
ゴールデンゲートパーク

517
00:31:48,909 --> 00:31:53,413
この情報を基に
ショートカットの関連性を

518
00:31:53,514 --> 00:31:56,083
より正確に予測できます

519
00:31:58,652 --> 00:32:04,358
時間 場所などに関わらず
追加情報をシステムに

520
00:31:58,652 --> 00:32:04,358
時間 場所などに関わらず
追加情報をシステムに

521
00:32:04,458 --> 00:32:07,895
Relevance Provider APIで
提供できます

522
00:32:08,028 --> 00:32:13,600
また コンテンツ表示の
最適な時期を示せます

523
00:32:15,903 --> 00:32:19,673
新しいコンテンツも
表示可能です

524
00:32:20,107 --> 00:32:23,010
この情報があれば

525
00:32:23,410 --> 00:32:27,414
ユーザの好みを
素早く把握できます

526
00:32:27,514 --> 00:32:30,818
システムの判断を
待たずにです

527
00:32:33,587 --> 00:32:36,657
しかし
ユーザエンゲージメントは

528
00:32:36,757 --> 00:32:39,493
全過程で考慮されます

529
00:32:39,593 --> 00:32:42,896
Relevance Providerの
有無に関わらず

530
00:32:42,996 --> 00:32:46,066
適切なコンテンツを
表示したいのです

531
00:32:49,203 --> 00:32:52,239
例えば
レシピ用アプリケーション

532
00:32:52,339 --> 00:32:57,711
これには時間や場所は
あまり関係ありません

533
00:32:58,278 --> 00:33:01,482
夕食時にも使えますし

534
00:32:58,278 --> 00:33:01,482
夕食時にも使えますし

535
00:33:01,582 --> 00:33:03,750
ランチでもいい

536
00:33:04,885 --> 00:33:09,957
Relevance Providerは
空白です

537
00:33:12,092 --> 00:33:16,430
ショートカットの関連性の
判断材料は

538
00:33:16,530 --> 00:33:19,166
ユーザの使用履歴です

539
00:33:19,266 --> 00:33:22,903
私の場合
夕食時の午後７時に

540
00:33:23,003 --> 00:33:26,840
このショートカットが
表示されます

541
00:33:28,742 --> 00:33:34,081
運動用アプリケーションで
時間を提供するのは

542
00:33:34,314 --> 00:33:37,484
DateRelevanceProviderです

543
00:33:37,584 --> 00:33:40,287
午後８時が開始時刻です

544
00:33:42,656 --> 00:33:45,859
特定のコンテンツが

545
00:33:45,959 --> 00:33:48,562
特定の時間に表示されます

546
00:33:49,530 --> 00:33:52,232
午後８時に近づくほど

547
00:33:52,332 --> 00:33:54,835
関連性が上がります

548
00:33:54,935 --> 00:33:56,837
確認しましょう

549
00:33:58,672 --> 00:34:01,742
文字盤にカードが並びます

550
00:33:58,672 --> 00:34:01,742
文字盤にカードが並びます

551
00:34:01,842 --> 00:34:06,680
今日の予定を示す通知が
一番上にあり

552
00:34:06,880 --> 00:34:11,217
真ん中にあるのが
ニュースの通知

553
00:34:11,819 --> 00:34:15,121
最後が運動に関する
通知です

554
00:34:19,960 --> 00:34:23,931
午前８時に
起床したとします

555
00:34:24,531 --> 00:34:29,536
運動に関する通知が
すでに表示中なのは

556
00:34:29,636 --> 00:34:34,274
ユーザの注意を
喚起するためです

557
00:34:34,475 --> 00:34:39,079
しかし関連性に合わせ
下に表示されます

558
00:34:40,179 --> 00:34:45,452
今日の予定の通知が示す
時間を過ぎると

559
00:34:45,552 --> 00:34:48,589
運動の通知が上に来ます

560
00:34:48,688 --> 00:34:52,458
午後８時に近づくほど
重要になります

561
00:34:54,194 --> 00:34:58,098
午後８時には
最重要事項となり

562
00:34:58,198 --> 00:35:03,103
忘れないために
文字盤のトップに来ます

563
00:34:58,198 --> 00:35:03,103
忘れないために
文字盤のトップに来ます

564
00:35:05,739 --> 00:35:08,575
訪問する場所を提案する―

565
00:35:08,675 --> 00:35:12,679
旅行用アプリケーションを
見てみます

566
00:35:14,648 --> 00:35:19,753
LocationRelevance
Providerで

567
00:35:19,853 --> 00:35:22,422
ゴールデンゲートパークを
指定

568
00:35:25,125 --> 00:35:29,062
該当する場所に
近づくにつれて

569
00:35:29,163 --> 00:35:32,800
コンテンツが表示されます

570
00:35:33,400 --> 00:35:36,303
その場所に近づくほど

571
00:35:36,403 --> 00:35:39,306
関連性が高くなります

572
00:35:40,607 --> 00:35:44,344
サンフランシスコに
到着すると

573
00:35:44,445 --> 00:35:47,414
すでに通知が見えます

574
00:35:47,581 --> 00:35:51,051
関連性に合わせ位置は下です

575
00:35:51,151 --> 00:35:54,555
しかし 目には入るでしょう

576
00:35:55,756 --> 00:35:58,458
位置が近くなるほど

577
00:35:58,559 --> 00:36:01,762
関連性は高くなります

578
00:35:58,559 --> 00:36:01,762
関連性は高くなります

579
00:36:01,862 --> 00:36:05,065
あとはタップするだけで

580
00:36:05,165 --> 00:36:08,102
詳細な情報を得られます

581
00:36:09,937 --> 00:36:14,975
位置情報の登録に使う
CLRegionの提供で

582
00:36:15,142 --> 00:36:18,212
２つのプロパティを
指定できます

583
00:36:18,312 --> 00:36:23,550
コンテンツを表示する
座標を示す緯度 経度と

584
00:36:23,650 --> 00:36:24,985
半径です

585
00:36:25,085 --> 00:36:28,889
いつコンテンツが
表示されるのか

586
00:36:31,425 --> 00:36:34,495
位置情報の認識を
調整する―

587
00:36:34,595 --> 00:36:37,831
プロパティもあります

588
00:36:38,565 --> 00:36:40,500
１つはnotifyOnEntry

589
00:36:40,634 --> 00:36:45,005
名前のとおり
ユーザが領域に入るまで

590
00:36:45,105 --> 00:36:48,008
待機し 通知を送ります

591
00:36:49,943 --> 00:36:53,480
notifyOnExitは

592
00:36:53,580 --> 00:36:58,919
ユーザが領域を出るまで
通知を送りません

593
00:36:59,920 --> 00:37:04,124
この２つのプロパティは
Siriの文字盤で

594
00:36:59,920 --> 00:37:04,124
この２つのプロパティは
Siriの文字盤で

595
00:37:04,224 --> 00:37:08,095
ジオフェンシングの役割を
果たします

596
00:37:10,097 --> 00:37:13,834
デフォルトの設定は“true”

597
00:37:14,034 --> 00:37:17,004
特定の場所との
距離に基づいて

598
00:37:17,104 --> 00:37:20,708
円滑に関連性の変更を
行います

599
00:37:23,177 --> 00:37:25,679
CLRegionの作成は
簡単です

600
00:37:26,480 --> 00:37:29,349
Apple Park周辺の

601
00:37:29,449 --> 00:37:32,986
座標と半径を入力しました

602
00:37:33,086 --> 00:37:36,189
２キロ以内に設定します

603
00:37:38,058 --> 00:37:43,230
次にnotifyOnEntryと
notifyOnExitを調整

604
00:37:43,530 --> 00:37:48,802
LocationRelevance
Providerはすぐ作れます

605
00:37:51,004 --> 00:37:53,974
ここで注意事項です

606
00:37:54,641 --> 00:37:57,578
位置情報の使用許可は

607
00:37:57,678 --> 00:38:00,447
機能の利用に不可欠です

608
00:37:57,678 --> 00:38:00,447
機能の利用に不可欠です

609
00:38:01,949 --> 00:38:08,122
バッテリー節約のため
位置情報の更新は限られます

610
00:38:11,024 --> 00:38:15,462
以上が特定の時間と場所の
登録方法です

611
00:38:15,662 --> 00:38:18,966
次はデバイスの個別化です

612
00:38:20,000 --> 00:38:25,239
DailyRoutineRelevance
Providerはコンテンツを

613
00:38:25,339 --> 00:38:28,976
有効な時間や場所で
表示します

614
00:38:31,011 --> 00:38:36,016
それらの時間や場所は
個別化されたものです

615
00:38:38,318 --> 00:38:41,355
朝の例を見てみましょう

616
00:38:42,489 --> 00:38:45,959
起床と同時に
コンテンツを表示

617
00:38:46,360 --> 00:38:49,463
自社の気象データソースに

618
00:38:49,563 --> 00:38:52,299
この機能は応用済みです

619
00:38:52,399 --> 00:38:56,570
起きてすぐ天気予報の概要が
提供され

620
00:38:56,670 --> 00:39:00,507
他のコンテンツが
あとに続きます

621
00:38:56,670 --> 00:39:00,507
他のコンテンツが
あとに続きます

622
00:39:02,476 --> 00:39:04,511
夜はどうなるか

623
00:39:04,645 --> 00:39:08,448
就寝前に
コンテンツを表示します

624
00:39:08,549 --> 00:39:12,686
新しいwatchOS 5で
導入した―

625
00:39:12,786 --> 00:39:16,557
１日の心拍数を通知する
機能です

626
00:39:18,392 --> 00:39:23,397
状況指定だけのDaily
RoutineRelevanceProviderも

627
00:39:23,497 --> 00:39:24,565
この場合

628
00:39:24,665 --> 00:39:29,770
起床時のコンテンツ表示は
容易にできます

629
00:39:32,206 --> 00:39:35,075
朝と夜に見られる動作は

630
00:39:35,175 --> 00:39:38,245
DateRelevanceProviderに
類似します

631
00:39:38,712 --> 00:39:43,917
違いは 自動で日付の選択が
行われるかどうかです

632
00:39:46,453 --> 00:39:48,622
コンテンツの表示が

633
00:39:48,722 --> 00:39:51,825
有効な状況は複数あります

634
00:39:51,925 --> 00:39:56,130
それは自宅や職場
学校 あるいは―

635
00:39:57,097 --> 00:39:58,599
ジムなどです

636
00:39:59,900 --> 00:40:03,103
これらのDaily
RoutineRelevanceProviderも

637
00:39:59,900 --> 00:40:03,103
これらのDaily
RoutineRelevanceProviderも

638
00:40:03,203 --> 00:40:05,906
状況の設定だけです

639
00:40:08,408 --> 00:40:11,879
そして
ここで見られる動作も

640
00:40:12,112 --> 00:40:14,815
LocationRelevance
Providerに類似します

641
00:40:14,915 --> 00:40:18,752
ただし場所の選択は
自動で行われます

642
00:40:19,219 --> 00:40:21,622
ユーザの位置で

643
00:40:21,722 --> 00:40:24,825
コンテンツの関連性が
変わります

644
00:40:26,793 --> 00:40:31,765
以上がRelevant Shortcutsの
予測について

645
00:40:31,865 --> 00:40:35,903
そして最適な状況での
コンテンツ表示を

646
00:40:36,003 --> 00:40:39,039
可能にする方法でした

647
00:40:39,907 --> 00:40:44,244
次はSiriの文字盤の
活用方法です

648
00:40:45,312 --> 00:40:49,683
文字盤を改良する過程で
学びました

649
00:40:51,418 --> 00:40:55,289
文字盤で
大きな力を発揮する―

650
00:40:55,389 --> 00:40:58,692
２種類のコンテンツが
あります

651
00:40:59,693 --> 00:41:02,129
１つは“一目で分かる情報”

652
00:40:59,693 --> 00:41:02,129
１つは“一目で分かる情報”

653
00:41:02,262 --> 00:41:07,101
手首を上げると
情報の概要が瞬時に現れ

654
00:41:07,201 --> 00:41:10,671
詳細はタップで
簡単に見られます

655
00:41:11,739 --> 00:41:13,941
もう１つは“タップ機能”

656
00:41:14,041 --> 00:41:17,811
プラッターを
タップするだけで

657
00:41:17,978 --> 00:41:20,948
複雑な動作が完了します

658
00:41:22,416 --> 00:41:27,021
一目で分かる情報の
例を見ましょう

659
00:41:27,554 --> 00:41:32,159
文字盤に目をやれば
常にレシピの候補が

660
00:41:32,259 --> 00:41:35,229
簡潔に表示されています

661
00:41:35,329 --> 00:41:39,266
それを作るか外食するか
すぐ判断できます

662
00:41:40,334 --> 00:41:44,137
家路につく際に
タップするだけで

663
00:41:44,805 --> 00:41:48,775
食料品店に寄るか
判断できます

664
00:41:53,247 --> 00:41:58,352
この情報を表示する際の
留意点があります

665
00:41:58,885 --> 00:42:03,757
ショートカットで示すのは
情報の要点です

666
00:41:58,885 --> 00:42:03,757
ショートカットで示すのは
情報の要点です

667
00:42:04,691 --> 00:42:07,794
ユーザが１日を通して

668
00:42:07,895 --> 00:42:11,732
すぐに見たい情報を
表示します

669
00:42:14,167 --> 00:42:18,539
ユーザによるタップで
アプリケーションから

670
00:42:18,639 --> 00:42:20,874
詳細情報を提供します

671
00:42:21,108 --> 00:42:24,445
タップが意図的ではない場合

672
00:42:24,545 --> 00:42:28,682
バックグラウンドタスクは
邪魔になります

673
00:42:31,518 --> 00:42:33,053
システムが

674
00:42:33,153 --> 00:42:38,725
自動でバックグラウンドでの
更新を行うからです

675
00:42:38,825 --> 00:42:44,465
なので面白いコンテンツを
準備しておくことです

676
00:42:46,900 --> 00:42:50,771
新たなデータを
得る時があります

677
00:42:50,871 --> 00:42:55,742
アプリケーションが
起動される時などです

678
00:42:55,943 --> 00:42:59,947
その時 Relevant Shortcutsや
コンテンツも

679
00:43:00,047 --> 00:43:03,050
最新で面白いものにします

680
00:43:05,652 --> 00:43:09,189
ショートカットが適時なら

681
00:43:09,289 --> 00:43:12,226
情報提供してください

682
00:43:12,326 --> 00:43:15,929
それで最適な時期に
表示できます

683
00:43:18,532 --> 00:43:24,371
一目で分かる情報の次は
タップ機能についてです

684
00:43:26,273 --> 00:43:28,575
ランニングの通知が

685
00:43:28,675 --> 00:43:32,980
アプリケーションから届き
すぐ見られます

686
00:43:34,882 --> 00:43:40,287
実行を確認する画面が
タップで表示されます

687
00:43:41,188 --> 00:43:43,424
タップは２回だけ

688
00:43:43,524 --> 00:43:48,195
アプリケーションを
探し回ることなく

689
00:43:48,295 --> 00:43:49,997
運動開始です

690
00:43:50,097 --> 00:43:54,501
実行に必要なのは
２タップだけです

691
00:43:57,204 --> 00:44:00,674
タップ機能に関する
留意点です

692
00:43:57,204 --> 00:44:00,674
タップ機能に関する
留意点です

693
00:44:01,809 --> 00:44:05,212
Intentの処理は
SiriKitのExtension内です

694
00:44:05,312 --> 00:44:09,850
バックグラウンドで
自動的に実行されるので

695
00:44:09,950 --> 00:44:13,987
画面の切り替えは
必要ありません

696
00:44:16,023 --> 00:44:18,992
システム承認UIの表示は

697
00:44:19,093 --> 00:44:23,964
ユーザに実行の意思を
確認するためです

698
00:44:27,067 --> 00:44:31,238
Relevant Shortcutsを
十分に特定すれば

699
00:44:31,471 --> 00:44:36,243
実行するのに
追加の承認は要りません

700
00:44:37,111 --> 00:44:40,748
ユーザがショートカットに
タップすれば

701
00:44:40,848 --> 00:44:45,319
ユーザ情報を
入手する必要もありません

702
00:44:45,419 --> 00:44:50,791
SiriKitのExtensionが
バックグラウンドで動作します

703
00:44:54,127 --> 00:44:59,199
ユーザの間で
よく使われるタスクこそ

704
00:44:59,299 --> 00:45:02,469
Relevant Shortcutsに
最適です

705
00:44:59,299 --> 00:45:02,469
Relevant Shortcutsに
最適です

706
00:45:02,569 --> 00:45:06,040
素早いアクセスが
求められます

707
00:45:08,509 --> 00:45:11,678
Relevant Shortcutsの
作成は

708
00:45:11,812 --> 00:45:15,849
頻繁に行い
システムに提供しましょう

709
00:45:15,949 --> 00:45:20,821
ユーザが常に
アクセスできるようにです

710
00:45:21,321 --> 00:45:23,991
バックグラウンド処理で

711
00:45:24,091 --> 00:45:27,861
アプリケーションの遅延を
回避します

712
00:45:30,063 --> 00:45:32,566
Relevant Shortcutsと

713
00:45:32,666 --> 00:45:37,638
Siriの文字盤について
話しました

714
00:45:39,940 --> 00:45:43,777
重要で魅力的な
コンテンツこそが

715
00:45:43,877 --> 00:45:47,981
ユーザが文字盤で
見たいものです

716
00:45:48,082 --> 00:45:51,752
文字盤のトップに
表示されるのです

717
00:45:54,388 --> 00:45:57,591
watchOSの
アプリケーションは

718
00:45:57,858 --> 00:46:01,328
バックグラウンドで
更新が可能

719
00:45:57,858 --> 00:46:01,328
バックグラウンドで
更新が可能

720
00:46:01,428 --> 00:46:06,600
そしてタップ後に
待ち時間はありません

721
00:46:08,669 --> 00:46:10,904
もし質問があれば

722
00:46:11,004 --> 00:46:14,808
後ほどのラボで
この内容に触れます

723
00:46:15,142 --> 00:46:20,480
皆さんが生み出す体験を
楽しみにしています

724
00:46:20,748 --> 00:46:21,415
ありがとう

725
00:46:21,515 --> 00:46:24,585
(拍手)