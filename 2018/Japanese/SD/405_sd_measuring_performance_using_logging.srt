
1
00:00:07,107 --> 00:00:16,617
(音楽)

2
00:00:23,123 --> 00:00:28,061
(拍手)

3
00:00:32,799 --> 00:00:33,934
こんにちは

4
00:00:34,434 --> 00:00:37,604
Darwin Runtimeチームの
シェーンです

5
00:00:37,704 --> 00:00:38,839
今日のテーマは

6
00:00:38,939 --> 00:00:41,508
ロギングを使った
パフォーマンス計測です

7
00:00:42,509 --> 00:00:46,380
ご存じのとおり
パフォーマンスは

8
00:00:46,580 --> 00:00:50,717
ユーザエクスペリエンスの
カギを握るものです

9
00:00:50,817 --> 00:00:56,390
素早くダイナミックな動作や
応答の速さが求められます

10
00:00:57,424 --> 00:00:58,125
でも…

11
00:00:59,393 --> 00:01:01,295
ソフトウェアは複雑です

12
00:00:59,393 --> 00:01:01,295
ソフトウェアは複雑です

13
00:01:01,695 --> 00:01:07,367
アプリケーションの動作には
多くのプログラムが関係し

14
00:01:08,001 --> 00:01:13,040
時に予想外の
パフォーマンスを生みます

15
00:01:13,640 --> 00:01:18,679
しかし そうした成果を
発見するためには

16
00:01:18,779 --> 00:01:22,850
プログラムへの
深い理解が欠かせません

17
00:01:22,983 --> 00:01:26,320
“このコードは
いつ実行されるのか”

18
00:01:26,420 --> 00:01:28,856
“要する時間は
どれくらいか”

19
00:01:29,456 --> 00:01:34,194
ここで優れたツールが
求められるわけです

20
00:01:34,428 --> 00:01:38,265
我々は
より優れたツールを提供して

21
00:01:38,365 --> 00:01:42,402
生産性の向上に
貢献したいと思います

22
00:01:42,669 --> 00:01:45,372
そこで今日 紹介するのは

23
00:01:45,506 --> 00:01:48,475
signpostという
ツールです

24
00:01:48,675 --> 00:01:52,346
新たにOSLogに
加わったもので

25
00:01:52,613 --> 00:01:56,283
macOSで使用できます

26
00:01:56,383 --> 00:02:01,088
他にもiOSやSwift
Ｃ言語に対応

27
00:01:56,383 --> 00:02:01,088
他にもiOSやSwift
Ｃ言語に対応

28
00:02:01,655 --> 00:02:05,292
更にInstrumentsでも
使えます

29
00:02:05,392 --> 00:02:08,428
つまりsignpostの
データを取り込んで

30
00:02:08,829 --> 00:02:12,399
プログラムの動きを
確認できるのです

31
00:02:13,367 --> 00:02:15,836
まずは歴史をお話しします

32
00:02:16,470 --> 00:02:19,273
OSLogは２年前に
登場しました

33
00:02:19,606 --> 00:02:22,843
最新のロギング機能で

34
00:02:22,943 --> 00:02:26,280
システムから
デバッグ情報を得ます

35
00:02:26,613 --> 00:02:31,885
効率性とプライバシーを
考慮して作られたものです

36
00:02:32,653 --> 00:02:35,055
これがOSLogのコードです

37
00:02:35,222 --> 00:02:39,426
“Hello world”を
表示させてみます

38
00:02:40,294 --> 00:02:43,564
パフォーマンスの
ユースケースのために

39
00:02:43,664 --> 00:02:47,034
signpostは
OSLogのAPIを拡張

40
00:02:47,134 --> 00:02:49,102
パフォーマンスに
関する情報が

41
00:02:49,303 --> 00:02:51,738
デベロッパツールに
統合されます

42
00:02:51,972 --> 00:02:57,344
そこでコードを加え
Instrumentsを実行させます

43
00:02:58,412 --> 00:03:02,316
プログラムの動きと
signpostのアクティビティが

44
00:02:58,412 --> 00:03:02,316
プログラムの動きと
signpostのアクティビティが

45
00:03:02,416 --> 00:03:05,786
時系列で可視化されました

46
00:03:05,953 --> 00:03:12,192
下部はsignpostのデータを
統計分析した表で

47
00:03:12,292 --> 00:03:17,531
プログラムの動作を
多角的に見ることができます

48
00:03:18,398 --> 00:03:22,269
今回はsignpostの
使い方とメリットを

49
00:03:22,369 --> 00:03:24,304
お話しします

50
00:03:24,471 --> 00:03:28,675
その後 Instrumentsと
signpostによる情報表示を

51
00:03:28,775 --> 00:03:32,145
実際にご覧に入れましょう

52
00:03:34,014 --> 00:03:35,015
まずは―

53
00:03:36,850 --> 00:03:39,253
簡単な例を用います

54
00:03:39,653 --> 00:03:42,823
これが あなたの
アプリケーションだとします

55
00:03:43,056 --> 00:03:46,293
インターフェイスの
リフレッシュに

56
00:03:46,393 --> 00:03:49,663
要する時間を
調べてみましょう

57
00:03:49,963 --> 00:03:55,335
そのために画像を読み込ませ
表示してみます

58
00:03:56,303 --> 00:04:01,375
アセットの取得中は
このようにシンプルです

59
00:03:56,303 --> 00:04:01,375
アセットの取得中は
このようにシンプルです

60
00:04:01,475 --> 00:04:04,578
取得が終われば
リフレッシュが完了します

61
00:04:05,345 --> 00:04:10,784
signpostにより タスクの
始まりと終わりを記録し

62
00:04:10,884 --> 00:04:14,755
２つのログイベントを
結びつけます

63
00:04:15,222 --> 00:04:19,358
os signpostの
関数呼び出しを使います

64
00:04:19,660 --> 00:04:23,530
BEGINとENDの
２つの関数が表示されました

65
00:04:23,630 --> 00:04:27,734
BEGINのほうには
矢印の下に“b”と

66
00:04:27,835 --> 00:04:31,038
ENDのほうには
“e”と示しました

67
00:04:31,438 --> 00:04:38,045
この２つのポイントから
経過時間を計算するのです

68
00:04:38,912 --> 00:04:39,713
いいですか？

69
00:04:40,080 --> 00:04:44,384
コード上 アルゴリズム実装は
シンプルです

70
00:04:44,484 --> 00:04:47,988
インターフェイスの
各エレメントに―

71
00:04:48,088 --> 00:04:51,792
アセットを取得し
これを計測するのです

72
00:04:52,292 --> 00:04:55,162
signpostを
コードベースに組み込むため

73
00:04:55,262 --> 00:04:59,967
os.signpostを
インポートします

74
00:05:00,434 --> 00:05:04,371
signpostは
OSLogの機能の一部なので

75
00:05:04,471 --> 00:05:06,507
ログハンドルを作成します

76
00:05:06,740 --> 00:05:10,611
ここではサブシステムと
カテゴリが引数になります

77
00:05:11,111 --> 00:05:15,315
プロジェクトを通して
サブシステムは同一でしょう

78
00:05:15,449 --> 00:05:16,817
バンドルIDのように

79
00:05:16,917 --> 00:05:21,555
コンポーネントや
フレームワークを示します

80
00:05:22,723 --> 00:05:28,862
カテゴリはsignpostと
関連付けるために必要です

81
00:05:29,062 --> 00:05:31,932
後ほど また登場します

82
00:05:33,200 --> 00:05:34,902
ログハンドルを作ったら

83
00:05:35,302 --> 00:05:39,907
BEGINとENDの２つの
CALL文を設定

84
00:05:40,140 --> 00:05:43,210
ここにログハンドルを
渡します

85
00:05:43,310 --> 00:05:47,014
３つ目の引数は
signpost名で

86
00:05:47,714 --> 00:05:51,652
経過時間を示す
文字列が入ります

87
00:05:51,752 --> 00:05:55,055
今回 計測する
処理時間のことです

88
00:05:55,622 --> 00:06:00,494
この文字列は
BEGINやENDの目印として

89
00:05:55,622 --> 00:06:00,494
この文字列は
BEGINやENDの目印として

90
00:06:00,594 --> 00:06:04,798
一致させるために使われます

91
00:06:04,965 --> 00:06:08,202
時系列では こうなります

92
00:06:08,402 --> 00:06:12,172
各タスクの始めに
os signpostを置き

93
00:06:12,272 --> 00:06:14,875
各タスクの最後にも
os signpostを置く

94
00:06:14,975 --> 00:06:19,346
BEGINとENDの文字列が
呼応するため

95
00:06:19,446 --> 00:06:21,248
２つは結びつきます

96
00:06:22,182 --> 00:06:24,151
では 各タスクではなく

97
00:06:24,251 --> 00:06:28,188
リフレッシュ全体に要した
時間を計るには？

98
00:06:28,422 --> 00:06:34,628
BEGINとENDのペアを
もう１つコードに加えるだけ

99
00:06:34,761 --> 00:06:35,596
簡単ですね

100
00:06:35,896 --> 00:06:39,666
今回は文字列と
signpost名を変え

101
00:06:39,766 --> 00:06:45,305
ループとは異なる時間を
計測するように設定しました

102
00:06:47,140 --> 00:06:48,175
時系列では―

103
00:06:50,143 --> 00:06:52,946
２つのsignpostを追加

104
00:06:54,081 --> 00:06:59,152
リフレッシュすると
文字列がマッチし

105
00:06:59,653 --> 00:07:01,722
２つの点が結びつきます

106
00:06:59,653 --> 00:07:01,722
２つの点が結びつきます

107
00:07:02,789 --> 00:07:06,026
たとえが
少し難しいのですが…

108
00:07:06,126 --> 00:07:09,763
プログラムは
１つ完了してから

109
00:07:09,863 --> 00:07:12,065
次に進むとは限りません

110
00:07:12,165 --> 00:07:17,504
非同期的に 多くのタスクが
進行することもあります

111
00:07:17,738 --> 00:07:20,774
そのような場合は

112
00:07:20,874 --> 00:07:26,079
最終的にすべて完了するよう
タスクを進めます

113
00:07:26,180 --> 00:07:30,517
これらのタスクも
同時進行になり得ます

114
00:07:31,118 --> 00:07:35,322
ですから 他のsignpostと
区別するため

115
00:07:35,422 --> 00:07:38,525
情報を追加する
必要があります

116
00:07:39,092 --> 00:07:43,597
ここまでは
最初と最後にマッチする―

117
00:07:43,697 --> 00:07:46,900
文字列だけで
区別してきました

118
00:07:47,167 --> 00:07:53,807
これではオーバーラップする
処理時間を区別できません

119
00:07:54,141 --> 00:07:59,046
そこでsignpost IDを
追加してみましょう

120
00:08:00,180 --> 00:08:04,918
このIDにより
同種のオペレーションでも

121
00:08:05,018 --> 00:08:07,921
個々を区別できます

122
00:08:08,255 --> 00:08:12,492
同時進行でも
signpost IDが異なれば

123
00:08:12,593 --> 00:08:14,862
別々の時間を計算します

124
00:08:15,028 --> 00:08:19,466
最初と最後のIDさえ
そろえておけば

125
00:08:19,566 --> 00:08:22,903
２つは自動で結びつきます

126
00:08:23,504 --> 00:08:28,141
IDはコンストラクタでも
生成できますが

127
00:08:28,709 --> 00:08:32,212
オブジェクトでも
生成できます

128
00:08:32,513 --> 00:08:36,717
オブジェクトを
使っている場合に便利です

129
00:08:36,817 --> 00:08:41,621
同じインスタンス内では
同一IDが生成されるため

130
00:08:41,722 --> 00:08:47,127
signpost IDを格納したりする
必要もありません

131
00:08:48,729 --> 00:08:49,363
つまり…

132
00:08:50,998 --> 00:08:57,304
signpost IDは 呼び出しの際
付加的な情報を加えることで

133
00:08:57,838 --> 00:09:03,377
あるオペレーションの
最初と最後を関連付けます

134
00:08:57,838 --> 00:09:03,377
あるオペレーションの
最初と最後を関連付けます

135
00:09:03,644 --> 00:09:06,980
これにより
オペレーションの同時進行や

136
00:09:07,114 --> 00:09:09,616
所要時間の差に対応できます

137
00:09:12,052 --> 00:09:14,988
実際のコードを
見てみましょう

138
00:09:15,589 --> 00:09:21,361
同期の読み込みを
非同期の呼び出しにします

139
00:09:21,828 --> 00:09:24,264
アセットの取得後に
開始する―

140
00:09:24,364 --> 00:09:27,568
完了ハンドラを追加します

141
00:09:28,335 --> 00:09:34,308
全アセットの取得後も同様に
完了ハンドラを追加します

142
00:09:34,875 --> 00:09:38,912
ENDのos signpostを
完了の前に入れ

143
00:09:39,112 --> 00:09:43,217
最後にマッチするように
設定しました

144
00:09:45,686 --> 00:09:49,923
複数のアセット取得が
同時に進行するため

145
00:09:50,023 --> 00:09:52,659
それぞれに
signpost IDが必要です

146
00:09:52,759 --> 00:09:56,497
上の例は
コンストラクタで生成し

147
00:09:56,597 --> 00:10:01,001
下の例は
オブジェクトで作っています

148
00:09:56,597 --> 00:10:01,001
下の例は
オブジェクトで作っています

149
00:10:01,502 --> 00:10:04,771
そして
生成したsignpost IDを

150
00:10:04,972 --> 00:10:07,541
CALL文に渡せば完了です

151
00:10:08,976 --> 00:10:14,882
signpostは分類や
階級付けに似ています

152
00:10:14,982 --> 00:10:19,720
すべてのオペレーションは
ログハンドルで関連付けられ

153
00:10:20,020 --> 00:10:23,824
各オペレーションに
signpost名を付与

154
00:10:24,992 --> 00:10:29,897
タスクが同時に進行するため
signpost IDを与え

155
00:10:29,997 --> 00:10:35,469
個々の処理時間を
識別できるようにしました

156
00:10:38,071 --> 00:10:42,176
このインターフェイスは
非常に柔軟です

157
00:10:42,576 --> 00:10:46,246
BEGINやENDの引数や
signpost名

158
00:10:46,346 --> 00:10:50,117
ハンドルやIDも
自由にコントロールできます

159
00:10:50,651 --> 00:10:56,557
今回はBEGINとENDの引数が
同じだったため

160
00:10:56,790 --> 00:10:59,326
２つはマッチしました

161
00:10:59,426 --> 00:11:02,429
しかし分けることも可能です

162
00:10:59,426 --> 00:11:02,429
しかし分けることも可能です

163
00:11:02,663 --> 00:11:06,867
別のオブジェクトや
ソースファイルを使えます

164
00:11:07,234 --> 00:11:10,671
このCALL文を幅広く応用し

165
00:11:10,771 --> 00:11:15,442
コードにsignpostを
組み込んでみてください

166
00:11:17,845 --> 00:11:22,616
以上がsignpostによる
時間の計測です

167
00:11:22,850 --> 00:11:28,322
今度は signpostに
付加的な情報を加えるため

168
00:11:28,422 --> 00:11:32,659
CALL文にメタデータを
加えてみます

169
00:11:34,261 --> 00:11:39,399
基本のCALL文に
文字列のパラメータを足すと

170
00:11:39,733 --> 00:11:43,570
BEGINとENDに
情報を追加できます

171
00:11:44,304 --> 00:11:48,775
更に文字列は
OSLog形式なので

172
00:11:49,476 --> 00:11:53,013
複数のBEGINとENDにも対応

173
00:11:53,113 --> 00:11:57,484
signpostに
付加情報を渡せます

174
00:11:57,584 --> 00:12:01,889
例えば４つの整数を渡すため
“%d”を使います

175
00:11:57,584 --> 00:12:01,889
例えば４つの整数を渡すため
“%d”を使います

176
00:12:02,723 --> 00:12:08,562
これはOSLogの形式なので
多くの引数に対応します

177
00:12:08,662 --> 00:12:10,731
浮動小数点の数字も

178
00:12:10,831 --> 00:12:16,003
書式指定子を用いた指示も
システムに伝えられます

179
00:12:17,604 --> 00:12:21,208
動的に文字列を
呼び出すことも可能

180
00:12:21,642 --> 00:12:27,514
呼び出した関数や
入力された情報も渡せます

181
00:12:28,048 --> 00:12:32,820
一定のメモリから
文字列を参照するため

182
00:12:33,020 --> 00:12:37,524
人間が読める文字なら
設定は自由です

183
00:12:39,293 --> 00:12:43,864
Instrumentsで
表示されるものと同じなので

184
00:12:43,964 --> 00:12:48,235
気軽に情報を
追加してみてください

185
00:12:48,335 --> 00:12:51,405
すべての文字列を
表示したり

186
00:12:51,505 --> 00:12:55,075
付加データに
アクセスしたりできます

187
00:12:57,978 --> 00:12:59,379
次は―

188
00:12:59,479 --> 00:13:03,784
時間軸に個別のポイントを
追加する場合です

189
00:12:59,479 --> 00:13:03,784
時間軸に個別のポイントを
追加する場合です

190
00:13:04,051 --> 00:13:08,722
BEGINとENDの
signpostに加えてみます

191
00:13:08,822 --> 00:13:12,326
例えば 特定の時間に
縛られない―

192
00:13:12,426 --> 00:13:14,661
一定の時間です

193
00:13:14,828 --> 00:13:18,265
イベント型の
os signpostを使います

194
00:13:18,765 --> 00:13:23,303
コードはBEGINやENDと
同様に見えますが

195
00:13:23,437 --> 00:13:25,239
イベント型です

196
00:13:25,639 --> 00:13:28,008
１つの時点がマークされます

197
00:13:28,575 --> 00:13:31,278
前後関係がある場合も

198
00:13:31,378 --> 00:13:36,416
ユーザ行動のように
突発的な場合もあるでしょう

199
00:13:36,917 --> 00:13:40,454
アセット取得時の一時点です

200
00:13:40,687 --> 00:13:44,858
アセットの提供元に
接続した時や

201
00:13:45,025 --> 00:13:47,694
その一部の取得を開始した時

202
00:13:48,328 --> 00:13:50,931
特定の処理時間内であれば

203
00:13:51,031 --> 00:13:55,302
何度でも処理状況を
アップデートできます

204
00:13:56,336 --> 00:14:02,042
もしくはイベントの発生を
トラッキングするとします

205
00:13:56,336 --> 00:14:02,042
もしくはイベントの発生を
トラッキングするとします

206
00:14:02,142 --> 00:14:05,412
例えばユーザが
リフレッシュした時

207
00:14:05,746 --> 00:14:10,417
パフォーマンスに問題があり
スワイプを繰り返すと

208
00:14:10,584 --> 00:14:12,853
点がいくつも発生します

209
00:14:14,688 --> 00:14:18,992
通常signpostは
デフォルト設定されています

210
00:14:19,326 --> 00:14:22,596
その設定の切り替え方を
説明します

211
00:14:23,964 --> 00:14:27,835
我々はsignpostを
軽量化するため

212
00:14:27,968 --> 00:14:32,406
コンパイラの最適化に
注力しました

213
00:14:32,573 --> 00:14:37,678
実行時間の前にタスクが
完了するようにしたのです

214
00:14:37,811 --> 00:14:41,882
またInstrumentsの裏で
行う仕事を分けました

215
00:14:41,982 --> 00:14:46,453
つまりsignpostは
少ないリソースで済むのです

216
00:14:46,787 --> 00:14:50,424
コードへの影響も
小さくなります

217
00:14:50,924 --> 00:14:55,629
また短いタイムスパンでも
signpostを活用し

218
00:14:55,729 --> 00:14:59,299
細やかな計測を
行うことが可能です

219
00:15:00,167 --> 00:15:03,203
もちろんオフにもできます

220
00:15:03,303 --> 00:15:07,841
例えばコードの
オーバーヘッドを軽減する時

221
00:15:08,041 --> 00:15:12,446
またはsignpostカテゴリが
２つある中で

222
00:15:12,546 --> 00:15:16,950
一方のデバッグに
集中したい時などです

223
00:15:17,784 --> 00:15:21,655
その場合
OSLogの機能を活用します

224
00:15:21,755 --> 00:15:23,657
無効なログハンドルです

225
00:15:24,057 --> 00:15:27,394
これは
シンプルなハンドルです

226
00:15:27,794 --> 00:15:33,233
すべてのos signpostの
呼び出しに対し

227
00:15:33,333 --> 00:15:36,036
何もしない状態になります

228
00:15:36,503 --> 00:15:40,474
Ｃ言語に
このハンドルがある場合は

229
00:15:40,674 --> 00:15:43,243
引数も求められません

230
00:15:44,244 --> 00:15:48,081
ランタイムに
ハンドルを変更するだけです

231
00:15:49,950 --> 00:15:53,353
最初に使ったコードを
例にします

232
00:15:53,453 --> 00:15:56,356
１番上に初期設定があります

233
00:15:56,790 --> 00:16:00,661
ここに条件式を追加します

234
00:15:56,790 --> 00:16:00,661
ここに条件式を追加します

235
00:16:01,028 --> 00:16:04,865
割り当て先は
通常のコンストラクタか

236
00:16:04,965 --> 00:16:07,501
無効のハンドルです

237
00:16:09,169 --> 00:16:13,807
前者ならos signpostが
呼び出されますが

238
00:16:14,007 --> 00:16:18,212
後者だと
何も実行されません

239
00:16:18,779 --> 00:16:21,114
ご説明したとおり

240
00:16:21,215 --> 00:16:24,952
CALL文の内容は変更不要です

241
00:16:25,052 --> 00:16:27,221
変えるのは初期設定だけ

242
00:16:27,487 --> 00:16:31,525
ここでは環境変数の
条件を付けました

243
00:16:31,625 --> 00:16:35,963
デバッグする時の
Xcodeは この設定です

244
00:16:37,764 --> 00:16:40,067
CALL文は変更不要ですが

245
00:16:40,167 --> 00:16:44,471
計測に使う
固有の機能は使えます

246
00:16:44,571 --> 00:16:48,475
高いけど
デバッグに役立つものです

247
00:16:48,842 --> 00:16:51,879
ログハンドルのプロパティで

248
00:16:51,979 --> 00:16:55,549
signpostが オンに
なっているか確認します

249
00:16:55,949 --> 00:17:00,988
付加的なオペレーションを
制御するためです

250
00:16:55,949 --> 00:17:00,988
付加的なオペレーションを
制御するためです

251
00:17:02,489 --> 00:17:06,926
これまでの例は
Swiftで見せましたが

252
00:17:07,294 --> 00:17:11,498
signpostはＣ言語にも
対応しています

253
00:17:13,000 --> 00:17:16,103
お話しした全機能が使えます

254
00:17:16,203 --> 00:17:19,873
ログハンドルや
３つのsignpostの設定

255
00:17:19,973 --> 00:17:22,608
IDの付け方も同様です

256
00:17:22,943 --> 00:17:26,747
Ｃ言語のデベロッパ視点で
書かれた―

257
00:17:26,847 --> 00:17:31,151
HeaderDocも
ぜひ参照してください

258
00:17:32,486 --> 00:17:36,156
以上が
コードにsignpostを―

259
00:17:36,256 --> 00:17:39,393
組み込む方法でした

260
00:17:39,893 --> 00:17:44,231
次はInstrumentsでの
活用法を見てみましょう

261
00:17:44,565 --> 00:17:48,702
ここからは 同僚のチャドが
ご説明します

262
00:17:48,902 --> 00:17:49,803
では

263
00:17:49,903 --> 00:17:54,241
(拍手)

264
00:17:57,511 --> 00:17:59,546
ありがとう シェーン

265
00:18:00,414 --> 00:18:03,183
次は
signpostが活用できる―

266
00:18:03,283 --> 00:18:08,021
Instruments 10の
３つの新機能をご紹介します

267
00:18:08,422 --> 00:18:10,524
１つ目はos signpost

268
00:18:10,624 --> 00:18:12,859
記録や可視化―

269
00:18:12,960 --> 00:18:16,997
アプリケーション内の
アクティビティ分析ができます

270
00:18:17,564 --> 00:18:19,833
２つ目が
Points of Interest

271
00:18:19,933 --> 00:18:24,271
概要と どんな時に
便利かを説明します

272
00:18:25,038 --> 00:18:27,975
最後に
新しいカスタム機能と

273
00:18:28,075 --> 00:18:32,112
os signpostとの
使い方をお見せします

274
00:18:32,212 --> 00:18:35,582
signpostを活用する
ヒントになります

275
00:18:35,949 --> 00:18:38,652
それではデモをお見せします

276
00:18:42,856 --> 00:18:47,094
デモ用のアプリケーションを
用意しました

277
00:18:47,194 --> 00:18:49,396
Trailblazerです

278
00:18:49,963 --> 00:18:54,301
ハイキングスポットを
紹介するもので

279
00:18:54,401 --> 00:18:59,039
スクロールすると
画像が表示されます

280
00:18:59,873 --> 00:19:05,245
最初は白い背景が表示され
遅れて画像が現れます

281
00:18:59,873 --> 00:19:05,245
最初は白い背景が表示され
遅れて画像が現れます

282
00:19:05,345 --> 00:19:11,318
最新のアプリケーションでは
一般的な挙動と言えます

283
00:19:11,852 --> 00:19:15,422
パフォーマンスには
優れますが

284
00:19:15,522 --> 00:19:17,758
プロファイルには不向きです

285
00:19:18,025 --> 00:19:21,728
多くの非同期処理が
起きるためで

286
00:19:21,828 --> 00:19:25,899
スクロールと 画像の
読み込みが重なります

287
00:19:25,999 --> 00:19:28,535
速くスクロールされると

288
00:19:28,735 --> 00:19:33,874
読み込みが完了せず
画像が表示されません

289
00:19:33,974 --> 00:19:38,712
こういう場合は
キャンセルしないと

290
00:19:38,812 --> 00:19:42,416
平行して
読み込みを続けようとします

291
00:19:42,883 --> 00:19:45,319
そこでsignpostを使って

292
00:19:45,419 --> 00:19:48,121
アプリケーションを
分析します

293
00:19:49,223 --> 00:19:51,558
これがコードです

294
00:19:51,658 --> 00:19:55,129
startImageDownloadを
使っています

295
00:19:55,229 --> 00:19:58,198
画像を読み込む際
呼び出され

296
00:19:58,332 --> 00:20:02,169
該当の画像の名前が
渡されます

297
00:19:58,332 --> 00:20:02,169
該当の画像の名前が
渡されます

298
00:20:02,436 --> 00:20:04,738
ダウンローダの記載はここ

299
00:20:04,838 --> 00:20:10,410
ダウンロードが終わると
コールバックを受け取れます

300
00:20:11,245 --> 00:20:17,084
今回はダウンローダが
同時に起動していますので

301
00:20:17,184 --> 00:20:20,888
signpost IDの生成に
ピッタリです

302
00:20:20,988 --> 00:20:25,459
ダウンローダの
オブジェクトでIDを作ります

303
00:20:26,560 --> 00:20:29,463
ここがos signpostの
BEGINです

304
00:20:29,563 --> 00:20:32,533
networkingの
ログハンドルに送ります

305
00:20:32,633 --> 00:20:35,769
ちょっと見てみましょう

306
00:20:35,869 --> 00:20:39,106
アプリケーションの
バンドルIDがあり

307
00:20:39,206 --> 00:20:41,008
カテゴリがあります

308
00:20:43,777 --> 00:20:48,549
次に 背景画像の
読み込み完了が分かるように

309
00:20:48,682 --> 00:20:51,318
画像のsignpost名を渡します

310
00:20:51,518 --> 00:20:54,054
次にsignpost IDです

311
00:20:54,154 --> 00:20:56,790
BEGINにメタデータを加え

312
00:20:57,057 --> 00:21:01,395
読み込む画像の名前を
伝えます

313
00:20:57,057 --> 00:21:01,395
読み込む画像の名前を
伝えます

314
00:21:01,662 --> 00:21:03,330
ダウンロードを開始

315
00:21:03,430 --> 00:21:05,032
プロパティが

316
00:21:05,132 --> 00:21:08,502
ダウンローダの作動を
トラッキングします

317
00:21:09,102 --> 00:21:12,906
完了すると
コールバックが送られます

318
00:21:13,006 --> 00:21:16,543
読み込んだ画像を表示し

319
00:21:17,277 --> 00:21:19,813
ENDを呼び出します

320
00:21:19,913 --> 00:21:24,585
ログハンドルも名前もIDも
同じものを使いますが

321
00:21:24,785 --> 00:21:30,023
次はサイズを規定する
メタデータを追加します

322
00:21:30,691 --> 00:21:34,695
ご覧のとおり 今回は詳細に

323
00:21:34,795 --> 00:21:38,499
“xcode:size-in-bytes”
と記しました

324
00:21:38,932 --> 00:21:41,635
XcodeとInstrumentsに

325
00:21:41,735 --> 00:21:46,773
引数をバイト単位で表示し
分析させるためです

326
00:21:47,741 --> 00:21:49,042
これについて

327
00:21:49,142 --> 00:21:54,414
詳しくはヘルプ内の
デベロッパガイドをご覧ください

328
00:21:55,849 --> 00:21:59,887
ダウンロードが完了すると
nilに戻ります

329
00:22:00,721 --> 00:22:03,957
終わり方は２つあります

330
00:22:04,291 --> 00:22:05,859
今のが成功例で

331
00:22:05,959 --> 00:22:08,462
次はキャンセルする場合です

332
00:22:08,829 --> 00:22:10,364
再読み込みに備え

333
00:22:10,831 --> 00:22:15,702
作動中のダウンローダを
先にキャンセルします

334
00:22:16,236 --> 00:22:19,273
そのためにENDを置きます

335
00:22:19,807 --> 00:22:25,045
同じログハンドルと
名前とIDを使いましょう

336
00:22:25,212 --> 00:22:28,715
メタデータに
“Cancelled”と加え

337
00:22:28,849 --> 00:22:31,318
成功した場合と区別します

338
00:22:32,052 --> 00:22:34,321
準備は終わりました

339
00:22:34,421 --> 00:22:38,358
次はプロファイルを
作成します

340
00:22:39,126 --> 00:22:40,928
Instrumentsが
立ち上がります

341
00:22:42,729 --> 00:22:45,132
まだインストール中ですね

342
00:22:46,066 --> 00:22:47,468
立ち上がりました

343
00:22:47,834 --> 00:22:50,337
新規作成を選び―

344
00:22:51,271 --> 00:22:52,706
Libraryへ

345
00:22:52,806 --> 00:22:56,276
新しいos signpostを
使ってみます

346
00:22:56,510 --> 00:22:59,546
ここに ありますね

347
00:23:00,814 --> 00:23:03,851
ドラッグ＆ドロップで
トレースを表示

348
00:23:04,084 --> 00:23:05,853
スペースを広げて―

349
00:23:06,320 --> 00:23:08,555
Recordを押します

350
00:23:09,356 --> 00:23:13,727
先ほどのiPhoneを持ってきて

351
00:23:13,827 --> 00:23:17,431
普通のスクロールと
速いスクロールをします

352
00:23:18,165 --> 00:23:20,367
画面が止まるのを待ち―

353
00:23:21,468 --> 00:23:24,438
Instrumentsに戻り
記録を確認します

354
00:23:25,672 --> 00:23:27,141
記録を停止します

355
00:23:27,541 --> 00:23:31,011
トラックビューを
見てください

356
00:23:31,111 --> 00:23:34,414
これは背景画像の処理で

357
00:23:34,515 --> 00:23:36,049
signpost名です

358
00:23:36,650 --> 00:23:39,152
Optionを押しながら拡大

359
00:23:39,486 --> 00:23:41,588
処理時間が見られます

360
00:23:41,688 --> 00:23:46,360
最初と最後の
メタデータも見えますね

361
00:23:48,028 --> 00:23:52,633
縮小して もう一度
トレースを見てみます

362
00:23:52,900 --> 00:23:57,237
同時に読み込まれている
画像の数は

363
00:23:57,337 --> 00:23:59,573
５つくらいですね

364
00:23:59,940 --> 00:24:01,842
キャンセルは成功です

365
00:23:59,940 --> 00:24:01,842
キャンセルは成功です

366
00:24:02,176 --> 00:24:06,914
確認したければ
詳細を見てみましょう

367
00:24:07,147 --> 00:24:09,249
処理時間のメタデータに

368
00:24:09,349 --> 00:24:12,286
“Cancelled”と
書かれています

369
00:24:13,420 --> 00:24:16,890
次に詳しい数字を確認します

370
00:24:16,990 --> 00:24:20,360
例えば処理に要した
時間を見るなら―

371
00:24:21,428 --> 00:24:23,797
処理時間のサマリーへ

372
00:24:24,431 --> 00:24:27,701
カテゴリごとに
ブレイクダウンされます

373
00:24:27,868 --> 00:24:32,706
その下は名前ごと
そしてメッセージごとです

374
00:24:33,307 --> 00:24:36,076
少し狭めましょう

375
00:24:36,743 --> 00:24:41,515
93個の画像を読み込む
リクエストがありました

376
00:24:42,149 --> 00:24:44,551
うち12個はlocation１

377
00:24:45,352 --> 00:24:47,321
そのうち７つはキャンセル

378
00:24:47,421 --> 00:24:50,858
５つは3.31MBで
読み込みました

379
00:24:51,925 --> 00:24:55,596
所要時間が
右側に表示されます

380
00:24:55,696 --> 00:24:57,831
キャンセルに要した―

381
00:24:57,931 --> 00:25:02,102
最短時間と平均時間が
出ています

382
00:24:57,931 --> 00:25:02,102
最短時間と平均時間が
出ています

383
00:25:02,202 --> 00:25:06,039
処理完了の場合より
ずっと短いです

384
00:25:06,140 --> 00:25:09,109
想定どおりの傾向です

385
00:25:09,776 --> 00:25:14,715
キャンセルした全イベントの
詳細を確認するには

386
00:25:14,815 --> 00:25:16,884
横の矢印をクリック

387
00:25:17,151 --> 00:25:20,554
リストビューが開いて

388
00:25:20,654 --> 00:25:25,792
キャンセルのメッセージを
受け取った場所が分かります

389
00:25:26,293 --> 00:25:30,831
更に このように
該当箇所の処理時間が

390
00:25:30,931 --> 00:25:33,200
トレースビューで示されます

391
00:25:33,300 --> 00:25:36,870
エラーの原因を探す時に
便利です

392
00:25:38,405 --> 00:25:44,378
いつ処理時間が発生したか
知る方法は分かりました

393
00:25:44,978 --> 00:25:48,849
ではメタデータを
分析する方法は？

394
00:25:49,216 --> 00:25:50,851
例えばネットで

395
00:25:50,951 --> 00:25:55,189
何バイトの画像を
読み込んだのか知るには？

396
00:25:55,656 --> 00:26:01,462
サイズに関するメッセージを
メタデータに加えましたが

397
00:25:55,656 --> 00:26:01,462
サイズに関するメッセージを
メタデータに加えましたが

398
00:26:01,628 --> 00:26:04,531
これが使えそうですね

399
00:26:05,165 --> 00:26:06,300
やってみます

400
00:26:06,400 --> 00:26:09,303
サマリーの
Metadata Statisticsへ

401
00:26:10,504 --> 00:26:14,875
サブシステム カテゴリ
フォーマットごとに

402
00:26:14,975 --> 00:26:16,343
ブレイクダウンされます

403
00:26:16,443 --> 00:26:19,646
フォーマットの下は引数です

404
00:26:19,746 --> 00:26:23,317
今回の場合は
arg0だけでした

405
00:26:24,084 --> 00:26:26,553
Instrumentsが合計値を算出

406
00:26:26,653 --> 00:26:28,755
バイトで表示されます

407
00:26:28,856 --> 00:26:35,095
ここでは読み込んだ画像が
80MBだと分かりました

408
00:26:36,563 --> 00:26:40,134
横には
最短･最長･平均時間もあり

409
00:26:40,234 --> 00:26:43,070
分析するのに最適です

410
00:26:43,170 --> 00:26:47,207
パフォーマンスを
統計的に分析できます

411
00:26:48,208 --> 00:26:51,912
signpostは
軽量という話でしたね

412
00:26:52,012 --> 00:26:53,714
事実ですが

413
00:26:54,114 --> 00:26:57,151
今見せた操作は例外です

414
00:26:58,151 --> 00:27:01,588
デフォルトの
immediateモードでは

415
00:26:58,151 --> 00:27:01,588
デフォルトの
immediateモードでは

416
00:27:01,688 --> 00:27:06,693
記録もデータの閲覧も
ほぼリアルタイムです

417
00:27:06,960 --> 00:27:09,162
その場合 signpostは

418
00:27:09,263 --> 00:27:13,100
Instrumentsに直接
データを送ります

419
00:27:13,200 --> 00:27:17,070
バッファリングする
最適化のデータより

420
00:27:17,171 --> 00:27:18,972
優先して送られます

421
00:27:19,106 --> 00:27:23,844
signpostの場合
デモで行った規模なら

422
00:27:23,944 --> 00:27:28,081
オーバーヘッドは
気にならない程度です

423
00:27:28,248 --> 00:27:32,653
しかし １秒に何千もの
signpostが必要な場合

424
00:27:32,753 --> 00:27:35,022
負荷が大きくなります

425
00:27:35,122 --> 00:27:37,624
それを回避する方法です

426
00:27:37,724 --> 00:27:41,428
記録の前に
Instrumentsの記録モードを

427
00:27:41,528 --> 00:27:43,096
変更します

428
00:27:43,197 --> 00:27:44,865
Recordボタンから

429
00:27:44,965 --> 00:27:49,436
Recording Optionsを
選択します

430
00:27:50,771 --> 00:27:54,441
下部に現れる
Global Optionsを押すと

431
00:27:55,008 --> 00:27:57,344
Immediateモードに
なっています

432
00:27:57,444 --> 00:28:00,147
これを“５秒間”に
変更します

433
00:27:57,444 --> 00:28:00,147
これを“５秒間”に
変更します

434
00:28:00,380 --> 00:28:02,649
ウィンドウ制限です

435
00:28:03,150 --> 00:28:06,320
すべての
イベントではなく

436
00:28:06,420 --> 00:28:10,390
５秒分だけを
記録するという設定です

437
00:28:10,557 --> 00:28:15,596
これによりInstrumentsが
OSを邪魔しなくなります

438
00:28:15,696 --> 00:28:18,832
システムやゲームの
パフォーマンス調査に

439
00:28:18,932 --> 00:28:22,069
非常によく使われる手段です

440
00:28:22,169 --> 00:28:26,039
スタッターやエラーを
発見できます

441
00:28:27,508 --> 00:28:31,678
以上が
os signpostでした

442
00:28:32,646 --> 00:28:35,082
次は
Points of Interestです

443
00:28:36,750 --> 00:28:39,686
再度 Trailblazerを
使います

444
00:28:40,754 --> 00:28:45,292
画像を選択すると
詳細が表示されます

445
00:28:45,926 --> 00:28:49,730
別の画像を選べば
また詳細が現れます

446
00:28:50,364 --> 00:28:53,534
いつどこで
詳細が表示されるか

447
00:28:53,634 --> 00:28:56,703
トラッキングできれば
便利です

448
00:28:56,803 --> 00:29:01,875
ユーザの関心や行動を
予測できますからね

449
00:28:56,803 --> 00:29:01,875
ユーザの関心や行動を
予測できますからね

450
00:29:02,609 --> 00:29:06,847
signpostで可能ですが

451
00:29:06,947 --> 00:29:09,049
Instrumentsを使って

452
00:29:09,149 --> 00:29:12,386
すべて記録する
必要があります

453
00:29:12,486 --> 00:29:17,291
必然的に多くのイベントに
埋もれてしまいます

454
00:29:17,624 --> 00:29:22,029
Points of Interestで
優先度を上げましょう

455
00:29:22,529 --> 00:29:24,898
コードを見てみましょう

456
00:29:25,499 --> 00:29:28,101
メソッド
viewDidAppearの中に

457
00:29:28,202 --> 00:29:32,773
os signpostのイベントを
作りました

458
00:29:32,873 --> 00:29:36,443
詳細の名前がここに入ります

459
00:29:37,077 --> 00:29:40,814
Points of Interestに
これが送られます

460
00:29:40,914 --> 00:29:45,586
識別子のついた
ハンドルが作られ

461
00:29:45,752 --> 00:29:48,522
専用のカテゴリが
設けられます

462
00:29:48,622 --> 00:29:51,492
Instrumentsは
これを目印に

463
00:29:51,592 --> 00:29:57,397
該当する箇所を探し
カテゴリ分けします

464
00:29:57,831 --> 00:30:00,801
タイムプロファイルを
見てみましょう

465
00:29:57,831 --> 00:30:00,801
タイムプロファイルを
見てみましょう

466
00:30:00,901 --> 00:30:05,272
Points of Interestが
自動で読み込まれています

467
00:30:05,839 --> 00:30:07,474
記録を開始します

468
00:30:08,909 --> 00:30:14,615
先ほどと同じように
２ヵ所の詳細を閲覧します

469
00:30:15,115 --> 00:30:18,151
もう１ヵ所
やっておきましょう

470
00:30:19,286 --> 00:30:22,055
Instrumentsに戻ります

471
00:30:22,156 --> 00:30:27,728
Points of Interestが
しっかりと記録されています

472
00:30:27,828 --> 00:30:33,834
ユーザが見ていた場所や
詳細なデータが分かります

473
00:30:33,934 --> 00:30:36,803
あなたの
アプリケーションの中で

474
00:30:36,904 --> 00:30:41,408
ユーザの関心が高い場所を
把握できます

475
00:30:41,508 --> 00:30:46,413
デベロッパチームやコミュニティで
このデータを

476
00:30:46,513 --> 00:30:48,916
共有することもできます

477
00:30:49,917 --> 00:30:52,886
以上が
signpostを使った―

478
00:30:52,986 --> 00:30:55,823
Points of Interestの
デモでした

479
00:30:56,890 --> 00:31:00,327
Instruments 10の
もう１つの特長は

480
00:30:56,890 --> 00:31:00,327
Instruments 10の
もう１つの特長は

481
00:31:00,427 --> 00:31:03,263
カスタマイズできることです

482
00:31:03,464 --> 00:31:07,734
今回 カスタム版の
デモのために

483
00:31:08,001 --> 00:31:13,140
Trailblazer専用の
パッケージを作ってきました

484
00:31:13,807 --> 00:31:16,510
今から実行してみます

485
00:31:18,078 --> 00:31:19,479
見てください

486
00:31:20,480 --> 00:31:22,950
パッケージが
インストールされた―

487
00:31:23,050 --> 00:31:26,153
Instrumentsの
コピーが現れました

488
00:31:26,887 --> 00:31:29,490
これを立ち上げましょう

489
00:31:29,590 --> 00:31:34,094
Trailblazer Networking
テンプレートがあります

490
00:31:34,361 --> 00:31:35,662
これを選ぶと

491
00:31:36,130 --> 00:31:40,500
専用のトレースドキュメントが
Instrumentsに現れます

492
00:31:41,435 --> 00:31:45,139
それでは早速
記録をしてみましょう

493
00:31:45,239 --> 00:31:50,010
os signpostとカスタム版の
違いを確認します

494
00:31:50,110 --> 00:31:53,380
もう一度
画像を読み込みます

495
00:31:55,916 --> 00:31:58,318
トレースを見てみましょう

496
00:31:58,952 --> 00:32:01,655
見た目から違いますね

497
00:31:58,952 --> 00:32:01,655
見た目から違いますね

498
00:32:01,755 --> 00:32:03,624
拡大してみます

499
00:32:04,424 --> 00:32:06,827
左側を見てください

500
00:32:06,927 --> 00:32:11,165
signpost名ではなく
画像名で並んでいます

501
00:32:11,265 --> 00:32:14,735
画像２の読み込みが
行われたのは

502
00:32:14,968 --> 00:32:17,471
ここと ここです

503
00:32:18,172 --> 00:32:22,709
各読み込みに
画像のサイズを表記しました

504
00:32:22,910 --> 00:32:29,083
3.5MBを超えると
赤くなる設定もしています

505
00:32:29,550 --> 00:32:34,021
このようにグラフを
カスタマイズしました

506
00:32:34,421 --> 00:32:36,356
下の詳細も違います

507
00:32:36,457 --> 00:32:39,927
とてもシンプルなリストです

508
00:32:40,060 --> 00:32:42,663
トレースでも確認できます

509
00:32:43,397 --> 00:32:45,732
そして更に…

510
00:32:45,833 --> 00:32:48,101
画面を戻しますね

511
00:32:48,535 --> 00:32:52,306
全ダウンロードの
サマリーも見られます

512
00:32:52,406 --> 00:32:54,408
これが合計です

513
00:32:54,975 --> 00:32:58,779
Timesliceという
便利な機能も

514
00:32:58,879 --> 00:33:03,350
“同時進行のタスクは
いくつあるか”という―

515
00:32:58,879 --> 00:33:03,350
“同時進行のタスクは
いくつあるか”という―

516
00:33:03,450 --> 00:33:06,386
問いに答えてくれます

517
00:33:06,587 --> 00:33:08,822
タスクの数を知るには

518
00:33:08,922 --> 00:33:12,493
画面上の縦線を
時間軸に動かします

519
00:33:12,593 --> 00:33:15,062
縦線と交差する数が

520
00:33:15,195 --> 00:33:18,532
同時に進行する
タスクの数です

521
00:33:18,632 --> 00:33:22,202
これも役立つ
データの１つです

522
00:33:23,003 --> 00:33:27,374
もしチームで
プロジェクトを進行するなら

523
00:33:27,474 --> 00:33:29,543
カスタム版は最適です

524
00:33:29,643 --> 00:33:32,746
コードの詳細を知られずに

525
00:33:32,846 --> 00:33:37,718
signpostのデータを活用し
プログラムを共有できます

526
00:33:37,818 --> 00:33:39,620
重要な特長です

527
00:33:40,053 --> 00:33:42,456
他にもあります

528
00:33:42,556 --> 00:33:44,625
このカスタム版は

529
00:33:44,892 --> 00:33:50,397
わずか115行のXMLで
すべて定義されています

530
00:33:50,964 --> 00:33:54,902
幅広く応用が利き
強力であると同時に

531
00:33:55,002 --> 00:33:56,803
簡単なのです

532
00:33:58,005 --> 00:34:00,541
デモは以上です

533
00:33:58,005 --> 00:34:00,541
デモは以上です

534
00:34:01,675 --> 00:34:06,146
(拍手)

535
00:34:08,916 --> 00:34:12,820
今日はsignpostの
APIを使い

536
00:34:12,920 --> 00:34:18,559
Points of Interestと
処理時間のデモを行いました

537
00:34:18,926 --> 00:34:20,627
メタデータを集め

538
00:34:20,728 --> 00:34:25,032
Instrumentsで
可視化し分析しましたね

539
00:34:25,364 --> 00:34:30,437
更にsignpostのデータを
使いやすくするため

540
00:34:30,536 --> 00:34:35,175
Instrumentsの
カスタム版を作りました

541
00:34:36,009 --> 00:34:39,612
今回の情報は非常に有益です

542
00:34:39,713 --> 00:34:41,815
ぜひアプリケーションの

543
00:34:41,915 --> 00:34:46,353
パフォーマンス向上に
役立ててください

544
00:34:46,453 --> 00:34:51,091
os signpostとInstrumentsを
うまく活用すれば

545
00:34:51,190 --> 00:34:53,960
ユーザエクスペリエンスを
改善できます

546
00:34:54,895 --> 00:34:59,867
今回は以上ですが
ラボにもお越しください

547
00:34:59,967 --> 00:35:03,837
テクノロジーラボは
本日３時からです

548
00:34:59,967 --> 00:35:03,837
テクノロジーラボは
本日３時からです

549
00:35:04,071 --> 00:35:07,541
セッション410でも
お話しします

550
00:35:07,808 --> 00:35:11,011
Instrumentsの
カスタム版について

551
00:35:11,111 --> 00:35:15,148
Trailblazerを例に
解説します

552
00:35:15,616 --> 00:35:17,784
ありがとうございました

553
00:35:17,918 --> 00:35:21,622
(拍手)