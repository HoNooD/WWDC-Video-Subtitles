
1
00:00:07,107 --> 00:00:16,183
(音楽)

2
00:00:17,050 --> 00:00:20,654
(拍手)

3
00:00:20,921 --> 00:00:21,788
ありがとう

4
00:00:22,923 --> 00:00:23,824
こんにちは

5
00:00:24,358 --> 00:00:26,560
ARに興味がある方は？

6
00:00:27,528 --> 00:00:28,996
分かりました

7
00:00:29,429 --> 00:00:32,266
すでにARアプリケーションを
持っている方は？

8
00:00:34,234 --> 00:00:35,502
少し減りました

9
00:00:36,103 --> 00:00:38,605
手強い印象がありますからね

10
00:00:38,772 --> 00:00:42,876
今日は 僕たちの
技術をお見せします

11
00:00:42,976 --> 00:00:45,646
２つの点で役立つでしょう

12
00:00:45,979 --> 00:00:49,716
まず ARが
より身近なものになります

13
00:00:50,350 --> 00:00:54,488
さらに 時間とお金を
節約できます

14
00:00:54,588 --> 00:00:59,092
コードを書く前に
正しい設計か確認するからです

15
00:01:00,460 --> 00:01:01,628
では 始めます

16
00:01:03,530 --> 00:01:07,234
WWDCの講演を
見たことがあれば

17
00:01:07,334 --> 00:01:12,039
Toast Modernは
ご存じでしょう

18
00:01:12,673 --> 00:01:16,443
トーストを評価する
アプリケーションです

19
00:01:16,743 --> 00:01:17,845
素晴らしい

20
00:01:19,012 --> 00:01:21,815
従来の機能にARを―

21
00:01:22,449 --> 00:01:25,252
追加することになりました

22
00:01:26,987 --> 00:01:32,626
ベイエリアで トーストの
人気は拡大中ですね

23
00:01:33,093 --> 00:01:33,961
今日で―

24
00:01:35,162 --> 00:01:37,130
人気はもっと拡大します

25
00:01:37,798 --> 00:01:39,099
ご紹介しましょう

26
00:01:40,000 --> 00:01:41,301
ToastARです

27
00:01:41,435 --> 00:01:46,740
AR搭載の トースト評価
アプリケーションです

28
00:01:46,840 --> 00:01:49,276
どうもありがとう

29
00:01:51,445 --> 00:01:54,147
コンピュータビジョンと
ARで

30
00:01:54,281 --> 00:01:59,353
トーストの評価や
買える場所を確認できます

31
00:02:00,420 --> 00:02:01,755
革命的でしょう

32
00:02:02,055 --> 00:02:07,728
デベロッパはAppleに
最高の機能を期待しますから

33
00:02:07,828 --> 00:02:10,931
トーストにも
最高の味を期待します

34
00:02:11,865 --> 00:02:15,736
では ToastARの
試作品の作り方とは？

35
00:02:16,170 --> 00:02:19,039
Swiftを使ったと思うかも

36
00:02:20,541 --> 00:02:23,043
ARKitかもしれません

37
00:02:24,978 --> 00:02:28,048
または
Unityでしょうか？

38
00:02:28,448 --> 00:02:32,886
これらは確実な方法ですが
他の手段もあります

39
00:02:34,087 --> 00:02:38,959
ローテクなプロトタイピングで
設計の問題を

40
00:02:39,059 --> 00:02:42,196
事前に解決できることも
あるのです

41
00:02:42,729 --> 00:02:47,434
そこで今日は カメラを
使った方法を紹介します

42
00:02:49,903 --> 00:02:51,939
周りの空間も使いますよ

43
00:02:53,140 --> 00:02:55,976
ARの試作品の
作り方の紹介です

44
00:02:56,443 --> 00:02:59,379
まず ２つの用語を
覚えてください

45
00:03:01,348 --> 00:03:03,317
１つ目は ワールド空間

46
00:03:03,417 --> 00:03:07,421
自分や 端末の
周りの空間にある―

47
00:03:07,521 --> 00:03:10,090
設計の要素のことを指します

48
00:03:11,625 --> 00:03:13,727
２つ目は スクリーン空間

49
00:03:13,927 --> 00:03:17,297
画面に映る要素のことです

50
00:03:19,099 --> 00:03:23,704
では ToastARの
初期の設計を見てみましょう

51
00:03:26,340 --> 00:03:29,510
この設計では
ワールド空間に―

52
00:03:29,610 --> 00:03:33,313
評価が書かれた
ラベルを表示しています

53
00:03:34,815 --> 00:03:38,485
簡単そうでも
すぐコーディングせずに

54
00:03:38,585 --> 00:03:40,921
時間とお金を節約しましょう

55
00:03:41,021 --> 00:03:45,792
コードを書く前に
正しい設計か確認するのです

56
00:03:46,293 --> 00:03:49,763
ARで大切なのは
周りの空間です

57
00:03:50,163 --> 00:03:55,335
静止画像や動画では
テストはうまくいきません

58
00:03:56,136 --> 00:04:00,407
物理的な方法なら
高度な技術を使わずに

59
00:03:56,136 --> 00:04:00,407
物理的な方法なら
高度な技術を使わずに

60
00:04:00,507 --> 00:04:02,910
簡単にテストができます

61
00:04:03,510 --> 00:04:05,212
何から始めたのか？

62
00:04:07,614 --> 00:04:11,652
ラベルを印刷して
つまようじに貼りました

63
00:04:11,818 --> 00:04:15,222
分かります　変ですよね

64
00:04:15,322 --> 00:04:19,726
ですが この方法には
３つの利点があります

65
00:04:20,394 --> 00:04:23,797
まず 実際の状況で
テストできます

66
00:04:23,897 --> 00:04:26,400
周りの空間が大切でしたね

67
00:04:27,201 --> 00:04:33,407
次に コーディングの前に
設計の問題を解決できます

68
00:04:34,775 --> 00:04:39,580
最後に ToastARを
より良いものにするための

69
00:04:39,680 --> 00:04:41,715
気付きを得られます

70
00:04:43,383 --> 00:04:45,452
印刷はどうするか？

71
00:04:46,153 --> 00:04:49,556
描いて切り取れば
いいだけです

72
00:04:53,393 --> 00:04:58,065
ラベルを つまようじに付けて
トーストに刺します

73
00:04:58,832 --> 00:05:03,770
それから カメラを使って
設計をテストします

74
00:04:58,832 --> 00:05:03,770
それから カメラを使って
設計をテストします

75
00:05:05,939 --> 00:05:08,442
革命的でしょう？

76
00:05:08,609 --> 00:05:12,079
(拍手)

77
00:05:12,179 --> 00:05:14,681
試してすぐに ラベルが

78
00:05:14,781 --> 00:05:17,885
読みづらいと気付きました

79
00:05:18,819 --> 00:05:20,954
角度が問題でした

80
00:05:21,154 --> 00:05:24,258
常にカメラの
正面にあるべきかも

81
00:05:24,424 --> 00:05:25,792
試してみましょう

82
00:05:27,961 --> 00:05:33,133
同僚と 洗練された道具に
助けてもらいました

83
00:05:33,600 --> 00:05:35,802
ただの透明な定規ですが…

84
00:05:36,637 --> 00:05:37,337
素晴らしい

85
00:05:38,405 --> 00:05:40,941
カメラの正面に
ラベルがあると

86
00:05:41,041 --> 00:05:44,077
読みやすいことが
分かりました

87
00:05:45,179 --> 00:05:47,748
この動きを参照する場合

88
00:05:47,848 --> 00:05:53,187
クラスを使えば簡単に
SceneKitに実装できます

89
00:05:53,720 --> 00:05:57,724
まだコードを書かずに
テストを続けて―

90
00:05:57,891 --> 00:06:00,260
正しい設計か確認しましょう

91
00:05:57,891 --> 00:06:00,260
正しい設計か確認しましょう

92
00:06:00,627 --> 00:06:04,264
ラベルとカメラの距離が
遠い場合は？

93
00:06:04,364 --> 00:06:06,533
簡単に確認できますね

94
00:06:07,401 --> 00:06:10,571
このテストでも
カメラを使います

95
00:06:11,038 --> 00:06:15,242
距離が遠いと
ラベルは読みづらいですね

96
00:06:15,342 --> 00:06:17,644
近いほうが良さそうです

97
00:06:19,479 --> 00:06:21,481
では どう作るのか？

98
00:06:23,150 --> 00:06:27,921
スクリーン空間の問題なので
Keynoteを使います

99
00:06:28,689 --> 00:06:31,558
まず トーストの動画を撮影

100
00:06:34,828 --> 00:06:36,396
ゆっくり動かします

101
00:06:37,130 --> 00:06:41,768
トーストが映ったら
そこで少し止まりましょう

102
00:06:44,438 --> 00:06:47,307
次は Keynoteの出番です

103
00:06:49,543 --> 00:06:54,548
ラベルを 表示する端末の
サイズに合わせます

104
00:06:57,284 --> 00:07:00,587
動画をKeynoteで表示します

105
00:06:57,284 --> 00:07:00,587
動画をKeynoteで表示します

106
00:07:04,191 --> 00:07:06,527
次に ラベルを付けます

107
00:07:09,029 --> 00:07:14,134
動作を加えて 適切な
表示時間を設定したら―

108
00:07:14,768 --> 00:07:16,937
希望の位置に移動します

109
00:07:20,174 --> 00:07:22,709
ビルドの順番は重要です

110
00:07:22,809 --> 00:07:26,847
動画とラベルの動きは
必ず同時に始めますが

111
00:07:26,947 --> 00:07:32,686
トーストが映ってから
ラベルを表示させましょう

112
00:07:35,122 --> 00:07:39,293
最後に 実際の状況で
テストをします

113
00:07:43,030 --> 00:07:47,601
Keynoteで作った
ラベルのテストです

114
00:07:50,270 --> 00:07:50,938
素晴らしい

115
00:07:51,471 --> 00:07:54,007
テキストも
ぴったり入りました

116
00:07:54,441 --> 00:07:59,646
これで ラベルの範囲を
拡大しやすくなるでしょう

117
00:08:01,682 --> 00:08:06,019
複数のトーストが
映る場合はどうでしょう？

118
00:08:07,321 --> 00:08:09,957
同様に 試してみます

119
00:08:14,161 --> 00:08:17,698
問題は
どのトーストの情報を―

120
00:08:18,298 --> 00:08:21,368
表示しているか
分からない点です

121
00:08:22,503 --> 00:08:26,073
目印があると
良いかもしれません

122
00:08:26,473 --> 00:08:29,543
そうすれば
判断できますからね

123
00:08:29,643 --> 00:08:31,879
すぐに試してみましょう

124
00:08:34,515 --> 00:08:39,686
今回も 同僚と
頼もしい定規の力を借ります

125
00:08:39,785 --> 00:08:42,890
印刷したラベルを
定規に付けました

126
00:08:43,190 --> 00:08:45,225
カメラを使います

127
00:08:46,293 --> 00:08:50,097
目印があると
どちらの情報か分かりますね

128
00:08:52,599 --> 00:08:53,934
まとめましょう

129
00:08:55,302 --> 00:09:00,374
これで 試作品の
おおまかなデモができます

130
00:08:55,302 --> 00:09:00,374
これで 試作品の
おおまかなデモができます

131
00:09:00,707 --> 00:09:03,076
設計が正しいことが―

132
00:09:03,577 --> 00:09:04,978
分かりました

133
00:09:05,812 --> 00:09:09,483
試作品の内容を
コードに反映しましょう

134
00:09:11,785 --> 00:09:16,990
たった数時間で
問題に対処できました

135
00:09:18,325 --> 00:09:22,996
ワールド空間のラベルは
角度や距離があると

136
00:09:23,096 --> 00:09:26,066
読みづらいことが
理解できました

137
00:09:26,600 --> 00:09:27,935
もう１つ学びました

138
00:09:28,502 --> 00:09:33,273
ラベルの対象を判断できる
目印が必要なことです

139
00:09:39,046 --> 00:09:43,450
物理的な方法で
AR体験をテストできました

140
00:09:44,618 --> 00:09:48,489
ワールド空間の
テストではカメラを使用

141
00:09:49,289 --> 00:09:52,759
Keynoteも使いました

142
00:09:53,694 --> 00:09:55,329
役立ったか？

143
00:09:56,497 --> 00:10:00,133
まず 時間とお金の
節約になりました

144
00:09:56,497 --> 00:10:00,133
まず 時間とお金の
節約になりました

145
00:10:00,267 --> 00:10:04,071
コーディング前に
確認できたからです

146
00:10:08,909 --> 00:10:11,411
新しいアイデアも得ました

147
00:10:11,512 --> 00:10:14,148
ToastARの向上に
役立ちました

148
00:10:14,248 --> 00:10:17,050
とても素晴らしいことです

149
00:10:18,452 --> 00:10:24,091
ARのアプリケーションを
次に作り始める時に―

150
00:10:25,025 --> 00:10:27,661
お役に立てばうれしいです

151
00:10:28,395 --> 00:10:29,496
ありがとう

152
00:10:29,796 --> 00:10:31,365
(拍手)