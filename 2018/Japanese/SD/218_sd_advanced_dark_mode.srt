
1
00:00:07,107 --> 00:00:16,783
(音楽)

2
00:00:17,885 --> 00:00:18,986
おはようございます

3
00:00:19,086 --> 00:00:20,254
(拍手)

4
00:00:20,354 --> 00:00:20,988
すごい

5
00:00:22,689 --> 00:00:23,557
どうも

6
00:00:24,525 --> 00:00:26,393
Advanced Dark Modeへ
ようこそ

7
00:00:26,727 --> 00:00:30,697
マット･ジェイコブソンと
ジェフ･ナドーがお届けします

8
00:00:30,864 --> 00:00:33,634
私たちはAppleで
Cocoaを開発しています

9
00:00:34,401 --> 00:00:37,171
興奮して仕方ありません

10
00:00:37,271 --> 00:00:40,440
今日のテーマは
Mojaveのダークモードです

11
00:00:42,609 --> 00:00:43,243
さて…

12
00:00:44,978 --> 00:00:46,980
イントロセッションでは

13
00:00:47,381 --> 00:00:52,219
ダークモードの適用について
お伝えしました

14
00:00:52,452 --> 00:00:56,156
Mac OS 10.14 SDKを
使用すること

15
00:00:56,723 --> 00:01:01,261
ハードコードされていない
動的な色を活用すること

16
00:00:56,723 --> 00:01:01,261
ハードコードされていない
動的な色を活用すること

17
00:01:01,795 --> 00:01:05,132
テンプレート画像や
マテリアルの活用法もです

18
00:01:05,566 --> 00:01:11,271
Xcode 10の新機能を使えば
ダークモード向けの―

19
00:01:11,371 --> 00:01:14,541
カスタムカラーや
画像アセットも定義できます

20
00:01:16,343 --> 00:01:19,913
これらの項目について
復習したい方は

21
00:01:20,013 --> 00:01:22,583
イントロセッションを
ご覧ください

22
00:01:25,285 --> 00:01:29,389
これらのテクニックを
ダークモードで使うだけで

23
00:01:29,489 --> 00:01:33,660
インターフェイスは
グッと良くなるのです

24
00:01:34,528 --> 00:01:37,531
ただし このセッションでは

25
00:01:37,631 --> 00:01:40,067
もう少し
踏み込んでみましょう

26
00:01:45,005 --> 00:01:47,508
テーマは６つあります

27
00:01:47,608 --> 00:01:50,077
１つ目は アピアランス

28
00:01:50,177 --> 00:01:53,914
カスタムビューにおける
その活用法です

29
00:01:54,615 --> 00:01:56,683
２つ目は
マテリアルを使って

30
00:01:56,783 --> 00:02:01,121
インターフェイスを最大限に
良く見せる方法です

31
00:01:56,783 --> 00:02:01,121
インターフェイスを最大限に
良く見せる方法です

32
00:02:01,889 --> 00:02:05,726
次にVibrant Blendingについて
ジェフが話します

33
00:02:05,826 --> 00:02:08,794
これでビューを改善できます

34
00:02:09,562 --> 00:02:14,601
項目の選択時に有用な
Background Stylesも登場します

35
00:02:15,402 --> 00:02:20,107
最後にご紹介するのは
ダークモードを残しつつ―

36
00:02:20,207 --> 00:02:24,178
旧バージョンのMac OSを
デプロイする方法です

37
00:02:24,545 --> 00:02:29,082
ダークモードを使いこなす
秘けつもお伝えします

38
00:02:30,284 --> 00:02:31,618
では始めましょう

39
00:02:33,020 --> 00:02:35,322
Mojaveに求められるのは

40
00:02:35,756 --> 00:02:39,560
明暗をうまく
両立させることです

41
00:02:40,294 --> 00:02:44,398
それを可能にするのが
NSAppearanceです

42
00:02:45,399 --> 00:02:49,203
NSAppearanceは
Cocoaの開発に欠かせません

43
00:02:49,670 --> 00:02:53,941
単一のビュー階層を
維持しておくだけで

44
00:02:54,041 --> 00:02:57,911
ライトとダークが
うまく調整されるのです

45
00:02:59,079 --> 00:03:03,183
ダークモードの開発に
私たちは尽力してきました

46
00:02:59,079 --> 00:03:03,183
ダークモードの開発に
私たちは尽力してきました

47
00:03:03,283 --> 00:03:07,254
その中で使用してきた
NSAppearanceは

48
00:03:07,354 --> 00:03:10,257
高コントラストモードや
Touch Barのような

49
00:03:10,357 --> 00:03:15,596
様々なインターフェイスの
基盤となるものです

50
00:03:15,996 --> 00:03:16,663
さて…

51
00:03:18,732 --> 00:03:22,169
aquaのウインドウの
アピアランスは

52
00:03:22,269 --> 00:03:24,638
ライトがメインでした

53
00:03:24,738 --> 00:03:28,675
もちろん10.14では
ダークも用意しています

54
00:03:28,775 --> 00:03:31,311
darkAquaのウインドウです

55
00:03:32,212 --> 00:03:35,983
ビューを構成するアセットは
すべて含まれます

56
00:03:36,183 --> 00:03:40,587
つまり 動的なカラーや
標準のエフェクト

57
00:03:40,687 --> 00:03:43,590
名前付きの画像に
Cocoaのコントロール

58
00:03:43,690 --> 00:03:45,959
すべてが詰まっています

59
00:03:47,194 --> 00:03:52,866
さらにAppKitは自動的に
ユーザの好みに合わせて

60
00:03:52,966 --> 00:03:56,503
アピアランスを
調整してくれます

61
00:03:56,603 --> 00:03:59,673
macOS 10.14 SDKなら
可能です

62
00:03:59,940 --> 00:04:03,677
このアプリケーションは
Chameleon Wranglerですね

63
00:03:59,940 --> 00:04:03,677
このアプリケーションは
Chameleon Wranglerですね

64
00:04:03,777 --> 00:04:07,814
レイチェルとテイラーが
作ったものです

65
00:04:07,915 --> 00:04:11,652
これをmac OS 10.14の下で
リンクさせれば

66
00:04:11,752 --> 00:04:15,989
darkAquaのアピアランスが
自動で加えられます

67
00:04:16,757 --> 00:04:20,160
アピアランスを
さらに変えたい時は？

68
00:04:20,260 --> 00:04:23,130
例えば
メモ帳のアピアランスを

69
00:04:23,230 --> 00:04:26,300
変えたいと思ったとします

70
00:04:26,600 --> 00:04:29,603
現時点ではダークですが

71
00:04:29,703 --> 00:04:32,940
ライトの要素も
加えたいとします

72
00:04:33,740 --> 00:04:36,410
そんな時 役に立つのが

73
00:04:36,510 --> 00:04:39,079
NSAppearanceCustomization
です

74
00:04:39,847 --> 00:04:44,718
プロトコルの１つですが
インストールは不要です

75
00:04:45,152 --> 00:04:48,922
NSViewやNSWindowにより
すでに組み込まれています

76
00:04:49,022 --> 00:04:52,459
Mojaveでは
NSApplicationも対応しています

77
00:04:52,960 --> 00:04:56,296
記述するプロパティは
２つだけです

78
00:04:56,396 --> 00:04:58,599
１つ目はappearance

79
00:04:58,699 --> 00:05:02,803
これでアピアランスを
オーバーライドできます

80
00:04:58,699 --> 00:05:02,803
これでアピアランスを
オーバーライドできます

81
00:05:03,203 --> 00:05:06,373
これは任意の
NSAppearanceです

82
00:05:06,507 --> 00:05:08,442
無効にすると
オブジェクトは

83
00:05:08,542 --> 00:05:12,145
アピアランスを
親要素から継承します

84
00:05:13,680 --> 00:05:16,350
次にeffectiveAppearance

85
00:05:16,717 --> 00:05:20,020
アピアランスを
把握するための―

86
00:05:20,120 --> 00:05:23,423
読み取り専用の
プロパティです

87
00:05:26,026 --> 00:05:28,996
NSAppearanceオブジェクトを
正しく選べば

88
00:05:29,096 --> 00:05:31,298
難しいことはありません

89
00:05:31,398 --> 00:05:34,668
NSAppearanceの
イニシャライザは

90
00:05:34,768 --> 00:05:39,773
お好みに合わせて aquaか
darkAquaとしてください

91
00:05:41,775 --> 00:05:43,544
そして
appearanceプロパティに

92
00:05:43,644 --> 00:05:46,880
好きな方のアピアランスを
指定します

93
00:05:46,980 --> 00:05:50,717
この場合は メモ帳の
appearanceプロパティに

94
00:05:50,818 --> 00:05:53,053
aquaを指定します

95
00:05:53,153 --> 00:05:55,355
これでライトになりました

96
00:05:57,124 --> 00:05:59,226
とても簡単でしたね

97
00:05:59,526 --> 00:06:01,328
他の例を見てみましょう

98
00:05:59,526 --> 00:06:01,328
他の例を見てみましょう

99
00:06:02,095 --> 00:06:03,297
あるウインドウが

100
00:06:03,597 --> 00:06:07,367
ぶら下がるように
表示されています

101
00:06:07,868 --> 00:06:12,439
そのアピアランスを
ビューとマッチさせるには？

102
00:06:12,806 --> 00:06:18,145
先ほどと同じように aquaの
アピアランスを指定できます

103
00:06:18,612 --> 00:06:21,481
でも 今回はビューから―

104
00:06:21,582 --> 00:06:25,052
アピアランスを
継承できるようにしましょう

105
00:06:25,619 --> 00:06:27,321
AppKitは

106
00:06:27,421 --> 00:06:32,993
あらゆるウインドウに対し
これを自動で行ってくれます

107
00:06:33,093 --> 00:06:38,599
メニュー ポップオーバー
ツールチップなどです

108
00:06:39,166 --> 00:06:41,268
でも この例のような場合は

109
00:06:41,368 --> 00:06:45,772
Mojaveの新しいAPIが
役に立ちます

110
00:06:46,640 --> 00:06:48,575
その名も
Appearance Source

111
00:06:49,309 --> 00:06:53,747
NSAppearanceCustomization
プロトコルに対応していれば

112
00:06:53,847 --> 00:06:58,185
どのオブジェクトにも使える
プロパティです

113
00:06:58,719 --> 00:07:04,258
これをappearanceSource
プロパティに指定すると

114
00:06:58,719 --> 00:07:04,258
これをappearanceSource
プロパティに指定すると

115
00:07:04,691 --> 00:07:07,794
アピアランスを
継承させることができます

116
00:07:09,663 --> 00:07:13,967
この場合は
appearanceSourceプロパティに

117
00:07:14,067 --> 00:07:15,903
textViewを指定することで

118
00:07:16,003 --> 00:07:20,440
ビューのアピアランスが
常に継承されます

119
00:07:23,010 --> 00:07:27,681
階層で考えると
イメージしやすいでしょう

120
00:07:27,915 --> 00:07:30,784
ビュー階層と似ていますが
ウインドウや―

121
00:07:30,884 --> 00:07:34,087
アプリケーションにまで
範囲が及びます

122
00:07:34,788 --> 00:07:39,026
Effective Appearanceを
AppKitに要求すると―

123
00:07:40,093 --> 00:07:42,596
AppKitは階層を上っていき

124
00:07:42,696 --> 00:07:46,033
指定のオブジェクトに
たどり着きます

125
00:07:47,234 --> 00:07:48,869
そこが継承元です

126
00:07:50,704 --> 00:07:55,475
アピアランスの変え方を
ここまでお伝えしました

127
00:07:55,576 --> 00:07:59,012
次はカスタムビューでの
ケースをご紹介します

128
00:08:00,147 --> 00:08:01,315
ご覧ください

129
00:08:01,515 --> 00:08:03,917
ライトとダーク両方で

130
00:08:04,151 --> 00:08:08,288
こちらのヘッダーの色を
変えるとしましょう

131
00:08:09,122 --> 00:08:11,225
ご存じのとおり
Xcode 10では

132
00:08:11,325 --> 00:08:13,861
アセットカタログに
アクセスし

133
00:08:13,961 --> 00:08:17,931
特定のカラーアセットを
選ぶことができます

134
00:08:19,800 --> 00:08:22,402
それをカスタムビューで
行うには？

135
00:08:22,936 --> 00:08:27,875
一見よさそうですが
このコードは機能しません

136
00:08:28,375 --> 00:08:31,545
まず NSColorプロパティを
加えましょう

137
00:08:32,412 --> 00:08:36,149
次に 選んだ色を使い
initメソッドで

138
00:08:36,283 --> 00:08:38,051
レイヤーを追加します

139
00:08:39,820 --> 00:08:43,624
色が変わったら レイヤーを
アップデートします

140
00:08:44,525 --> 00:08:45,893
見てみましょう

141
00:08:46,827 --> 00:08:49,096
ライトでは いい感じです

142
00:08:50,397 --> 00:08:54,168
しかし ダークにしても
色が変わりませんね

143
00:08:55,035 --> 00:08:58,338
たとえ NSColorが動的でも

144
00:08:58,472 --> 00:09:03,177
CGカラーが静的であれば
アピアランスは変わりません

145
00:08:58,472 --> 00:09:03,177
CGカラーが静的であれば
アピアランスは変わりません

146
00:09:03,677 --> 00:09:07,714
イニシャライザの中に
レイヤーを配置すると

147
00:09:07,848 --> 00:09:11,752
アピアランスの変化時に
コードが実行されないのです

148
00:09:13,020 --> 00:09:17,191
特定のエリアで
コードを書くことが

149
00:09:17,424 --> 00:09:19,459
問題解決のカギです

150
00:09:19,560 --> 00:09:23,564
つまり updateConstraints
layout draw

151
00:09:23,664 --> 00:09:26,867
NSViewの
updateLayerメソッドです

152
00:09:27,501 --> 00:09:30,938
AppKitは
これらのメソッドを

153
00:09:31,038 --> 00:09:32,773
自動で呼び出します

154
00:09:33,240 --> 00:09:36,777
もちろん手動で行うことも
可能です

155
00:09:36,877 --> 00:09:39,646
needsUpdateConstraintsや
needsLayout

156
00:09:39,746 --> 00:09:43,884
needsDisplayプロパティも
AppKitは自動で呼び出します

157
00:09:46,019 --> 00:09:47,688
話を戻しましょう

158
00:09:48,822 --> 00:09:54,261
initをオーバーライドする代わりに
updateLayerを実行します

159
00:09:54,895 --> 00:09:58,365
NSColorに
CGカラーを要求することで

160
00:09:58,465 --> 00:10:01,134
レイヤーを
問題なく追加できます

161
00:09:58,465 --> 00:10:01,134
レイヤーを
問題なく追加できます

162
00:10:02,002 --> 00:10:06,240
色が変わったら レイヤーを
アップデートする代わりに

163
00:10:06,406 --> 00:10:09,276
needsDisplayプロパティを
trueに設定します

164
00:10:09,409 --> 00:10:13,180
AppKitがupdateLayerを
呼び出してくれます

165
00:10:14,214 --> 00:10:15,415
見てみましょう

166
00:10:16,383 --> 00:10:18,051
ライトは問題なし

167
00:10:20,020 --> 00:10:24,424
ダークにすると ちゃんと
色が変わっていますね

168
00:10:26,326 --> 00:10:29,096
もう少し
難易度を上げましょう

169
00:10:29,196 --> 00:10:33,033
動的な色や画像だけでは
表せないことです

170
00:10:33,634 --> 00:10:36,336
例えば クロエの顔の背景を

171
00:10:36,436 --> 00:10:41,008
薄く光らせるには
どうすればいいでしょう？

172
00:10:41,108 --> 00:10:44,044
ダークモードにおいての
話です

173
00:10:44,878 --> 00:10:48,615
この場合も
Mojaveの新しいAPIで

174
00:10:48,849 --> 00:10:52,986
ビューのアピアランスに
マッチさせることができます

175
00:10:53,954 --> 00:10:57,858
まず layoutメソッドを
オーバーライドし

176
00:10:58,492 --> 00:11:03,063
switch文でeffectiveAppearance.
bestMatch(from:を使います

177
00:10:58,492 --> 00:11:03,063
switch文でeffectiveAppearance.
bestMatch(from:を使います

178
00:11:04,231 --> 00:11:08,769
そしてアピアランスの名前を
すべて含む配列を渡します

179
00:11:08,869 --> 00:11:11,638
この場合は
aquaとdarkAquaです

180
00:11:12,973 --> 00:11:17,477
あとは それぞれの動作を
実行させるだけです

181
00:11:17,578 --> 00:11:19,513
aquaで使うのは

182
00:11:19,613 --> 00:11:24,218
imageViewと
subviewのクロエの顔です

183
00:11:26,153 --> 00:11:28,388
darkAquaでは
imageViewだけでなく

184
00:11:28,489 --> 00:11:31,325
glowViewも追加します

185
00:11:34,128 --> 00:11:37,297
最後にdefault文を書きます

186
00:11:37,397 --> 00:11:40,667
想定されていない
アピアランスのためですが

187
00:11:40,767 --> 00:11:44,805
これについては追々
発表があるかもしれません

188
00:11:46,373 --> 00:11:48,408
では確認してみましょう

189
00:11:48,509 --> 00:11:52,613
ライトでは
薄い光は見られませんね

190
00:11:52,713 --> 00:11:55,983
しかし
ダークにすると光ります

191
00:11:58,385 --> 00:12:01,054
次の話題は
高コントラストです

192
00:11:58,385 --> 00:12:01,054
次の話題は
高コントラストです

193
00:12:01,755 --> 00:12:04,691
これまで私たちは
NSAppearanceを使って

194
00:12:04,792 --> 00:12:07,961
高コントラストモードを
開発してきました

195
00:12:08,061 --> 00:12:11,832
高コントラストモードを
開発する上で

196
00:12:11,932 --> 00:12:16,370
ダークモードの開発は
一役 買っています

197
00:12:19,640 --> 00:12:22,209
高コントラストを
有効にするには

198
00:12:22,309 --> 00:12:25,846
“コントラストを上げる”を
選択します

199
00:12:27,114 --> 00:12:31,585
高コントラストモードでは
コントロールの枠内や

200
00:12:31,685 --> 00:12:34,488
その境界線が
見やすくなります

201
00:12:36,723 --> 00:12:41,094
AquaとdarkAquaの
アピアランスは

202
00:12:41,195 --> 00:12:44,998
自動的に高コントラストに
置き換えられます

203
00:12:45,098 --> 00:12:46,934
通常の
コントラストモードから

204
00:12:47,034 --> 00:12:50,671
アピアランスが
継承されるのです

205
00:12:50,871 --> 00:12:55,209
ダークモードを活用すべく
書いたコードは

206
00:12:55,309 --> 00:12:58,812
自動的に高コントラストで
適用されます

207
00:12:59,947 --> 00:13:02,015
さらに続きがあります

208
00:12:59,947 --> 00:13:02,015
さらに続きがあります

209
00:13:02,482 --> 00:13:07,721
Xcode 10のアセットカタログで
“高コントラスト”を選ぶと

210
00:13:08,288 --> 00:13:11,592
高コントラストモードに
マッチする―

211
00:13:11,692 --> 00:13:16,830
特定の色や画像アセットを
決めることができます

212
00:13:18,632 --> 00:13:22,035
アピアランスの名前も
コードで使用できます

213
00:13:23,203 --> 00:13:24,538
こう思うでしょうか

214
00:13:24,638 --> 00:13:27,274
“それらを
NSAppearanceに渡して”

215
00:13:27,374 --> 00:13:30,344
“動作を直接
実行させよう”

216
00:13:30,944 --> 00:13:32,212
それは無理です

217
00:13:32,746 --> 00:13:36,083
システム環境設定でのみ
可能だからです

218
00:13:36,283 --> 00:13:40,654
ただしカスタムプログラムを
実行したのと同じように

219
00:13:40,754 --> 00:13:45,592
bestMatch(from:)に
渡すことはできます

220
00:13:48,395 --> 00:13:50,831
サブレイヤの話に
移りましょう

221
00:13:51,164 --> 00:13:55,769
ビューによってサブレイヤを
管理をしている方なら

222
00:13:55,969 --> 00:13:59,540
知っておくべきことが
あります

223
00:14:01,408 --> 00:14:04,578
カスタムされたサブレイヤは

224
00:14:04,678 --> 00:14:08,215
ビューのアピアランスを
自動で継承しません

225
00:14:09,650 --> 00:14:11,985
これを克服する簡単な方法は

226
00:14:12,085 --> 00:14:15,422
サブレイヤからサブビューに
切り替えることです

227
00:14:15,522 --> 00:14:18,659
そうすれば AppKitによって

228
00:14:18,759 --> 00:14:24,164
アピアランスが自動的に
継承されるようになります

229
00:14:25,232 --> 00:14:28,569
もし レイヤーを手動で
管理する場合は

230
00:14:28,669 --> 00:14:31,071
テクニックが必要になります

231
00:14:31,171 --> 00:14:33,140
viewDidChange
EffectiveAppearanceや

232
00:14:33,240 --> 00:14:35,876
Current Appearanceの
概念です

233
00:14:37,845 --> 00:14:41,215
まずは viewDidChange
EffectiveAppearance

234
00:14:41,315 --> 00:14:45,853
NSViewの新しいメソッドで
これをオーバーライドすると

235
00:14:46,553 --> 00:14:50,057
Effective Appearanceが変わる
タイミングが分かります

236
00:14:51,058 --> 00:14:55,095
カスタムを無効にするには
いい機会です

237
00:14:55,195 --> 00:14:58,232
キャッシュの削除も同様です

238
00:14:58,665 --> 00:15:02,469
しかし ビュー自体の
無効化については

239
00:14:58,665 --> 00:15:02,469
しかし ビュー自体の
無効化については

240
00:15:02,703 --> 00:15:04,905
AppKitが
自動でやってくれます

241
00:15:07,107 --> 00:15:10,077
次はCurrent Appearanceの
概念です

242
00:15:10,477 --> 00:15:13,647
このスレッドローカル変数に
アクセスするには

243
00:15:13,747 --> 00:15:17,284
NSAppearanceの
classプロパティを使います

244
00:15:18,385 --> 00:15:23,624
最新のNSGraphicsや
NSProgressに詳しい方なら

245
00:15:23,724 --> 00:15:25,759
理解できるでしょう

246
00:15:25,859 --> 00:15:29,062
つまりは動的な色や画像を

247
00:15:29,163 --> 00:15:32,065
変化させるための
アピアランスです

248
00:15:34,301 --> 00:15:38,505
AppKitはCurrent Appearanceを
自動で設定します

249
00:15:38,605 --> 00:15:41,808
updateConstraintsやlayout
draw updateLayerといった―

250
00:15:41,909 --> 00:15:45,546
NSViewのメソッドを
呼び出す前にです

251
00:15:46,613 --> 00:15:49,817
自身で実行することも
できます

252
00:15:49,917 --> 00:15:52,386
その例をお見せしましょう

253
00:15:55,255 --> 00:15:58,892
サブレイヤを維持する
カスタムビューがあります

254
00:16:00,594 --> 00:16:03,163
viewDidChange
EffectiveAppearanceを

255
00:16:03,263 --> 00:16:04,832
オーバーライドし

256
00:16:05,799 --> 00:16:08,535
setNeedsDisplayメソッドを
使います

257
00:16:09,102 --> 00:16:10,304
これをしないと

258
00:16:10,404 --> 00:16:12,105
Effective Appearanceが
変化した際に

259
00:16:12,206 --> 00:16:15,442
サブレイヤが
アップデートされません

260
00:16:17,878 --> 00:16:19,880
次にデリゲートを用います

261
00:16:20,147 --> 00:16:22,816
ビューの
Effective Appearanceに

262
00:16:22,916 --> 00:16:27,754
Current Appearanceを
設定します

263
00:16:29,623 --> 00:16:32,092
そしてレイヤーを
アップデートします

264
00:16:32,192 --> 00:16:35,762
この時点でCurrent Appearanceを
設定していないと

265
00:16:35,996 --> 00:16:38,565
ビューのアピアランスが
使われず

266
00:16:38,665 --> 00:16:40,567
うまくいきません

267
00:16:41,768 --> 00:16:45,439
完了後 Old Current
Appearanceを元に戻します

268
00:16:48,609 --> 00:16:51,645
知っておくべきことは
他にもあります

269
00:16:52,579 --> 00:16:56,083
この２つのコードに
見覚えはあるでしょうか

270
00:16:56,183 --> 00:17:00,120
レイヤーのコンテンツを
NSImageに設定

271
00:16:56,183 --> 00:17:00,120
レイヤーのコンテンツを
NSImageに設定

272
00:17:00,487 --> 00:17:04,958
あるいはlayerContents
(forContentsScale: scale)で

273
00:17:05,058 --> 00:17:08,595
レイヤーコンテンツを
画像から作る時のものです

274
00:17:09,762 --> 00:17:11,964
この時 その画像は

275
00:17:12,065 --> 00:17:15,669
アピアランスを
自動的に継承しません

276
00:17:17,003 --> 00:17:20,073
解決法は
ビューを切り替えること

277
00:17:20,174 --> 00:17:22,242
ここではNSImageViewが

278
00:17:22,342 --> 00:17:27,013
様々な問題を
自動的に解決してくれます

279
00:17:27,381 --> 00:17:29,182
試してみてください

280
00:17:30,684 --> 00:17:36,123
NSImageからCGImageを
作るという方法もあります

281
00:17:36,456 --> 00:17:40,594
それをするには
cgImage(forProposedRect:や

282
00:17:40,694 --> 00:17:44,264
context: hints:が
必要になります

283
00:17:44,364 --> 00:17:47,000
Current Appearanceが
正しいかどうか

284
00:17:47,100 --> 00:17:49,536
注意するようにしてください

285
00:17:49,636 --> 00:17:52,806
updateLayerメソッドを
使うといいでしょう

286
00:17:54,474 --> 00:17:55,976
以上がアピアランス

287
00:17:56,476 --> 00:17:58,178
次はマテリアルです

288
00:17:58,679 --> 00:18:01,815
マテリアルは Macの
インターフェイスにおける

289
00:17:58,679 --> 00:18:01,815
マテリアルは Macの
インターフェイスにおける

290
00:18:02,149 --> 00:18:05,385
基本的な要素と言えます

291
00:18:05,719 --> 00:18:08,989
具体的には
どういったものなのか

292
00:18:09,089 --> 00:18:10,991
定義からご説明します

293
00:18:11,692 --> 00:18:14,261
マテリアルは
動的なバックグラウンドです

294
00:18:14,995 --> 00:18:18,298
コントラストや
色調 透明度などの

295
00:18:18,398 --> 00:18:20,734
エフェクトを活用します

296
00:18:21,301 --> 00:18:26,106
インターフェイスに
深みをもたらすとともに

297
00:18:26,206 --> 00:18:28,575
美しさを加えるものです

298
00:18:30,477 --> 00:18:33,046
この典型的な
Macのデスクトップには

299
00:18:33,146 --> 00:18:36,383
あらゆるマテリアルが
詰まっています

300
00:18:36,483 --> 00:18:38,452
すべてでは ないですがね

301
00:18:41,188 --> 00:18:45,893
AppKitは様々な場所に
マテリアルをもたらします

302
00:18:45,993 --> 00:18:49,496
タイトルバーや
ウインドウの背景

303
00:18:49,897 --> 00:18:51,865
テーブルビューに
サイドバー

304
00:18:51,965 --> 00:18:54,968
ポップオーバーや
メニューなどにもです

305
00:18:56,403 --> 00:19:00,774
しかし ユーザは自ら
マテリアルを追加できます

306
00:18:56,403 --> 00:19:00,774
しかし ユーザは自ら
マテリアルを追加できます

307
00:19:01,041 --> 00:19:04,044
使うのは
NSVisualEffectViewです

308
00:19:04,344 --> 00:19:09,817
マテリアルを作り出せる
とてもシンプルなビューです

309
00:19:10,584 --> 00:19:12,152
それを使う際

310
00:19:12,252 --> 00:19:16,256
主に３つのプロパティが
必要となります

311
00:19:16,523 --> 00:19:20,994
state blendingMode
そしてmaterialです

312
00:19:22,863 --> 00:19:24,565
まずは stateです

313
00:19:25,833 --> 00:19:30,037
アクティブな見た目を
採用するかどうかを決めます

314
00:19:30,137 --> 00:19:33,841
現状はウインドウに
合わせるよう設定されており

315
00:19:33,941 --> 00:19:36,343
ウインドウがアクティブなら

316
00:19:36,443 --> 00:19:39,446
マテリアルも
アクティブに見えます

317
00:19:39,580 --> 00:19:45,352
しかし アクティブとするか
インアクティブとするかは

318
00:19:45,452 --> 00:19:47,054
手動でも選べます

319
00:19:49,423 --> 00:19:52,793
次のblendingModeが
決定するのは

320
00:19:52,926 --> 00:19:56,763
マテリアルが
“突き抜ける”かどうかです

321
00:19:56,864 --> 00:19:58,432
解説します

322
00:19:59,566 --> 00:20:03,470
ここでは２つのマテリアルが
使われています

323
00:19:59,566 --> 00:20:03,470
ここでは２つのマテリアルが
使われています

324
00:20:04,605 --> 00:20:08,709
まずタイトルバーの
表面をめくると

325
00:20:08,942 --> 00:20:14,381
背景にあるウインドウ上の
画像が見えるのが分かります

326
00:20:14,815 --> 00:20:17,518
つまりウインドウを
突き抜けていません

327
00:20:19,253 --> 00:20:22,589
次にサイドバーの
表面をめくると

328
00:20:23,557 --> 00:20:28,829
ウインドウの後ろの
コンテンツが見えています

329
00:20:28,929 --> 00:20:32,232
つまりウインドウを
突き抜けています

330
00:20:40,541 --> 00:20:44,678
ウインドウを突き抜ける
デフォルトの設定は

331
00:20:44,912 --> 00:20:48,415
blendingModeにより
変えられます

332
00:20:49,817 --> 00:20:51,818
最後はmaterialです

333
00:20:52,152 --> 00:20:56,323
これはエフェクトの定義を
カプセル化します

334
00:20:56,723 --> 00:20:57,858
その意味は？

335
00:20:58,358 --> 00:21:00,327
いわばレシピです

336
00:20:58,358 --> 00:21:00,327
いわばレシピです

337
00:21:00,427 --> 00:21:03,530
コントラスト 透明度
色調など

338
00:21:03,630 --> 00:21:06,533
どれもmaterial次第です

339
00:21:07,401 --> 00:21:09,903
Yosemiteの開発当時―

340
00:21:10,537 --> 00:21:14,107
ライトとダーク ２つの
マテリアルを使いました

341
00:21:14,208 --> 00:21:16,376
非常に役立ったものです

342
00:21:16,777 --> 00:21:21,482
それ以来 あらゆる領域で
マテリアルを使ってきました

343
00:21:21,949 --> 00:21:23,116
ダークモードができた今

344
00:21:23,217 --> 00:21:25,786
マテリアルがライトか
ダークかという議論は

345
00:21:25,886 --> 00:21:27,821
もはや意味をなしません

346
00:21:28,956 --> 00:21:32,125
セマンティックマテリアルの
出番です

347
00:21:32,559 --> 00:21:35,195
セマンティックカラーの
名称は

348
00:21:35,362 --> 00:21:40,701
見た目というより
使われる場所に由来します

349
00:21:41,535 --> 00:21:43,704
セマンティックマテリアルも
同じです

350
00:21:44,371 --> 00:21:46,039
メニューのマテリアルでは

351
00:21:46,140 --> 00:21:51,044
常にコンテキストに応じて
見た目が変わります

352
00:21:52,846 --> 00:21:54,047
Mojaveでは

353
00:21:54,348 --> 00:21:58,051
豊富なセマンティック
マテリアルの中から

354
00:21:58,552 --> 00:22:02,856
最適なものを
選ぶことができます

355
00:21:58,552 --> 00:22:02,856
最適なものを
選ぶことができます

356
00:22:05,392 --> 00:22:10,297
セマンティックマテリアルが
主流になった今―

357
00:22:10,397 --> 00:22:13,200
そうでないマテリアルは
非推奨です

358
00:22:13,300 --> 00:22:15,002
ライト ダーク

359
00:22:15,102 --> 00:22:16,970
ミディアムライト
ウルトラダークなどです

360
00:22:17,771 --> 00:22:22,910
もし これらのマテリアルを
まだ使っておられる方は

361
00:22:23,010 --> 00:22:26,146
セマンティックマテリアルへ
切り替えましょう

362
00:22:29,716 --> 00:22:34,021
使われている場所の例を
お見せします

363
00:22:34,354 --> 00:22:37,791
タイトルバーと
サイドバー付きのFinder

364
00:22:39,593 --> 00:22:43,530
ヘッダービューなどが付いた
メール

365
00:22:45,899 --> 00:22:50,137
Chameleon Wranglerには
Under Page Background

366
00:22:53,140 --> 00:22:56,410
システム環境設定には
Window Backgroundを使用

367
00:22:57,211 --> 00:23:00,180
Window Backgroundは
Mojaveにおける―

368
00:22:57,211 --> 00:23:00,180
Window Backgroundは
Mojaveにおける―

369
00:23:00,280 --> 00:23:04,685
新しいDesktop-Tinted
マテリアルの１つです

370
00:23:05,485 --> 00:23:08,956
画面上における
ウインドウの位置に基づき

371
00:23:09,122 --> 00:23:13,093
デスクトップ画像の色調を
取り入れています

372
00:23:13,227 --> 00:23:18,499
他のシステム全体が
ウインドウと調和しています

373
00:23:21,869 --> 00:23:25,539
Desktop-Tintedマテリアルを
使うために

374
00:23:25,639 --> 00:23:27,841
有用なオブジェクトが
あります

375
00:23:27,941 --> 00:23:31,979
NSWindow NSScrollView
NSTableView NSCollectionView

376
00:23:32,079 --> 00:23:34,515
デフォルトでは
これらのオブジェクトは

377
00:23:34,615 --> 00:23:37,684
Desktop-Tintedエフェクトと
セットです

378
00:23:40,320 --> 00:23:44,391
NSBoxを設定する方法でも
いいでしょう

379
00:23:45,292 --> 00:23:50,097
タイプをカスタムに設定し
Fill Colorを１つ選択します

380
00:23:50,197 --> 00:23:53,734
対応するNSVisualEffectViewが
使われます

381
00:23:54,802 --> 00:23:56,103
例として

382
00:23:56,403 --> 00:23:59,172
ボックスのタイプを
カスタムに設定し

383
00:23:59,439 --> 00:24:03,076
fillColorをunderPage
BackgroundColorに設定しました

384
00:23:59,439 --> 00:24:03,076
fillColorをunderPage
BackgroundColorに設定しました

385
00:24:04,278 --> 00:24:08,048
NSVisualEffectViewの
materialプロパティを

386
00:24:08,148 --> 00:24:10,117
underPageBackgroundに
設定してもいいです

387
00:24:10,217 --> 00:24:12,085
NSBoxを使う利点は

388
00:24:12,186 --> 00:24:16,356
Leopardのバージョンですら
デプロイできることです

389
00:24:16,990 --> 00:24:20,260
一方 VisualEffectViewが
もたらすのは

390
00:24:20,527 --> 00:24:22,563
フレキシビリティです

391
00:24:25,199 --> 00:24:27,534
これらのマテリアルは

392
00:24:27,634 --> 00:24:31,004
ライトでは色はそのまま

393
00:24:32,105 --> 00:24:35,542
ダークではDesktop-Tinting
エフェクトを示します

394
00:24:35,642 --> 00:24:40,380
ただし このエフェクトは
無効になることもあります

395
00:24:42,649 --> 00:24:43,917
Mojaveでは

396
00:24:44,818 --> 00:24:47,721
アクセントカラーを
選択できます

397
00:24:50,724 --> 00:24:53,227
グラファイトに切り替えると

398
00:24:54,428 --> 00:24:58,665
アクセントカラーが
コントロールから失われます

399
00:24:59,166 --> 00:25:03,537
Desktop-Tintedマテリアルも
色味を失います

400
00:24:59,166 --> 00:25:03,537
Desktop-Tintedマテリアルも
色味を失います

401
00:25:04,505 --> 00:25:08,909
常にエフェクトが有効だと
思ってはいけません

402
00:25:12,012 --> 00:25:16,150
デフォルト設定の
VisualEffectViewでは

403
00:25:16,250 --> 00:25:19,820
長方形の枠内に
マテリアルが表示されます

404
00:25:19,920 --> 00:25:21,121
このように

405
00:25:21,688 --> 00:25:25,125
では チャットの
吹き出しのように

406
00:25:25,225 --> 00:25:28,395
カスタムしたUIを
使いたい場合は？

407
00:25:29,162 --> 00:25:33,233
この例は魅力的ですが
作動しません

408
00:25:33,333 --> 00:25:34,601
原因はこちら

409
00:25:35,502 --> 00:25:40,007
まず NSViewで
描画方法を実行します

410
00:25:41,842 --> 00:25:45,779
次にカスタムした
吹き出しを取得

411
00:25:46,880 --> 00:25:51,585
そのパスに
controlBackgroundColorを入力

412
00:25:52,886 --> 00:25:55,189
このように表示されます

413
00:25:55,289 --> 00:26:00,427
一見いい感じですが
吹き出しを拡大すると

414
00:25:55,289 --> 00:26:00,427
一見いい感じですが
吹き出しを拡大すると

415
00:26:00,794 --> 00:26:04,264
Desktop-Tintingエフェクトが
見えません

416
00:26:04,364 --> 00:26:06,033
普通のグレーです

417
00:26:06,967 --> 00:26:08,335
なぜでしょう？

418
00:26:09,403 --> 00:26:15,209
非同期的にアプリケーションを
アップデートする―

419
00:26:15,876 --> 00:26:19,746
Quartz Window Serverの
使用が理由です

420
00:26:19,847 --> 00:26:22,115
パフォーマンスはいいですが

421
00:26:22,783 --> 00:26:28,722
直接 その色で描画したり
RGB値を取得できません

422
00:26:29,756 --> 00:26:33,193
代わりに
maskImageのプロパティで

423
00:26:33,293 --> 00:26:36,130
類似の効果を演出できます

424
00:26:36,997 --> 00:26:42,069
イメージマスクは
任意のNSImageです

425
00:26:42,803 --> 00:26:45,305
VisualEffectViewが

426
00:26:45,405 --> 00:26:48,709
表示されるマテリアルを
マスクします

427
00:26:49,810 --> 00:26:52,846
標準のアート画像の
使用に加え

428
00:26:52,946 --> 00:26:57,417
描画ハンドラ画像でも
類似の描画が可能です

429
00:26:58,352 --> 00:26:59,753
例を見せましょう

430
00:27:00,454 --> 00:27:03,791
layoutを
オーバーライドし

431
00:27:04,424 --> 00:27:07,161
VisualEffectViewを
追加します

432
00:27:07,828 --> 00:27:11,432
materialに
contentBackgroundを入力

433
00:27:13,333 --> 00:27:15,669
描画ハンドラ画像を生成

434
00:27:15,769 --> 00:27:20,874
NSImageで初期化子の
sizeとflippedを入力

435
00:27:21,975 --> 00:27:24,711
色は白に設定していますが

436
00:27:24,812 --> 00:27:27,815
不透明なら
何色でも構いません

437
00:27:28,315 --> 00:27:30,450
パスを書き込みます

438
00:27:32,853 --> 00:27:37,224
これをmaskImageの
マスクに設定します

439
00:27:39,193 --> 00:27:40,494
見てみましょう

440
00:27:41,728 --> 00:27:44,965
Desktop-Tintedが
反映されました

441
00:27:45,599 --> 00:27:49,670
並べてみると
その違いが一目瞭然です

442
00:27:51,538 --> 00:27:54,641
どんなマテリアルにも
適用できますが

443
00:27:54,808 --> 00:28:00,814
マスクをかけられるのは
アルファチャンネルだけです

444
00:27:54,808 --> 00:28:00,814
マスクをかけられるのは
アルファチャンネルだけです

445
00:28:01,281 --> 00:28:04,852
また マスクがかかるのは
マテリアルだけで

446
00:28:04,952 --> 00:28:09,056
サブビューや派生ビューには
かかりません

447
00:28:09,990 --> 00:28:14,127
マスクイメージの
サイズ調整には

448
00:28:14,228 --> 00:28:20,000
NSImageのcapInsetsと
resizingModeが使えます

449
00:28:20,100 --> 00:28:22,970
パフォーマンスも最高です

450
00:28:24,137 --> 00:28:27,908
では ジェフに
場を譲りましょう

451
00:28:28,542 --> 00:28:30,744
(拍手)

452
00:28:30,844 --> 00:28:31,478
ジェフ

453
00:28:33,247 --> 00:28:34,748
ありがとう マット

454
00:28:35,349 --> 00:28:37,451
私からはマテリアルの前面に

455
00:28:37,551 --> 00:28:41,288
描画する効果について
お話します

456
00:28:41,388 --> 00:28:45,359
主に背景から
マテリアルを際立たせる―

457
00:28:45,459 --> 00:28:47,928
優れたぼかし効果です

458
00:28:48,662 --> 00:28:52,332
Chameleon Wranglerの
アプリケーションに戻ります

459
00:28:52,432 --> 00:28:54,635
Moodometerの
UIがありますね

460
00:28:54,735 --> 00:28:58,572
このUIは
記録された感情を示します

461
00:28:58,939 --> 00:29:05,012
自動的にポップオーバーの
背景素材を採用しています

462
00:28:58,939 --> 00:29:05,012
自動的にポップオーバーの
背景素材を採用しています

463
00:29:06,480 --> 00:29:09,249
私たちが求めるのは

464
00:29:09,349 --> 00:29:13,587
コンテンツを引き立たせる
背景です

465
00:29:13,687 --> 00:29:14,988
こんな感じです

466
00:29:15,489 --> 00:29:18,125
これが
“バイブランシー”です

467
00:29:19,493 --> 00:29:20,794
つまり何か？

468
00:29:21,662 --> 00:29:27,501
コンテンツ背面の輝度を
均一に調整することです

469
00:29:28,302 --> 00:29:30,737
写真編集などでよく見る―

470
00:29:30,838 --> 00:29:34,041
覆い焼きや焼き込みと
似ています

471
00:29:34,641 --> 00:29:36,076
こちらをどうぞ

472
00:29:36,643 --> 00:29:39,613
グレーを使ったグリフです

473
00:29:39,713 --> 00:29:43,217
グレーは50％
不透明度は100％です

474
00:29:44,117 --> 00:29:47,087
Vibrant Blendingをかけると

475
00:29:47,187 --> 00:29:50,524
“照明効果”が
暗いマテリアルを照らします

476
00:29:51,258 --> 00:29:54,695
透過率は下がっていません

477
00:29:54,795 --> 00:29:57,865
グレー値の輝度を
上げることで

478
00:29:57,965 --> 00:30:00,367
背後を照らしています

479
00:29:57,965 --> 00:30:00,367
背後を照らしています

480
00:30:02,102 --> 00:30:05,072
グレーを例に見てみましょう

481
00:30:05,172 --> 00:30:09,810
０％から100％の
不透明なグレーです

482
00:30:10,277 --> 00:30:14,181
照明効果で
このように変化しました

483
00:30:15,015 --> 00:30:18,352
右下にあるのは
輝度が100％です

484
00:30:18,452 --> 00:30:22,689
コンテンツ背面を白で
照らしたので

485
00:30:22,790 --> 00:30:25,692
何の変化も起こりません

486
00:30:26,360 --> 00:30:28,762
一方 左上は真っ黒なので

487
00:30:28,929 --> 00:30:31,698
明るさは加わりません

488
00:30:31,798 --> 00:30:35,836
線で囲まなければ
背景と区別できません

489
00:30:36,437 --> 00:30:39,473
ご覧のとおり
様々な輝度があるので

490
00:30:39,573 --> 00:30:43,577
アプリケーションの
コンテンツを階層化できます

491
00:30:44,678 --> 00:30:46,313
設定方法は？

492
00:30:47,147 --> 00:30:49,583
おなじみの
NSAppearanceです

493
00:30:50,250 --> 00:30:53,353
vibrantDarkと
vibrantLightの

494
00:30:53,453 --> 00:30:55,622
オブジェクトがあります

495
00:30:56,423 --> 00:30:58,492
この２つだけです

496
00:30:58,592 --> 00:31:03,964
ダークとライトで使用する
厳密式を含んでいます

497
00:30:58,592 --> 00:31:03,964
ダークとライトで使用する
厳密式を含んでいます

498
00:31:04,098 --> 00:31:07,267
一連のアート制御や鮮明度も

499
00:31:07,367 --> 00:31:10,437
ブレンドモードと
相性抜群です

500
00:31:11,738 --> 00:31:13,106
では コードは？

501
00:31:14,374 --> 00:31:15,776
シンプルです

502
00:31:16,243 --> 00:31:17,778
NSViewサブクラスで

503
00:31:17,878 --> 00:31:21,181
allowsVibrancyの
返り値をtrueに

504
00:31:21,949 --> 00:31:25,219
自動的に
ビューやその派生の描画に

505
00:31:25,319 --> 00:31:27,755
この効果が適用されます

506
00:31:29,823 --> 00:31:32,826
バイブランシーの描画には

507
00:31:32,926 --> 00:31:37,397
内蔵のカラーラベルの
使用を推薦します

508
00:31:37,898 --> 00:31:41,869
ライトもダークも
全４色が映える仕様で

509
00:31:41,969 --> 00:31:44,371
美しい階層を演出します

510
00:31:45,372 --> 00:31:48,709
お好みの色を
使ってもいいですが

511
00:31:48,809 --> 00:31:52,179
グレースケール以外を
お勧めします

512
00:31:52,446 --> 00:31:55,983
なぜなら
意図した色のデザインにも

513
00:31:56,083 --> 00:31:59,887
ブレンド効果が出る
可能性があるためです

514
00:31:59,987 --> 00:32:02,689
色彩が台無しになります

515
00:31:59,987 --> 00:32:02,689
色彩が台無しになります

516
00:32:03,257 --> 00:32:05,092
後ほど例を見せます

517
00:32:06,760 --> 00:32:12,800
それでは allowsVibrancyを
オーバーライドします

518
00:32:12,900 --> 00:32:17,037
指定するのは
すべてのポップオーバーの

519
00:32:17,337 --> 00:32:19,106
計測メーターです

520
00:32:19,206 --> 00:32:20,707
こうなります

521
00:32:22,142 --> 00:32:25,779
スライダーはいい感じですね

522
00:32:25,879 --> 00:32:27,681
顔はどうでしょう？

523
00:32:27,915 --> 00:32:29,083
ぼやけてますね

524
00:32:30,150 --> 00:32:31,452
原因はこれです

525
00:32:31,818 --> 00:32:35,789
該当ビューの
allowsVibrancy設定により

526
00:32:36,457 --> 00:32:41,361
サブビューにも
Vibrant Blendingが作動

527
00:32:42,129 --> 00:32:43,764
簡単に修正できます

528
00:32:43,897 --> 00:32:48,602
スライダー描画のみに
使用を限定すれば

529
00:32:48,869 --> 00:32:50,704
問題は解決します

530
00:32:50,804 --> 00:32:54,274
スライダーは際立ったままで

531
00:32:54,374 --> 00:32:56,176
顔の色も完璧です

532
00:32:57,277 --> 00:33:01,448
際立たせたいコンテンツの
ビューを限定し

533
00:32:57,277 --> 00:33:01,448
際立たせたいコンテンツの
ビューを限定し

534
00:33:01,548 --> 00:33:04,718
バイブランシーを
使ってください

535
00:33:05,352 --> 00:33:07,855
混成コンテンツの場合は

536
00:33:07,955 --> 00:33:12,192
まず ビューを分けることを
お勧めします

537
00:33:12,292 --> 00:33:15,963
その後で
個々に適用させましょう

538
00:33:17,798 --> 00:33:21,668
ブレンドモードの衝突も
避けてください

539
00:33:22,936 --> 00:33:25,472
バイブランシーのビューを

540
00:33:25,572 --> 00:33:29,776
そうでないビューに
重ねないでください

541
00:33:31,411 --> 00:33:35,782
Cocoa制御のサブクラス化も
注意が必要です

542
00:33:35,983 --> 00:33:39,186
前述のとおり
２つのオブジェクトは

543
00:33:39,286 --> 00:33:44,091
ブレンドモードを主眼に置き
設計されています

544
00:33:44,224 --> 00:33:49,396
ブレンドモードの目的は
マテリアルを際立たせること

545
00:33:49,530 --> 00:33:53,467
そのため 外すと
コントラストが崩れます

546
00:33:53,634 --> 00:33:57,771
allowsVibrancyの
オーバーライドは

547
00:33:57,871 --> 00:34:02,409
バイブランシーを
熟知した上で行ってください

548
00:33:57,871 --> 00:34:02,409
バイブランシーを
熟知した上で行ってください

549
00:34:03,443 --> 00:34:04,645
以上です

550
00:34:05,279 --> 00:34:07,614
次は背景のスタイルです

551
00:34:07,714 --> 00:34:11,051
特に選択用の背景に
焦点を当てます

552
00:34:11,784 --> 00:34:15,956
Aqua Cocoaで
よく目にしますね

553
00:34:16,489 --> 00:34:19,793
これはメールの
メッセージです

554
00:34:20,159 --> 00:34:25,833
選択するとテーブルの背景が
青色に変わるので

555
00:34:25,933 --> 00:34:29,969
この背景に引き立つ
コンテンツが必要です

556
00:34:31,271 --> 00:34:35,542
Dark Aquaでは
どうでしょうか？

557
00:34:35,809 --> 00:34:40,013
コンテンツだけ
単純に反転できないので

558
00:34:40,114 --> 00:34:42,882
この状態を意味付けします

559
00:34:44,351 --> 00:34:47,920
これは
Cocoaでよく目にする―

560
00:34:48,021 --> 00:34:50,290
NSView.BackgroundStyleです

561
00:34:50,389 --> 00:34:53,260
ライトやダークが
ある場所です

562
00:34:53,627 --> 00:34:58,465
またNSTableViewが
TableRowViewや

563
00:34:58,565 --> 00:35:02,736
TableCellViewやそのサブビューを
自動的に設定します

564
00:34:58,565 --> 00:35:02,736
TableCellViewやそのサブビューを
自動的に設定します

565
00:35:03,771 --> 00:35:07,207
従来なら
未選択にはライトを

566
00:35:07,307 --> 00:35:11,011
選択には
ダークを使用しました

567
00:35:12,212 --> 00:35:15,082
しかし ダークモードでは

568
00:35:15,182 --> 00:35:17,684
背景は常にダークです

569
00:35:17,784 --> 00:35:20,921
従来の名前は
意味を成さないので

570
00:35:21,021 --> 00:35:23,791
“normal”と
“emphasized”に変更しました

571
00:35:24,224 --> 00:35:27,928
最新のCocoaアプリケーションで
使用されている―

572
00:35:28,028 --> 00:35:31,465
列挙型とも
より互換性があります

573
00:35:32,833 --> 00:35:36,136
追加のアップデートにより

574
00:35:36,236 --> 00:35:40,474
TableViewは
再帰的に背景を設定します

575
00:35:40,574 --> 00:35:45,779
CellViewのサブビューや
テーブル列も含まれます

576
00:35:45,879 --> 00:35:50,184
そのため スタックビューや
レイアウトなどの

577
00:35:50,284 --> 00:35:53,053
全サブビューに適用できます

578
00:35:53,187 --> 00:35:55,756
Mojave上の設定は不要です

579
00:35:57,191 --> 00:36:00,327
マニュアルで
行ってた人ですね

580
00:35:57,191 --> 00:36:00,327
マニュアルで
行ってた人ですね

581
00:36:01,261 --> 00:36:06,700
また ４色すべてが自動的に
背景スタイルを採用します

582
00:36:07,134 --> 00:36:11,238
一度コンテンツの
階層を設定すれば

583
00:36:11,338 --> 00:36:14,141
両コンテンツに適用されます

584
00:36:16,143 --> 00:36:19,513
この強調変数は
手動設定もできます

585
00:36:19,613 --> 00:36:23,116
Finderの
アイコンみたいですね

586
00:36:23,717 --> 00:36:28,188
ラベルカラーと
副次ラベルカラーがあります

587
00:36:28,855 --> 00:36:33,394
背後にカスタムの
選択範囲を描画するため

588
00:36:33,494 --> 00:36:36,263
Bezier pathを使います

589
00:36:36,597 --> 00:36:39,933
異なる選択範囲制御の
色を使って

590
00:36:40,033 --> 00:36:44,004
ラベルを主要変数と
副次変数に合わせます

591
00:36:44,505 --> 00:36:46,273
やり方は簡単です

592
00:36:46,373 --> 00:36:50,444
背景のスタイルを
両方で強調に設定すれば

593
00:36:50,544 --> 00:36:53,680
自動的に
この効果が適用されます

594
00:36:54,147 --> 00:36:56,984
この方法の素晴らしい点は

595
00:36:57,851 --> 00:37:02,456
ダークモードにしても
自動で作動することです

596
00:36:57,851 --> 00:37:02,456
ダークモードにしても
自動で作動することです

597
00:37:04,291 --> 00:37:06,159
最後にもう１点だけ

598
00:37:06,793 --> 00:37:12,132
サイドバーやメニューにある
選択可能なマテリアルは

599
00:37:12,833 --> 00:37:15,903
Mojaveの色を引き継ぎます

600
00:37:16,203 --> 00:37:20,607
しかし 青色の
カスタム背景には適しません

601
00:37:21,341 --> 00:37:23,544
NSVisualEffectViewには

602
00:37:23,644 --> 00:37:26,346
特別なマテリアルがあります

603
00:37:26,447 --> 00:37:30,250
こちらなら
期待どおりの結果になります

604
00:37:33,620 --> 00:37:37,124
背景のスタイルについては
以上です

605
00:37:37,224 --> 00:37:42,963
次は旧バージョンの
デプロイについてお話します

606
00:37:43,063 --> 00:37:46,500
Macでは
特にこの要望が顕著です

607
00:37:46,600 --> 00:37:49,670
旧バージョンに戻しても

608
00:37:49,770 --> 00:37:52,806
ダークモードは
完璧に作動します

609
00:37:54,308 --> 00:37:57,644
旧バージョン用の
デプロイの説明です

610
00:37:57,744 --> 00:37:59,346
まずシステムカラーです

611
00:37:59,747 --> 00:38:03,984
サポートされている
動的なシステムカラーです

612
00:37:59,747 --> 00:38:03,984
サポートされている
動的なシステムカラーです

613
00:38:04,117 --> 00:38:05,619
この中でも―

614
00:38:05,719 --> 00:38:08,689
ハイライトされた色は
既存します

615
00:38:08,789 --> 00:38:10,991
OS X Yosemiteや

616
00:38:11,091 --> 00:38:13,327
それ以前の色もあります

617
00:38:14,361 --> 00:38:18,098
つまりユーザ
インターフェイスのため

618
00:38:18,198 --> 00:38:20,901
多くの色が
すでに存在しています

619
00:38:21,168 --> 00:38:24,938
旧版のデプロイにも
対応済みです

620
00:38:26,273 --> 00:38:27,474
カスタム色は

621
00:38:27,574 --> 00:38:31,411
選択色を
カタログにしています

622
00:38:31,745 --> 00:38:34,248
10.13からの仕様です

623
00:38:35,215 --> 00:38:39,419
使えない色を
指定していたとしても

624
00:38:39,520 --> 00:38:40,854
心配は要りません

625
00:38:40,954 --> 00:38:44,792
旧バージョンで使用すると
無視されます

626
00:38:44,892 --> 00:38:48,662
デプロイに
組み込まれています

627
00:38:48,996 --> 00:38:51,665
10.13より前の
バージョンでは

628
00:38:52,099 --> 00:38:53,901
こんな技が必要です

629
00:38:54,101 --> 00:38:57,137
色特性を書き込みます

630
00:38:57,738 --> 00:39:00,340
カラーカタログとの相互性を

631
00:38:57,738 --> 00:39:00,340
カラーカタログとの相互性を

632
00:39:00,440 --> 00:39:04,044
確認する処理が行われます

633
00:39:04,144 --> 00:39:07,247
そしてハードコードされた

634
00:39:07,347 --> 00:39:09,449
色の旧番を入力します

635
00:39:11,752 --> 00:39:14,788
Desktop-tintedも
新しい機能です

636
00:39:15,122 --> 00:39:18,625
VisualEffectViewに
取り込む場合は

637
00:39:18,725 --> 00:39:21,862
10.14でのみ対応します

638
00:39:22,796 --> 00:39:26,667
同じマテリアルを提供する
クラスは以前からありました

639
00:39:26,767 --> 00:39:29,336
ウインドウ ScrollView
TableViewなどです

640
00:39:29,436 --> 00:39:32,639
いくつかは
Mac OS 10.0など

641
00:39:32,740 --> 00:39:35,843
ずいぶん前から
利用可能でした

642
00:39:36,376 --> 00:39:39,246
構成が正しければ平気です

643
00:39:39,346 --> 00:39:41,348
旧バージョンでも

644
00:39:41,448 --> 00:39:45,452
NSColorを希望どおりに
表示できます

645
00:39:45,552 --> 00:39:50,157
Mojaveでは自動的に
マテリアルを表示します

646
00:39:50,858 --> 00:39:54,528
NSBoxの色のカスタム設定は

647
00:39:54,628 --> 00:39:57,631
Leopard 10.5から
展開されていました

648
00:39:57,731 --> 00:39:59,266
NSCollectionViewも
同様です

649
00:39:59,366 --> 00:40:02,970
古いNSCollectionView APIでも
使用可能ですが

650
00:39:59,366 --> 00:40:02,970
古いNSCollectionView APIでも
使用可能ですが

651
00:40:03,070 --> 00:40:06,273
最新版での使用を推奨します

652
00:40:08,308 --> 00:40:12,045
ダークモードを
有効にすることは

653
00:40:12,179 --> 00:40:16,283
10.14SDKにリンクする
ゲートになります

654
00:40:16,717 --> 00:40:22,723
ダークモードアプリケーションを
開発するツールは

655
00:40:22,823 --> 00:40:26,160
10.14SDKに厳密である
必要はありません

656
00:40:26,260 --> 00:40:30,497
10.13SDKでも
可能ではあります

657
00:40:31,431 --> 00:40:35,636
SDKを
アップデートしなくても

658
00:40:36,070 --> 00:40:39,606
Info.plistのキーでダークモードの
オプトアウトは可能です

659
00:40:39,873 --> 00:40:42,476
NSRequiresAquaSystem
Appearanceといい

660
00:40:42,576 --> 00:40:44,478
“NO”に設定すれば

661
00:40:44,578 --> 00:40:48,348
旧版のSDKでもダークモードを
有効にできます

662
00:40:48,448 --> 00:40:53,053
しかしSDKのアップデートは
強く推奨します

663
00:40:53,487 --> 00:40:56,823
“YES”を選んだ場合
無効にできますが

664
00:40:56,924 --> 00:40:59,126
これは一時的です

665
00:40:59,226 --> 00:41:01,428
これがダークモード対応の

666
00:40:59,226 --> 00:41:01,428
これがダークモード対応の

667
00:41:01,528 --> 00:41:04,832
アップデート版では
カギとなります

668
00:41:08,102 --> 00:41:09,870
最後にコツを
お伝えしましょう

669
00:41:11,338 --> 00:41:14,508
アプリケーションの
アップデート時に有効です

670
00:41:14,942 --> 00:41:18,812
使用中の
NSColorを調べる場合

671
00:41:19,680 --> 00:41:22,316
コードベースを使えば
使用箇所が分かります

672
00:41:23,417 --> 00:41:25,385
ダークモードで

673
00:41:25,486 --> 00:41:29,022
何が有効かも
知ることができます

674
00:41:29,123 --> 00:41:33,894
例えば
ここで使われている色は

675
00:41:33,994 --> 00:41:36,363
ハードコード構成では
ありません

676
00:41:36,463 --> 00:41:38,966
このような状況では

677
00:41:39,233 --> 00:41:42,236
２つの選択肢があります

678
00:41:42,336 --> 00:41:43,103
１つ目は

679
00:41:43,270 --> 00:41:47,041
動的なアピアランスを表す
システムカラー

680
00:41:47,141 --> 00:41:49,176
これの有無の確認です

681
00:41:49,276 --> 00:41:50,277
２つ目は

682
00:41:50,577 --> 00:41:54,848
アプリケーションに重要な
カスタムカラーの作成です

683
00:41:55,382 --> 00:41:58,852
１つ目は簡単で
黒のラベルを

684
00:41:58,952 --> 00:42:00,721
ラベルカラーに変更します

685
00:41:58,952 --> 00:42:00,721
ラベルカラーに変更します

686
00:42:00,821 --> 00:42:03,390
予想どおりの働きをします

687
00:42:04,291 --> 00:42:08,462
アプリケーション向けに
特別な色があり

688
00:42:08,695 --> 00:42:11,765
カタログに入れたい場合が
２つ目です

689
00:42:12,466 --> 00:42:14,301
コードの一掃だけでなく

690
00:42:14,435 --> 00:42:18,038
データ駆動型の
特別な番号を取得できます

691
00:42:18,305 --> 00:42:23,076
その色の濃いバージョンも
設定可能になります

692
00:42:23,210 --> 00:42:24,945
ダークモード対応です

693
00:42:28,348 --> 00:42:31,185
オフスクリーン描画も
難点です

694
00:42:31,418 --> 00:42:32,986
オフスクリーン描画では

695
00:42:33,320 --> 00:42:37,991
アピアランスや その他の
条件に注意しましょう

696
00:42:38,125 --> 00:42:42,029
一般的にはNSImage
lockFocus APIを使用し

697
00:42:42,129 --> 00:42:44,531
NSImageをカスタムします

698
00:42:45,132 --> 00:42:49,269
バッジイメージを
描いてみましょう

699
00:42:49,369 --> 00:42:53,607
ベースイメージにバッジが
適用されます

700
00:42:53,907 --> 00:42:57,211
この場合
lockFocusが含まれる―

701
00:42:57,344 --> 00:43:00,147
NSImageを作成します

702
00:42:57,344 --> 00:43:00,147
NSImageを作成します

703
00:43:00,781 --> 00:43:05,652
しかしlockFocusを使うと
多くのセマンティクスを失い

704
00:43:05,752 --> 00:43:08,255
ビットマップしか残りません

705
00:43:08,922 --> 00:43:10,557
アピアランスが変わる場合や

706
00:43:10,657 --> 00:43:13,927
ディスプレイの違いから

707
00:43:14,027 --> 00:43:17,698
スケールファクターが
後退する場合など

708
00:43:18,031 --> 00:43:20,000
描画が古くなります

709
00:43:20,868 --> 00:43:25,839
ブロックベースを使うのが
解決策の１つです

710
00:43:25,939 --> 00:43:29,143
NSImageの
描画ハンドラです

711
00:43:29,576 --> 00:43:34,848
先ほどと同じ描画を
このブロック内で作成します

712
00:43:35,082 --> 00:43:40,854
NSImageViewを適用すると
自動的に修正され

713
00:43:40,954 --> 00:43:46,260
アピアランス他
すべての変化に対応します

714
00:43:46,693 --> 00:43:50,964
このバッジは動的な色にも
適用しているので

715
00:43:51,064 --> 00:43:53,534
常に正しいアピアランスを
提供します

716
00:43:54,902 --> 00:43:57,571
他のオフスクリーン描画では

717
00:43:57,804 --> 00:44:00,140
NSGraphicsContextや
CGBitmapContextを使った

718
00:43:57,804 --> 00:44:00,140
NSGraphicsContextや
CGBitmapContextを使った

719
00:44:00,240 --> 00:44:03,610
カスタムグラフィックが
あります

720
00:44:03,744 --> 00:44:06,914
これも
ブロックベースのNSImageで

721
00:44:07,014 --> 00:44:09,449
置き換えが可能です

722
00:44:10,450 --> 00:44:14,455
RectでNSView
cacheDisplayを使っている場合

723
00:44:14,555 --> 00:44:16,590
注意が必要です

724
00:44:16,857 --> 00:44:20,794
Rectは マテリアルや
ぼかしなどの

725
00:44:20,894 --> 00:44:24,631
上級レンダリング技法を
キャプチャーしません

726
00:44:24,998 --> 00:44:30,704
さらにアピアランスの変化で
古くなるので要注意です

727
00:44:33,407 --> 00:44:36,043
他の問題も説明します

728
00:44:36,910 --> 00:44:39,947
NSAttributedStringや
NSTextStorageで

729
00:44:40,047 --> 00:44:43,116
手動で属性を
操作する場合です

730
00:44:43,283 --> 00:44:47,521
属性をDictionaryに
設定しました

731
00:44:48,055 --> 00:44:49,656
結果がこれです

732
00:44:49,857 --> 00:44:53,861
ダークモードでも
文字が暗い理由は

733
00:44:54,561 --> 00:44:57,331
フォアグラウンドの
カラー属性のせいです

734
00:44:57,664 --> 00:45:01,635
テキストエンジンが
NSAttributedStringに直面すると

735
00:44:57,664 --> 00:45:01,635
テキストエンジンが
NSAttributedStringに直面すると

736
00:45:01,735 --> 00:45:05,372
フォアグラウンド属性がなく
黒が規定値になります

737
00:45:05,472 --> 00:45:10,377
互換性では常に
この規定値が適用されます

738
00:45:11,145 --> 00:45:14,348
ForegroundColorを
明確にします

739
00:45:14,448 --> 00:45:18,652
動的な色を選べば
修正できます

740
00:45:19,520 --> 00:45:23,791
別の手段で属性付き文字列を
変える方法は

741
00:45:23,891 --> 00:45:27,427
Cocoaコントロールへの
変換です

742
00:45:27,528 --> 00:45:29,463
NSTextFieldにします

743
00:45:29,997 --> 00:45:33,500
textViewのストレージを
操作する場合

744
00:45:34,101 --> 00:45:35,702
新しいAPIを試します

745
00:45:36,036 --> 00:45:39,206
Validation Replacementです

746
00:45:39,406 --> 00:45:40,808
これが便利です

747
00:45:40,908 --> 00:45:43,110
textViewのStringを

748
00:45:43,210 --> 00:45:47,514
AttributedStringに
変えてみましょう

749
00:45:47,614 --> 00:45:52,252
textViewに属さない
属性を補います

750
00:45:52,953 --> 00:45:56,823
手動で属性をそろえなくても

751
00:45:56,924 --> 00:45:59,727
新しいAttributedStringを
含められます

752
00:46:03,597 --> 00:46:06,100
次も問題の一例です

753
00:46:06,200 --> 00:46:09,002
Interface Builderにセットした
アピアランスで

754
00:46:09,236 --> 00:46:12,039
組み立てると
バグが起きます

755
00:46:12,139 --> 00:46:15,175
ダークモードに対応しません

756
00:46:15,375 --> 00:46:18,479
Interface Builderに
ハードコードされた

757
00:46:18,979 --> 00:46:20,647
Aquaアピアランスが
あるからです

758
00:46:20,748 --> 00:46:23,450
今までは常に
Aquaで起動していたので

759
00:46:23,550 --> 00:46:26,820
つい見落としがちです

760
00:46:27,955 --> 00:46:29,523
修正は簡単です

761
00:46:29,757 --> 00:46:33,360
インヘリタンスの選択で

762
00:46:33,694 --> 00:46:36,463
自動的に親要素を継承します

763
00:46:38,966 --> 00:46:41,702
NSVisualEffectViewでは
少し違います

764
00:46:41,802 --> 00:46:44,338
Interface Builderや
コードに

765
00:46:44,438 --> 00:46:46,406
NSVisualEffectViewを含む
場合があります

766
00:46:46,507 --> 00:46:49,109
アピアランスの
設定が必要です

767
00:46:49,643 --> 00:46:53,414
この操作は
mac OS 10.14では

768
00:46:53,647 --> 00:46:55,249
不要になります

769
00:46:55,349 --> 00:46:58,986
NSVisualEffectViewでは
インヘリタンスを基に

770
00:46:59,086 --> 00:47:00,788
アピアランスが設定されます

771
00:46:59,086 --> 00:47:00,788
アピアランスが設定されます

772
00:47:00,954 --> 00:47:03,657
Dark Aquaなら
vibrantDark

773
00:47:03,757 --> 00:47:06,260
AquaならvibrantLightが
選ばれます

774
00:47:07,494 --> 00:47:11,265
Interface Builderで
inheritedを選び

775
00:47:11,365 --> 00:47:15,102
nilのコードを
入れるだけです

776
00:47:17,871 --> 00:47:21,675
Interface Builderは

777
00:47:21,775 --> 00:47:24,945
デザインを確かめるのに
役立ちます

778
00:47:25,646 --> 00:47:29,083
例題として
IBDesignableを使った―

779
00:47:29,183 --> 00:47:30,751
カスタム画面です

780
00:47:30,851 --> 00:47:34,354
キャンバスに
レンダリングしています

781
00:47:34,488 --> 00:47:38,358
デフォルトでは
アピアランスに沿ったビューで

782
00:47:38,458 --> 00:47:41,829
この場合はダークです

783
00:47:42,496 --> 00:47:44,565
新しいトグルがあります

784
00:47:44,665 --> 00:47:47,201
アピアランスを変更でき

785
00:47:47,301 --> 00:47:50,738
どちらの見え方も
確認できます

786
00:47:52,105 --> 00:47:55,742
アセットカタログの
色もサポートされ

787
00:47:56,076 --> 00:48:00,547
ダークとライトバリアントに
対応しています

788
00:47:56,076 --> 00:48:00,547
ダークとライトバリアントに
対応しています

789
00:48:00,647 --> 00:48:03,517
双方をキャンバスで
確認できます

790
00:48:03,617 --> 00:48:06,386
ポップアップの矢印を使うと

791
00:48:06,487 --> 00:48:10,357
アセットカタログの定義を
見られます

792
00:48:10,457 --> 00:48:12,526
変更を目で確認できます

793
00:48:14,027 --> 00:48:16,730
リコンパイルする
必要もありません

794
00:48:17,998 --> 00:48:21,769
Debug Barに新しい
アイテムがあります

795
00:48:22,336 --> 00:48:26,073
アプリケーションの
アピアランスを選べます

796
00:48:26,373 --> 00:48:29,810
見え方を確認する上で
便利な機能です

797
00:48:29,910 --> 00:48:32,679
システムを
再構成する必要がありません

798
00:48:33,580 --> 00:48:35,215
ライトやダークだけでなく

799
00:48:35,315 --> 00:48:39,186
ハイコントラストも選べます

800
00:48:40,020 --> 00:48:44,157
タッチバーでも
Debug Barから選択できます

801
00:48:44,258 --> 00:48:47,461
Xcodeに戻らず
確認ができます

802
00:48:50,264 --> 00:48:52,833
Xcodeのツールを
ご紹介します

803
00:48:52,933 --> 00:48:55,736
ダークモードの
デバッグに有効です

804
00:48:56,370 --> 00:48:58,405
このアプリケーションは

805
00:48:58,505 --> 00:49:01,842
問題ないように見えます

806
00:48:58,505 --> 00:49:01,842
問題ないように見えます

807
00:49:02,176 --> 00:49:05,479
でもラバーバンド
スクロールをすると

808
00:49:06,113 --> 00:49:08,148
現れたのは

809
00:49:08,248 --> 00:49:11,151
隠れていたライト背景です

810
00:49:11,318 --> 00:49:14,388
有無の確認が難しいですよね

811
00:49:14,822 --> 00:49:17,724
View Debuggerが
役に立ちます

812
00:49:18,592 --> 00:49:21,328
3Dビューに拡張すると

813
00:49:21,662 --> 00:49:24,932
意図しない箇所を
簡単に見つけられます

814
00:49:25,632 --> 00:49:30,504
コレクションビューの背景は
ダークですが

815
00:49:30,604 --> 00:49:33,874
スクロールの後ろが
ライト背景です

816
00:49:34,208 --> 00:49:38,212
Inspectorで
設定を確認します

817
00:49:38,312 --> 00:49:41,682
ハードコードされた
白が入っていました

818
00:49:41,782 --> 00:49:43,450
修正は簡単です

819
00:49:45,118 --> 00:49:47,454
ダークモード
アプリケーションの

820
00:49:47,554 --> 00:49:50,124
デバッグに有効な機能です

821
00:49:50,557 --> 00:49:52,960
色にも対応しています

822
00:49:53,060 --> 00:49:56,063
動的な色も含む
色の名前や

823
00:49:56,163 --> 00:49:57,865
アセットカタログの色

824
00:49:57,965 --> 00:50:01,435
RGB値を
特定することが可能です

825
00:49:57,965 --> 00:50:01,435
RGB値を
特定することが可能です

826
00:50:01,769 --> 00:50:05,038
NSAppearanceの構造も

827
00:50:05,138 --> 00:50:07,708
確認できます

828
00:50:07,808 --> 00:50:11,812
ローカルオーバーライドの
有無も確認できます

829
00:50:14,348 --> 00:50:19,386
最後に 今回学んだことの
復習をしましょう

830
00:50:19,820 --> 00:50:21,688
まずNSAppearanceです

831
00:50:21,789 --> 00:50:24,858
ベースのテーマに
順応した―

832
00:50:24,958 --> 00:50:26,760
カスタムビューに有効です

833
00:50:27,628 --> 00:50:29,697
NSVisualEffectViewを
使うことで

834
00:50:29,797 --> 00:50:33,767
UIに奥行きと美しさを
追加します

835
00:50:34,201 --> 00:50:36,837
描画では
バイブランシーと―

836
00:50:36,937 --> 00:50:39,439
セレクションをご紹介

837
00:50:39,940 --> 00:50:44,812
Xcodeでのデサインと
デバッグもお忘れなく

838
00:50:45,145 --> 00:50:47,147
developer.apple.comには

839
00:50:47,247 --> 00:50:50,718
ビデオや資料が
そろっています

840
00:50:50,818 --> 00:50:52,386
ラボもあります

841
00:50:52,486 --> 00:50:56,790
Cocoaと
ダークモードについて

842
00:50:57,357 --> 00:51:00,661
エンジニアが
質問に答えます

843
00:50:57,357 --> 00:51:00,661
エンジニアが
質問に答えます

844
00:51:00,761 --> 00:51:05,032
デサイン系の質問は
Human Interfaceデザイナーへ

845
00:51:05,132 --> 00:51:06,533
昼食後に

846
00:51:06,633 --> 00:51:09,970
ぜひ参加してみてください

847
00:51:10,571 --> 00:51:13,707
金曜にも
Cocoaラボを開催します

848
00:51:14,441 --> 00:51:15,776
ありがとう

849
00:51:15,876 --> 00:51:18,145
(拍手)