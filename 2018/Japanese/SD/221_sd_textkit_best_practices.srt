
1
00:00:07,241 --> 00:00:15,883
(音楽)

2
00:00:21,955 --> 00:00:25,526
(拍手)

3
00:00:25,626 --> 00:00:26,827
こんにちは

4
00:00:27,327 --> 00:00:30,464
TextKitの
ベストプラクティスをご紹介します

5
00:00:30,631 --> 00:00:33,267
TextKitエンジニアの
ドナです

6
00:00:33,500 --> 00:00:36,937
オーサリングツールから
エミリーも参加します

7
00:00:37,037 --> 00:00:41,542
TextKitの効率的な
使い方を共有しましょう

8
00:00:41,642 --> 00:00:43,143
では 始めます

9
00:00:44,545 --> 00:00:47,881
まず TextKitの主な概念

10
00:00:48,448 --> 00:00:53,287
次に アプリケーションに
それを適用する方法

11
00:00:53,887 --> 00:00:59,359
最後に 正確性 性能
セキュリティ面についてです

12
00:01:00,460 --> 00:01:02,029
では 主な概念から

13
00:01:03,397 --> 00:01:06,934
基本的なことから
始めましょう

14
00:01:07,467 --> 00:01:08,936
TextKitとは？

15
00:01:10,504 --> 00:01:12,139
Xcodeを開き―

16
00:01:12,239 --> 00:01:16,176
“import TextKit”と
入力すれば使える？

17
00:01:16,844 --> 00:01:20,047
実は これでは作動しません

18
00:01:22,115 --> 00:01:25,853
TextKitは他のフレームワークと
異なるためです

19
00:01:26,220 --> 00:01:28,622
何かをインポートする
必要はありません

20
00:01:29,323 --> 00:01:33,460
テキストコントロールは
TextKit上に構築されており

21
00:01:33,727 --> 00:01:39,132
ラベルやテキストフィールドや
テキストビューにも使われています

22
00:01:39,766 --> 00:01:45,172
Core TextやCore Graphicsや
Foundationで

23
00:01:45,339 --> 00:01:48,208
簡単かつシームレスに
テキスト表示できます

24
00:01:49,176 --> 00:01:53,113
ビルトインのコントロールでは
TextKitが使用されています

25
00:01:53,280 --> 00:01:57,317
ローカライズ可能な方法で
表示 編集できるので

26
00:01:57,518 --> 00:02:02,890
複雑な技術やスクリプトを
理解する必要はありません

27
00:01:57,518 --> 00:02:02,890
複雑な技術やスクリプトを
理解する必要はありません

28
00:02:03,557 --> 00:02:07,528
無料で使える
多くの機能があります

29
00:02:08,895 --> 00:02:12,866
編集ではOSが対応する
全技術サービスにアクセス可能

30
00:02:13,033 --> 00:02:15,536
例えばアクセシビリティや
スペルチェックなどでは

31
00:02:15,736 --> 00:02:20,374
コードを書かずに
優れた機能を利用できます

32
00:02:20,641 --> 00:02:21,875
すばらしいですね

33
00:02:22,442 --> 00:02:27,247
どの機能をどのように
使ったらよいか？

34
00:02:28,448 --> 00:02:31,818
適切な選択について
解説します

35
00:02:32,085 --> 00:02:36,190
UIKitとAppKitのどちらを
使っているかで異なるため

36
00:02:36,390 --> 00:02:37,824
見てみましょう

37
00:02:39,026 --> 00:02:40,861
まずはUIKitから

38
00:02:42,396 --> 00:02:45,032
テキスト入力が必要か
検討します

39
00:02:46,633 --> 00:02:50,604
不要な場合は
選択やスクロールが必要か

40
00:02:52,439 --> 00:02:55,275
それも不要なら
UILabelを使用します

41
00:02:55,576 --> 00:02:59,980
UILabelは少量のテキストを
対象としています

42
00:03:01,114 --> 00:03:05,185
テキストが多かったり
選択やスクロールが必要なら

43
00:03:05,285 --> 00:03:08,388
編集を無効にして
UITextViewを使用

44
00:03:09,756 --> 00:03:14,428
テキスト入力が必要なら
安全な入力方法は？

45
00:03:14,528 --> 00:03:18,832
パスワードのように隠したり
コピー不可とするかです

46
00:03:20,467 --> 00:03:26,273
そういったものが必要なら
UITextFieldを使用します

47
00:03:27,508 --> 00:03:31,111
不要なら
入力テキスト量の考慮を

48
00:03:32,012 --> 00:03:35,616
１行の入力のみ必要な場合は

49
00:03:35,716 --> 00:03:40,320
１行の入力だけをサポートする
UITextFieldを使用

50
00:03:41,855 --> 00:03:44,892
それ以上必要なら
UITextViewです

51
00:03:46,927 --> 00:03:53,000
AppKitの決定プロセスは
似ていますが少し違います

52
00:03:54,401 --> 00:03:57,437
まず テキスト入力が
必要かを検討します

53
00:03:58,939 --> 00:04:00,707
ラベルコントロールが
ないので

54
00:03:58,939 --> 00:04:00,707
ラベルコントロールが
ないので

55
00:04:00,807 --> 00:04:02,676
テキスト表示するには

56
00:04:03,076 --> 00:04:07,347
NSTextFieldで編集と選択を
無効化して ラベルの動作を実現

57
00:04:09,449 --> 00:04:14,154
次に安全なテキスト入力の
必要性を検討します

58
00:04:14,555 --> 00:04:17,057
必要なら
NSSecureTextFieldを使用

59
00:04:18,257 --> 00:04:21,894
不要なら テキストの量は？

60
00:04:23,497 --> 00:04:27,234
NSTextViewは大量の
テキストに適しているので

61
00:04:27,334 --> 00:04:30,103
量が多いならNSTextView

62
00:04:31,438 --> 00:04:33,607
少ないならNSTextFieldです

63
00:04:33,874 --> 00:04:38,512
UIKitの場合と異なり
複数行も扱えますが

64
00:04:39,012 --> 00:04:40,914
短い文字列用なので

65
00:04:41,014 --> 00:04:44,318
量が多いなら
NSTextViewを使うべきです

66
00:04:45,853 --> 00:04:48,255
TextKitに
慣れている皆さんは

67
00:04:48,488 --> 00:04:52,159
フローチャートに文字列描画が
ないことに気づくでしょう

68
00:04:53,026 --> 00:04:55,295
文字列描画を使用するには

69
00:04:55,395 --> 00:04:58,098
NSStringまたは
NSAttributedStringの

70
00:04:58,198 --> 00:05:00,434
描画メソッドを
直接呼び出します

71
00:04:58,198 --> 00:05:00,434
描画メソッドを
直接呼び出します

72
00:05:01,134 --> 00:05:03,704
キットレベルでの
ビューオブジェクトの

73
00:05:03,804 --> 00:05:06,440
オーバーヘッドが
避けられます

74
00:05:07,641 --> 00:05:11,111
文字列描画を
使用する際のヒントを

75
00:05:11,612 --> 00:05:14,014
少量の静的テキストに
使用します

76
00:05:14,114 --> 00:05:16,750
描画メソッドを呼び出す
頻度を制限します

77
00:05:17,150 --> 00:05:21,722
何度も呼び出す場合
キャッシュ効率が上がり

78
00:05:21,822 --> 00:05:23,724
特に自動レイアウトでは

79
00:05:23,824 --> 00:05:27,494
ラベルやテキストフィールドの
性能が向上

80
00:05:28,462 --> 00:05:32,299
カスタム属性付き
文字列を描画する場合

81
00:05:32,833 --> 00:05:35,936
レンダリング前に
属性を検証するため

82
00:05:36,036 --> 00:05:38,272
文字列描画が遅くなることも

83
00:05:38,739 --> 00:05:42,676
最高の性能を得るには
余分な属性を取り除きます

84
00:05:42,776 --> 00:05:48,715
フォントや色など 外観の決定に
必要なものだけを渡します

85
00:05:50,350 --> 00:05:52,886
最後に 文字列描画では

86
00:05:52,986 --> 00:05:56,657
テキストコントロールの
機能は使えません

87
00:05:56,823 --> 00:05:59,393
可能な時だけ
使用してください

88
00:06:01,361 --> 00:06:05,399
ビルトインのコントロールを使い
TextKitで何ができるか学びました

89
00:06:05,499 --> 00:06:08,001
機能以上のことをする場合

90
00:06:08,101 --> 00:06:11,738
テキストスタック内で適切な
カスタマイズポイントを見つけます

91
00:06:12,306 --> 00:06:13,507
TextKitは

92
00:06:13,607 --> 00:06:17,144
モデル/ビュー/コントローラの
設計パターンがベースです

93
00:06:18,378 --> 00:06:22,749
NBCに直接対応する
３フェーズに分けられます

94
00:06:22,850 --> 00:06:25,586
ストレージ 表示
レイアウトです

95
00:06:25,919 --> 00:06:28,722
各フェーズの
TextKitオブジェクトを

96
00:06:28,822 --> 00:06:30,123
見ていきましょう

97
00:06:31,024 --> 00:06:33,927
まずは モデルに対応する
ストレージです

98
00:06:35,429 --> 00:06:38,332
NSTextStorageは
文字列データと属性を保持

99
00:06:38,632 --> 00:06:40,901
可変属性付き文字列の
サブクラスなので

100
00:06:41,001 --> 00:06:45,272
属性付き文字列と同様に
作業できます

101
00:06:46,006 --> 00:06:51,712
あとでテキストストレージの
カスタマイズ法を紹介します

102
00:06:53,947 --> 00:06:58,051
NSTextContainerはテキストの
配置領域の形状をモデル化

103
00:06:58,619 --> 00:07:03,757
デフォルトでは長方形ですが
フローや形は変えられます

104
00:06:58,619 --> 00:07:03,757
デフォルトでは長方形ですが
フローや形は変えられます

105
00:07:05,392 --> 00:07:08,061
ストレージオブジェクトの
操作の詳細は

106
00:07:08,195 --> 00:07:11,431
過去のセッションと
資料を参照してください

107
00:07:11,565 --> 00:07:14,701
詳細情報のリンクから
利用できます

108
00:07:17,304 --> 00:07:20,541
次は ビューに対応する
表示フェーズ

109
00:07:21,108 --> 00:07:25,579
これについては
先ほど詳しく話しました

110
00:07:25,679 --> 00:07:29,483
その他の情報は
資料で確認してください

111
00:07:29,683 --> 00:07:33,086
詳細情報のリンクから
アクセスできます

112
00:07:35,322 --> 00:07:38,826
最後は コントローラに対応する
レイアウトフェーズです

113
00:07:40,127 --> 00:07:45,232
NSLayoutManagerは
このフェーズ唯一のコンポーネント

114
00:07:45,966 --> 00:07:49,870
そして とても
すばらしいんです

115
00:07:50,070 --> 00:07:51,972
全操作の中枢部として

116
00:07:52,072 --> 00:07:56,743
全フェーズ間の変更を調整し
レイアウトプロセスを制御

117
00:07:58,178 --> 00:08:01,248
レイアウトプロセスの
仕組みを紹介します

118
00:07:58,178 --> 00:08:01,248
レイアウトプロセスの
仕組みを紹介します

119
00:08:01,348 --> 00:08:07,221
まず 不整合を除去するため
テキストストレージ内の属性を修正

120
00:08:07,321 --> 00:08:12,893
文字列内のすべての文字が
フォントにあるか確認します

121
00:08:12,993 --> 00:08:15,762
この例では
Times New Romanフォントが

122
00:08:15,863 --> 00:08:17,931
全体に指定されています

123
00:08:18,031 --> 00:08:22,302
でも このフォントは漢字や
絵文字をサポートしません

124
00:08:23,070 --> 00:08:26,773
属性を修正すると
テキストストレージは

125
00:08:26,874 --> 00:08:28,175
このようになります

126
00:08:28,275 --> 00:08:32,679
適切な日本語･絵文字フォントが
割り当てられます

127
00:08:34,114 --> 00:08:38,018
属性が修正されると
レイアウトプロセスが開始

128
00:08:38,385 --> 00:08:43,123
グリフの生成後に
グリフのレイアウトが行われます

129
00:08:44,191 --> 00:08:46,793
配置されると
表示の準備が整います

130
00:08:48,095 --> 00:08:49,696
ところでグリフとは？

131
00:08:50,097 --> 00:08:55,335
１つ以上の文字を視覚的に
表現したものです

132
00:08:55,435 --> 00:09:00,340
文字とグリフ間のマッピングは
必ずしも１対１ではありません

133
00:08:55,435 --> 00:09:00,340
文字とグリフ間のマッピングは
必ずしも１対１ではありません

134
00:09:01,375 --> 00:09:04,545
この“ffi”は
３つの文字から成りますが

135
00:09:04,645 --> 00:09:07,481
合字として単一のグリフで
表すことができます

136
00:09:08,415 --> 00:09:10,083
逆のパターンもあります

137
00:09:10,384 --> 00:09:14,988
複数のグリフで表現できる
単一の文字“ñ”があります

138
00:09:15,589 --> 00:09:17,658
１つはn用
もう１つはチルダ用です

139
00:09:18,792 --> 00:09:20,894
図に戻ります

140
00:09:21,261 --> 00:09:25,299
NSLayoutManagerがグリフの
生成とレイアウトを行います

141
00:09:25,399 --> 00:09:30,537
まずは文字から
グリフを描画するかどうかを判断

142
00:09:31,238 --> 00:09:35,843
そしてグリフを配置し 表示します

143
00:09:37,411 --> 00:09:42,516
過去のセッションや
資料でも学べます

144
00:09:42,616 --> 00:09:47,221
こちらも詳細情報のリンクから
アクセス可能です

145
00:09:50,691 --> 00:09:53,227
テキストシステムの各段階と

146
00:09:53,360 --> 00:09:56,029
TextKitコンポーネントについて
理解できました

147
00:09:57,164 --> 00:10:02,369
では 正しい設定を選択し
さまざまな効果を作りましょう

148
00:09:57,164 --> 00:10:02,369
では 正しい設定を選択し
さまざまな効果を作りましょう

149
00:10:03,904 --> 00:10:05,706
標準的な設定では―

150
00:10:06,406 --> 00:10:10,310
テキストビューを
ドラッグ＆ドロップすると

151
00:10:10,410 --> 00:10:12,679
各コンポーネントを自動取得

152
00:10:13,113 --> 00:10:15,282
大抵の場合
必要なのはこれだけ

153
00:10:17,417 --> 00:10:20,254
複数ページや複数列が必要なら

154
00:10:20,354 --> 00:10:23,156
テキストコンテナと
テキストビューを

155
00:10:23,257 --> 00:10:25,025
ページか列ごとに１組使用

156
00:10:25,592 --> 00:10:29,096
同じテキストストレージ内の
同じレイアウトマネージャに接続し

157
00:10:29,196 --> 00:10:32,366
バッキングストアの
レイアウト情報を共有します

158
00:10:34,234 --> 00:10:38,839
異なるレイアウトが必要な場合
複数のレイアウトマネージャを使用

159
00:10:38,939 --> 00:10:42,009
バッキングストアを
共有しているため

160
00:10:42,109 --> 00:10:44,745
テキスト更新で
すべてのビューが更新

161
00:10:46,547 --> 00:10:51,885
設定については2010年の
セッションをご覧ください

162
00:10:51,985 --> 00:10:56,290
“Advanced Cocoa
Text Tips and Tricks”です

163
00:10:56,690 --> 00:10:59,993
詳細情報のリンクから
アクセスできます

164
00:11:02,596 --> 00:11:05,799
ビルトインの
テキストコントロールと

165
00:11:06,166 --> 00:11:11,738
TextKitのコンポーネント
そして その設定方法

166
00:11:11,839 --> 00:11:15,943
これらの知識で
多くのことができますが

167
00:11:16,043 --> 00:11:18,946
更にTextKitの
カスタマイズも可能

168
00:11:19,680 --> 00:11:23,283
その正しいアプローチの
選び方は

169
00:11:25,052 --> 00:11:28,322
テキストツールボックスの
構築と同様です

170
00:11:28,489 --> 00:11:34,428
例えばハンマーを買う時は
壁一面に並んだ商品から

171
00:11:34,895 --> 00:11:40,500
できるだけ安くて
使用目的に適した物を選びますね

172
00:11:42,336 --> 00:11:44,805
さまざまな
ハンマーがあります

173
00:11:45,272 --> 00:11:48,108
デリゲーションは
ネイルハンマーのように

174
00:11:48,208 --> 00:11:50,077
複数の作業をこなします

175
00:11:50,177 --> 00:11:54,748
カスタマイズも可能で
とても便利です

176
00:11:56,283 --> 00:12:00,654
通知は
丸頭ハンマーのようなものです

177
00:11:56,283 --> 00:12:00,654
通知は
丸頭ハンマーのようなものです

178
00:12:01,221 --> 00:12:08,095
特定のタスクに適しており
決して用途は広くありません

179
00:12:09,763 --> 00:12:12,466
サブクラス化は
大型ハンマーです

180
00:12:13,367 --> 00:12:18,438
大型ハンマーは非常に強力で
何にでも使えますが

181
00:12:18,572 --> 00:12:21,041
大抵の場合 大きすぎます

182
00:12:22,342 --> 00:12:26,013
ハンマーの使い方は
エミリーが説明します

183
00:12:26,213 --> 00:12:27,014
エミリー

184
00:12:27,114 --> 00:12:32,553
(拍手)

185
00:12:32,653 --> 00:12:33,620
ありがとう ドナ

186
00:12:34,288 --> 00:12:38,091
開発者には多くの
コントロールの選択肢があります

187
00:12:38,192 --> 00:12:43,430
さまざまな設定と
幅広いカスタマイズオプション

188
00:12:44,031 --> 00:12:46,066
ツールはいっぱいですが

189
00:12:46,400 --> 00:12:48,735
どのツールを選べばよいか？

190
00:12:50,704 --> 00:12:54,675
TextKitの機能を活用する
アプリケーションの例を見ましょう

191
00:12:55,242 --> 00:13:01,281
ほとんどのアプリケーションが
テキストの表示 編集をします

192
00:12:55,242 --> 00:13:01,281
ほとんどのアプリケーションが
テキストの表示 編集をします

193
00:13:03,584 --> 00:13:09,423
２つのアプリケーションを見たあと
独自に構築してみましょう

194
00:13:10,991 --> 00:13:14,328
最初のアプリケーションは
iOS上のApple News

195
00:13:14,428 --> 00:13:20,334
パーソナライズされた記事の
テキストを表示します

196
00:13:21,935 --> 00:13:26,206
Spotlightのタブに
表示される記事の例です

197
00:13:28,108 --> 00:13:31,311
上部に記事の詳細が
表示されます

198
00:13:32,012 --> 00:13:35,382
この見た目と操作感を
TextKitでどう作るか？

199
00:13:38,018 --> 00:13:40,821
ドナが示した
フローチャートで

200
00:13:40,921 --> 00:13:43,657
最適なコントロールを
選んでみましょう

201
00:13:45,893 --> 00:13:48,395
使えるテキストコントロールは
たくさんあります

202
00:13:49,196 --> 00:13:54,001
表示するのは１行のみで
テキストは少量なので

203
00:13:54,101 --> 00:13:55,302
ラベルを使用します

204
00:13:57,671 --> 00:14:01,475
インスペクタパネルに
多くのオプションがあります

205
00:13:57,671 --> 00:14:01,475
インスペクタパネルに
多くのオプションがあります

206
00:14:02,810 --> 00:14:09,416
テキストをSpotlightに変え
フォントをBodyに変更します

207
00:14:11,752 --> 00:14:17,157
Dynamic Typeを有効にし
アクセシビリティを設定すれば

208
00:14:17,257 --> 00:14:20,627
好みのサイズと
スタイルで表示できます

209
00:14:22,229 --> 00:14:25,098
Interface Builderで
ラベルをカスタマイズでき

210
00:14:25,199 --> 00:14:27,868
Swiftで
プロパティを見られるので

211
00:14:28,635 --> 00:14:33,340
テキストと書式のプロパティを
動的に設定できます

212
00:14:34,875 --> 00:14:39,112
Interface Builderに戻り
ラベルを２つ追加します

213
00:14:40,047 --> 00:14:44,985
すべて順調ですが
もう１つ必要なのです

214
00:14:46,086 --> 00:14:50,157
Apple Newsの右のテキストは

215
00:14:50,257 --> 00:14:54,094
黒と白の２色で
表示されています

216
00:14:54,828 --> 00:14:57,130
２つのラベルで可能ですが

217
00:14:57,464 --> 00:14:59,800
１つしか
使用したくない場合は

218
00:14:59,900 --> 00:15:02,503
Interface Builderでは
できません

219
00:14:59,900 --> 00:15:02,503
Interface Builderでは
できません

220
00:15:02,636 --> 00:15:04,638
どうすればよいでしょう

221
00:15:06,340 --> 00:15:10,210
属性付き文字列の機能と
柔軟性を利用します

222
00:15:11,678 --> 00:15:17,417
属性付き文字列は文字の特定の
範囲に属性を適用できます

223
00:15:17,885 --> 00:15:22,723
デフォルトのフォントや
テキストの色などの属性は

224
00:15:22,823 --> 00:15:25,392
指定した値で上書きできます

225
00:15:25,726 --> 00:15:29,163
今回は文字列の色を
部分的に白にします

226
00:15:31,565 --> 00:15:33,500
表示するためには

227
00:15:33,600 --> 00:15:37,204
NSMutableAttributedStringの
addAttributeメソッドを使用し

228
00:15:37,304 --> 00:15:40,574
望む範囲だけテキストの色を
白に設定します

229
00:15:41,508 --> 00:15:45,112
ラベルのattributedText
プロパティを設定します

230
00:15:47,481 --> 00:15:49,917
非常に整理された見た目です

231
00:15:51,585 --> 00:15:54,688
この種のテキストには
UILabelが最適です

232
00:15:55,589 --> 00:15:58,392
画面下部にある
見出しのテキストは

233
00:15:58,492 --> 00:16:02,462
少し大きめで複数の行に
またがっています

234
00:15:58,492 --> 00:16:02,462
少し大きめで複数の行に
またがっています

235
00:16:04,765 --> 00:16:07,868
しかも他と違って選択可能です

236
00:16:09,236 --> 00:16:11,438
どのコントロールを
使うべきでしょうか？

237
00:16:12,072 --> 00:16:15,676
テキストフィールドも
テキストビューもいいですが

238
00:16:15,776 --> 00:16:18,979
テキストフィールドは
通常は１行用です

239
00:16:20,047 --> 00:16:24,852
見出しは複数行なので
テキストビューを使用します

240
00:16:26,620 --> 00:16:31,925
デフォルトで
ダミーテキストが入ります

241
00:16:32,359 --> 00:16:35,829
インスペクタパネルの
テキストを変更します

242
00:16:37,030 --> 00:16:40,601
Apple Newsらしい
フォントを選び

243
00:16:42,002 --> 00:16:45,873
見出しを編集できないよう
編集機能を無効にします

244
00:16:47,207 --> 00:16:52,379
UITextViewはデフォルトで
スクロールが可能ですが

245
00:16:53,413 --> 00:16:58,252
自動レイアウトを活用するなら
スクロールを無効にします

246
00:16:58,785 --> 00:17:02,956
テキストビューのサイズが
テキストに合わせて変更されます

247
00:16:58,785 --> 00:17:02,956
テキストビューのサイズが
テキストに合わせて変更されます

248
00:17:05,459 --> 00:17:11,665
この白い背景は不要なので
透明に設定します

249
00:17:12,398 --> 00:17:15,769
テキストビューを簡単に
カスタマイズでき

250
00:17:15,868 --> 00:17:19,306
ラベルと同様
すべてコード内で設定できます

251
00:17:19,839 --> 00:17:25,212
Swiftでは実行時に動的に
テキストと書式を設定できます

252
00:17:26,046 --> 00:17:28,582
次はApple Newsではなく

253
00:17:29,383 --> 00:17:34,388
別のアプリケーションを例に
見てみましょう

254
00:17:35,823 --> 00:17:37,357
テキストエディットです

255
00:17:37,458 --> 00:17:39,960
macOS上のアプリケーションで

256
00:17:40,194 --> 00:17:43,630
リッチテキストの
表示と編集が可能です

257
00:17:44,898 --> 00:17:50,604
実はNSTextViewの
シンラッパーです

258
00:17:51,572 --> 00:17:56,777
TextKitで何ができるか
見ていきましょう

259
00:17:57,711 --> 00:18:03,150
このインスペクタバーも
その下のルーラービューも

260
00:17:57,711 --> 00:18:03,150
このインスペクタバーも
その下のルーラービューも

261
00:18:03,250 --> 00:18:07,888
Interface Builderの
チェックボックスを選択するだけ

262
00:18:08,722 --> 00:18:11,258
その下はテキストビュー

263
00:18:12,926 --> 00:18:14,828
そしてテキストコンテナと

264
00:18:14,928 --> 00:18:18,198
レイアウトマネージャと
テキストストレージです

265
00:18:18,832 --> 00:18:23,604
NSTextViewと
UITextViewの標準的な設定です

266
00:18:24,771 --> 00:18:27,274
似ているのは ここまで

267
00:18:28,308 --> 00:18:32,179
テーブルはNSTextViewでのみ
サポートされています

268
00:18:32,646 --> 00:18:34,481
すばらしいことに―

269
00:18:34,581 --> 00:18:38,986
TextKitはテーブルエディタを
提供します

270
00:18:42,723 --> 00:18:45,959
大量のテキストを
編集する時に便利な―

271
00:18:46,593 --> 00:18:50,797
スペルチェッカーも
無料で使えます

272
00:18:51,365 --> 00:18:53,200
そして更に―

273
00:18:53,300 --> 00:18:59,606
フォーマット機能を使用して
ページのように表示できます

274
00:18:59,706 --> 00:19:04,845
テキストコンテナのサイズが
用紙に合わせて変更されます

275
00:18:59,706 --> 00:19:04,845
テキストコンテナのサイズが
用紙に合わせて変更されます

276
00:19:05,879 --> 00:19:10,217
このようにテキストが
次のページへジャンプ

277
00:19:10,784 --> 00:19:13,787
標準的な設定では不可能です

278
00:19:14,755 --> 00:19:18,959
２つのテキストビューと
テキストコンテナを使いました

279
00:19:19,059 --> 00:19:24,598
同じレイアウトマネージャと
テキストストレージで管理されます

280
00:19:26,467 --> 00:19:30,704
テキストエディットの
仕組みをもっと知りたいなら

281
00:19:30,804 --> 00:19:32,873
ライブラリにソースがあります

282
00:19:35,042 --> 00:19:38,812
適切なコントロールと
設定を選びましたが

283
00:19:38,912 --> 00:19:42,483
求めるものを得るには
ハンマーが必要です

284
00:19:43,317 --> 00:19:45,552
使うべきハンマーは？

285
00:19:47,721 --> 00:19:51,458
ジャーナルアプリケーションを
構築しながら

286
00:19:51,558 --> 00:19:53,360
ハンマーを選んでみます

287
00:19:54,495 --> 00:19:57,331
まず今日の日付を
表示しましょう

288
00:19:58,232 --> 00:20:02,669
テキストフィールドを
ラベルのように動作させるには

289
00:19:58,232 --> 00:20:02,669
テキストフィールドを
ラベルのように動作させるには

290
00:20:03,904 --> 00:20:06,173
編集を無効にするだけです

291
00:20:07,875 --> 00:20:11,245
ジャーナル入力部には
テキストビューを使用します

292
00:20:11,879 --> 00:20:15,382
インスペクタでは
テキストビューが選択･編集でき

293
00:20:15,482 --> 00:20:19,086
リッチテキストとUndoが
サポートされていることを確認

294
00:20:20,921 --> 00:20:25,759
テキストフィールドを２つ追加し
単語数を表示します

295
00:20:27,594 --> 00:20:31,865
アプリケーション実行時に
単語数が変更されるように

296
00:20:31,965 --> 00:20:34,067
正しいハンマーを
見つけましょう

297
00:20:34,902 --> 00:20:39,740
デリゲートに準拠させるか
通知またはサブクラスを処理します

298
00:20:40,607 --> 00:20:45,445
今回はテキストストレージからの
通知を受けます

299
00:20:46,680 --> 00:20:49,783
テキストストレージから
単語の数を取得できます

300
00:20:50,651 --> 00:20:52,152
通知を受け

301
00:20:52,252 --> 00:20:55,289
stringValueプロパティを
更新します

302
00:20:56,924 --> 00:21:00,027
入力を開始すると
単語数が変化します

303
00:20:56,924 --> 00:21:00,027
入力を開始すると
単語数が変化します

304
00:21:02,062 --> 00:21:04,364
テキストの一部を
強調する場合―

305
00:21:04,998 --> 00:21:08,936
ショートカットやメニューで
太字などの書式を適用

306
00:21:10,704 --> 00:21:14,541
最新のテキストフォーマットも
使いたいですよね

307
00:21:14,641 --> 00:21:18,712
Markdownのように
制御文字で書式を指定したい

308
00:21:19,046 --> 00:21:23,750
前後にアスタリスクを挿入したら
太字にするには

309
00:21:24,184 --> 00:21:26,053
どのハンマーを使うべきか？

310
00:21:28,222 --> 00:21:32,493
変更がいつどこで生じたかを
知る必要がありますが

311
00:21:32,593 --> 00:21:36,163
通知される情報では
不十分です

312
00:21:37,297 --> 00:21:38,866
大きなハンマーを使用し

313
00:21:38,966 --> 00:21:41,135
NSTextStorageDelegateを
実装します

314
00:21:41,768 --> 00:21:44,605
具体的には
didProcessEditingメソッドです

315
00:21:44,938 --> 00:21:48,242
既存のものから
太字のフォントを新たに作り

316
00:21:48,809 --> 00:21:52,913
テキストストレージに
それを直接追加します

317
00:21:54,047 --> 00:21:57,918
最後のアスタリスクで
太字になりました

318
00:22:00,120 --> 00:22:05,726
それではコードスニペットを
挿入するとどうなるか？

319
00:22:06,427 --> 00:22:08,395
Markdownでは こうです

320
00:22:09,196 --> 00:22:13,133
最後のバッククォートを追加したら
コードブロックのように

321
00:22:13,934 --> 00:22:16,737
背景とヘッダを付けたい

322
00:22:17,538 --> 00:22:22,443
これは複雑で
２つの大型ハンマーが必要です

323
00:22:23,377 --> 00:22:25,812
まずは
サブクラスNSTextStorage

324
00:22:26,480 --> 00:22:29,249
NSTextStorageの
サブクラス化には

325
00:22:29,349 --> 00:22:31,084
４つのメソッドが必要です

326
00:22:31,185 --> 00:22:33,921
可変文字列の
プライベートインスタンスを

327
00:22:34,021 --> 00:22:35,189
操作しましょう

328
00:22:36,957 --> 00:22:39,459
replaceCharactersメソッドで

329
00:22:39,793 --> 00:22:43,263
段落スタイルに
NSTextBlockを追加できます

330
00:22:45,165 --> 00:22:46,833
そして段落スタイルを

331
00:22:46,934 --> 00:22:49,937
コードブロックの範囲で
テキストストレージに追加

332
00:22:50,337 --> 00:22:54,341
NSTextBlock自体は
カスタム描画を行わないので

333
00:22:54,441 --> 00:22:56,510
サブクラスにする必要があります

334
00:22:58,145 --> 00:23:04,218
NSTextBlockサブクラスでは
いくつかのパディングが必要です

335
00:22:58,145 --> 00:23:04,218
NSTextBlockサブクラスでは
いくつかのパディングが必要です

336
00:23:04,318 --> 00:23:06,153
明るい灰色の背景も

337
00:23:07,454 --> 00:23:12,993
drawBackgroundをオーバーライドし
ヘッダを描画すれば

338
00:23:13,494 --> 00:23:17,464
テキストブロックが
コードスニペットのように見えます

339
00:23:18,932 --> 00:23:21,168
カスタムテキストストレージに戻り

340
00:23:21,268 --> 00:23:26,306
新しいコードブロックの
インスタンスを作成します

341
00:23:29,743 --> 00:23:30,978
最後に―

342
00:23:31,078 --> 00:23:34,248
カスタムテキストストレージが
使用されるよう

343
00:23:34,348 --> 00:23:37,284
レイアウトマネージャの
テキストストレージを置換

344
00:23:39,419 --> 00:23:42,756
WYSIWYGなエディタに
なりましたね

345
00:23:42,956 --> 00:23:47,027
Markdownエディタは
左右に並べて表示できます

346
00:23:47,127 --> 00:23:50,330
左は編集版
右はレンダリング版です

347
00:23:51,465 --> 00:23:53,967
２つのテキストビューを
左右に並べ

348
00:23:56,170 --> 00:23:58,272
右側の編集を無効に

349
00:23:59,206 --> 00:24:04,545
同じ内容でも 右側は
少し違う外観にしたいので

350
00:23:59,206 --> 00:24:04,545
同じ内容でも 右側は
少し違う外観にしたいので

351
00:24:05,579 --> 00:24:11,251
テキストストレージは１つで
それ以外は２つ持たせます

352
00:24:14,121 --> 00:24:19,359
右のテキストストレージを
左のものに置き換えます

353
00:24:20,527 --> 00:24:22,162
結果を見ましょう

354
00:24:23,564 --> 00:24:29,002
左側に文字を追加すると
右側にもすぐに表示されます

355
00:24:29,670 --> 00:24:34,141
通常は右側にMarkdown文字は
表示されません

356
00:24:34,241 --> 00:24:37,010
しかしテキストストレージを
共有しているので

357
00:24:37,578 --> 00:24:40,914
レイアウトプロセス中に
文字を隠す必要があります

358
00:24:43,116 --> 00:24:46,687
これには１つの方法しか
ありません

359
00:24:47,554 --> 00:24:53,160
shouldGenerateGlyphsメソッドを
NSLayoutManagerデリゲートに実装

360
00:24:53,627 --> 00:24:56,897
これでグリフ生成プロセスに
介入できます

361
00:24:58,131 --> 00:25:00,934
配置対象のグリフを取得し

362
00:24:58,131 --> 00:25:00,934
配置対象のグリフを取得し

363
00:25:01,635 --> 00:25:04,605
Markdown制御文字を
表す場合―

364
00:25:04,705 --> 00:25:07,775
グリフにnullプロパティを
適用します

365
00:25:07,975 --> 00:25:14,014
これでレイアウト処理中に
グリフが完全に消滅

366
00:25:17,351 --> 00:25:23,557
新しいグリフを新しいプロパティで
表示するよう指示します

367
00:25:27,227 --> 00:25:32,833
左側はMarkdown文字を含む
編集可能なバージョン

368
00:25:32,933 --> 00:25:35,936
右側にMarkdown文字は
ありません

369
00:25:36,036 --> 00:25:38,005
どちらも
同じテキストストレージです

370
00:25:39,640 --> 00:25:43,610
左右に並べるエディタの構築は
一般的ではありませんが

371
00:25:43,844 --> 00:25:47,381
TextKitの
カスタマイズ例として

372
00:25:47,481 --> 00:25:48,916
紹介しました

373
00:25:50,617 --> 00:25:55,956
TextKitの使用法とカスタマイズは
プログラミングガイドでご確認を

374
00:25:56,223 --> 00:25:58,492
では ドナに戻します

375
00:25:58,759 --> 00:26:05,833
(拍手)

376
00:25:58,759 --> 00:26:05,833
(拍手)

377
00:26:06,533 --> 00:26:07,468
エミリー ありがとう

378
00:26:08,001 --> 00:26:09,636
とてもいい例でしたね

379
00:26:09,736 --> 00:26:14,007
皆さんのアプリケーションでも
ぜひ お試しください

380
00:26:14,575 --> 00:26:19,112
次はベストプラクティスについて
お話ししましょう

381
00:26:21,949 --> 00:26:23,617
まず正確性について

382
00:26:23,717 --> 00:26:26,053
思うように
レンダリングされない場合は

383
00:26:26,153 --> 00:26:30,757
属性付き文字列の属性が
不完全または不正です

384
00:26:31,992 --> 00:26:35,229
例を見てみましょう

385
00:26:36,096 --> 00:26:37,531
ある属性の付いた―

386
00:26:37,631 --> 00:26:41,135
“Don't hate.”という
テキストがあります

387
00:26:41,568 --> 00:26:44,571
フォントはComic Sans
24ポイント

388
00:26:45,639 --> 00:26:49,877
プログラムで“Don't”に
太字の書体を適用したい

389
00:26:50,077 --> 00:26:54,715
Comic Sansの太字は
かなり不評ですからね

390
00:26:54,815 --> 00:26:56,550
(笑い声)

391
00:26:56,884 --> 00:27:00,220
最初に こんなコードを
思いつくかもしれません

392
00:26:56,884 --> 00:27:00,220
最初に こんなコードを
思いつくかもしれません

393
00:27:00,721 --> 00:27:03,023
元のフォントがあります

394
00:27:04,258 --> 00:27:08,729
フォント記述子を使用して
その太字版を作成し

395
00:27:09,963 --> 00:27:15,068
元のテキストを使用して
可変属性付き文字列を初期化

396
00:27:15,769 --> 00:27:19,640
新しい太字フォントを
“Don't”に適用します

397
00:27:20,073 --> 00:27:21,808
最初の５文字ですね

398
00:27:21,909 --> 00:27:26,947
この新しい文字列を使用するよう
属性付き文字列のプロパティに設定

399
00:27:28,081 --> 00:27:34,154
新しい太字のフォントが
“Don't”に適用されましたが

400
00:27:34,254 --> 00:27:37,324
残りの文字は
フォントが変わりました

401
00:27:38,525 --> 00:27:41,462
Comic Sans嫌いは喜ぶでしょうが

402
00:27:42,262 --> 00:27:45,566
結果は間違っているので残念です

403
00:27:46,433 --> 00:27:48,335
なぜこうなったのでしょう

404
00:27:49,436 --> 00:27:54,141
属性付き文字列の初期化を
詳しく見ていきましょう

405
00:27:55,175 --> 00:28:01,849
プレーンテキスト文字列を使用し
属性情報なしで初期化しました

406
00:27:55,175 --> 00:28:01,849
プレーンテキスト文字列を使用し
属性情報なしで初期化しました

407
00:28:02,916 --> 00:28:07,588
新しい文字列を作成した際も
属性情報を指定せず

408
00:28:07,755 --> 00:28:10,657
デフォルトの属性を
使いました

409
00:28:10,924 --> 00:28:13,527
フォントはHelvetica
12ポイント

410
00:28:14,761 --> 00:28:18,465
元の属性付き文字列から
見ていきましょう

411
00:28:18,565 --> 00:28:21,735
Comic Sansの24ポイントを
全範囲に適用し

412
00:28:23,270 --> 00:28:28,041
新規属性付き文字列を作成し
デフォルトの属性で初期化

413
00:28:28,809 --> 00:28:31,812
そして
“Don't”に太字を適用

414
00:28:32,012 --> 00:28:37,151
Comic Sansの太字
24ポイントになりましたが

415
00:28:37,251 --> 00:28:40,420
残りはHelveticaの
12ポイントに

416
00:28:42,890 --> 00:28:45,759
これを直すには
２つの方法があります

417
00:28:45,859 --> 00:28:49,463
１つはプレーンテキストと
属性付きテキストを混在させない

418
00:28:50,063 --> 00:28:55,135
元の文字列を使用して初期化し
属性を保持すれば

419
00:28:55,369 --> 00:28:59,373
リセット効果なしに
新しい属性を適用できます

420
00:29:01,108 --> 00:29:05,245
テキストの混同を
避けられない場合は

421
00:29:05,345 --> 00:29:08,749
明示的に属性を指定して

422
00:29:08,849 --> 00:29:12,186
プレーンテキスト文字列から
属性付き文字列を作りましょう

423
00:29:12,486 --> 00:29:16,657
元のテキストの属性を適用すれば
正しい結果が出ます

424
00:29:18,559 --> 00:29:24,031
リセット効果はデフォルト値を持つ
他の属性にも及びます

425
00:29:24,698 --> 00:29:28,068
デフォルト値を持つ
属性はたくさんあります

426
00:29:30,137 --> 00:29:34,374
特に段落スタイルには
注意が必要です

427
00:29:34,975 --> 00:29:39,146
先ほどの例で
フォントを変更する代わりに

428
00:29:39,246 --> 00:29:43,417
段落スタイルを変更し
“hate”を切り詰めます

429
00:29:44,484 --> 00:29:48,088
しかし このコードを
実行すると

430
00:29:48,455 --> 00:29:52,659
すべてHelveticaの
12ポイントに

431
00:29:52,760 --> 00:29:57,297
デフォルトの段落スタイルで
ラッピングの改行モードが使われ

432
00:29:57,531 --> 00:30:02,736
Comic Sansフォントは
完全に失われました

433
00:29:57,531 --> 00:30:02,736
Comic Sansフォントは
完全に失われました

434
00:30:03,470 --> 00:30:06,607
前回とは違う結果です

435
00:30:07,875 --> 00:30:09,076
なぜか？

436
00:30:09,176 --> 00:30:12,346
レイアウト前に
属性の修正が行われ

437
00:30:12,446 --> 00:30:15,549
システムは
一貫性のない属性を修復

438
00:30:16,150 --> 00:30:17,718
属性付き文字列に―

439
00:30:17,818 --> 00:30:22,956
複数の段落スタイルを持つ
１つの段落があります

440
00:30:23,357 --> 00:30:26,160
システムが
この属性を修正する際―

441
00:30:26,260 --> 00:30:30,464
最初に見つけた段落スタイルを
全体に適用

442
00:30:31,198 --> 00:30:35,702
その結果 デフォルトの
スタイルで表示されます

443
00:30:37,171 --> 00:30:43,310
このような場合 重要なのは
属性を明示することです

444
00:30:43,677 --> 00:30:47,648
それでデフォルト属性での
リセット効果を避けられます

445
00:30:47,748 --> 00:30:50,884
ダークモード用に
アプリケーションを更新する際

446
00:30:50,984 --> 00:30:53,053
非常に重要です

447
00:30:53,153 --> 00:30:57,925
NSColor.textColorのような
動的な色を明示することで

448
00:30:58,025 --> 00:31:01,395
コンテキストに適した色で
テキストを描画できます

449
00:30:58,025 --> 00:31:01,395
コンテキストに適した色で
テキストを描画できます

450
00:31:02,963 --> 00:31:05,766
次のトピックは性能です

451
00:31:06,300 --> 00:31:12,005
大量のテキストを扱う場合
非連続レイアウトが有効です

452
00:31:13,040 --> 00:31:17,044
レイアウトプロセスを
もう一度見ましょう

453
00:31:17,678 --> 00:31:21,648
グリフの生成とレイアウトで
構成されています

454
00:31:22,583 --> 00:31:24,118
連続レイアウトでは

455
00:31:24,218 --> 00:31:29,790
テキストストレージの先頭から
グリフの生成とレイアウトを実行

456
00:31:30,157 --> 00:31:32,760
最後まで順番に処理されます

457
00:31:33,727 --> 00:31:37,297
テキストビューの途中まで
スクロールすると

458
00:31:37,397 --> 00:31:40,400
レイアウトマネージャが
手前のグリフを

459
00:31:40,500 --> 00:31:43,036
すべて生成 レイアウト

460
00:31:43,136 --> 00:31:44,905
赤く示されている部分です

461
00:31:45,205 --> 00:31:49,409
スクロールされて
見えないテキストも含む―

462
00:31:49,510 --> 00:31:51,778
テキストストレージの
先頭からです

463
00:31:52,446 --> 00:31:54,848
テキストが多いと

464
00:31:55,616 --> 00:31:58,919
レイアウト完了まで
しばらく待たされます

465
00:31:59,753 --> 00:32:04,191
非連続レイアウトなら
この状況を回避できます

466
00:31:59,753 --> 00:32:04,191
非連続レイアウトなら
この状況を回避できます

467
00:32:04,892 --> 00:32:09,930
非連続レイアウトでは
テキストストレージの先頭からの

468
00:32:10,030 --> 00:32:13,400
グリフ生成とレイアウトは
行いません

469
00:32:14,168 --> 00:32:17,971
テキストビューの途中に
スクロールすると

470
00:32:18,572 --> 00:32:23,010
その中間セクションの
グリフ生成とレイアウトを行います

471
00:32:24,278 --> 00:32:29,516
非連続レイアウトを使用すると
パフォーマンスが大幅に向上します

472
00:32:31,151 --> 00:32:32,986
どうすれば使えるか？

473
00:32:33,887 --> 00:32:37,724
非連続レイアウトは
NSLayoutManagerのプロパティです

474
00:32:37,825 --> 00:32:43,797
テキストにアクセスして
そのプロパティを設定します

475
00:32:45,532 --> 00:32:49,436
UITextViewの場合
デフォルトでオンになっています

476
00:32:49,970 --> 00:32:52,339
大切なことが１つ

477
00:32:52,740 --> 00:32:56,477
UITextViewはUIScrollViewの
サブクラスなので

478
00:32:56,977 --> 00:32:58,111
非連続レイアウトでは

479
00:32:58,212 --> 00:33:00,480
スクロールを
有効にする必要があります

480
00:32:58,212 --> 00:33:00,480
スクロールを
有効にする必要があります

481
00:33:01,248 --> 00:33:03,717
スクロールを無効にすると

482
00:33:03,817 --> 00:33:08,856
すべてのテキストの配置が
必要となり

483
00:33:08,956 --> 00:33:12,493
非連続レイアウトの
利点が得られません

484
00:33:14,261 --> 00:33:16,630
ここで重要なポイントです

485
00:33:17,130 --> 00:33:22,135
一度に大量のテキストの
レイアウトを要求しないこと

486
00:33:22,369 --> 00:33:25,405
非連続レイアウトを使う
意味がないからです

487
00:33:26,140 --> 00:33:30,210
テキストコンテナが１つなら
全体のレイアウトを要求しません

488
00:33:30,711 --> 00:33:34,915
終わりを含む広範囲の
文字やグリフについてもです

489
00:33:37,317 --> 00:33:42,156
テキスト処理の性能について
詳しくはWWDC2017の

490
00:33:42,256 --> 00:33:45,792
“Efficient Interactions with
Frameworks”をご覧ください

491
00:33:46,193 --> 00:33:49,763
詳細情報のリンクから
ビデオにアクセスできます

492
00:33:51,698 --> 00:33:56,136
次は誰もが好きな
セキュリティの話題です

493
00:33:58,205 --> 00:34:01,341
最近の事件をご存じでしょう

494
00:33:58,205 --> 00:34:01,341
最近の事件をご存じでしょう

495
00:34:01,675 --> 00:34:07,748
ソフトウェアのバグを悪用し
問題を起こす人々がいます

496
00:34:08,782 --> 00:34:13,754
こうした攻撃を防ぐ策を
私たちは練っています

497
00:34:14,955 --> 00:34:20,561
強力な防御のために
何をしているか話しましょう

498
00:34:20,661 --> 00:34:23,630
多層防御をご存じでしょうか

499
00:34:24,998 --> 00:34:26,867
念のために説明すると

500
00:34:26,967 --> 00:34:31,772
複数の保護対策を
組み合わせることです

501
00:34:32,105 --> 00:34:36,577
この概念は何世紀にも
わたって存在しています

502
00:34:36,810 --> 00:34:40,114
中世の城の周りは
視界確保のため木がなく

503
00:34:40,647 --> 00:34:44,685
敵を近づけないよう
堀に囲まれていました

504
00:34:45,351 --> 00:34:49,356
更に壁は高いため登りづらく

505
00:34:49,922 --> 00:34:56,129
攻撃者に発砲できるよう
上部に穴が設けられていました

506
00:34:57,031 --> 00:35:01,535
いずれか１つでは
防衛には不十分ですが

507
00:34:57,031 --> 00:35:01,535
いずれか１つでは
防衛には不十分ですが

508
00:35:01,635 --> 00:35:04,771
組み合わせれば
力を発揮します

509
00:35:06,073 --> 00:35:10,510
私たちも城と同様
複数の防御層を提供し

510
00:35:10,944 --> 00:35:15,349
皆さんも独自の防御策を
実装できます

511
00:35:15,782 --> 00:35:21,455
これにより更に安全性が向上し
誰もが勝者に

512
00:35:21,555 --> 00:35:23,624
その方法をお話ししましょう

513
00:35:25,592 --> 00:35:28,428
アプリケーションや
フレームワークで

514
00:35:28,529 --> 00:35:31,064
テキスト入力を制限する

515
00:35:31,431 --> 00:35:34,635
これは常に
使えるとは限りません

516
00:35:34,735 --> 00:35:39,306
例えばアプリケーションが
オーサリングツールである場合

517
00:35:39,673 --> 00:35:45,546
テキストの長さを制限しても
意味がありません

518
00:35:46,580 --> 00:35:51,719
でもアカウントにニックネームを
設定するテキストフィールドなら

519
00:35:51,852 --> 00:35:54,555
制限を付けられるでしょう

520
00:35:56,123 --> 00:36:01,261
テキスト入力は信頼できないので
制限の設定を推奨します

521
00:35:56,123 --> 00:36:01,261
テキスト入力は信頼できないので
制限の設定を推奨します

522
00:36:01,995 --> 00:36:06,633
テキスト入力を許可すると
コピー＆ペーストも許可されます

523
00:36:07,101 --> 00:36:09,403
何でも入力可能です

524
00:36:10,070 --> 00:36:13,574
悪意のある
文字列の場合もあるし

525
00:36:13,674 --> 00:36:19,513
とんでもなく長い
文字列ということも

526
00:36:20,514 --> 00:36:23,784
長い文字列は
たとえ悪意がなくても

527
00:36:23,884 --> 00:36:25,919
フリーズやハングアップの
原因に

528
00:36:26,153 --> 00:36:28,722
１行用のテキストフィールドに

529
00:36:28,822 --> 00:36:32,659
“戦争と平和”の
全文をペーストすると

530
00:36:33,026 --> 00:36:35,662
英語では
約310万文字になります

531
00:36:36,730 --> 00:36:37,798
妥当ですか？

532
00:36:39,733 --> 00:36:41,068
おそらく違います

533
00:36:42,603 --> 00:36:46,573
こうした場合は
制限が理にかなっています

534
00:36:48,208 --> 00:36:51,145
この種の制限を設定する際は

535
00:36:51,712 --> 00:36:55,082
入力文字列を
事前に検証すること

536
00:36:55,182 --> 00:36:59,486
UITextFieldでは
UITextFieldDelegateを使用し

537
00:36:59,853 --> 00:37:04,691
NSTextFieldでは
カスタムNSFormatterを使用

538
00:36:59,853 --> 00:37:04,691
NSTextFieldでは
カスタムNSFormatterを使用

539
00:37:06,593 --> 00:37:09,997
新たな安全性強化策も
準備中です

540
00:37:10,330 --> 00:37:14,835
質問があれば今週
ラボにお立ち寄りください

541
00:37:16,870 --> 00:37:19,907
もう時間なので
まとめましょう

542
00:37:20,374 --> 00:37:23,610
コントロールと
カスタマイズポイントと

543
00:37:23,710 --> 00:37:25,245
カスタマイズ方法の選び方

544
00:37:25,345 --> 00:37:30,050
正確性 性能 セキュリティの
ベストプラクティスを学びました

545
00:37:30,517 --> 00:37:34,588
この知識を活用しTextKitで
よいものを作ってください

546
00:37:35,522 --> 00:37:38,992
重要な情報リンクがあります

547
00:37:39,193 --> 00:37:42,963
過去のセッションや
資料をご覧いただけます

548
00:37:43,063 --> 00:37:45,265
木曜日と金曜日に
ラボを訪ねてください

549
00:37:46,533 --> 00:37:48,435
ありがとうございました

550
00:37:48,535 --> 00:37:50,704
(拍手)