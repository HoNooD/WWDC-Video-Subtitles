
1
00:00:07,074 --> 00:00:16,450
(音楽)

2
00:00:20,654 --> 00:00:26,994
(拍手)

3
00:00:27,094 --> 00:00:31,031
Getting to Know Swift
Package Managerへようこそ

4
00:00:31,365 --> 00:00:34,601
私リック･バラードと
ボリス･ビューグリンが―

5
00:00:34,701 --> 00:00:37,671
SwiftのPackage Managerを
紹介します

6
00:00:38,238 --> 00:00:40,908
SwiftPMとも呼びます

7
00:00:41,575 --> 00:00:44,711
今回はオープンソース
プロジェクトに注目し―

8
00:00:44,811 --> 00:00:47,181
他のツールには触れません

9
00:00:47,281 --> 00:00:49,850
しかし内容は盛りだくさんです

10
00:00:50,817 --> 00:00:57,324
SwiftPMはSwiftのエコシステムに
簡単にソースコードを配信できます

11
00:00:57,591 --> 00:01:03,797
今回の議題は目標とデザイン
そして未来への指標です

12
00:00:57,591 --> 00:01:03,797
今回の議題は目標とデザイン
そして未来への指標です

13
00:01:05,833 --> 00:01:11,972
まず新しいPackage Managerを
作った理由をお話ししましょう

14
00:01:12,372 --> 00:01:14,474
使い方を説明したあと―

15
00:01:14,575 --> 00:01:17,411
デザインと特性に移ります

16
00:01:18,312 --> 00:01:21,381
それから未来の指標に触れ―

17
00:01:21,481 --> 00:01:27,988
SwiftPMのオープンソースの工程と
関わり方についてお話しします

18
00:01:29,289 --> 00:01:34,628
パッケージマネージャは
コードのシェアと再利用に最適です

19
00:01:34,795 --> 00:01:37,764
では なぜSwift専用が必要なのか？

20
00:01:40,133 --> 00:01:42,703
Swiftの言語は
クロスプラットフォームで―

21
00:01:42,803 --> 00:01:46,473
それに対応した
ビルドツールが必要でした

22
00:01:46,907 --> 00:01:53,247
Swiftの全プラットフォームで
コード設定が簡単になります

23
00:01:53,914 --> 00:01:58,986
SwiftPMのビルドシステムは
ソフトフェアを設定し―

24
00:01:59,086 --> 00:02:03,290
ビルドとテストを行い
実行をします

25
00:01:59,086 --> 00:02:03,290
ビルドとテストを行い
実行をします

26
00:02:07,427 --> 00:02:10,030
またSwiftライブラリを

27
00:02:10,130 --> 00:02:14,601
誰とでも簡単に
シェアできるようにするため

28
00:02:15,002 --> 00:02:18,672
基本のパッケージマネージャを
提供しています

29
00:02:18,772 --> 00:02:22,576
共通基準を明確にするのに
役立つでしょう

30
00:02:23,410 --> 00:02:27,881
これはエコシステムと
Swift自体に好影響です

31
00:02:29,383 --> 00:02:33,487
皆さんも
追加したい機能があるでしょう

32
00:02:33,587 --> 00:02:36,990
コアライブラリへの
変更は慎重に行い―

33
00:02:37,090 --> 00:02:40,027
精選されたAPIを保っています

34
00:02:40,427 --> 00:02:45,032
優れたパッケージマネージャは
コアライブラリに入らずに―

35
00:02:45,132 --> 00:02:48,035
追加機能をパッケージ化します

36
00:02:48,502 --> 00:02:55,342
良いアイデアはコミュニティ内で
注目され 徐々に規格化されます

37
00:02:56,777 --> 00:03:00,180
パッケージマネージャの
開発によって―

38
00:02:56,777 --> 00:03:00,180
パッケージマネージャの
開発によって―

39
00:03:00,280 --> 00:03:04,017
Swiftのパワーと哲学を生かせます

40
00:03:04,585 --> 00:03:09,256
SwiftPMはSwiftに
書き込まれています

41
00:03:09,523 --> 00:03:15,929
Swift言語とコアライブラリの
プロジェクトにも関わることで―

42
00:03:16,029 --> 00:03:19,867
コードがより
使いやすくなっています

43
00:03:21,502 --> 00:03:24,505
SwiftPMはオープンソース
プロジェクトの一環で―

44
00:03:24,605 --> 00:03:28,976
Swift.orgとGitHubに
詳細が載っています

45
00:03:29,476 --> 00:03:34,748
“Package Manager”から
読むのをお勧めします

46
00:03:35,849 --> 00:03:42,756
他のSwiftツールもSwift.orgで
ダウンロードが可能です

47
00:03:43,156 --> 00:03:47,728
また最新のXcodeの
リリースも含まれます

48
00:03:49,096 --> 00:03:51,932
使い方を説明するため

49
00:03:52,032 --> 00:03:55,602
ボリスがSwiftPMの
基本をお見せします

50
00:03:56,170 --> 00:04:03,277
(拍手)

51
00:03:56,170 --> 00:04:03,277
(拍手)

52
00:04:07,314 --> 00:04:08,148
ありがとう

53
00:04:08,248 --> 00:04:10,717
では使い方の説明です

54
00:04:12,986 --> 00:04:18,091
SwiftPMには４つの
コマンドラインツールがあります

55
00:04:18,358 --> 00:04:20,861
“swift build”は
パッケージをビルドし―

56
00:04:20,961 --> 00:04:23,864
“swift run”は実行をします

57
00:04:23,964 --> 00:04:26,767
“swift test”はテストを行い―

58
00:04:26,900 --> 00:04:31,705
“swift package”はビルド不可の
オペレーションを実行します

59
00:04:33,240 --> 00:04:35,809
パッケージは
Gitリポジトリに保存され―

60
00:04:35,909 --> 00:04:39,146
分岐はGitタグにより表されます

61
00:04:41,882 --> 00:04:47,788
次にパッケージ作成が
どれだけ簡単かをお見せします

62
00:04:51,391 --> 00:04:55,429
ターミナルで
ディレクトリを作成します

63
00:04:55,929 --> 00:05:00,000
“helloworld”がパッケージ名です

64
00:05:00,300 --> 00:05:05,439
ディレクトリに切り替え
“swift package init”を実行

65
00:05:06,406 --> 00:05:08,609
タイプは“executable”

66
00:05:10,377 --> 00:05:14,381
これでSwiftPMが
基本構成を作成します

67
00:05:15,015 --> 00:05:16,650
Finderを開いて―

68
00:05:17,584 --> 00:05:19,920
詳しく見てみましょう

69
00:05:29,163 --> 00:05:33,567
“Package.swift”は
パッケージの構成を表します

70
00:05:33,667 --> 00:05:35,369
“README”もあります

71
00:05:36,737 --> 00:05:41,608
“Sources”には
サブフォルダの“helloworld”

72
00:05:41,775 --> 00:05:44,645
“main.swift”が実行ファイルです

73
00:05:44,878 --> 00:05:49,016
“Tests”は
ユニットテストを行えます

74
00:05:50,951 --> 00:05:52,286
ターミナルに戻り―

75
00:05:55,556 --> 00:05:59,827
“swift run”とタイプして
パッケージを実行します

76
00:06:00,394 --> 00:06:02,095
これでコンパイルされ

77
00:06:02,663 --> 00:06:06,633
リンクするとhelloworldが
出力されます

78
00:06:08,235 --> 00:06:12,573
今度はもっと複雑な
パッケージを見てみましょう

79
00:06:12,673 --> 00:06:18,612
SwiftPMの基本コンセプトも
併せてお話しします

80
00:06:19,146 --> 00:06:20,113
まずは―

81
00:06:21,014 --> 00:06:23,750
実行してみましょう

82
00:06:24,351 --> 00:06:29,022
トランプのカードが
ランダムに出力されます

83
00:06:34,895 --> 00:06:37,631
ではスライドに戻り―

84
00:06:38,565 --> 00:06:41,168
基本コンセプトをお話しします

85
00:06:47,541 --> 00:06:50,077
パッケージは３つに分かれます

86
00:06:50,177 --> 00:06:51,478
依存関係と―

87
00:06:52,779 --> 00:06:53,947
ターゲット

88
00:06:56,216 --> 00:06:57,551
そして製品です

89
00:06:58,719 --> 00:07:02,222
それぞれの詳細を見ていきます

90
00:06:58,719 --> 00:07:02,222
それぞれの詳細を見ていきます

91
00:07:04,258 --> 00:07:09,930
新たな機能を開発する際に
使うのが依存関係です

92
00:07:11,632 --> 00:07:15,602
各依存関係が１つ以上の
製品を提供します

93
00:07:15,736 --> 00:07:18,872
例えばパッケージの
ライブラリなどです

94
00:07:21,074 --> 00:07:24,811
マニフェストファイルで
依存関係を見てみます

95
00:07:26,346 --> 00:07:28,882
各々でソースの場所があり―

96
00:07:30,250 --> 00:07:31,885
バージョンもあります

97
00:07:35,823 --> 00:07:39,026
ターゲットは
パッケージの基礎です

98
00:07:39,693 --> 00:07:43,564
モジュールかテストスイートに
ソースファイルが―

99
00:07:43,964 --> 00:07:47,401
どうビルドされるかを表します

100
00:07:50,170 --> 00:07:54,441
ターゲットは同じパッケージ内で
依存し合い―

101
00:07:56,677 --> 00:08:01,215
別のパッケージの製品を
依存関係として宣言します

102
00:07:56,677 --> 00:08:01,215
別のパッケージの製品を
依存関係として宣言します

103
00:08:03,150 --> 00:08:05,853
製品はライブラリで実行され―

104
00:08:07,354 --> 00:08:11,925
１つ以上のターゲットから
成っています

105
00:08:14,228 --> 00:08:19,466
製品を定義することでパッケージは
ライブラリを提供します

106
00:08:19,633 --> 00:08:25,005
デフォルトでは
ライブラリのタイプを宣言しません

107
00:08:25,639 --> 00:08:29,610
SwiftPMが用途に合わせて選びます

108
00:08:30,344 --> 00:08:35,448
スタティックかダイナミックの
宣言は可能です

109
00:08:37,717 --> 00:08:40,654
マニフェストでターゲットを見ます

110
00:08:41,989 --> 00:08:44,525
３つのターゲットがあります

111
00:08:46,093 --> 00:08:51,999
“libdealer”はメインの機能の
実装が含まれています

112
00:08:52,432 --> 00:08:55,502
依存関係は
“DeckOfPlayingCards”です

113
00:08:55,836 --> 00:08:59,573
これは先に宣言した依存関係です

114
00:09:01,108 --> 00:09:06,914
“dealer”は それに依存して
コマンドラインツールを提供

115
00:09:09,216 --> 00:09:12,986
最後に“testTarget”があります

116
00:09:13,086 --> 00:09:15,823
ユニットテストが可能です

117
00:09:19,993 --> 00:09:23,497
また２つの製品があります

118
00:09:24,565 --> 00:09:29,469
ライブラリはターゲットの
“libdealer”に対応し

119
00:09:29,970 --> 00:09:35,075
これによりライブラリでの
実装が可能になります

120
00:09:37,244 --> 00:09:41,982
次の実行可能な対象は
“dealer”に依存させ―

121
00:09:42,249 --> 00:09:45,853
コマンドラインの
使用を可能にします

122
00:09:50,691 --> 00:09:56,630
最後に新しい機能を追加する際の
パッケージの使い方です

123
00:10:00,334 --> 00:10:02,369
ターミナルウィンドウを開きます

124
00:10:02,936 --> 00:10:06,173
“Package.swift”を開き―

125
00:10:08,742 --> 00:10:10,544
新たな依存関係を加えます

126
00:10:12,679 --> 00:10:16,016
ここではSwiftPMです

127
00:10:16,116 --> 00:10:20,754
リックがお話しした
Swift専用のパッケージです

128
00:10:21,054 --> 00:10:25,826
不安定なAPIなので“exact”に
バージョンナンバーが出ます

129
00:10:27,728 --> 00:10:32,833
ターゲットの“libdealer”の
製品に依存します

130
00:10:32,933 --> 00:10:34,368
“Utility”と言います

131
00:10:34,501 --> 00:10:38,605
またターミナルコントローラという
クラスがあり―

132
00:10:39,506 --> 00:10:45,245
ターミナルの出力に
色をつけることができます

133
00:10:46,413 --> 00:10:51,552
正式なAppleのAPIではなく
デモのために使用しています

134
00:10:53,420 --> 00:10:55,255
ターミナルに戻ります

135
00:10:57,024 --> 00:11:01,495
新しい依存関係を使うため
コードは変更しました

136
00:10:57,024 --> 00:11:01,495
新しい依存関係を使うため
コードは変更しました

137
00:11:01,929 --> 00:11:03,664
デモの事前にです

138
00:11:03,764 --> 00:11:07,601
これで実行すれば
結果が見られます

139
00:11:08,669 --> 00:11:13,807
同じ出力ですが
カラーになって楽しい感じです

140
00:11:19,279 --> 00:11:21,215
最後のデモに移ります

141
00:11:22,883 --> 00:11:25,385
SwiftPMのテストです

142
00:11:25,485 --> 00:11:28,889
これにはSwift Neoの
パッケージを使います

143
00:11:29,022 --> 00:11:32,860
春に公開した
ネットワークライブラリです

144
00:11:34,795 --> 00:11:36,730
“swift test”を実行し

145
00:11:38,131 --> 00:11:39,700
“parallel”とします

146
00:11:40,734 --> 00:11:45,005
並行テストなので
結果は迅速に得られます

147
00:11:45,172 --> 00:11:47,341
フィルターオプションもかけます

148
00:11:49,610 --> 00:11:54,281
テストのサブセットを実行するので
反復して使えます

149
00:11:57,951 --> 00:12:03,557
パッケージがコンパイルされ
テストが実行されます

150
00:11:57,951 --> 00:12:03,557
パッケージがコンパイルされ
テストが実行されます

151
00:12:03,991 --> 00:12:05,559
あと数秒ですね

152
00:12:09,396 --> 00:12:12,466
プログレスバーが出てきました

153
00:12:12,566 --> 00:12:16,103
並行テストなので
結果はすぐに出ます

154
00:12:18,305 --> 00:12:20,240
スライドに戻りましょう

155
00:12:26,446 --> 00:12:30,684
次はSwiftPMのデザインのお話です

156
00:12:36,456 --> 00:12:41,595
SwiftPMはSwiftと同じく
すばやく安全で表現豊かです

157
00:12:42,796 --> 00:12:45,732
高い安全性は
独立したビルド環境と

158
00:12:45,833 --> 00:12:49,036
任意のコマンドの禁止に
起因しています

159
00:12:50,170 --> 00:12:55,242
拡張可能なビルドエンジンで
大きな依存グラフにも高速対応

160
00:12:56,610 --> 00:13:01,315
マニフェストにSwift言語を使用し
表現も豊かです

161
00:12:56,610 --> 00:13:01,315
マニフェストにSwift言語を使用し
表現も豊かです

162
00:13:02,282 --> 00:13:06,720
また既存の
プログラミング言語も使えます

163
00:13:09,089 --> 00:13:10,858
次のセクションでは

164
00:13:11,258 --> 00:13:16,530
Swiftパッケージを作成する
工程をご説明します

165
00:13:16,797 --> 00:13:17,898
まずは

166
00:13:18,465 --> 00:13:19,900
構造です

167
00:13:23,370 --> 00:13:27,107
SwiftPMのマニフェストは
Swiftを基本としています

168
00:13:27,207 --> 00:13:32,479
新しい言語を学ぶ必要がないので
簡単に理解できます

169
00:13:32,646 --> 00:13:37,751
APIデザインのガイドラインに
従っているので親しみやすく

170
00:13:38,151 --> 00:13:43,724
既存のSwiftツールを
活用することができます

171
00:13:46,693 --> 00:13:52,299
マニフェストを書き込む際は
宣言型構文をお勧めします

172
00:13:53,133 --> 00:13:55,502
SwiftPMはソースコードが―

173
00:13:55,602 --> 00:13:59,807
診断される時間と頻度を
保証しないからです

174
00:14:00,374 --> 00:14:05,078
スライドの左側の例では
宣言ができません

175
00:14:05,312 --> 00:14:07,948
名前は生成中のものが表示されず

176
00:14:08,048 --> 00:14:11,885
パッケージ内で
何度か使用されています

177
00:14:13,420 --> 00:14:18,492
右側は文字列定数を使って
マニフェストが宣言できます

178
00:14:18,592 --> 00:14:22,262
理解しやすく
ターゲットが明確です

179
00:14:23,764 --> 00:14:30,304
宣言型構文を使わない場合
マニフェストは複雑になります

180
00:14:33,040 --> 00:14:39,146
ソースファイルは各ターゲットの
名前ごとに整頓されます

181
00:14:39,746 --> 00:14:44,885
これによりパッケージが
共通構造を選定しやすくなり

182
00:14:45,486 --> 00:14:48,188
すばやい操作を行えます

183
00:14:51,091 --> 00:14:54,862
Package Managerや
他のビルドツールは

184
00:14:54,962 --> 00:15:01,468
ユーザの設定とPackage Managerの
規則が相反することがあります

185
00:14:54,962 --> 00:15:01,468
ユーザの設定とPackage Managerの
規則が相反することがあります

186
00:15:05,772 --> 00:15:07,341
先に述べたとおり

187
00:15:07,441 --> 00:15:11,979
ソースファイルは規則に基づく
場所から自動的に取得

188
00:15:12,246 --> 00:15:17,918
マニフェストを編集せずに
ソースファイルを更新できます

189
00:15:19,720 --> 00:15:23,690
製品とターゲットは
設定の価値があります

190
00:15:25,058 --> 00:15:28,462
ディスクのレイアウトと
相互参照なしでも―

191
00:15:28,562 --> 00:15:31,932
パッケージや定義が
分かりやすくなります

192
00:15:32,733 --> 00:15:39,439
またマニフェストを見るだけで
クライアントも簡単に理解できます

193
00:15:42,242 --> 00:15:46,613
他のプログラム言語の
ソースコードもサポートしています

194
00:15:46,713 --> 00:15:49,817
CやC++ Objective-Cなどです

195
00:15:50,050 --> 00:15:52,619
これで統合が可能です

196
00:15:53,387 --> 00:15:59,026
しかしSwift内の同じターゲットで
言語の統合はサポートしていません

197
00:16:01,828 --> 00:16:04,965
次に依存関係とバージョニングです

198
00:16:08,068 --> 00:16:13,207
チャーンを避けて
バグ修正ができるように

199
00:16:13,307 --> 00:16:16,643
セマンティックバージョニングを
使っています

200
00:16:17,511 --> 00:16:23,650
バージョン番号の各要素に
具体的な意味を当てはめます

201
00:16:25,586 --> 00:16:28,589
メジャーバージョンは
大きな変更を表し

202
00:16:29,122 --> 00:16:32,326
コードのアップデートが必要です

203
00:16:33,126 --> 00:16:36,864
変更とは 既存の型や
メッセージの削除―

204
00:16:36,964 --> 00:16:39,566
署名の変更などがあります

205
00:16:40,067 --> 00:16:43,904
互換性のない
バグ修正も含みます

206
00:16:44,671 --> 00:16:49,710
または既存のAPIの
大きな変更も含まれます

207
00:16:51,111 --> 00:16:56,116
マイナーバージョンは後方互換の
機能が追加された場合で

208
00:16:56,950 --> 00:16:59,953
メソッドや型を
追加した時などです

209
00:17:01,221 --> 00:17:07,060
パッチバージョンは後方互換性の
バグ修正作成時に増加させます

210
00:17:08,494 --> 00:17:12,031
クライアントはバグ修正で
ソースコードを―

211
00:17:12,398 --> 00:17:15,068
壊すリスクがなくなります

212
00:17:17,738 --> 00:17:24,444
SwiftPMはビルド前にパッケージの
バージョンを決める必要があります

213
00:17:24,877 --> 00:17:28,048
“依存関係解決”と呼びます

214
00:17:28,649 --> 00:17:32,719
SwiftPMは
すべての必要条件を確認します

215
00:17:33,453 --> 00:17:35,389
パッケージを明確にし

216
00:17:35,556 --> 00:17:39,126
互換性のある
最新のバージョンを探します

217
00:17:40,127 --> 00:17:45,666
先程のデモを使って
このプロセスを見てみましょう

218
00:17:47,367 --> 00:17:51,271
dealerには
２つの依存関係がありました

219
00:17:51,371 --> 00:17:55,709
SwiftPMとトランプのカードです

220
00:17:58,178 --> 00:18:01,949
SwiftPMは
これらのバージョンを決定します

221
00:17:58,178 --> 00:18:01,949
SwiftPMは
これらのバージョンを決定します

222
00:18:02,249 --> 00:18:06,887
１つ目はバージョンを
決めていたので簡単です

223
00:18:07,788 --> 00:18:09,690
そのタグから始めます

224
00:18:10,357 --> 00:18:13,093
２つ目は構文なので

225
00:18:13,193 --> 00:18:18,165
マイナーまたはパッチ要素を
アップデートします

226
00:18:20,300 --> 00:18:24,404
この例の場合 タグは3.1.4です

227
00:18:27,007 --> 00:18:28,909
プロセスは繰り返されます

228
00:18:29,076 --> 00:18:33,480
次にSwiftPMは
推移的依存関係を確認します

229
00:18:33,580 --> 00:18:37,417
SwiftPMは
これ以上することがありません

230
00:18:38,619 --> 00:18:42,823
トランプは“fisher-yates”と
“playing-card”に依存します

231
00:18:46,026 --> 00:18:49,596
これらのバージョンも
決めなければなりません

232
00:18:49,696 --> 00:18:55,869
fisher-yagesは構文を
使用しているので先程と同様です

233
00:18:56,603 --> 00:18:59,973
タグは2.2.5となります

234
00:19:01,442 --> 00:19:05,279
playing-cardは
“upToNextMinor”を使っているので

235
00:19:05,379 --> 00:19:08,649
パッチ要素のみ
アップデートされます

236
00:19:09,516 --> 00:19:15,022
バグ修正のみの場合
同じ構文を使用しても構いません

237
00:19:16,523 --> 00:19:19,793
タグは3.0.2となりました

238
00:19:22,029 --> 00:19:24,231
最後にターゲットを見ると

239
00:19:24,331 --> 00:19:28,101
必須の製品を
決定したパッケージと―

240
00:19:28,202 --> 00:19:30,904
組み合わせる必要があります

241
00:19:31,505 --> 00:19:34,308
そこでlibdealerに目を向けます

242
00:19:34,741 --> 00:19:40,681
SwiftPMから製品の
Utilityが提供されています

243
00:19:41,381 --> 00:19:45,519
その他は
別の製品を提供しています

244
00:19:48,489 --> 00:19:53,727
すべて終わると
Package.resolvedに記録されます

245
00:19:54,595 --> 00:19:59,766
決定したバージョンを
メンバーにシェアするためです

246
00:19:59,867 --> 00:20:05,305
また一連の統合の基礎により
ビルド成果を取得でき

247
00:19:59,867 --> 00:20:05,305
また一連の統合の基礎により
ビルド成果を取得でき

248
00:20:05,405 --> 00:20:09,042
アップデートの時機が
計りやすくなります

249
00:20:10,677 --> 00:20:14,781
その際はSwift Package Updateを
実行してください

250
00:20:15,282 --> 00:20:18,719
これはPackage.resolvedを含む―

251
00:20:19,152 --> 00:20:21,755
トップレベルのパッケージです

252
00:20:22,089 --> 00:20:25,993
推移的依存関係に
Package.resolveが含まれる場合

253
00:20:26,093 --> 00:20:28,829
依存関係解決では無視できます

254
00:20:31,031 --> 00:20:33,500
次はパッケージのビルドです

255
00:20:36,437 --> 00:20:40,174
ビルドエンジンは
llbuildを使用しています

256
00:20:40,440 --> 00:20:43,577
ビルドシステムのための
ライブラリです

257
00:20:43,677 --> 00:20:47,881
汎用と再利用可能な
ビルドエンジンに優れ―

258
00:20:48,081 --> 00:20:52,619
高速かつ正確な
増分ビルドが行えます

259
00:20:52,953 --> 00:20:55,889
Xcodeにも採用されています

260
00:20:57,257 --> 00:21:00,961
オープンソースプロジェクトの
一環でもあります

261
00:20:57,257 --> 00:21:00,961
オープンソースプロジェクトの
一環でもあります

262
00:21:03,030 --> 00:21:07,267
すべての依存関係の明言を伴う
独立した環境では―

263
00:21:09,503 --> 00:21:16,043
複雑な条件を有するパッケージでも
ビルドと使用が保証されます

264
00:21:16,977 --> 00:21:19,580
全パッケージを
インストールせず

265
00:21:19,680 --> 00:21:24,318
依存関係が明らかな
パッケージが使われます

266
00:21:25,052 --> 00:21:27,354
また サンドボックス化を活用し

267
00:21:27,488 --> 00:21:32,493
任意の場所への
書き込みを防いでいます

268
00:21:33,460 --> 00:21:39,466
また任意のコマンドと
シェルスクリプトを禁じています

269
00:21:40,134 --> 00:21:43,103
ビルドグラフが
理解しやすくなり

270
00:21:43,704 --> 00:21:49,843
すべての入力と出力が
高速で正確な増分ビルドを行えます

271
00:21:50,077 --> 00:21:53,614
すべての依存関係が
確認できるからです

272
00:21:55,682 --> 00:21:59,853
SwiftPMはテストも
サポートしています

273
00:21:59,987 --> 00:22:03,724
XCTestのフレームワークに
基づいています

274
00:21:59,987 --> 00:22:03,724
XCTestのフレームワークに
基づいています

275
00:22:05,359 --> 00:22:09,229
並行テストなので
結果はすぐに出ます

276
00:22:10,197 --> 00:22:12,032
テストのフィルタで―

277
00:22:12,432 --> 00:22:16,303
サブセットを実行し
反復して使えます

278
00:22:18,639 --> 00:22:22,276
ワークフローの
特性を考えるのは

279
00:22:22,376 --> 00:22:26,246
コマンドラインで
すべての開発を行うためです

280
00:22:27,614 --> 00:22:29,750
例えばエディットモードです

281
00:22:30,150 --> 00:22:36,156
特定のパッケージの
推移的な発生を上書きできます

282
00:22:37,191 --> 00:22:39,459
一時的に編集が可能となり

283
00:22:40,394 --> 00:22:43,630
依存関係がテストできます

284
00:22:43,730 --> 00:22:47,201
グラフの全パッケージの
転送は要りません

285
00:22:51,271 --> 00:22:56,610
ブランチ依存関係は
厳密なバージョン要件が不要です

286
00:22:56,710 --> 00:23:00,447
複数のパッケージを作る際に
便利です

287
00:22:56,710 --> 00:23:00,447
複数のパッケージを作る際に
便利です

288
00:23:01,181 --> 00:23:03,016
開発段階の機能なので

289
00:23:03,116 --> 00:23:08,222
タグの公開前には
バージョン依存関係を変更します

290
00:23:10,891 --> 00:23:15,195
ローカルパッケージは
パッケージを直接使用でき

291
00:23:15,295 --> 00:23:17,631
Gitリポジトリは使用しません

292
00:23:17,731 --> 00:23:21,535
これで作成の初期段階に複数の―

293
00:23:22,402 --> 00:23:25,339
パッケージを使うことができます

294
00:23:28,141 --> 00:23:33,247
最後にSwiftPMとSwift言語の
新バージョンについてです

295
00:23:35,115 --> 00:23:41,488
Package.swiftの
マニフェストAPIも新しくなります

296
00:23:41,688 --> 00:23:43,991
既存のAPIも使えます

297
00:23:44,224 --> 00:23:49,563
新しいソースツールを活用する際
アップデートは不要ですし

298
00:23:49,696 --> 00:23:52,900
既存のパッケージにも
アクセスできます

299
00:23:53,467 --> 00:23:56,437
新しいAPIでは独立して

300
00:23:56,537 --> 00:24:00,908
ソースコードの言語の
バージョン変更ができます

301
00:23:56,537 --> 00:24:00,908
ソースコードの言語の
バージョン変更ができます

302
00:24:03,010 --> 00:24:07,114
どのバージョンかを確認するには

303
00:24:07,414 --> 00:24:13,187
Package.swiftの一番上にある
swift-tools-versionを使います

304
00:24:13,353 --> 00:24:17,291
マニフェストを
処理するために必要な―

305
00:24:17,858 --> 00:24:20,527
バージョンを表示しています

306
00:24:22,296 --> 00:24:29,036
各パッケージは必要なSwift言語の
バージョンを宣言します

307
00:24:29,436 --> 00:24:33,607
コンパイラディレクティブを
使って

308
00:24:33,707 --> 00:24:37,344
複数のバージョンを
選ぶことができます

309
00:24:37,711 --> 00:24:42,249
異なる言語バージョンを
混ぜることも可能です

310
00:24:44,685 --> 00:24:47,287
現状のSwiftPMの話をしました

311
00:24:47,387 --> 00:24:52,826
次はリックから
未来の指針を話してもらいましょう

312
00:24:53,660 --> 00:24:58,932
(拍手)

313
00:24:59,032 --> 00:25:00,234
ありがとう ボリス

314
00:24:59,032 --> 00:25:00,234
ありがとう ボリス

315
00:25:01,168 --> 00:25:06,373
ボリスは現状をお話ししましたが
次は未来の可能性です

316
00:25:06,473 --> 00:25:10,043
SwiftPMは
まだ発展の余地があります

317
00:25:11,411 --> 00:25:13,814
“オープンエボリューション
プロセス”とは

318
00:25:13,914 --> 00:25:18,252
誰でもアイデアを
提供できるということです

319
00:25:18,919 --> 00:25:22,823
我々はいつでも
アイデアをシェアします

320
00:25:22,923 --> 00:25:25,492
計画とは無関係です

321
00:25:25,893 --> 00:25:30,297
SwiftPMの可能性を
知ってもらいたいのです

322
00:25:30,564 --> 00:25:36,703
フィードバックやコメント
独自のアイデアをお待ちしています

323
00:25:38,438 --> 00:25:42,309
これから４つのテーマで
お話しします

324
00:25:43,143 --> 00:25:48,081
SwiftPMを他のツールと
統合させること

325
00:25:48,715 --> 00:25:53,053
パッケージの新バージョンを
発表し展開させること

326
00:25:53,620 --> 00:25:57,958
現段階以上に複雑な
パッケージをサポートすること

327
00:25:58,392 --> 00:26:02,963
そしてパッケージの
可能性と信頼性です

328
00:25:58,392 --> 00:26:02,963
そしてパッケージの
可能性と信頼性です

329
00:26:04,698 --> 00:26:10,604
コマンドライン体験は重要なので
他のツールとの統合が必要です

330
00:26:10,704 --> 00:26:14,608
例えば開発環境や自動化などでです

331
00:26:15,909 --> 00:26:20,814
すでにアーキテクチャで
基礎作りはしました

332
00:26:21,248 --> 00:26:23,851
現在は安定したAPIがありません

333
00:26:23,951 --> 00:26:27,387
しかしSwiftPMの変化に
準じたツールは

334
00:26:27,488 --> 00:26:31,058
現在でも選定と追加が可能です

335
00:26:32,593 --> 00:26:36,096
デベロッパツールにおける
SwiftPMのサポート構築について

336
00:26:36,196 --> 00:26:38,665
意見を聞かせてください

337
00:26:38,766 --> 00:26:43,470
SwiftPMをエコシステムにと
考えています

338
00:26:45,339 --> 00:26:48,242
最近 あるリクエストがありました

339
00:26:48,342 --> 00:26:53,313
Package.swiftマニフェストを
ユーザからではなく

340
00:26:53,413 --> 00:26:57,317
自動化されたツールで
編集する方法についてです

341
00:26:57,651 --> 00:27:00,721
SwiftPMで
サポートできると考えました

342
00:26:57,651 --> 00:27:00,721
SwiftPMで
サポートできると考えました

343
00:27:00,821 --> 00:27:03,457
使うのはlibSyntaxです

344
00:27:03,957 --> 00:27:08,262
オープンソースプロジェクトで
開発されたライブラリです

345
00:27:08,362 --> 00:27:14,635
他のツールからSwiftの構文の
理解と操作がしやすくなります

346
00:27:15,969 --> 00:27:21,308
Package.swiftマニフェストには
宣言型構文をお勧めします

347
00:27:21,408 --> 00:27:23,343
その理由の１つが

348
00:27:23,510 --> 00:27:27,114
SwiftPMがマニフェストを
理解しやすくなること

349
00:27:27,214 --> 00:27:29,182
これで自動的に編集されます

350
00:27:29,283 --> 00:27:32,753
例えば依存関係やターゲットを
加えることです

351
00:27:35,389 --> 00:27:40,961
新バージョンの公開と
製品の展開を手助けする―

352
00:27:41,061 --> 00:27:42,930
機能も追加できます

353
00:27:44,131 --> 00:27:49,369
今は公開する際
Gitを手動でタグ付けしています

354
00:27:49,837 --> 00:27:54,408
タグを検査したい場合も
Gitを直接使用します

355
00:27:55,275 --> 00:27:58,645
これを自動化する機能が
追加できます

356
00:27:58,745 --> 00:28:03,750
ハウスキーピング処理や検証
その他の補助的なタスクは

357
00:27:58,745 --> 00:28:03,750
ハウスキーピング処理や検証
その他の補助的なタスクは

358
00:28:03,851 --> 00:28:06,386
ワークフローに組み込まれます

359
00:28:07,988 --> 00:28:14,394
セマンティックバージョニングを
正しく維持する機能も追加できます

360
00:28:15,062 --> 00:28:19,933
SwiftPMが新バージョンでの
APIの相違点を分析でき

361
00:28:20,033 --> 00:28:24,004
コンパイル時間に互換しない
変更点を探せます

362
00:28:24,104 --> 00:28:28,041
これによりバージョンの
アップデートを推奨できます

363
00:28:31,111 --> 00:28:37,184
他にもパッケージの製品を
配置しやすくできます

364
00:28:37,818 --> 00:28:42,623
ライブラリとのリンクや
製品のレイアウトを

365
00:28:42,723 --> 00:28:46,760
カスタマイズしたい
場合があるかもしれません

366
00:28:47,327 --> 00:28:53,400
または何のパッケージかを示す
バージョン情報を含みたい時や

367
00:28:53,967 --> 00:29:00,174
製品内のパッケージ情報に関する
コンテキストを使いたい時もです

368
00:28:53,967 --> 00:29:00,174
製品内のパッケージ情報に関する
コンテキストを使いたい時もです

369
00:29:00,407 --> 00:29:04,044
SwiftPMは
これらのニーズに応えます

370
00:29:06,113 --> 00:29:08,448
様々なものがビルドできますが

371
00:29:08,549 --> 00:29:13,754
さらに複雑なパッケージを
サポートしたいと思っています

372
00:29:15,122 --> 00:29:18,859
最大の課題は
リソースのサポートです

373
00:29:18,959 --> 00:29:22,196
画像やデータファイルなどが
ある場合―

374
00:29:22,296 --> 00:29:26,300
製品とともに
まとめることができません

375
00:29:27,000 --> 00:29:31,271
コアライブラリが
この春 APIを追加しました

376
00:29:31,371 --> 00:29:34,641
リソースの
クロスプラットフォーム化です

377
00:29:34,741 --> 00:29:38,378
SwiftPMも
このAPIを適用できます

378
00:29:40,380 --> 00:29:45,552
ユーザの中には
コンパイラフラグの指定など

379
00:29:45,652 --> 00:29:49,056
現在は使用できない
機能を求める人もいます

380
00:29:49,523 --> 00:29:53,727
安定したビルド設定モデルが
必要です

381
00:29:53,827 --> 00:29:57,164
可能性としては
条件付きの設定や

382
00:29:57,264 --> 00:30:01,869
パッケージが得る設定値を
制御する設定などです

383
00:29:57,264 --> 00:30:01,869
パッケージが得る設定値を
制御する設定などです

384
00:30:03,570 --> 00:30:08,242
SwiftPMは独立した
ビルド環境にあります

385
00:30:09,109 --> 00:30:11,445
任意のシェルスクリプトは
実行不能です

386
00:30:11,545 --> 00:30:15,382
しかし ある程度の
カスタマイズは必要です

387
00:30:15,482 --> 00:30:19,253
ユーザはカスタム言語や
プロセッサを使いますし

388
00:30:19,353 --> 00:30:22,189
自らの実装を実行したいでしょう

389
00:30:22,289 --> 00:30:25,559
他の作業をする場合も
あるかもしれません

390
00:30:26,760 --> 00:30:29,196
SwiftPMなら可能でしょう

391
00:30:29,296 --> 00:30:34,701
新しいツールを
ビルド工程に含めたとしてもです

392
00:30:34,835 --> 00:30:38,305
この場合に確認することがあります

393
00:30:38,405 --> 00:30:41,341
新しいツールを加えたら

394
00:30:41,442 --> 00:30:45,212
出入力の依存関係を
正しく宣言します

395
00:30:45,312 --> 00:30:51,385
それにより正確な増分と
並行化可能なビルドを保てます

396
00:30:53,821 --> 00:31:00,727
最後にパッケージの可能性と信頼性
そして管理についてお話しします

397
00:30:53,821 --> 00:31:00,727
最後にパッケージの可能性と信頼性
そして管理についてお話しします

398
00:31:02,362 --> 00:31:07,935
GitはTLSのような
セキュリティ構造をサポートし

399
00:31:08,035 --> 00:31:12,072
リモートリポジトリへの
接続を確認しています

400
00:31:12,239 --> 00:31:18,345
それでも不正アクセスされ
悪質なコンテンツが置かれる場合も

401
00:31:18,712 --> 00:31:24,151
これは第三者のコードを使用する際
想定すべきリスクです

402
00:31:24,284 --> 00:31:29,389
しかしSwiftPMは
セキュリティ機能をビルドし

403
00:31:29,490 --> 00:31:33,327
所望のパッケージコンテンツを
取得できます

404
00:31:35,696 --> 00:31:40,901
またビルド中のPackage.swift
マニフェスト評価の―

405
00:31:41,001 --> 00:31:45,572
エスケープや書き込み
ネットワークアクセスを回避します

406
00:31:45,672 --> 00:31:49,877
現在はmacOSの
サンドボックス技術を使用

407
00:31:49,977 --> 00:31:53,480
他のプラットフォームも
強化を考えています

408
00:31:55,816 --> 00:31:58,719
ユーザはフォークの
しやすさを求めます

409
00:31:58,819 --> 00:32:03,724
一方のパッケージを
カスタマイズしたい場合や

410
00:31:58,819 --> 00:32:03,724
一方のパッケージを
カスタマイズしたい場合や

411
00:32:03,991 --> 00:32:10,063
パッケージを取得したオリジナルの
URLをオーバーライドして

412
00:32:10,164 --> 00:32:14,234
自分で
コントロールしたい場合もあります

413
00:32:14,334 --> 00:32:17,838
オリジナルに頼る
必要がないようにです

414
00:32:20,240 --> 00:32:24,244
最終的に
インデックスを持つでしょう

415
00:32:24,545 --> 00:32:30,517
ネームスペースの提供や
パッケージの発見のしやすさに加え

416
00:32:30,684 --> 00:32:36,423
パッケージの品質測定法も
加えたいと思っています

417
00:32:36,523 --> 00:32:41,495
またはパッケージの信頼性を
精査する方法です

418
00:32:43,730 --> 00:32:47,534
これらは可能性の一部に過ぎません

419
00:32:47,634 --> 00:32:53,674
興味があればフィードバックや
アイデアなどをお待ちしています

420
00:32:53,774 --> 00:32:57,745
SwiftPMを
最高のツールにしましょう

421
00:32:59,012 --> 00:33:04,785
そのためにSwiftの
オープンソースの工程を説明します

422
00:32:59,012 --> 00:33:04,785
そのためにSwiftの
オープンソースの工程を説明します

423
00:33:05,986 --> 00:33:10,724
SwiftPMはオープンソース
プロジェクトの一環で

424
00:33:10,824 --> 00:33:16,763
swift.orgにコミュニティと
プロセスの詳細があります

425
00:33:18,799 --> 00:33:22,469
Swift言語の
エボリューションプロセスでは

426
00:33:22,569 --> 00:33:25,172
誰でも試案を提出できます

427
00:33:25,272 --> 00:33:29,943
SwiftPMの新しい機能や
変更についてです

428
00:33:31,378 --> 00:33:35,749
試案を完成させて提出する前に
フォーラムの―

429
00:33:35,849 --> 00:33:41,054
Package Managerに訪れ
アイデアをシェアしてください

430
00:33:41,155 --> 00:33:44,925
フィードバックで
アイデアがさらに磨かれます

431
00:33:46,560 --> 00:33:50,197
もう少し控えめに
参加したいならば

432
00:33:50,297 --> 00:33:54,401
bugs.swift.orgに
多くのアイデアがあります

433
00:33:54,501 --> 00:33:59,139
特にStarterBugの
タグ付けバグを見てください

434
00:33:59,239 --> 00:34:04,912
SwiftPMはSwift言語なので
チェックは簡単です

435
00:33:59,239 --> 00:34:04,912
SwiftPMはSwift言語なので
チェックは簡単です

436
00:34:06,313 --> 00:34:08,982
SwiftPM使用時に
バグを見つけたら

437
00:34:09,083 --> 00:34:12,219
bugs.swift.orgに
ファイルしてください

438
00:34:12,319 --> 00:34:14,755
トラッキングも可能です

439
00:34:16,657 --> 00:34:22,161
SwiftPMはSwiftプロジェクトの
恩恵を得ています

440
00:34:22,262 --> 00:34:27,501
ポーリングが自動的にビルドされ
テストが実行されます

441
00:34:27,668 --> 00:34:30,938
SwiftPMのコードには
立派なテストがあり―

442
00:34:31,038 --> 00:34:33,974
その基礎構造が役立ちます

443
00:34:35,576 --> 00:34:40,313
最新版はSnapshotsのToolchainから
ダウンロードできます

444
00:34:40,414 --> 00:34:44,451
swift.orgで定期的に
アップデートしています

445
00:34:46,687 --> 00:34:49,822
コミュニティの成長は
喜ばしいことです

446
00:34:49,922 --> 00:34:55,195
180人以上がバグ修正や
新しい機能に貢献しています

447
00:34:55,562 --> 00:34:58,799
エコシステムも成長を続けています

448
00:34:58,899 --> 00:35:03,537
クロスプラットフォームやGitHubの
パッケージとも連動し

449
00:34:58,899 --> 00:35:03,537
クロスプラットフォームやGitHubの
パッケージとも連動し

450
00:35:04,004 --> 00:35:10,444
皆は製品に集中し 他は
パッケージ依存関係に任せられます

451
00:35:11,345 --> 00:35:16,950
未だ発展段階ではありますが
２点ほど試してみてください

452
00:35:17,051 --> 00:35:20,988
コマンドラインユーティリティと
ライブラリです

453
00:35:21,255 --> 00:35:23,924
Swiftをサーバで成長させるのです

454
00:35:24,725 --> 00:35:29,463
サーバ側では
SwiftPMを頻繁に使用しています

455
00:35:29,563 --> 00:35:32,099
ウェブやバックエンドの開発の―

456
00:35:32,199 --> 00:35:35,969
フレームワークとともに
成長しています

457
00:35:36,203 --> 00:35:43,043
これらのクロスプラットフォームの
発展にSwift言語は最適です

458
00:35:44,278 --> 00:35:51,151
コマンドラインユーティリティや
ライブラリの作成でも構いません

459
00:35:51,552 --> 00:35:57,324
始めは“swift package init”を
実行するだけです

460
00:35:57,958 --> 00:36:02,529
新しいことに挑戦したければ
試してみてください

461
00:35:57,958 --> 00:36:02,529
新しいことに挑戦したければ
試してみてください

462
00:36:02,963 --> 00:36:08,102
貢献いただけるなら
フォーラムで話し合いましょう

463
00:36:09,002 --> 00:36:13,607
話をしたければ
明日の午後３時にラボにいます

464
00:36:14,708 --> 00:36:20,147
これからコミュニティで
一緒に何ができるか楽しみです

465
00:36:20,514 --> 00:36:26,119
あなたの貢献が助けとなり
コミュニティにも好影響を与えます

466
00:36:26,687 --> 00:36:29,356
ありがとうございました

467
00:36:29,590 --> 00:36:33,827
(拍手)