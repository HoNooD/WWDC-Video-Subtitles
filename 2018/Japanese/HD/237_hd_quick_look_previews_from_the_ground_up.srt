
1
00:00:07,140 --> 00:00:16,717
（音楽）

2
00:00:18,252 --> 00:00:23,690
本日のセッションでは
Quick Lookを説明します

3
00:00:24,124 --> 00:00:30,330
私 ラファエルとマキシムが
ガイド役を務めます

4
00:00:33,100 --> 00:00:37,271
まず Quick Lookの
概要から始め―

5
00:00:37,838 --> 00:00:43,744
Quick Look Preview Controllerの
アプリケーションへの導入方法

6
00:00:44,444 --> 00:00:48,749
更に Quick Look Previewの
カスタム化と

7
00:00:49,816 --> 00:00:53,453
カスタムサムネールについて
説明します

8
00:00:55,522 --> 00:00:58,125
では概要から始めましょう

9
00:01:00,460 --> 00:01:06,400
Quick Lookで ファイルが
簡単にプレビューできます

10
00:01:07,000 --> 00:01:13,874
マルチコア機能を提供する
iOSフレームワークにより

11
00:01:14,975 --> 00:01:19,947
様々な形式のファイルを
プレビュー表示できるのです

12
00:01:21,215 --> 00:01:26,019
プレビューのカスタマイズも
可能なうえに

13
00:01:27,321 --> 00:01:32,659
カスタムファイルの
サムネールも作成できます

14
00:01:35,863 --> 00:01:40,100
様々なアプリケーションにも
対応可能です

15
00:01:41,301 --> 00:01:46,473
たとえばクラウド上の
ファイルの内容

16
00:01:51,011 --> 00:01:54,781
またはメールやメモに
添付されたファイル

17
00:02:01,288 --> 00:02:05,926
メッセージで送った
写真や動画も このとおり

18
00:02:11,765 --> 00:02:13,567
本セッションは―

19
00:02:13,667 --> 00:02:17,804
共通機能を実装せず
アプリケーションによる―

20
00:02:17,905 --> 00:02:24,011
簡単なファイルの表示方法を
知りたい方にお薦めです

21
00:02:25,045 --> 00:02:30,117
iOSでサポートしていない
カスタムファイル形式も

22
00:02:30,217 --> 00:02:35,956
サムネイルやプレビューが
正しく表示されるのか？

23
00:02:36,056 --> 00:02:38,592
このあと この点も含め―

24
00:02:39,826 --> 00:02:46,967
iOSが初めての方にも
分かりやすく ご説明します

25
00:02:49,336 --> 00:02:54,508
ところで 昨年の講演は
ご覧になりましたか？

26
00:02:54,608 --> 00:02:57,611
“Building Great Document-
based Apps in iOS”では

27
00:02:57,711 --> 00:03:01,448
UIDocumentBrowserView
Controllerを紹介しました

28
00:02:57,711 --> 00:03:01,448
UIDocumentBrowserView
Controllerを紹介しました

29
00:03:01,548 --> 00:03:06,486
Quick Lookについても
取り上げています

30
00:03:07,821 --> 00:03:11,525
今年は文書ブラウザの
セッションもあり

31
00:03:11,625 --> 00:03:17,064
iOS上でのファイル操作に
興味がある方にお薦めです

32
00:03:21,201 --> 00:03:23,770
Quick Lookの登場は古く

33
00:03:23,871 --> 00:03:26,840
iOS 4 SDKと同時期です

34
00:03:28,041 --> 00:03:31,745
主要なクラスは
QLPreviewControllerで

35
00:03:31,912 --> 00:03:34,781
文書のプレビューを
制御します

36
00:03:36,250 --> 00:03:39,620
データソースや
デリゲートのパターンは

37
00:03:39,786 --> 00:03:42,956
UIKitでも おなじみですね

38
00:03:44,691 --> 00:03:50,531
そのAPIで
滑らかなズームも可能です

39
00:03:54,601 --> 00:03:56,436
Quick Lookの意義とは？

40
00:03:56,603 --> 00:04:02,676
ファイルやメールで同様の
ユースケースを経験済みなら

41
00:03:56,603 --> 00:04:02,676
ファイルやメールで同様の
ユースケースを経験済みなら

42
00:04:03,010 --> 00:04:05,145
お分かりだと思います

43
00:04:05,979 --> 00:04:08,849
非常に便利なツールです

44
00:04:10,250 --> 00:04:12,886
一般的な
ファイル形式に準じ

45
00:04:13,420 --> 00:04:19,892
iOS純正アプリケーションと
同様の使い心地を提供

46
00:04:21,628 --> 00:04:25,165
どのデバイスでも
高パフォーマンスを見せ

47
00:04:25,265 --> 00:04:28,535
アニメーションや人の動きも
滑らかです

48
00:04:30,070 --> 00:04:35,242
発信元が不確かな場合も
心配は要りません

49
00:04:35,342 --> 00:04:40,080
Quick Lookが
アプリケーションを守ります

50
00:04:44,151 --> 00:04:46,720
対応するファイル様式です

51
00:04:47,321 --> 00:04:50,324
汎用性の高いことが
分かります

52
00:04:50,424 --> 00:04:54,761
画像 音声 ビデオなど
メディアファイルや―

53
00:04:54,862 --> 00:05:00,033
PDFやOffice文書にも
対応します

54
00:04:54,862 --> 00:05:00,033
PDFやOffice文書にも
対応します

55
00:05:00,634 --> 00:05:05,606
ZIPアーカイブ内の
ファイルでも

56
00:05:05,706 --> 00:05:09,977
プレビューや
シェアができます

57
00:05:11,445 --> 00:05:15,482
カスタムファイルにも
対応しています

58
00:05:16,083 --> 00:05:21,455
この新しい機能拡張は
昨年 発表したばかりです

59
00:05:21,889 --> 00:05:24,625
Preview Extensionを使えば

60
00:05:24,725 --> 00:05:29,296
カスタムファイルの
プレビューも作成できます

61
00:05:29,496 --> 00:05:32,432
詳細は のちほど話します

62
00:05:33,467 --> 00:05:35,536
今年発表するiOS 12には

63
00:05:35,636 --> 00:05:40,307
AR用の新フォーマット
USDZが追加されました

64
00:05:40,407 --> 00:05:42,743
わずか数行のコードで

65
00:05:42,843 --> 00:05:47,648
アプリケーションでの
AR体験が可能となります

66
00:05:48,682 --> 00:05:51,285
次は
ユーザーエクスペリエンス

67
00:05:51,518 --> 00:05:53,820
Quick Lookはモバイルで

68
00:05:53,921 --> 00:05:59,226
ファイル形式ごとに
最適な表示を行います

69
00:06:00,427 --> 00:06:06,266
プレビュー中の画像を
拡大縮小でき―

70
00:06:07,000 --> 00:06:10,871
下にスワイプすれば
終了できます

71
00:06:11,939 --> 00:06:17,678
サイドバーのサムネールで
PDFの閲覧も簡単

72
00:06:18,278 --> 00:06:23,417
スプレッドシートでは
ページの切り替えも可能です

73
00:06:24,351 --> 00:06:29,623
スクラバー機能でメディア
ファイル内を移動できます

74
00:06:29,723 --> 00:06:31,091
すごいでしょう？

75
00:06:32,526 --> 00:06:38,599
おなじみのジェスチャーで
簡単に操作できます

76
00:06:43,303 --> 00:06:46,507
一般的な使い方を
挙げてみます

77
00:06:47,174 --> 00:06:51,578
たとえば写真を
拡大させたり

78
00:06:52,246 --> 00:06:57,084
フリックして写真を
次々と見ることができます

79
00:06:57,784 --> 00:07:03,957
下位のフレームワークを
使わずに音声や動画を再生し

80
00:06:57,784 --> 00:07:03,957
下位のフレームワークを
使わずに音声や動画を再生し

81
00:07:05,792 --> 00:07:12,065
ユーザ同意書のPDFも
スクロールやズームできます

82
00:07:12,833 --> 00:07:14,468
活用しましょう

83
00:07:16,837 --> 00:07:20,841
しかし 備わっていない
機能もあります

84
00:07:21,875 --> 00:07:26,246
プレビュー専門で
編集機能がありません

85
00:07:26,680 --> 00:07:28,815
画像の編集や

86
00:07:28,916 --> 00:07:33,320
PDF文書の管理や
動画のトリミングが必要なら

87
00:07:33,453 --> 00:07:35,689
別の方法をお試しください

88
00:07:38,792 --> 00:07:42,963
また 動画の高度な
再生方法が必要であれば

89
00:07:43,230 --> 00:07:48,302
AVPlayerの使用を
推奨します

90
00:07:49,069 --> 00:07:55,442
Quick Lookは画像を
フルスクリーン表示するため

91
00:07:55,576 --> 00:08:00,714
他のビューと合わせて
レイアウトできません

92
00:07:55,576 --> 00:08:00,714
他のビューと合わせて
レイアウトできません

93
00:08:00,814 --> 00:08:06,453
UIImageView AVPlayer
WKWebViewなどを使いましょう

94
00:08:08,755 --> 00:08:14,194
更にビュー階層は
カスタマイズできません

95
00:08:14,461 --> 00:08:19,366
プレビューの上位に
ビューは追加できないのです

96
00:08:19,666 --> 00:08:21,435
適応外です

97
00:08:26,106 --> 00:08:32,679
それでは次に APIの
使い方をご説明しましょう

98
00:08:37,217 --> 00:08:39,486
文書を表示するには

99
00:08:39,620 --> 00:08:43,756
QLPreviewControllerの
インスタンスを作成します

100
00:08:43,890 --> 00:08:46,560
UIViewControllerと
基本は同じです

101
00:08:48,028 --> 00:08:52,466
次にプレビューする
文書を指定するため

102
00:08:52,599 --> 00:08:55,169
データソースを指定します

103
00:08:55,669 --> 00:09:00,908
データソースはプロトコルに
準拠したオブジェクトです

104
00:08:55,669 --> 00:09:00,908
データソースはプロトコルに
準拠したオブジェクトです

105
00:09:01,141 --> 00:09:03,410
追って確認を

106
00:09:05,479 --> 00:09:10,250
最後にViewControllerを
表示します

107
00:09:14,655 --> 00:09:17,825
このように表示されます

108
00:09:18,325 --> 00:09:23,330
QLPreviewController
プロトコルに準拠するのに

109
00:09:23,964 --> 00:09:26,633
必要な手順は２つです

110
00:09:26,767 --> 00:09:32,372
まず プレビューしたい
項目の個数を返します

111
00:09:32,906 --> 00:09:39,346
項目が２つ以上ある場合
スワイプ機能なども使えます

112
00:09:41,081 --> 00:09:45,552
次に 先ほど返した
項目の個数に応じて

113
00:09:45,686 --> 00:09:48,689
QLPreviewItemが
求められます

114
00:09:50,691 --> 00:09:52,993
QLPreviewItemは―

115
00:09:53,393 --> 00:09:57,164
文書を抽象化する
プロトコルです

116
00:09:57,431 --> 00:10:03,737
文書の保存先の
URLを指定します

117
00:09:57,431 --> 00:10:03,737
文書の保存先の
URLを指定します

118
00:10:04,138 --> 00:10:09,009
ナビゲーションバーの
タイトルも指定できます

119
00:10:10,577 --> 00:10:16,116
文書を表すクラスは QLPreviewItem
プロトコルに準拠すべきです

120
00:10:16,517 --> 00:10:22,289
NSURLはこのプロトコルに
既に準拠しています

121
00:10:22,556 --> 00:10:27,427
タイトルのカスタマイズが
必要なければ

122
00:10:27,528 --> 00:10:31,398
NSURLインスタンスを
返すだけで使えます

123
00:10:33,300 --> 00:10:35,335
例を見てみましょう

124
00:10:36,370 --> 00:10:40,007
この例では
ViewControllerが

125
00:10:40,107 --> 00:10:43,544
QLPreviewControllerの
データソースです

126
00:10:44,478 --> 00:10:48,582
“extension”内の
データソースに準拠します

127
00:10:48,715 --> 00:10:51,919
実行する手順は
２つだけです

128
00:10:53,253 --> 00:10:57,758
URLの配列をモデルとして
使用します

129
00:10:57,925 --> 00:11:04,565
contorollerメソッド中の
URLの個数を返します

130
00:10:57,925 --> 00:11:04,565
contorollerメソッド中の
URLの個数を返します

131
00:11:05,299 --> 00:11:09,336
そして インデックスで
参照されている―

132
00:11:09,469 --> 00:11:14,308
個々のURLも返します

133
00:11:18,745 --> 00:11:23,684
これでプレビューする
ファイルの設定は完了です

134
00:11:23,817 --> 00:11:26,753
ViewControllerを
表示させます

135
00:11:27,354 --> 00:11:29,189
その方法は２つ

136
00:11:29,523 --> 00:11:34,261
現在のコンテキスト上に
モーダル表示をするか―

137
00:11:34,695 --> 00:11:39,099
UINavigationControllerに
プッシュします

138
00:11:39,700 --> 00:11:44,905
状況に応じて適した方法を
選択してください

139
00:11:45,272 --> 00:11:50,110
presentを呼び出すことで
モーダル表示できます

140
00:11:51,912 --> 00:11:55,315
結果はこのように
表示されます

141
00:11:57,117 --> 00:12:02,723
UINavigationControllerに
プッシュする場合は

142
00:11:57,117 --> 00:12:02,723
UINavigationControllerに
プッシュする場合は

143
00:12:02,823 --> 00:12:05,025
pushViewControllerを
使います

144
00:12:08,395 --> 00:12:09,897
このようになります

145
00:12:15,569 --> 00:12:20,274
このクラスのメソッドを
いくつか お見せします

146
00:12:20,974 --> 00:12:26,380
まず プレビューできる
文書であるか知りたい時は

147
00:12:26,647 --> 00:12:29,516
canPreviewItemクラスを
使用します

148
00:12:30,350 --> 00:12:35,756
文書がサポートされている
ファイル形式か

149
00:12:35,856 --> 00:12:39,993
プレビュー機能に対応なら
trueが返されます

150
00:12:42,129 --> 00:12:44,665
データソースは
説明済みです

151
00:12:46,800 --> 00:12:52,005
reloadDataで文書の
リストを再び読み込みます

152
00:12:52,239 --> 00:12:56,944
PreviewControllerの
表示中に変更があれば

153
00:12:57,110 --> 00:12:59,713
このメソッドを実行します

154
00:13:01,748 --> 00:13:07,521
プレビューしている文書の
インデックスを取得する時は

155
00:13:07,921 --> 00:13:11,725
スワイプ機能のことを
思い出してください

156
00:13:11,925 --> 00:13:14,828
currentPreviewItemIndex
変数を使います

157
00:13:15,596 --> 00:13:18,098
ゲッターとセッターの
両方として使います

158
00:13:18,465 --> 00:13:23,070
Quick Lookで表示したい
項目の値を―

159
00:13:23,670 --> 00:13:25,606
インデックスに指定します

160
00:13:28,342 --> 00:13:32,746
最後に デリゲートについて
説明します

161
00:13:33,146 --> 00:13:36,850
プロトコルを
見てみましょう

162
00:13:40,921 --> 00:13:47,060
Quick Lookの
詳細な動作が制御できます

163
00:13:47,728 --> 00:13:50,931
表示イベントにも
反応可能になります

164
00:13:51,298 --> 00:13:56,003
ちなみにデリゲート機能は
オプションです

165
00:13:56,236 --> 00:14:00,974
必要がなければ
そのままにしておきましょう

166
00:13:56,236 --> 00:14:00,974
必要がなければ
そのままにしておきましょう

167
00:14:02,676 --> 00:14:05,946
プロトコルは
メソッドの集合体です

168
00:14:06,313 --> 00:14:11,985
この２つのメソッドは
Quick Lookの終了直前と

169
00:14:12,519 --> 00:14:15,122
終了直後に反応します

170
00:14:17,991 --> 00:14:23,564
ViewControllerの更新に
使うことができます

171
00:14:27,167 --> 00:14:32,206
PreviewControllerは
項目メソッドのURLを開き

172
00:14:32,406 --> 00:14:37,578
文章に含まれるリンクの
フォローを防ぎます

173
00:14:38,145 --> 00:14:42,749
これにより ユーザが
URLや電話番号をタップして

174
00:14:42,850 --> 00:14:47,154
アプリケーションから
離れることも防げます

175
00:14:49,523 --> 00:14:54,728
QLPreviewControllerDelegate
プロトコルでは

176
00:14:54,828 --> 00:15:01,034
表示と非表示のズームを
滑らかに見せられます

177
00:14:54,828 --> 00:15:01,034
表示と非表示のズームを
滑らかに見せられます

178
00:15:01,735 --> 00:15:06,306
メソッドを使って
タップしたサムネールが

179
00:15:06,507 --> 00:15:10,511
拡大表示されるように
設定できます

180
00:15:13,046 --> 00:15:18,719
メールに添付された
写真をタップするだけで

181
00:15:20,053 --> 00:15:22,523
フルスクリーン表示します

182
00:15:25,425 --> 00:15:31,164
画像のクロスフェードも
非常に簡単に設定できます

183
00:15:32,299 --> 00:15:35,903
これらの方法で
デリゲートを実装すると

184
00:15:36,103 --> 00:15:40,507
拡大縮小に必要な情報を
要求されます

185
00:15:41,041 --> 00:15:46,713
基本的に表示や非表示の時の
アニメーションの―

186
00:15:46,880 --> 00:15:49,650
矩形領域の情報です

187
00:15:51,151 --> 00:15:56,356
この際 サムネールの
フレームと画像を与えるか

188
00:15:58,125 --> 00:16:01,195
または
より好ましい方法として

189
00:15:58,125 --> 00:16:01,195
または
より好ましい方法として

190
00:16:01,461 --> 00:16:06,366
サムネールをビューとして
返すことができます

191
00:16:06,900 --> 00:16:13,173
この方法なら座標を
気にする必要がなく簡単です

192
00:16:17,144 --> 00:16:18,846
このようになります

193
00:16:20,013 --> 00:16:24,318
フルスクリーンへの移行を
ご覧ください

194
00:16:26,119 --> 00:16:31,425
それではこれから
デモをお見せしましょう

195
00:16:33,160 --> 00:16:37,164
これはiOSの
プロジェクトですが

196
00:16:37,264 --> 00:16:42,369
口で説明するより 実際に
デモを見てみましょう

197
00:16:50,477 --> 00:16:54,348
Wildlife Explorerという
アプリケーションです

198
00:16:54,748 --> 00:16:59,920
グリッド表示された写真は
それぞれが

199
00:17:00,020 --> 00:17:03,490
内容を示すサムネールです

200
00:17:04,258 --> 00:17:09,695
例えばゾウの写真はタップで
フルスクリーン表示され

201
00:17:10,564 --> 00:17:16,136
キリンの写真の場合は
PDFの説明文が表示されます

202
00:17:17,204 --> 00:17:20,741
今は タップが
働かない状態なので

203
00:17:21,208 --> 00:17:24,278
これから修正しましょう

204
00:17:28,348 --> 00:17:31,685
このアプリケーションの
構造はシンプルです

205
00:17:32,586 --> 00:17:36,723
CollectionViewControllerを
使ってグリッド表示します

206
00:17:38,892 --> 00:17:45,532
初期化にあたり
アプリケーションに含める―

207
00:17:45,632 --> 00:17:48,101
文書のURLリストを
取得します

208
00:17:51,205 --> 00:17:55,609
DocumentDataSourceを
このリストで初期化します

209
00:17:56,643 --> 00:17:59,546
UICollectionViewDataSource
プロトコルでは

210
00:17:59,646 --> 00:18:04,451
このオブジェクトが
モデルとして機能します

211
00:17:59,646 --> 00:18:04,451
このオブジェクトが
モデルとして機能します

212
00:18:12,192 --> 00:18:15,963
ここで文書の
個数を返します

213
00:18:16,063 --> 00:18:19,032
文書ごとにセルを作成します

214
00:18:19,132 --> 00:18:22,469
セルの画像が
サムネールとなります

215
00:18:24,204 --> 00:18:27,541
アプリケーションの
核心部分です

216
00:18:28,308 --> 00:18:30,844
それでは セルのタップで

217
00:18:31,245 --> 00:18:35,349
Quick Lookに正しい文書を
表示させる方法です

218
00:18:36,250 --> 00:18:41,722
呼び出すメソッドについては
既に説明したとおりです

219
00:18:46,793 --> 00:18:52,466
QLPreviewControllerを
新たに作り 設定します

220
00:19:03,410 --> 00:19:07,881
これにデータソースを
設定してから

221
00:19:07,981 --> 00:19:13,954
プレビューが正しく
表示されるか確認します

222
00:19:14,054 --> 00:19:17,057
CurrentPreviewItemIndexを
使います

223
00:19:20,094 --> 00:19:24,464
新しいコードに
エラーが表示されました

224
00:19:24,598 --> 00:19:29,736
QLPreviewControllerが
定義されていないため

225
00:19:29,837 --> 00:19:34,107
まず Quick Lookの
インポートが必要です

226
00:19:43,817 --> 00:19:48,789
今度は データソースで
エラーが表示されました

227
00:19:49,156 --> 00:19:52,893
設定したデータソースを

228
00:19:52,993 --> 00:19:59,366
QLPreviewController
プロトコルに準拠させます

229
00:20:00,634 --> 00:20:05,305
DocumentDataSourceの
実装に切り替えます

230
00:20:10,210 --> 00:20:16,683
このオブジェクトには
まだURLしかありません

231
00:20:17,317 --> 00:20:21,021
QLPreviewControllerData
Sourceプロトコルを

232
00:20:21,121 --> 00:20:24,291
実装するプロトコルの
リストに加えます

233
00:20:32,766 --> 00:20:35,469
次は 不足の
メソッドの実装です

234
00:20:44,611 --> 00:20:48,081
CollectionViewと
同じような方法で

235
00:20:48,182 --> 00:20:51,685
DocumentDataSourceを
使います

236
00:20:52,586 --> 00:20:54,588
numberOfPreviewItems
メソッドで

237
00:20:54,688 --> 00:20:59,693
フォルダー内のURLの個数を
返します

238
00:21:01,895 --> 00:21:05,799
個々のQLPreviewItemを
要求されるので

239
00:21:05,899 --> 00:21:09,469
インデックスで参照される
正しいURLを返します

240
00:21:12,539 --> 00:21:18,846
これで PreviewControllerが
実行できるので

241
00:21:19,479 --> 00:21:24,751
didTapCollectionCellで
メソッドの呼び出しを追加

242
00:21:33,460 --> 00:21:35,662
結果を見ましょう

243
00:21:45,906 --> 00:21:49,743
グリッド表示した
写真をタップして

244
00:21:49,843 --> 00:21:54,014
正しい文書を
フルスクリーン表示するか確認

245
00:21:55,382 --> 00:22:00,454
写真だけでなくPDF文書も
普段のジェスチャで

246
00:21:55,382 --> 00:22:00,454
写真だけでなくPDF文書も
普段のジェスチャで

247
00:22:00,554 --> 00:22:03,190
フルスクリーン表示できます

248
00:22:04,157 --> 00:22:08,128
２本の指で画面を
拡大縮小したり

249
00:22:08,629 --> 00:22:11,965
テキストの選択や
コピーもできます

250
00:22:14,101 --> 00:22:19,706
終了後 ピンチすれば
元のグリッド表示に戻ります

251
00:22:23,043 --> 00:22:27,448
ここではモーダル
表示していますが

252
00:22:27,981 --> 00:22:32,419
プッシュスタイルで
表示することもできます

253
00:22:33,420 --> 00:22:37,524
その場合はnavigation
Controllerで

254
00:22:37,624 --> 00:22:41,662
PreviewControllerを
プッシュして表示させます

255
00:22:52,105 --> 00:22:53,273
見てみます

256
00:23:05,085 --> 00:23:08,388
画像の動きが変わりました

257
00:23:08,489 --> 00:23:11,758
モーダル表示同様に
うまく表示されています

258
00:23:16,797 --> 00:23:18,365
順調ですね

259
00:23:18,465 --> 00:23:22,870
最後は
デリゲートについてです

260
00:23:22,970 --> 00:23:27,774
タップしたサムネールが
滑らかなアニメでズームします

261
00:23:28,776 --> 00:23:34,581
まず モーダル表示に戻し
ズームを可能にします

262
00:23:39,052 --> 00:23:44,858
PreviewControllerに
デリゲートとしてselfを設定

263
00:23:53,567 --> 00:23:58,205
QLPreviewControllerDelegateに
selfを準拠させるため

264
00:23:58,305 --> 00:24:00,674
プロトコルのリストに
加えます

265
00:23:58,305 --> 00:24:00,674
プロトコルのリストに
加えます

266
00:24:12,219 --> 00:24:19,459
そしてアニメに どのビューを
ソースとして使うか指定する―

267
00:24:19,560 --> 00:24:23,197
メソッドを
最後に実装します

268
00:24:34,341 --> 00:24:39,680
直前にタップされたセルの
imageViewを―

269
00:24:39,780 --> 00:24:43,150
Quick Lookに返します

270
00:24:44,184 --> 00:24:48,121
ズームアニメーションを
有効にする方法は以上です

271
00:24:48,355 --> 00:24:54,261
表示または閉じる際に
このメソッドを呼び出します

272
00:25:02,970 --> 00:25:08,876
タップしたサムネールの
画像の動きにご注目ください

273
00:25:09,776 --> 00:25:13,247
プレビューを閉じる時も

274
00:25:13,547 --> 00:25:16,550
画像が美しく
切り替わります

275
00:25:22,289 --> 00:25:26,593
デモは終わりです
スライドに戻って

276
00:25:26,860 --> 00:25:29,329
次はマキシムが説明します

277
00:25:29,429 --> 00:25:33,534
プレビューとサムネールの
機能拡張です

278
00:25:34,768 --> 00:25:35,569
ありがとう ラファエル

279
00:25:36,236 --> 00:25:41,842
Quick Lookは簡単に
プレビュー機能を追加できます

280
00:25:42,609 --> 00:25:46,079
更に 独自の
ファイル形式に対して

281
00:25:46,180 --> 00:25:52,085
プレビュー機能を追加する
拡張方法について話します

282
00:25:54,087 --> 00:25:57,958
初期設定されている
ファイル形式のリストがあります

283
00:25:59,560 --> 00:26:02,162
しかし iOS 11以降

284
00:25:59,560 --> 00:26:02,162
しかし iOS 11以降

285
00:26:02,262 --> 00:26:07,201
このリストの拡張が
可能になりました

286
00:26:07,601 --> 00:26:09,803
つまり独自のファイル形式に

287
00:26:09,903 --> 00:26:12,639
プレビューを
追加できるのです

288
00:26:14,241 --> 00:26:17,110
ぜひ カスタムファイルを

289
00:26:17,211 --> 00:26:22,349
Quick Lookを使って
プレビューさせましょう

290
00:26:23,984 --> 00:26:28,956
共有されるファイルに
この機能拡張が役立ちます

291
00:26:29,590 --> 00:26:33,594
特にメールなどで
ファイルを受信し―

292
00:26:33,694 --> 00:26:38,665
内容を簡単に確認したい
場合などです

293
00:26:39,600 --> 00:26:43,904
QLPreviewControllerを
使用していれば

294
00:26:44,004 --> 00:26:50,744
未対応だったファイルも
この機能拡張で見られるのです

295
00:26:53,013 --> 00:26:57,317
プレビュー機能拡張を使った
アプリケーションの一例です

296
00:26:58,085 --> 00:27:02,022
これはAppleのウェブサイト
からダウンロードでき

297
00:26:58,085 --> 00:27:02,022
これはAppleのウェブサイト
からダウンロードでき

298
00:27:02,122 --> 00:27:06,360
カスタマイズして
パーティクルを操作できます

299
00:27:07,227 --> 00:27:10,931
ユーザと このパーティクルを
共有するため―

300
00:27:11,198 --> 00:27:15,602
パーティクルファイル
フォーマットを作成しました

301
00:27:16,570 --> 00:27:18,906
それぞれのファイルは

302
00:27:19,072 --> 00:27:23,277
パーティクルシステムを
表しています

303
00:27:24,444 --> 00:27:29,416
パーティクルファイルを
友人と共有したとします

304
00:27:30,117 --> 00:27:33,921
メッセージやメール添付上で
プレビューすると

305
00:27:34,021 --> 00:27:38,859
期待とは異なり
画面には何も表示されません

306
00:27:40,427 --> 00:27:44,464
しかしプレビュー機能拡張を
実装すると

307
00:27:44,565 --> 00:27:50,904
３次元の美しいパーティクル
システムが表示されます

308
00:27:53,707 --> 00:27:58,946
では プレビュー機能拡張の
作成方法を説明します

309
00:28:00,314 --> 00:28:03,550
まず アプリケーション
プロジェクトに

310
00:28:03,650 --> 00:28:06,053
新規ターゲットを追加します

311
00:28:06,854 --> 00:28:11,558
ここでQuick Look Preview
Extensionを選択します

312
00:28:13,961 --> 00:28:18,532
すると複数のファイルが
作成されます

313
00:28:19,233 --> 00:28:22,903
このPreviewViewController
クラスに

314
00:28:23,337 --> 00:28:27,107
コードを追加する
必要があります

315
00:28:28,075 --> 00:28:32,546
エントリポイントを持つ
Storyboardや

316
00:28:33,881 --> 00:28:37,451
最初に編集する
Info.plistがあります

317
00:28:37,551 --> 00:28:39,686
では見ていきましょう

318
00:28:42,890 --> 00:28:49,229
最も注目すべき機能は
QLSupportedContentTypesで

319
00:28:49,763 --> 00:28:52,766
画面上で
選択されているものです

320
00:28:53,767 --> 00:28:58,705
これはプレビューされる
ファイル形式の一覧です

321
00:28:59,373 --> 00:29:04,511
ただし プレビューされるのは
エクスポートされたUTIだけです

322
00:28:59,373 --> 00:29:04,511
ただし プレビューされるのは
エクスポートされたUTIだけです

323
00:29:05,445 --> 00:29:11,818
ファイル形式が初期設定されて
なければ リストが参照され

324
00:29:12,152 --> 00:29:16,590
プレビュー処理する
機能拡張が選択されます

325
00:29:16,890 --> 00:29:20,294
対象とすべきファイル形式を
漏れなく記入しましょう

326
00:29:21,061 --> 00:29:24,565
では作成方法を見ていきます

327
00:29:27,734 --> 00:29:32,740
新規ファイル形式が宣言され
エクスポートされています

328
00:29:32,906 --> 00:29:35,409
識別子は―

329
00:29:35,509 --> 00:29:40,380
com.example.apple-samplecode.
Particles.Particlesです

330
00:29:41,315 --> 00:29:44,918
パーティクルの
プレビュー処理を行うため

331
00:29:45,052 --> 00:29:49,857
この識別子をInfo.plistに
追加します

332
00:29:50,791 --> 00:29:53,260
UTIにご興味があれば

333
00:29:53,360 --> 00:29:57,364
今年のDocument Manager
セッションをご覧ください

334
00:30:00,400 --> 00:30:04,571
新規のプレビューの作成が
必要な場合

335
00:30:04,771 --> 00:30:08,342
PreviewViewController
インスタンスが生成されます

336
00:30:08,442 --> 00:30:12,513
preparePreviewOfFileの入力は
URLとcompletionHandler

337
00:30:15,349 --> 00:30:22,089
このメソッドはファイルの
プレビュー処理に必須です

338
00:30:23,524 --> 00:30:28,662
Quick Lookはプレビュー
準備中の表示を出します

339
00:30:29,563 --> 00:30:33,000
プレビュー内容の
ロードを完了後

340
00:30:33,233 --> 00:30:37,571
completionHandlerを
呼び出せば作業完了です

341
00:30:39,006 --> 00:30:41,408
プレビュー機能拡張の解説は
以上です

342
00:30:42,009 --> 00:30:43,544
では 次に進みます

343
00:30:44,044 --> 00:30:49,283
プレビューと同じように
サムネールも作成できます

344
00:30:50,184 --> 00:30:52,619
サムネール機能拡張について
説明します

345
00:30:55,055 --> 00:31:00,094
サムネールとはファイルの
データを縮小した画像です

346
00:30:55,055 --> 00:31:00,094
サムネールとはファイルの
データを縮小した画像です

347
00:31:01,195 --> 00:31:03,831
OSに関わらず
実装されており

348
00:31:03,931 --> 00:31:10,204
ユーザはファイルを開かずに
内容を確認できます

349
00:31:11,438 --> 00:31:16,477
このように
iOSで活用されています

350
00:31:17,644 --> 00:31:20,781
iOSがサムネールを
作成するのは

351
00:31:20,881 --> 00:31:24,651
画像 ビデオ PDF
テキスト USDZなどです

352
00:31:26,220 --> 00:31:30,290
左にブランクのアイコンが
あります

353
00:31:31,225 --> 00:31:34,194
これは
パーティクルファイルで

354
00:31:34,294 --> 00:31:38,966
iOSではサムネール設定が
されていません

355
00:31:39,833 --> 00:31:42,870
しかし ご安心ください

356
00:31:43,170 --> 00:31:48,776
サムネール機能拡張の
作成方法をご説明いたします

357
00:31:49,343 --> 00:31:53,380
機能拡張によって
パーティクルファイルの―

358
00:31:53,480 --> 00:31:56,550
きれいなサムネールが
表示されます

359
00:32:01,288 --> 00:32:05,092
これらサムネールが
表示されるのは Filesや

360
00:32:05,192 --> 00:32:09,429
UIDocumentBrowswerView
ControllerベースのAppです

361
00:32:10,898 --> 00:32:15,469
Quick Lookのリストビューで
プレビュー中のファイルを

362
00:32:15,569 --> 00:32:17,938
タップしても確認できます

363
00:32:18,972 --> 00:32:23,310
共有するカスタムファイルに
対しても

364
00:32:23,577 --> 00:32:26,980
機能拡張を適用できます

365
00:32:27,448 --> 00:32:29,249
では 見ていきましょう

366
00:32:31,885 --> 00:32:35,823
プレビュー機能拡張と同様に

367
00:32:37,224 --> 00:32:39,359
アプリケーション
プロジェクトに

368
00:32:39,459 --> 00:32:41,495
ターゲットを追加します

369
00:32:41,595 --> 00:32:43,797
そしてThumbnail Extension
を選択

370
00:32:46,333 --> 00:32:48,936
ファイルが作成されます

371
00:32:49,169 --> 00:32:52,372
ThumbnailProvider
クラスには

372
00:32:53,340 --> 00:32:57,511
サムネールの処理を行う
コードを追加します

373
00:32:58,545 --> 00:33:02,082
Info.plistはプレビュー
機能拡張と同じで

374
00:32:58,545 --> 00:33:02,082
Info.plistはプレビュー
機能拡張と同じで

375
00:33:02,349 --> 00:33:06,186
最初に編集を行います

376
00:33:09,556 --> 00:33:12,359
またこのInfo.plistにも

377
00:33:12,793 --> 00:33:17,865
QLSupportedContentTypesが
存在します

378
00:33:17,965 --> 00:33:21,902
コンテンツタイプを
設定します

379
00:33:24,104 --> 00:33:28,675
この
QLSupportedContentTypesへ

380
00:33:28,776 --> 00:33:32,913
必ずコンテンツタイプを
追加しましょう

381
00:33:34,047 --> 00:33:40,154
その後 QLThumbnailProvider
サブクラスを実装できます

382
00:33:41,088 --> 00:33:43,757
サムネールを表示するには

383
00:33:44,658 --> 00:33:50,330
CoreGraphicsかUIKitを使用して
サムネールを作成するか

384
00:33:51,999 --> 00:33:54,601
または ファイルのURLを
返します

385
00:33:57,704 --> 00:34:01,975
このサブクラスのリクエスト
ハンドラを使うため

386
00:33:57,704 --> 00:34:01,975
このサブクラスのリクエスト
ハンドラを使うため

387
00:34:02,075 --> 00:34:04,611
provideThumbnailを
オーバーライドします

388
00:34:05,546 --> 00:34:09,382
ＷＷＤＣ 2017では
これを重点的に取り上げました

389
00:34:09,483 --> 00:34:16,924
セッション名は“Building Great
Document-based Apps in iOS 11”

390
00:34:17,123 --> 00:34:20,460
カスタムファイルの
サムネール作成については

391
00:34:20,793 --> 00:34:22,728
そちらもご覧ください

392
00:34:23,931 --> 00:34:27,801
簡単に言うと
QLFileThumbnailRequestの―

393
00:34:27,900 --> 00:34:30,571
パラメータを使用します

394
00:34:31,839 --> 00:34:37,643
ファイルのURLやサムネールの
最小最大サイズなどです

395
00:34:39,646 --> 00:34:41,315
サムネールの処理には

396
00:34:41,415 --> 00:34:45,652
QLThumbnailReply
オブジェクトの生成が必要です

397
00:34:45,918 --> 00:34:50,190
このオブジェクトは
完了ハンドラを通じて

398
00:34:50,924 --> 00:34:55,062
Quick Lookに渡す
必要があります

399
00:34:57,798 --> 00:35:00,734
デモをお見せしましょう

400
00:34:57,798 --> 00:35:00,734
デモをお見せしましょう

401
00:35:02,202 --> 00:35:05,205
まずはパーティクル
アプリケーションのみの―

402
00:35:05,305 --> 00:35:08,976
機能拡張されていない状態です

403
00:35:09,743 --> 00:35:15,516
ファイルがないので
＋ボタンを押して作成します

404
00:35:17,117 --> 00:35:19,987
パーティクルエディタです

405
00:35:20,420 --> 00:35:25,826
では 少し色を変えて
ファイルを保存しましょう

406
00:35:27,461 --> 00:35:33,467
先ほど作成したファイルの
中身は表示されていません

407
00:35:34,067 --> 00:35:38,105
では サムネール機能拡張を
追加していきます

408
00:35:38,572 --> 00:35:41,008
ファイルを保存してから

409
00:35:41,108 --> 00:35:44,578
Quick Lookで
プレビューします

410
00:35:47,114 --> 00:35:50,450
ではファイルを
表示させてみます

411
00:35:52,352 --> 00:35:54,588
画面はブランクです

412
00:35:54,688 --> 00:35:57,024
変更していきましょう

413
00:35:57,658 --> 00:36:01,962
プレビューとサムネールの
機能拡張をそれぞれ実装します

414
00:35:57,658 --> 00:36:01,962
プレビューとサムネールの
機能拡張をそれぞれ実装します

415
00:36:02,863 --> 00:36:07,234
既存のプロジェクトを使って

416
00:36:08,001 --> 00:36:12,005
２つの機能拡張を追加します

417
00:36:12,840 --> 00:36:17,511
プレビューとサムネール機能を
利用するために

418
00:36:17,611 --> 00:36:22,549
Info.plistの設定を
行います

419
00:36:23,717 --> 00:36:26,820
パーティクルAppは
エクスポートされたUTIで

420
00:36:26,920 --> 00:36:30,290
ファイルフォーマットを
定義しているため

421
00:36:30,958 --> 00:36:35,396
それを使うように機能拡張を
設定する必要があります

422
00:36:37,464 --> 00:36:42,336
プレビュー機能拡張の
Info.plistには

423
00:36:42,603 --> 00:36:46,240
ファイル形式のUTIの
識別子が含まれています

424
00:36:47,641 --> 00:36:51,845
サムネール機能拡張も
同様です

425
00:36:52,746 --> 00:36:56,583
あとはこれらを
実装するだけです

426
00:36:56,783 --> 00:36:58,585
まずプレビュー機能拡張です

427
00:37:00,688 --> 00:37:07,494
URL completionHandlerで
preparePreviewOfFileの実装を

428
00:37:08,162 --> 00:37:12,499
このパーティクルは
View Controllerクラスが

429
00:37:12,599 --> 00:37:14,902
すでに設定されています

430
00:37:15,569 --> 00:37:18,572
このコントローラを
再利用します

431
00:37:19,439 --> 00:37:24,278
ここで ロード処理を行う
ヘルパーメソッドを作成し

432
00:37:24,378 --> 00:37:26,613
ビュー階層に追加します

433
00:37:28,815 --> 00:37:35,222
ご覧のとおり
particleViewControllerを生成

434
00:37:35,422 --> 00:37:37,925
受け取ったdocumentに
渡します

435
00:37:38,025 --> 00:37:42,963
よって このメソッドが
パーティクルを描画できます

436
00:37:44,131 --> 00:37:45,799
ただし このメソッドを

437
00:37:45,899 --> 00:37:49,169
preparePreviewOfFileから
呼び出す必要があります

438
00:37:51,371 --> 00:37:56,376
まずサブクラスである
documentを作成します

439
00:37:57,111 --> 00:38:02,449
それを開いたら
ヘルパーメソッドを呼び出し

440
00:37:57,111 --> 00:38:02,449
それを開いたら
ヘルパーメソッドを呼び出し

441
00:38:02,549 --> 00:38:04,952
particleViewControllerを
置換します

442
00:38:06,253 --> 00:38:10,991
最後に 完了ハンドラを閉じ

443
00:38:11,091 --> 00:38:14,194
Quick Lookに準備完了の
通知をします

444
00:38:15,963 --> 00:38:18,232
これでプレビュー機能拡張は
完了です

445
00:38:18,365 --> 00:38:20,400
次にサムネール機能拡張です

446
00:38:22,669 --> 00:38:27,741
provideThumbnailを実装し

447
00:38:28,809 --> 00:38:34,314
サムネール表示に必要な
プロパティをrequestに設定

448
00:38:35,883 --> 00:38:41,021
ここではfile URLを
最大サイズで設定します

449
00:38:41,955 --> 00:38:45,492
スケールや最小サイズも
ありますが

450
00:38:45,592 --> 00:38:48,629
今回は使用しません

451
00:38:49,730 --> 00:38:54,802
それからdrawingBlockを
作成します

452
00:38:57,104 --> 00:39:01,675
ここではヘルパーメソッドを
呼び出し

453
00:38:57,104 --> 00:39:01,675
ここではヘルパーメソッドを
呼び出し

454
00:39:02,075 --> 00:39:05,212
サムネールの描画処理を
行います

455
00:39:05,312 --> 00:39:08,448
では このメソッドを
実装します

456
00:39:09,016 --> 00:39:12,186
drawingBlockは
ブーリアンを返します

457
00:39:12,486 --> 00:39:15,856
サムネール描画のために
呼び出された際―

458
00:39:15,956 --> 00:39:18,892
正しく描けたかを示します

459
00:39:19,459 --> 00:39:22,696
次は パーティクル
サムネールを作成します

460
00:39:24,598 --> 00:39:28,835
サムネールを描くには
ファイルのURLと―

461
00:39:29,203 --> 00:39:31,705
作成場所のサイズを入力

462
00:39:32,139 --> 00:39:35,943
今回は最大サイズで作ります

463
00:39:36,043 --> 00:39:38,946
どんなサイズでも
生成可能です

464
00:39:40,147 --> 00:39:44,017
まずは ファイルに
対応するdocumentを作成

465
00:39:44,184 --> 00:39:45,752
開けるか試します

466
00:39:46,186 --> 00:39:50,791
開けない場合 生成失敗を
示すfalseを返します

467
00:39:51,525 --> 00:39:56,497
ファイルを開き
particleViewControllerを作成

468
00:39:56,597 --> 00:39:58,966
ファイルを
レンダリングします

469
00:39:59,466 --> 00:40:04,037
particleViewControllerのスナップ
ショットでサムネールを描きます

470
00:39:59,466 --> 00:40:04,037
particleViewControllerのスナップ
ショットでサムネールを描きます

471
00:40:05,472 --> 00:40:10,410
documentを閉じて
生成完了を示すtrueを返します

472
00:40:11,745 --> 00:40:17,317
次は QLThumbnailReplyを
作成します

473
00:40:18,819 --> 00:40:25,792
ここではmaximumSizeと
drawingBlockをもとに作ります

474
00:40:27,494 --> 00:40:31,899
replyオブジェクトは
NSURLのパラメータと共に

475
00:40:31,999 --> 00:40:33,767
完了ハンドラ経由で提供

476
00:40:33,867 --> 00:40:39,106
描画時に
エラーが発生した場合―

477
00:40:39,940 --> 00:40:45,078
ThumbnailBlockのsuccessに
状態が示されます

478
00:40:45,178 --> 00:40:47,414
画像は あとで捨てられます

479
00:40:48,248 --> 00:40:51,785
さっそくコードを
使ってみましょう

480
00:40:52,386 --> 00:40:57,357
炎のファイルがサムネールで
表示されています

481
00:40:57,458 --> 00:40:59,893
格段によくなりました

482
00:41:00,394 --> 00:41:03,797
プレビュー機能拡張を
確認しましょう

483
00:41:04,932 --> 00:41:11,471
メモ上のQuick Lookは
前回のプレビュー時のままです

484
00:41:11,638 --> 00:41:14,241
Quick Lookを
再起動します

485
00:41:16,110 --> 00:41:19,046
見事なプレビューが
出ています

486
00:41:19,146 --> 00:41:24,151
iOSで通用する
ファイル形式ができました

487
00:41:25,085 --> 00:41:26,887
デモは以上です

488
00:41:26,987 --> 00:41:29,890
今日のおさらいをしましょう

489
00:41:29,990 --> 00:41:33,394
最初にお見せしたのは―

490
00:41:33,494 --> 00:41:36,697
アプリケーションに
プレビュー機能を追加する方法

491
00:41:36,797 --> 00:41:39,500
QLPreviewControllerを
使います

492
00:41:40,534 --> 00:41:44,838
次に Quick Lookの機能拡張を
紹介しました

493
00:41:45,239 --> 00:41:48,842
プレビュー機能拡張によって
カスタムファイルも―

494
00:41:48,942 --> 00:41:51,678
プレビュー可能です

495
00:41:52,412 --> 00:41:55,816
サムネール機能拡張は
必要に応じ―

496
00:41:55,916 --> 00:41:58,719
独自のファイルに
サムネールを付けられます

497
00:41:59,019 --> 00:42:04,391
これで皆さんのファイル形式も
ファーストクラスに

498
00:41:59,019 --> 00:42:04,391
これで皆さんのファイル形式も
ファーストクラスに

499
00:42:06,326 --> 00:42:09,062
このセッションは以上です

500
00:42:09,196 --> 00:42:13,667
詳しくはAppleのサイトを
ご覧ください

501
00:42:13,934 --> 00:42:15,436
ご視聴ありがとう