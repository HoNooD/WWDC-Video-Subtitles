
1
00:00:07,241 --> 00:00:16,250
(音楽)

2
00:00:18,151 --> 00:00:21,154
(拍手)

3
00:00:21,421 --> 00:00:24,558
こんにちは ようこそ

4
00:00:24,992 --> 00:00:28,962
Apple Musicチーム
エンジニアのベティム･デーバです

5
00:00:29,129 --> 00:00:33,667
MusicKitのアップデートを
皆さんと共有できてうれしいです

6
00:00:35,035 --> 00:00:39,806
昨年発表されたMusicKitにより
アプリケーションで―

7
00:00:39,907 --> 00:00:43,810
カスタマイズされた音楽体験が
可能になりました

8
00:00:44,444 --> 00:00:45,379
今年は―

9
00:00:45,479 --> 00:00:49,783
Apple Music on the Webを
発表し ご自身のウェブサイト上で

10
00:00:49,883 --> 00:00:53,954
同じような音楽体験の
提供が可能になります

11
00:00:54,655 --> 00:00:58,158
最高の埋め込み型
Webプレイヤーを用意して

12
00:00:58,292 --> 00:01:02,863
Web用MusicKitを公開して
ご自身のウェブサイトに

13
00:00:58,292 --> 00:01:02,863
Web用MusicKitを公開して
ご自身のウェブサイトに

14
00:01:02,963 --> 00:01:06,633
Apple Musicを融合することが
できるようになりました

15
00:01:07,534 --> 00:01:10,771
Apple Music on the Webについては
のちほど解説しますが

16
00:01:10,938 --> 00:01:14,775
まずはMusicKitの
アップデートから見てみましょう

17
00:01:17,344 --> 00:01:20,914
AppのデベロッパがApple Musicを
アプリケーションに組み込み

18
00:01:21,114 --> 00:01:23,684
活用している状況を
大変うれしく思います

19
00:01:23,917 --> 00:01:29,923
例えばmusical.lyで楽しくビデオを
自作している方も多いでしょう

20
00:01:30,524 --> 00:01:34,962
このAppで新しい曲を見つけたら
簡単にプレイリストへ追加できます

21
00:01:36,463 --> 00:01:40,000
HoudiniはApple Musicへの
参加を簡単にします

22
00:01:40,200 --> 00:01:44,705
あなたのプレイリストを
Apple Musicへ移行してくれます

23
00:01:45,906 --> 00:01:50,777
Stationheadはプレイリストを
ラジオ局に変えます

24
00:01:50,944 --> 00:01:56,517
あなたの音楽そして声も
世界中に放送することができます

25
00:01:57,818 --> 00:02:02,689
Olaはインド最大の
配車サービス会社です

26
00:01:57,818 --> 00:02:02,689
Olaはインド最大の
配車サービス会社です

27
00:02:03,056 --> 00:02:07,528
業務用の乗用車でApple Musicを
体験してもらうために

28
00:02:07,794 --> 00:02:09,963
彼らと協力してきました

29
00:02:11,331 --> 00:02:14,401
昨年のMusicKitの発表以来

30
00:02:14,601 --> 00:02:19,473
国際標準レコーディングコード
ISRCを用いたコンテンツの―

31
00:02:19,606 --> 00:02:25,579
参照方法に関するフィードバックが
たくさん寄せられました

32
00:02:26,280 --> 00:02:27,915
うれしいことに―

33
00:02:28,015 --> 00:02:32,152
この機能が加わり
他のほとんどの音楽ソースと

34
00:02:32,252 --> 00:02:34,855
Apple Musicカタログ内の楽曲や

35
00:02:34,955 --> 00:02:39,393
音楽ビデオを一致させることが
できるようになりました

36
00:02:41,195 --> 00:02:43,463
MusicKitの
もう1つの強化策として

37
00:02:43,564 --> 00:02:47,134
iCloudミュージックライブラリAPI
が加えられました

38
00:02:48,035 --> 00:02:52,406
ユーザがあなたのAppの
アクセスを許可すれば―

39
00:02:52,506 --> 00:02:59,079
ミュージックライブラリの操作を
App内から行えます

40
00:03:00,881 --> 00:03:04,952
これらのAPIでユーザは
ミュージックライブラリを

41
00:03:05,385 --> 00:03:09,990
閲覧 検索したり コンテンツを
加えることができます

42
00:03:10,657 --> 00:03:14,695
またあなたのAppで
ユーザがプレイリストを作成したり

43
00:03:14,962 --> 00:03:19,366
既存のリストに
楽曲を加えることもできます

44
00:03:24,137 --> 00:03:28,709
昨年は私たちのカタログ用の
Apple Music APIを提供しました

45
00:03:29,476 --> 00:03:31,478
今年はそれに

46
00:03:31,578 --> 00:03:34,314
iCloudミュージックライブラリAPI
が加わりました

47
00:03:34,414 --> 00:03:37,651
すばらしい音楽APIが
そろいました

48
00:03:38,185 --> 00:03:42,856
既存のiTunes Search APIを
使用しているのであれば

49
00:03:43,023 --> 00:03:46,894
すぐにでもApple Music APIへ
移行しましょう

50
00:03:48,228 --> 00:03:51,331
さてここからは同僚のDJが―

51
00:03:51,431 --> 00:03:54,268
Apple Music on the Webを
解説します

52
00:03:54,568 --> 00:03:55,736
ありがとうございます

53
00:03:56,003 --> 00:04:00,007
(拍手)

54
00:03:56,003 --> 00:04:00,007
(拍手)

55
00:04:01,241 --> 00:04:02,409
ありがとうベティム

56
00:04:03,143 --> 00:04:06,146
MusicKit on the Webを
発表できて興奮してます

57
00:04:06,380 --> 00:04:08,348
昨年はApple Musicを

58
00:04:08,448 --> 00:04:11,585
iOSアプリケーションに
加える方法を紹介しました

59
00:04:12,019 --> 00:04:15,589
今年は そのすばらしい機能を
Webにもたらします

60
00:04:16,690 --> 00:04:20,060
まずMusicKit on the Webの
コンポーネントについてです

61
00:04:21,995 --> 00:04:23,530
昨年 REST APIで

62
00:04:23,630 --> 00:04:26,300
全Apple Musicカタログへの
アクセスを加えました

63
00:04:27,234 --> 00:04:29,670
今年はユーザのために

64
00:04:29,770 --> 00:04:35,309
iCloudミュージックライブラリへの
アクセスをREST APIに加えます

65
00:04:36,510 --> 00:04:39,213
MusicKit JSライブラリも
公開します

66
00:04:39,546 --> 00:04:43,617
ブラウザ内で両REST APIを
簡単に使用できるようになり―

67
00:04:44,351 --> 00:04:48,222
ユーザはブラウザ内で
Apple Musicと―

68
00:04:48,422 --> 00:04:53,393
iCloudミュージックライブラリの
曲を完全に再生できます

69
00:04:56,830 --> 00:04:58,866
MusicKit JSを掘り下げる前に

70
00:04:58,966 --> 00:05:01,268
Apple Music Webプレイヤーを
お見せします

71
00:04:58,966 --> 00:05:01,268
Apple Music Webプレイヤーを
お見せします

72
00:05:03,003 --> 00:05:06,006
数週間前 埋め込み型の
プレイヤーを公開しました

73
00:05:06,773 --> 00:05:10,577
デスクトップ上でも
モバイルブラウザでも機能します

74
00:05:12,212 --> 00:05:15,182
この埋め込み型プレイヤーは
ウェブサイト上で

75
00:05:15,282 --> 00:05:18,852
Apple Musicカタログから曲の
フル再生を簡単に実現します

76
00:05:19,486 --> 00:05:23,423
曲 アルバム プレイリスト用の
プレイヤーがあります

77
00:05:24,391 --> 00:05:28,095
埋め込みコードは
Apple Musicプレビューページ

78
00:05:28,262 --> 00:05:30,697
またはプレイヤー内にあります

79
00:05:31,498 --> 00:05:34,501
ウェブサイトにコピーし
ペーストするだけです

80
00:05:35,102 --> 00:05:39,573
このプレイヤーはサードパーティの
サイトでの楽曲再生に最適で

81
00:05:39,773 --> 00:05:43,310
Apple Musicプレビューページでも
同機能を有効にしています

82
00:05:46,113 --> 00:05:48,815
MusicKit JSが
埋め込みを可能にし

83
00:05:49,082 --> 00:05:52,553
すばらしい音楽体験も
提供してくれます

84
00:05:53,754 --> 00:05:55,923
機能性についてお話します

85
00:05:58,425 --> 00:06:01,862
まず最も重要なのは
ブラウザでApple Musicの楽曲を

86
00:05:58,425 --> 00:06:01,862
まず最も重要なのは
ブラウザでApple Musicの楽曲を

87
00:06:01,995 --> 00:06:03,697
フル再生できる点です

88
00:06:03,997 --> 00:06:07,234
プラグインや
外部システムに依存せず―

89
00:06:07,401 --> 00:06:09,136
最新のブラウザで機能します

90
00:06:09,570 --> 00:06:10,971
単独使用も―

91
00:06:11,104 --> 00:06:13,874
好みのJavaScriptフレームワーク
との使用も可能です

92
00:06:15,008 --> 00:06:17,511
再生にユーザの
許可が必要です

93
00:06:17,945 --> 00:06:22,082
Apple Musicの購読者か否かは
当方で確認します

94
00:06:22,850 --> 00:06:25,152
JavaScriptライブラリは
キューを保持して

95
00:06:25,285 --> 00:06:27,821
アルバムやプレイリスト全体の
再生を可能に

96
00:06:30,390 --> 00:06:34,394
楽曲キューがあれば
再生 一時停止

97
00:06:34,528 --> 00:06:37,297
前後へのスキップが
可能になります

98
00:06:38,932 --> 00:06:41,668
再生中または
ロードされた楽曲の

99
00:06:41,835 --> 00:06:46,874
「再生中」メタデータも保持され
UIのレンダに使用できます

100
00:06:48,842 --> 00:06:52,012
Web上に簡単なプレイヤーを
構築する方法を解説します

101
00:06:52,179 --> 00:06:54,381
JavaScriptライブラリを含めます

102
00:06:56,850 --> 00:06:58,752
デベロッパトークンが必要です

103
00:06:58,852 --> 00:07:01,455
これは秘密鍵を使って
生成できます

104
00:06:58,852 --> 00:07:01,455
これは秘密鍵を使って
生成できます

105
00:07:03,924 --> 00:07:07,461
宣言型HTMLマークアップを
うまく活用できます

106
00:07:07,728 --> 00:07:10,697
サインイン サインアウト
再生操作のボタンなど

107
00:07:10,797 --> 00:07:12,833
ページにマークアップを
加えることができます

108
00:07:13,967 --> 00:07:16,003
それらの要素と対応する―

109
00:07:16,103 --> 00:07:18,272
MusicKitの機能と
連携させるのは当方が行います

110
00:07:19,606 --> 00:07:20,874
そして再生ボタンです

111
00:07:20,974 --> 00:07:25,245
Apple Musicカタログの
コンテンツIDやURLを使って

112
00:07:25,512 --> 00:07:27,314
再生を開始できるようにします

113
00:07:30,684 --> 00:07:32,352
コードを見てみましょう

114
00:07:32,886 --> 00:07:37,024
JavaScriptライブラリを含めますが
これは当方CDNでホストします

115
00:07:38,091 --> 00:07:41,195
サインイン サインアウトの
ボタンを加えます

116
00:07:42,763 --> 00:07:44,131
再生をコントロールする―

117
00:07:44,298 --> 00:07:47,568
再生 一時停止
次曲ボタンなどです

118
00:07:49,236 --> 00:07:53,373
再生中の楽曲に関してメタデータで
レンダする要素を加えます

119
00:07:53,507 --> 00:07:57,311
プレイリスト名 タイトル
アーティスト名など入手できます

120
00:07:58,779 --> 00:08:03,617
また再生中の楽曲の進行を
表示する要素があります

121
00:07:58,779 --> 00:08:03,617
また再生中の楽曲の進行を
表示する要素があります

122
00:08:04,418 --> 00:08:07,521
曲時間 再生時間
再生進行状況などです

123
00:08:09,289 --> 00:08:13,293
ここからはジェイ･ヘスが
MusicKit JSを使って―

124
00:08:13,460 --> 00:08:15,829
プレイヤーの
構築について解説します

125
00:08:16,730 --> 00:08:20,200
(拍手)

126
00:08:20,434 --> 00:08:21,768
ありがとうDJ

127
00:08:22,736 --> 00:08:27,975
まず画面右側にXcodeによる
HTMLテンプレートを表示してますが

128
00:08:28,242 --> 00:08:32,346
既にMusicKit JSライブラリに
リンクしてあります

129
00:08:32,479 --> 00:08:34,481
左側はSafariで―

130
00:08:34,581 --> 00:08:37,384
ライブリロードサーバを
作動しています

131
00:08:37,551 --> 00:08:42,523
マークアップの変更が
直接左側に反映されていきます

132
00:08:44,358 --> 00:08:49,129
まずMusicKit JSを使用目的に応じて
設定していきます

133
00:08:49,329 --> 00:08:50,831
宣言型マークアップでは

134
00:08:50,931 --> 00:08:53,834
メタタグで簡単に設定できます

135
00:08:55,636 --> 00:08:58,906
アプリケーション名を
指定したり―

136
00:08:59,072 --> 00:09:01,375
デベロッパトークンを
供給したりできます

137
00:08:59,072 --> 00:09:01,375
デベロッパトークンを
供給したりできます

138
00:09:05,145 --> 00:09:07,781
欲しい機能を得るために―

139
00:09:07,881 --> 00:09:10,184
ユーザがクリックするボタンを
加えます

140
00:09:10,284 --> 00:09:15,055
クリックするとApple Musicより
プレイリストが引き出され―

141
00:09:15,222 --> 00:09:18,258
再生キューの設定後
ブラウザ上で再生が始まります

142
00:09:18,492 --> 00:09:22,763
デスクトップ上のiTunesから
コンテンツURLを与えて

143
00:09:22,963 --> 00:09:25,666
埋め込みたいプレイリストを
指定します

144
00:09:26,333 --> 00:09:29,303
これは“Today at Apple Music”
プレイリストです

145
00:09:34,374 --> 00:09:41,014
(音楽)

146
00:09:41,515 --> 00:09:44,952
このシンプルなコード１行で
ブラウザ上で―

147
00:09:45,052 --> 00:09:48,522
“Today at Apple Music”
プレイリストをフル再生できます

148
00:09:51,825 --> 00:09:55,295
すばらしい機能ですが
ユーザのために―

149
00:09:55,529 --> 00:09:59,333
より良いコントロールや
機能性を追加したいところです

150
00:10:00,067 --> 00:10:03,537
まず Apple Music購読ユーザの

151
00:10:03,637 --> 00:10:06,673
ログインとログアウトを
機能させます

152
00:10:06,907 --> 00:10:07,774
そのために―

153
00:10:07,875 --> 00:10:11,044
許可と非許可のボタンを
ページに加えます

154
00:10:13,247 --> 00:10:17,751
apple-music-authorizeと
unauthorizeの属性を使用

155
00:10:19,153 --> 00:10:22,689
ボタンの表示状態は
MusicKit JSが管理します

156
00:10:22,823 --> 00:10:24,491
以前ログインしていたので―

157
00:10:24,591 --> 00:10:27,628
“Sign Out of Apple Music”が
反映されています

158
00:10:32,199 --> 00:10:35,068
次に 再生コントロールを
付加します

159
00:10:35,402 --> 00:10:38,605
Apple Music属性で指定できます

160
00:10:38,972 --> 00:10:40,641
指定は 例えば―

161
00:10:40,774 --> 00:10:43,544
“前のアイテムにスキップ”

162
00:10:46,046 --> 00:10:47,114
“一時停止”

163
00:10:47,247 --> 00:10:48,348
“再生”

164
00:10:49,883 --> 00:10:51,685
“次のアイテムにスキップ”
などです

165
00:10:56,723 --> 00:11:01,361
再生中のアイテムを見るために
「再生中」情報も付加できます

166
00:10:56,723 --> 00:11:01,361
再生中のアイテムを見るために
「再生中」情報も付加できます

167
00:11:02,429 --> 00:11:04,832
“プレイリストアートワークURL”
を指定し―

168
00:11:04,932 --> 00:11:08,068
レンダしたい“高さ”と
“幅”も指定できます

169
00:11:08,302 --> 00:11:12,239
またメディアアイテム内の
データ属性にもアクセスできます

170
00:11:12,573 --> 00:11:16,210
それによって“プレイリスト名”

171
00:11:17,778 --> 00:11:21,181
“楽曲名”“アーティスト名”
など指定できます

172
00:11:21,615 --> 00:11:24,184
下層においては
現在の再生時間を―

173
00:11:24,284 --> 00:11:27,788
HTMLの時間要素にロードするよう
指定しています

174
00:11:28,889 --> 00:11:32,893
ページが再ロードされると
「再生中」には何もないですが

175
00:11:32,993 --> 00:11:34,761
再生していないためで―

176
00:11:34,862 --> 00:11:39,666
これを修正するために
プレイリスト再生待ちボタンを追加

177
00:11:42,569 --> 00:11:45,706
16のプレイリストをペーストします

178
00:11:47,875 --> 00:11:49,610
クリックすると…

179
00:11:51,011 --> 00:11:57,851
(音楽)

180
00:11:58,418 --> 00:12:01,154
再生コントローラで
一時停止できます

181
00:11:58,418 --> 00:12:01,154
再生コントローラで
一時停止できます

182
00:12:01,788 --> 00:12:03,757
次のアイテムに飛べます

183
00:12:06,493 --> 00:12:09,696
(音楽)

184
00:12:10,063 --> 00:12:12,166
戻ることもできます

185
00:12:18,138 --> 00:12:23,410
MusicKit JSは宣言型
マークアップで作業を容易にし

186
00:12:23,510 --> 00:12:25,746
JavaScript APIも
提供します

187
00:12:25,879 --> 00:12:30,517
ここで再びDJが
JavaScript APIを解説します

188
00:12:30,651 --> 00:12:31,685
ありがとうございました

189
00:12:31,818 --> 00:12:36,957
(拍手)

190
00:12:38,992 --> 00:12:40,294
ありがとう ジェイ

191
00:12:41,895 --> 00:12:46,833
宣言型マークアップは
直接的に基本機能を付加します

192
00:12:47,234 --> 00:12:49,636
もっと進んだ使い道もあります

193
00:12:50,103 --> 00:12:53,040
MusicKitと相互に作用する
JavaScriptを記述します

194
00:12:53,207 --> 00:12:54,808
いくつか例を見ましょう

195
00:12:55,676 --> 00:12:59,046
IDでカタログのメタデータを
取得できます

196
00:13:01,215 --> 00:13:04,751
Apple Musicカタログ内の
コンテンツを検索できます

197
00:13:06,386 --> 00:13:10,257
iCloudミュージックライブラリの
ブラウズが可能で

198
00:13:10,390 --> 00:13:13,360
ライブラリの範囲内で
検索も機能します

199
00:13:14,294 --> 00:13:17,698
楽曲キューも直接設定し
制御できます

200
00:13:19,399 --> 00:13:22,703
再生イベントに反応し
UIを駆動させます

201
00:13:25,973 --> 00:13:27,908
いくつかコードを見ていきます

202
00:13:28,775 --> 00:13:32,146
MusicKit getInstanceメソッドを
最初に使います

203
00:13:33,380 --> 00:13:37,151
MusicKitは１度に１曲しか
再生できないシングルトンです

204
00:13:37,484 --> 00:13:42,756
それをmusic変数にアサインして
今回の事例に使用していきます

205
00:13:44,124 --> 00:13:46,293
IDを頼りに楽曲を参照

206
00:13:47,561 --> 00:13:50,931
songメソッドがIDを取ると
コールバックの供給が必要

207
00:13:51,064 --> 00:13:52,266
これはpromiseです

208
00:13:52,366 --> 00:13:54,935
このpromiseモデルは
MusicKit全般で使用されます

209
00:13:56,970 --> 00:13:59,406
コンテンツオブジェクトが
返送され―

210
00:13:59,506 --> 00:14:03,043
これには楽曲の属性や
関係性が示されています

211
00:13:59,506 --> 00:14:03,043
これには楽曲の属性や
関係性が示されています

212
00:14:03,210 --> 00:14:06,246
例えばアーティストや
アルバム名です

213
00:14:09,383 --> 00:14:12,052
ベティムが言ったとおり
コンテンツIDがなければ

214
00:14:12,152 --> 00:14:17,257
ISRCへのクエリフィルタで
同様の参照ができます

215
00:14:17,724 --> 00:14:21,228
返送されたオブジェクトは
先の例と同じです

216
00:14:24,832 --> 00:14:26,600
１回のネットワークコールで

217
00:14:26,700 --> 00:14:29,403
多数の楽曲オブジェクトを
返送したい場合

218
00:14:29,503 --> 00:14:31,738
バッチAPIがあります

219
00:14:32,039 --> 00:14:34,608
これはアルバムや
プレイリストでも使えます

220
00:14:39,980 --> 00:14:43,617
iCloudミュージックライブラリの
コンテンツも再生できます

221
00:14:44,685 --> 00:14:47,621
これらのAPIは
ライブラリ範囲で機能し

222
00:14:47,888 --> 00:14:51,492
楽曲 アルバム
プレイリストなどを入手できます

223
00:14:52,292 --> 00:14:57,097
APIはページネートされていて
サブセットだけを取得できます

224
00:14:57,297 --> 00:15:03,136
各ページが閲覧されている間は
多くのアンロードが可能です

225
00:14:57,297 --> 00:15:03,136
各ページが閲覧されている間は
多くのアンロードが可能です

226
00:15:04,938 --> 00:15:07,241
Apple Musicカタログを
検索できます

227
00:15:08,208 --> 00:15:10,677
ここではまず楽曲だけを
検索して

228
00:15:10,811 --> 00:15:14,248
次に楽曲と
アルバム両方を検索します

229
00:15:14,882 --> 00:15:18,085
返送される結果数に
制限を設定することもできます

230
00:15:20,654 --> 00:15:22,990
同様のクエリを実行できますが

231
00:15:23,090 --> 00:15:25,792
iCloudミュージックライブラリの
範囲内とします

232
00:15:25,993 --> 00:15:29,897
同じパラメータでまったく同じ
検索メソッドを使っていますが

233
00:15:30,164 --> 00:15:32,633
ライブラリ範囲内の
検索となっています

234
00:15:36,169 --> 00:15:38,071
次は許可についてです

235
00:15:38,572 --> 00:15:41,475
許可が必要になるのは

236
00:15:41,708 --> 00:15:43,343
再生開始時や

237
00:15:43,443 --> 00:15:47,748
iCloudミュージックライブラリに
アクセスする前です

238
00:15:48,916 --> 00:15:51,018
自動的なトリガも可能です

239
00:15:51,118 --> 00:15:54,955
誰かがサイトを訪問した時に
強制的に適用できます

240
00:15:58,525 --> 00:16:01,828
ユーザがボタンを押すと
再生が始まります

241
00:15:58,525 --> 00:16:01,828
ユーザがボタンを押すと
再生が始まります

242
00:16:01,929 --> 00:16:04,565
これにはsetQueueメソッドを
使用します

243
00:16:04,965 --> 00:16:07,201
ここではアルバムIDを供給し

244
00:16:07,301 --> 00:16:11,638
MusicKitがメタデータの
取得をし キューを設定します

245
00:16:12,306 --> 00:16:14,741
コンテンツオブジェクトが
ある場合は

246
00:16:14,908 --> 00:16:17,544
それを直接渡すことで
処理がなされます

247
00:16:19,780 --> 00:16:21,815
setQueueはpromiseを
返送します

248
00:16:22,082 --> 00:16:24,151
キューが十分にロードされると
再生を開始

249
00:16:24,284 --> 00:16:27,855
“music.play”で
自動的に再生を始めます

250
00:16:31,091 --> 00:16:34,161
再生が始まったあと
コントロールも可能です

251
00:16:34,461 --> 00:16:38,232
前後のアイテムにスキップや
一時停止もできます

252
00:16:42,302 --> 00:16:46,273
UI内にアクションを設定すれば
楽曲 アルバムなどを

253
00:16:46,373 --> 00:16:50,677
iCloudミュージックライブラリへ
付加できるようにします

254
00:16:51,145 --> 00:16:53,680
ここにaddToLibraryメソッドが
あります

255
00:16:56,350 --> 00:17:00,487
これら３つのコールを
バッチで実行できます

256
00:16:56,350 --> 00:17:00,487
これら３つのコールを
バッチで実行できます

257
00:17:00,687 --> 00:17:05,592
最初の例と同じ４つのアイテムを
１つのコールで処理します

258
00:17:08,694 --> 00:17:10,297
次はイベントです

259
00:17:11,531 --> 00:17:15,002
MusicKitはイベントを発し
これはUIの駆動に使用されます

260
00:17:15,135 --> 00:17:17,671
このように設定するのは
MusicKitはフル再生に

261
00:17:17,771 --> 00:17:20,641
オーディオ要素を
保有する必要があるためです

262
00:17:21,675 --> 00:17:25,779
“addEventListener”を使います
DOM記述の経験があれば

263
00:17:25,878 --> 00:17:28,048
馴染み深いパターンと
なるでしょう

264
00:17:28,782 --> 00:17:32,186
ここではいくつかのイベントを
例として取り上げます

265
00:17:34,955 --> 00:17:38,392
“mediaItemWillChange”と
“mediaItemDidChange”が

266
00:17:38,525 --> 00:17:40,661
キューの
「再生中」アイテムが変わり

267
00:17:40,794 --> 00:17:43,730
曲が次に移行すると
発信されます

268
00:17:44,198 --> 00:17:46,867
これを再生中の楽曲を
表示するUIへの―

269
00:17:47,067 --> 00:17:49,369
アップデートのトリガに
利用できます

270
00:17:52,339 --> 00:17:53,640
再生を始めると

271
00:17:53,740 --> 00:17:56,076
“playbackState”の
変化イベントが発信

272
00:17:56,176 --> 00:17:58,679
ここでは再び
“Will”と“Did”です

273
00:17:59,847 --> 00:18:05,152
例えば楽曲がロードされたり
再生や一時停止したことを認知でき

274
00:17:59,847 --> 00:18:05,152
例えば楽曲がロードされたり
再生や一時停止したことを認知でき

275
00:18:05,419 --> 00:18:07,788
UIを適宜アップデートできます

276
00:18:08,322 --> 00:18:12,626
このイベントは古い状態と
移行先の状態を与えます

277
00:18:16,930 --> 00:18:20,868
楽曲再生中“playbackProgress”
変化イベントが与えられ

278
00:18:22,636 --> 00:18:26,240
現在の再生進行度が％で
表示され

279
00:18:26,373 --> 00:18:28,876
progress UIの
アップデートにも使用できます

280
00:18:31,845 --> 00:18:34,481
メディアの再生エラーも
生じるかもしれません

281
00:18:35,082 --> 00:18:38,318
mediaPlaybackErrorイベントが
発信します

282
00:18:38,952 --> 00:18:42,923
それを受けたら ユーザに
適切なエラーメッセージを伝えます

283
00:18:45,726 --> 00:18:47,561
再度ジェイに
登場してもらいます

284
00:18:47,694 --> 00:18:49,963
たった今構築したプレイヤーで

285
00:18:50,130 --> 00:18:53,433
JavaScript APIによる
Apple Musicカタログや

286
00:18:53,600 --> 00:18:58,138
iCloudミュージックライブラリの
検索を見せ―

287
00:18:58,505 --> 00:19:02,709
イベントを使って簡単な
プログレスバーを構築します

288
00:18:58,505 --> 00:19:02,709
イベントを使って簡単な
プログレスバーを構築します

289
00:19:03,377 --> 00:19:04,211
ジェイよろしく

290
00:19:05,078 --> 00:19:06,079
DJありがとう

291
00:19:06,513 --> 00:19:10,818
(拍手)

292
00:19:12,653 --> 00:19:18,659
では先の例を元に さらに
プレイリスト検索を加えます

293
00:19:18,959 --> 00:19:23,730
先の例で実演した
いくつかの設定を外しましたが

294
00:19:23,831 --> 00:19:27,067
いくつかの機能は
ページ内に残しました

295
00:19:27,301 --> 00:19:29,570
またJavaScriptを加える

296
00:19:29,670 --> 00:19:33,140
アプリケーションJavaScript
ファイルを追加しましたが

297
00:19:33,273 --> 00:19:36,176
その前にHTMLを
ざっと再確認しましょう

298
00:19:37,177 --> 00:19:41,448
最も大きな変更は
検索用input要素と

299
00:19:41,582 --> 00:19:46,520
検索結果を入れるDOMコンテナを
２つ加えたことでした

300
00:19:47,120 --> 00:19:50,791
MusicKit JSはアプリケーションと
合わせて使用するライブラリや

301
00:19:50,924 --> 00:19:52,893
フレームワークに関して
評価を下しません

302
00:19:53,093 --> 00:19:56,563
CSSはオフスクリーンで
既に構築され

303
00:19:56,830 --> 00:20:00,267
さらに別ファイルに
テンプレートヘルパもあります

304
00:19:56,830 --> 00:20:00,267
さらに別ファイルに
テンプレートヘルパもあります

305
00:20:00,801 --> 00:20:05,639
左側のマークアップが
少し妙な状態になっています

306
00:20:05,772 --> 00:20:11,044
ボタンがフローティング状態で
アートワークは明らかに空です

307
00:20:11,345 --> 00:20:15,916
これはMusicKit JSは
メタタグで設定が行われると

308
00:20:16,016 --> 00:20:21,088
宣言型マークアップの有効化が
求められていると判断するからです

309
00:20:21,255 --> 00:20:24,992
設定がなければ
JavaScriptの稼動を推定して

310
00:20:25,092 --> 00:20:27,027
宣言型マークアップは
不要と判断します

311
00:20:27,161 --> 00:20:30,697
しかしJavaScriptで再有効化する
フックを用意しています

312
00:20:33,100 --> 00:20:36,403
ドキュメントに発せられる
musicitloadedイベントを

313
00:20:36,503 --> 00:20:38,672
待機して
MusicKit JSを設定できます

314
00:20:38,939 --> 00:20:40,807
これによってMusicKit JSは

315
00:20:40,908 --> 00:20:44,545
設定済みの状態で
再生できることがわかります

316
00:20:45,546 --> 00:20:49,116
メタタグ同様に
アプリケーション名を設定できます

317
00:20:49,249 --> 00:20:53,153
declarativeMarkupと称する
属性を“true”に設定すると

318
00:20:53,554 --> 00:20:56,590
MusicKit JSは ミックスドモードで
稼動しているため

319
00:20:56,690 --> 00:20:59,927
宣言型マークアップの有効化が
必要と認識できます

320
00:21:05,532 --> 00:21:07,734
次に検索ハンドラを加えます

321
00:21:07,834 --> 00:21:09,570
これは端的なJavaScriptで

322
00:21:09,670 --> 00:21:12,506
MusicKit JS特有のものでは
ありませんが

323
00:21:12,639 --> 00:21:15,209
ユーザがサーチボックスの
Enterを押すと

324
00:21:15,342 --> 00:21:19,179
サーチを指示するコールバックが
発せられる仕組みです

325
00:21:20,581 --> 00:21:26,887
これはMusicKit API プロパティの
検索メソッドを使って適用できます

326
00:21:27,854 --> 00:21:30,858
Apple Music APIに対する
検索が実行されますが

327
00:21:30,958 --> 00:21:36,096
設定オブジェクトと合わせて
Apple Music APIが受け取る―

328
00:21:36,230 --> 00:21:38,899
クエリパラメータのどれでも
指定できます

329
00:21:39,266 --> 00:21:42,536
検索を指定して検索対象を
“プレイリスト”に限定して

330
00:21:43,036 --> 00:21:45,639
検索結果も“８”までに
限定します

331
00:21:47,074 --> 00:21:52,012
カスタムテンプレートがありますが
ハイライトしたこの３行は

332
00:21:52,279 --> 00:21:55,382
ユーザがクリックした
アートワークを取得して

333
00:21:55,482 --> 00:21:58,252
再生キューをこのプレイリストIDに
設定することを

334
00:21:58,352 --> 00:22:01,355
MusicKitインスタンスに
指示しています

335
00:21:58,352 --> 00:22:01,355
MusicKitインスタンスに
指示しています

336
00:22:01,722 --> 00:22:05,325
あとはpromiseが返送され
“music.play”をコールして

337
00:22:05,425 --> 00:22:07,261
再生が開始します

338
00:22:07,561 --> 00:22:09,763
“カスタムレンダリング”も
あります

339
00:22:13,767 --> 00:22:15,569
“Aリスト”検索を実行します

340
00:22:16,069 --> 00:22:20,874
Apple Musicカタログから
８のAリストが得られました

341
00:22:24,177 --> 00:22:26,346
同じような検索を―

342
00:22:26,447 --> 00:22:29,716
私のiCloudライブラリにも
適用したいところです

343
00:22:30,317 --> 00:22:34,388
ほぼ同じ手順で実行できますが
検索メソッドは

344
00:22:34,555 --> 00:22:36,490
APIプロパティではなく

345
00:22:36,590 --> 00:22:39,393
ライブラリプロパティの
ものとなります

346
00:22:39,693 --> 00:22:42,996
クラウドライブラリの検索を
MusicKit JSに知らせます

347
00:22:44,998 --> 00:22:47,935
同じようにプレイリストと
“８”を設定します

348
00:22:48,068 --> 00:22:53,474
キューや再生開始が設定され
コードはまったく同じに見えます

349
00:22:57,578 --> 00:23:01,949
先ほどと同じサーチを実行すると
カタログ検索結果とともに

350
00:22:57,578 --> 00:23:01,949
先ほどと同じサーチを実行すると
カタログ検索結果とともに

351
00:23:02,049 --> 00:23:06,186
iCloudミュージックライブラリも
表示されます

352
00:23:07,588 --> 00:23:09,122
クリックすると―

353
00:23:10,257 --> 00:23:13,293
クラウドライブラリアイテムが
再生されます

354
00:23:13,594 --> 00:23:17,998
(音楽)

355
00:23:18,499 --> 00:23:22,236
「再生中」スクリーンまたは
下部情報欄を見ると

356
00:23:22,336 --> 00:23:28,141
楽曲の進行を示すインジケータが
欠落しているのがわかります

357
00:23:29,309 --> 00:23:31,211
MusicKit JSが供給する―

358
00:23:31,311 --> 00:23:35,349
“playbackProgressDidChange”
イベントを待機することにより

359
00:23:35,449 --> 00:23:37,518
そのような機能を加えられます

360
00:23:42,289 --> 00:23:44,992
MusicKitインスタンスに対し
イベントリスナーを加えて

361
00:23:45,292 --> 00:23:48,462
“playbackProgressDidChange”
を待機させ イベントが生じると

362
00:23:48,595 --> 00:23:50,964
カスタムレンダラが
進行をレンダします

363
00:23:54,635 --> 00:23:56,803
またAリストを検索します

364
00:23:58,238 --> 00:24:02,609
今度は楽曲を再生すると
カスタム進行バーがレンダされます

365
00:23:58,238 --> 00:24:02,609
今度は楽曲を再生すると
カスタム進行バーがレンダされます

366
00:24:07,915 --> 00:24:10,751
MusicKit JSで
もっといろんなことができますが

367
00:24:10,851 --> 00:24:14,688
ここでDJに再登場してもらって
今日の内容を総括します

368
00:24:15,122 --> 00:24:19,760
(拍手)

369
00:24:20,160 --> 00:24:23,597
ウェブサイトにすばらしい
音楽体験をもたらせます

370
00:24:24,331 --> 00:24:28,969
宣言型マークアップを使って
簡単な機能を速やかに付加できます

371
00:24:29,937 --> 00:24:34,074
JavaScript APIを直接使用して
より高度なAppも作成できます

372
00:24:34,441 --> 00:24:37,144
皆さんがどのように活用されるか
楽しみです

373
00:24:37,377 --> 00:24:41,148
資料も豊富にそろえています

374
00:24:41,381 --> 00:24:44,484
このあとTechnology Lab 3にて
ラボを開催します

375
00:24:44,718 --> 00:24:46,687
ご質問のある方は
どうぞお越しください

376
00:24:47,688 --> 00:24:48,856
ありがとうございました

377
00:24:49,056 --> 00:24:50,390
(拍手)