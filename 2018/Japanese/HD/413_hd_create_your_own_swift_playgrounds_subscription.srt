
1
00:00:07,107 --> 00:00:15,949
(音楽)

2
00:00:23,524 --> 00:00:30,564
(拍手)

3
00:00:30,664 --> 00:00:34,768
“Create Your Own Swift
Playgrounds Subscription”です

4
00:00:34,868 --> 00:00:36,803
昨夜はBashを満喫し―

5
00:00:36,904 --> 00:00:41,341
Swift Playgroundsについて
学ぶ準備はできていますね

6
00:00:41,441 --> 00:00:42,409
私はグレース

7
00:00:42,509 --> 00:00:43,577
私はホリーです

8
00:00:43,677 --> 00:00:45,579
Swift Playgroundsの
エンジニアです

9
00:00:45,679 --> 00:00:48,448
Xcode Source Editorの
エンジニアです

10
00:00:49,850 --> 00:00:51,485
Swift Playgroundsは―

11
00:00:51,618 --> 00:00:55,255
Swiftプログラミング言語で
コーディングできるiPad用Appです

12
00:00:55,522 --> 00:01:00,727
自作のPlayground Bookを
購読してもらい シェアできます

13
00:00:55,522 --> 00:01:00,727
自作のPlayground Bookを
購読してもらい シェアできます

14
00:01:00,861 --> 00:01:05,632
今日はプレイグラウンドや
Playground Bookを作成し

15
00:01:05,732 --> 00:01:10,237
オンラインでコンテンツを
管理する方法も説明します

16
00:01:11,171 --> 00:01:14,174
セッションは全部で４パートです

17
00:01:14,608 --> 00:01:17,444
まず Playground Bookの
フォーマットについて

18
00:01:17,544 --> 00:01:21,248
次に Xcode 9.3用の
テンプレートについて

19
00:01:21,481 --> 00:01:24,284
さらに Swift Playgroundsの
購読フォーマット

20
00:01:24,384 --> 00:01:27,487
そしてオンラインでの管理方法です

21
00:01:27,855 --> 00:01:31,358
私は一旦 退場します
また後で

22
00:01:33,393 --> 00:01:36,663
グレースと私は
Core Image APIに関する―

23
00:01:36,763 --> 00:01:40,334
Playground Bookを作りました

24
00:01:40,434 --> 00:01:47,641
今日は CIFilterに関する
Playground Bookを作っていきます

25
00:01:47,741 --> 00:01:52,379
後ろに私がブックの中で
楽しんでいるのが見えますね

26
00:01:52,479 --> 00:01:57,017
Distortion Filtersについて
説明している章です

27
00:01:58,552 --> 00:02:01,788
Playground Bookでは
特定のトピックの―

28
00:01:58,552 --> 00:02:01,788
Playground Bookでは
特定のトピックの―

29
00:02:01,889 --> 00:02:04,958
インタラクティブな
ガイドを作成できます

30
00:02:05,058 --> 00:02:09,029
学習者を複数の章に沿って導き―

31
00:02:09,128 --> 00:02:12,199
さらにページに細分化できます

32
00:02:12,499 --> 00:02:16,436
各ページにはソースエディタがあり
左側に表示されます

33
00:02:16,570 --> 00:02:21,041
さらにオプションで
常にライブビューを実装できます

34
00:02:21,141 --> 00:02:23,310
この右側の部分です

35
00:02:23,410 --> 00:02:29,082
ライブビューはソースエディタの
結果を視覚化するために使われます

36
00:02:30,517 --> 00:02:35,956
単一ファイルに集約するために
形式はパッケージベースです

37
00:02:36,089 --> 00:02:40,627
１つのPlayground Bookが
階層化されたファイルなのです

38
00:02:41,595 --> 00:02:44,264
ファイルには各章の
サブディレクトリが含まれ

39
00:02:44,631 --> 00:02:49,269
各ページのフォルダは
章にネストされます

40
00:02:50,170 --> 00:02:54,141
その中に ソースエディタでの
コードの実行や―

41
00:02:54,241 --> 00:02:58,812
ライブビュー表示のために
必要なリソースが含まれます

42
00:03:02,416 --> 00:03:06,486
また 各階層には
プロパティリストファイルがあり

43
00:03:06,587 --> 00:03:08,922
Playground Bookを構成したり

44
00:03:09,022 --> 00:03:13,360
目次を作成したりするための
メタデータが入っています

45
00:03:14,528 --> 00:03:19,099
最後に 学習者に表示される
コンテンツに加えて―

46
00:03:19,299 --> 00:03:23,971
補助ソースと呼ばれる
Swiftファイルが含まれます

47
00:03:24,738 --> 00:03:28,008
これらは“Sources”という
フォルダに格納されます

48
00:03:28,308 --> 00:03:31,678
補助ソースはSwiftコードの
追加を可能にします

49
00:03:31,778 --> 00:03:36,750
Playground Bookで使用可能な
クラスやヘルパ関数です

50
00:03:38,285 --> 00:03:42,022
補助ソースファイルを使用し
様々なタスクを実行できます

51
00:03:42,122 --> 00:03:44,024
ソースを使って―

52
00:03:44,124 --> 00:03:48,996
各ページに記述するコードを
大幅に簡略化できます

53
00:03:50,330 --> 00:03:52,833
補助ソースを使用した―

54
00:03:52,933 --> 00:03:55,569
ライブビューとの
やり取りを見てみましょう

55
00:03:58,172 --> 00:04:00,174
PlaygroundLiveViewMessageHandler
から―

56
00:03:58,172 --> 00:04:00,174
PlaygroundLiveViewMessageHandler
から―

57
00:04:00,274 --> 00:04:04,778
メソッドを呼び出し
ライブビューに値を送信できます

58
00:04:04,878 --> 00:04:07,581
Playground Support
フレームワークで宣言されます

59
00:04:09,116 --> 00:04:12,586
PlaygroundValueとして
メッセージが送信されます

60
00:04:12,819 --> 00:04:17,257
PlaygroundValuesはENUMで
フレームワークで宣言されます

61
00:04:18,992 --> 00:04:22,095
オブジェクトをPlaygroundValueに
変換するため―

62
00:04:22,196 --> 00:04:25,032
“LiveViewSupport.swift”
というファイルに―

63
00:04:25,132 --> 00:04:27,734
PlaygroundValueConvertibleを
記述しました

64
00:04:27,835 --> 00:04:33,173
ファイルは各Playground Bookの
Sourcesフォルダに入れます

65
00:04:33,473 --> 00:04:38,946
例えば CIFilterを
ライブビューに送りたい時は

66
00:04:39,046 --> 00:04:42,516
PlaygroundValueConvertibleに
準拠するよう型を拡張し

67
00:04:42,616 --> 00:04:45,819
asPlaygroundValueメソッドを
実装します

68
00:04:45,919 --> 00:04:49,723
元のオブジェクトを
PlaygroundValueに変換できます

69
00:04:51,158 --> 00:04:53,927
さらにヘルパ関数である
sendValueも記述しました

70
00:04:54,027 --> 00:05:00,467
現在のページのライブビューを
PlaygroundValueとして送ります

71
00:04:54,027 --> 00:05:00,467
現在のページのライブビューを
PlaygroundValueとして送ります

72
00:05:00,868 --> 00:05:02,135
そして最後に―

73
00:05:02,603 --> 00:05:07,274
ライブビューに
送信したいオブジェクトがある時は

74
00:05:07,374 --> 00:05:09,476
単にsendValueを呼び出して

75
00:05:09,576 --> 00:05:15,883
“pagescontents.swift”にある
隠しコードの引数として送ります

76
00:05:16,049 --> 00:05:20,087
補助ソースファイルに
記述したコードは

77
00:05:20,187 --> 00:05:26,527
ライブビューに必要だった値から
大幅に簡略化できました

78
00:05:28,695 --> 00:05:32,666
Playground Bookパッケージの
詳細は developer.apple.comの―

79
00:05:32,766 --> 00:05:36,570
“Playground Book
Format Reference”をご覧ください

80
00:05:38,906 --> 00:05:44,811
それでは Swift Playgroundsの
テンプレートを見てみましょう

81
00:05:47,080 --> 00:05:50,717
このテンプレートは
Xcodeプロジェクトの出発点です

82
00:05:50,818 --> 00:05:55,189
Playground Bookの作成やデバッグ
プロデュースを手助けし

83
00:05:55,689 --> 00:06:00,427
Appのように ライブビューに対する
コードを見ていけます

84
00:05:55,689 --> 00:06:00,427
Appのように ライブビューに対する
コードを見ていけます

85
00:06:00,527 --> 00:06:06,934
それによりバグをより簡単に発見し
効率的に開発が進められます

86
00:06:07,034 --> 00:06:10,170
これが CIFilterの
Playground Bookの―

87
00:06:10,270 --> 00:06:13,340
ライブビューに対するコードです

88
00:06:15,342 --> 00:06:20,480
テンプレートのダウンロードは
developer.apple.comより可能です

89
00:06:22,916 --> 00:06:24,718
このXcodeプロジェクトは―

90
00:06:24,818 --> 00:06:28,255
今年リリースの
Swift Playgrounds 2.1と

91
00:06:28,355 --> 00:06:30,090
Xcode 9.3に対応しています

92
00:06:31,225 --> 00:06:35,362
Swift 4.1コンパイラで構築された
フレームワークが含まれています

93
00:06:35,462 --> 00:06:38,899
お見せしているのは
Swift Playgrounds 2.1です

94
00:06:38,999 --> 00:06:43,036
したがって Xcodeのバージョンも
Swift 4.1を―

95
00:06:43,136 --> 00:06:45,138
使用することが重要です

96
00:06:47,341 --> 00:06:49,576
テンプレートには―

97
00:06:49,676 --> 00:06:53,814
３種類のターゲットがあり
Playground Bookの作成を助けます

98
00:06:54,014 --> 00:06:56,316
１つ目がPlaygroundBook

99
00:06:56,416 --> 00:06:58,485
２つ目がBook Sources

100
00:06:58,652 --> 00:07:01,388
３つ目がLiveViewTestAppです

101
00:06:58,652 --> 00:07:01,388
３つ目がLiveViewTestAppです

102
00:07:02,990 --> 00:07:06,493
PlaygroundBookターゲットでは
Playground Bookが作成されます

103
00:07:06,593 --> 00:07:10,998
Xcodeのプロジェクトナビゲータで
Productsグループが確認できます

104
00:07:11,398 --> 00:07:15,402
すべてのファイルは Xcodeの
PlaygroundBookのグループにあり

105
00:07:15,502 --> 00:07:21,308
Playground Bookにまず必要な
１章と１ページが含まれます

106
00:07:22,276 --> 00:07:26,079
テンプレートには
常時ライブビューを可能にする―

107
00:07:26,180 --> 00:07:31,485
ブックレベルの２つの
補助ソースファイルも含まれます

108
00:07:32,586 --> 00:07:35,189
次に
Book Sourcesターゲットは―

109
00:07:35,289 --> 00:07:37,558
すべての補助ソースを
コンパイルします

110
00:07:37,658 --> 00:07:40,194
このターゲットの
ファイルはすべて―

111
00:07:40,294 --> 00:07:45,232
PlaygroundBookグループ内の
Sourcesグループで見られます

112
00:07:46,133 --> 00:07:48,001
ソースをコンパイルすることで―

113
00:07:48,101 --> 00:07:52,239
ブックレベルのソースを
エディタで展開できるようにします

114
00:07:52,506 --> 00:07:55,876
他のXcodeプロジェクトと同じく

115
00:07:55,976 --> 00:08:00,380
コード補完やQuick Helpなど
すべての機能が使えます

116
00:07:55,976 --> 00:08:00,380
コード補完やQuick Helpなど
すべての機能が使えます

117
00:08:00,814 --> 00:08:04,151
そして LiveViewTestAppが
このターゲットを使い―

118
00:08:04,251 --> 00:08:06,053
ライブビューを表示します

119
00:08:06,153 --> 00:08:08,488
ここでデバッグを行うには―

120
00:08:08,589 --> 00:08:12,960
ブックレベルのソースでの
実装が必要です

121
00:08:14,361 --> 00:08:17,331
最後に LiveViewTestApp
ターゲットです

122
00:08:17,564 --> 00:08:19,500
このターゲットのファイルは

123
00:08:19,600 --> 00:08:22,436
XcodeのLiveViewTestApp
グループにあります

124
00:08:23,537 --> 00:08:27,608
Playground Bookのライブビューを
表示するAppを作成します

125
00:08:27,708 --> 00:08:31,011
Swift Playgroundsで見るのと
同等です

126
00:08:31,311 --> 00:08:32,913
前述したとおり―

127
00:08:33,113 --> 00:08:37,650
実装するのはブックレベルの
補助リソース内です

128
00:08:38,552 --> 00:08:41,955
LiveViewTestAppを使用すると
デバッグが―

129
00:08:42,054 --> 00:08:44,825
フルスクリーンや
サイド･バイ･サイドで可能です

130
00:08:44,925 --> 00:08:48,228
Swift Playgroundsに
エクスポートする必要はありません

131
00:08:49,062 --> 00:08:53,500
LiveViewTestAppは
iPadとiOSシミュレータで動きます

132
00:08:55,469 --> 00:08:59,406
テンプレートには ３つの
補助フレームワークがあります

133
00:09:00,040 --> 00:09:05,112
最初の２つが PlaygroundSupportと
PlaygroundBluetoothです

134
00:09:05,312 --> 00:09:07,214
これらをプロジェクトに追加すれば

135
00:09:07,314 --> 00:09:13,787
フレームワークのAPIを
最大限に活用することができます

136
00:09:14,855 --> 00:09:18,392
３つ目のフレームワークは
LiveViewHostです

137
00:09:18,492 --> 00:09:22,663
LiveViewTestAppで
表示用に使用します

138
00:09:25,899 --> 00:09:32,272
ライブビューの実装には すべての
補助ソースコードが必要です

139
00:09:32,472 --> 00:09:34,007
テンプレートには―

140
00:09:34,107 --> 00:09:38,979
“LiveViewController.swift”
というファイルが含まれています

141
00:09:39,513 --> 00:09:44,017
またライブビューのインスタンスを
ロードするヘルパ関数が―

142
00:09:44,117 --> 00:09:46,920
“LiveViewSupport.swift”という
ファイルにあります

143
00:09:47,287 --> 00:09:50,858
他にも必要なファイルを追加でき

144
00:09:50,958 --> 00:09:55,162
どのPlaygroundsフレームワークも
使用可能です

145
00:09:57,197 --> 00:10:02,202
テンプレートにはUIを構築する
Storyboardもあります

146
00:09:57,197 --> 00:10:02,202
テンプレートにはUIを構築する
Storyboardもあります

147
00:10:02,870 --> 00:10:07,608
Playground Bookに必要な
他のリソースも追加可能です

148
00:10:08,642 --> 00:10:13,113
そしてtest appの
live view testを設定するには

149
00:10:13,213 --> 00:10:16,717
“AppDelegate.swift”に
メソッドを実装します

150
00:10:16,817 --> 00:10:20,621
特にsetUpLiveViewメソッドです

151
00:10:21,088 --> 00:10:22,022
デフォルトでは―

152
00:10:22,122 --> 00:10:26,226
LiveViewControllerの
インスタンスをロードします

153
00:10:26,326 --> 00:10:29,563
LiveViewSupport.swiftの説明で
述べたヘルパメソッドで

154
00:10:29,663 --> 00:10:31,698
“instantiateLiveView”です

155
00:10:33,500 --> 00:10:36,303
ここでグレースを呼びましょう

156
00:10:36,403 --> 00:10:41,174
テンプレートで作成した
Playground Bookを見ていきます

157
00:10:41,508 --> 00:10:47,781
(拍手)

158
00:10:50,150 --> 00:10:52,853
これが
私のXcodeプロジェクトです

159
00:10:52,953 --> 00:10:55,422
先ほどお見せした―

160
00:10:55,522 --> 00:10:57,691
CIFilterに関する
Playground Bookです

161
00:10:57,825 --> 00:11:02,262
このPlayground Bookの目的は
学習者がCore Imageフィルタを―

162
00:10:57,825 --> 00:11:02,262
このPlayground Bookの目的は
学習者がCore Imageフィルタを―

163
00:11:02,362 --> 00:11:07,234
作成して操作し ライブビューで
起動できるようにすること

164
00:11:07,334 --> 00:11:11,271
また それをライブカメラで
確認できるようにすることです

165
00:11:12,306 --> 00:11:16,143
“LiveViewController.swift”
フォルダを見ます

166
00:11:16,710 --> 00:11:20,714
テンプレートにある
メソッドの１つを実装しました

167
00:11:20,914 --> 00:11:26,987
カメラへの出力表示をするために
必要なコードを追加しました

168
00:11:27,855 --> 00:11:33,927
出力の際にはCore Imageフィルタを
適用したいので

169
00:11:34,027 --> 00:11:37,431
ブックレベルのソースに
ファイルを追加しました

170
00:11:37,531 --> 00:11:42,936
ライブカメラ出力時に
FilterRendererを実装したのです

171
00:11:43,370 --> 00:11:47,341
LiveViewTestAppターゲットを
選択すると

172
00:11:47,641 --> 00:11:50,110
コードが実行されます

173
00:11:50,210 --> 00:11:52,813
ライブビューを見ましょう

174
00:11:53,347 --> 00:11:57,818
サイド･バイ･サイドで
表示するよう設定しました

175
00:11:58,986 --> 00:12:01,955
このような見え方です

176
00:11:58,986 --> 00:12:01,955
このような見え方です

177
00:12:02,122 --> 00:12:03,156
ソースコードが―

178
00:12:03,257 --> 00:12:07,161
Swift Playgroundsで
横に表示されます

179
00:12:07,261 --> 00:12:13,400
シミュレート用に左側に
いくつかのボタンを追加しました

180
00:12:13,500 --> 00:12:15,569
test app用のコードです

181
00:12:15,669 --> 00:12:18,405
グレースがタップすると

182
00:12:18,572 --> 00:12:21,909
フィルタが適用されました

183
00:12:22,009 --> 00:12:23,410
すばらしい

184
00:12:23,510 --> 00:12:28,815
今度は“CIPointillize”
フィルタを試してみましょう

185
00:12:28,916 --> 00:12:30,450
タップすると…

186
00:12:32,186 --> 00:12:34,388
同じように見えますが

187
00:12:34,488 --> 00:12:38,892
先ほどのピンクのフィルタが
縁に残っています

188
00:12:38,992 --> 00:12:44,231
Pointillizeフィルタの
サイズが小さかったのです

189
00:12:44,331 --> 00:12:50,037
FilterRendererにバグがあるので
Xcodeに戻りましょう

190
00:12:50,337 --> 00:12:51,905
renderという関数です

191
00:12:52,005 --> 00:12:56,009
Open Quickly機能を使って
呼び出します

192
00:12:57,077 --> 00:13:01,415
さらにメソッドがリターンする前に
ブレークポイントを設定

193
00:12:57,077 --> 00:13:01,415
さらにメソッドがリターンする前に
ブレークポイントを設定

194
00:13:01,515 --> 00:13:06,286
ライブカメラ出力時のフレームには
フィルタが適用されており

195
00:13:06,386 --> 00:13:10,424
このブレークポイントが
適用されるはずです

196
00:13:10,958 --> 00:13:13,126
ブレークポイントに来ました

197
00:13:13,227 --> 00:13:17,431
デバッグコンソールを使用して
変数を調べられます

198
00:13:17,531 --> 00:13:22,035
今 見たいのはソース画像の
サイズです

199
00:13:24,738 --> 00:13:29,443
フィルタ適用後の画像との
違いを確認します

200
00:13:31,879 --> 00:13:37,718
適用後のほうが元の画像より
大きいことが分かります

201
00:13:37,885 --> 00:13:41,421
59行目で
フィルタ適用後のサイズで―

202
00:13:41,522 --> 00:13:43,857
レンダリングしています

203
00:13:43,957 --> 00:13:47,928
ソース画像のサイズにしたいので
修正します

204
00:13:48,595 --> 00:13:51,031
ブレークポイントを無効にし
再実行

205
00:13:53,300 --> 00:13:55,235
iPadに戻ってみましょう

206
00:13:58,739 --> 00:14:01,241
先ほどと同じ手順です

207
00:13:58,739 --> 00:14:01,241
先ほどと同じ手順です

208
00:14:01,341 --> 00:14:05,879
“CIColorMatrix”の後に
“CIPointillize”をタップ

209
00:14:06,313 --> 00:14:09,783
Pointillizeフィルタのサイズが
正しくなりました

210
00:14:09,883 --> 00:14:13,854
元のライブカメラ出力時と
同じサイズです

211
00:14:13,954 --> 00:14:16,190
正しいコードになったので

212
00:14:16,290 --> 00:14:19,026
Playground Bookを
パッケージ化します

213
00:14:19,126 --> 00:14:22,830
Swift Playgroundsにコピーし
実際の見え方を確認します

214
00:14:22,930 --> 00:14:24,965
そしてXcodeに戻り―

215
00:14:25,065 --> 00:14:28,001
PlaygroundBookスキームを選択

216
00:14:28,602 --> 00:14:29,970
“Build”を押せば―

217
00:14:30,070 --> 00:14:34,675
Build Productsグループの下に
置かれます

218
00:14:34,775 --> 00:14:37,344
AirDropやiCloudを使い

219
00:14:37,444 --> 00:14:40,547
Swift Playgroundsに
コピーできますが

220
00:14:40,647 --> 00:14:42,549
事前にコピー済みです

221
00:14:42,649 --> 00:14:47,221
iPadに戻って
Swift Playgroundsを開きます

222
00:14:48,155 --> 00:14:51,492
Test Out CIFilter!の
Playground Bookができています

223
00:14:51,592 --> 00:14:54,695
ライブビューを見てみましょう

224
00:14:55,929 --> 00:15:00,167
ソースエディタには
CIFilterがあります

225
00:14:55,929 --> 00:15:00,167
ソースエディタには
CIFilterがあります

226
00:15:00,267 --> 00:15:02,870
入力値の一部を操作しました

227
00:15:02,970 --> 00:15:08,175
“Run My Code”をタップすると
カメラの出力が確認できます

228
00:15:12,146 --> 00:15:15,015
この色が本当に気に入ってるの

229
00:15:15,115 --> 00:15:18,018
私たちはどう見えるかな？

230
00:15:18,118 --> 00:15:18,919
どうって？

231
00:15:19,019 --> 00:15:21,154
エンジニアみたいよね

232
00:15:21,255 --> 00:15:21,855
もちろん！

233
00:15:21,955 --> 00:15:22,789
(笑い声)

234
00:15:22,890 --> 00:15:27,661
(拍手)(笑い声)

235
00:15:27,761 --> 00:15:31,231
Swift Playgroundsの
テンプレートを使った―

236
00:15:31,331 --> 00:15:34,434
コードの記述とデバッグを
ご覧いただきました

237
00:15:34,535 --> 00:15:39,206
新しいワークフローが
皆さんの役に立ちますように

238
00:15:39,339 --> 00:15:44,344
ではSwift Playgroundsの
購読に移りましょう

239
00:15:44,945 --> 00:15:48,982
(拍手)

240
00:15:49,082 --> 00:15:51,518
ありがとう　ホリー

241
00:15:52,252 --> 00:15:57,491
Swift Playgroundsの
テンプレートについて学んだので

242
00:15:57,591 --> 00:16:01,228
作成したドキュメントの
購読に移りましょう

243
00:15:57,591 --> 00:16:01,228
作成したドキュメントの
購読に移りましょう

244
00:16:02,996 --> 00:16:05,365
その前に購読とは？

245
00:16:05,532 --> 00:16:09,570
Podcastや
雑誌の定期購読と同じですね

246
00:16:09,670 --> 00:16:14,274
新しいコンテンツが公開されると
購読者が認識します

247
00:16:14,608 --> 00:16:18,011
Appleのコンテンツと一緒に
表示されます

248
00:16:18,212 --> 00:16:20,681
新しいドキュメントを発行すると

249
00:16:20,781 --> 00:16:25,385
Swift Playgroundsが読み取り
新規ドキュメントとして表示します

250
00:16:27,321 --> 00:16:31,191
ユーザはウェブサイトで
購読することができます

251
00:16:35,162 --> 00:16:40,000
購読されたドキュメントは
オンラインに置かれます

252
00:16:40,400 --> 00:16:44,037
コンテンツの発行には
JSONファイルを使います

253
00:16:44,138 --> 00:16:46,707
Swift Playgroundsが
ダウンロードするのに―

254
00:16:46,974 --> 00:16:48,475
必要なデータを含みます

255
00:16:50,444 --> 00:16:56,583
JSONはデータの保存と交換のための
テキストベースのフォーマットです

256
00:16:57,017 --> 00:17:00,120
目的は
JSONオブジェクトのコンシューマに

257
00:16:57,017 --> 00:17:00,120
目的は
JSONオブジェクトのコンシューマに

258
00:17:00,220 --> 00:17:03,156
キーに対する値を伝えることです

259
00:17:03,290 --> 00:17:06,393
例として ドキュメントの
キータイトルを―

260
00:17:06,727 --> 00:17:10,297
“WWDC Photo Filters”としました

261
00:17:12,733 --> 00:17:15,301
Playgroundフィード形式は
２つに分かれます

262
00:17:15,402 --> 00:17:19,506
１つは購読されるドキュメントの
説明となる部分

263
00:17:19,772 --> 00:17:24,611
もう１つは各ドキュメントの
内容に関する部分です

264
00:17:25,945 --> 00:17:30,450
使用するフィード形式を
見ていきましょう

265
00:17:33,053 --> 00:17:34,988
最初のキーは“title”

266
00:17:35,189 --> 00:17:38,559
値は文字列でなければなりません

267
00:17:38,826 --> 00:17:42,663
JSONにあるとおり
タイトルが表示されます

268
00:17:42,763 --> 00:17:45,833
Swift Playgroundsの
購読の欄です

269
00:17:47,868 --> 00:17:51,038
次のキーは 皆さんの名前
“publisherName”

270
00:17:51,538 --> 00:17:56,510
この値も文字列で
パブリッシャーの名前として―

271
00:17:56,777 --> 00:18:00,781
各ドキュメントの
詳細ビューに表示されます

272
00:17:56,777 --> 00:18:00,781
各ドキュメントの
詳細ビューに表示されます

273
00:18:03,550 --> 00:18:05,485
次は“feedIdentifier”

274
00:18:05,719 --> 00:18:10,057
これはドメインの
Reverse DNSである必要があります

275
00:18:10,190 --> 00:18:15,996
Reverse DNSとはウェブサイトが
逆方向になることを意味します

276
00:18:16,096 --> 00:18:20,367
例えば フィードが
“developer.apple.com”の場合

277
00:18:20,467 --> 00:18:23,971
フィード識別子は
“.apple.developer”です

278
00:18:26,340 --> 00:18:28,408
次は“contactURL”

279
00:18:28,509 --> 00:18:31,678
フィードの問題報告のために
使用されます

280
00:18:34,448 --> 00:18:36,583
続いて“formatVersion”

281
00:18:36,817 --> 00:18:40,888
フィードが準拠している
形式のバージョンです

282
00:18:41,255 --> 00:18:44,958
今回のフィード形式は
バージョン1.0で

283
00:18:45,159 --> 00:18:49,463
ドキュメントに組み込む
フィード形式を更新すると

284
00:18:49,563 --> 00:18:55,402
feed.jsonファイルに変更を
加えることができます

285
00:18:55,736 --> 00:18:59,039
文字列なので引用符が必要ですね

286
00:19:01,041 --> 00:19:03,277
最後は“documents”キー

287
00:19:03,377 --> 00:19:07,481
ここが第２セクションの始まりです

288
00:19:07,648 --> 00:19:13,654
ここの値はオブジェクトの配列で
Playground Bookを表します

289
00:19:13,854 --> 00:19:16,690
次はオブジェクトの
フォーマットです

290
00:19:18,192 --> 00:19:22,062
“documents”は
オブジェクトの配列で―

291
00:19:22,696 --> 00:19:25,432
値のペアで
ドキュメントを表します

292
00:19:26,033 --> 00:19:30,204
ドキュメントの表示に
必要なものを入れます

293
00:19:32,339 --> 00:19:34,908
“title”と
“overviewSubtitle”は文字列です

294
00:19:35,042 --> 00:19:38,412
各ドキュメントの
タイトルとサブタイトルになります

295
00:19:38,579 --> 00:19:41,582
購読の欄内と―

296
00:19:41,682 --> 00:19:45,052
各ドキュメントの
詳細ビュー内にも表示されます

297
00:19:48,455 --> 00:19:50,357
“detailSubtitle”は
オプションで―

298
00:19:50,457 --> 00:19:55,596
別のサブタイトルを
詳細ビューに表示できます

299
00:19:56,063 --> 00:19:58,866
必要がない場合は省略します

300
00:20:01,902 --> 00:20:05,606
“description”は
ドキュメントの目的を説明します

301
00:20:05,706 --> 00:20:08,976
表示場所は Swift Playgroundsの
詳細ビューです

302
00:20:11,278 --> 00:20:15,048
“contentIdentifier”も
Reverse DNS識別子です

303
00:20:15,182 --> 00:20:21,155
Manifest.plistファイルと
一致する必要があります

304
00:20:21,722 --> 00:20:25,359
ドキュメントの
“feedIdentifier”で始めます

305
00:20:25,626 --> 00:20:29,897
今回の例では
“io.github.WWDCPhotoFilters”

306
00:20:30,931 --> 00:20:34,968
feed.jsonファイルと同じ場所で
コンテンツの管理が必要です

307
00:20:35,068 --> 00:20:41,475
またはZip圧縮したドキュメントの
セキュアハッシュが必要です

308
00:20:41,608 --> 00:20:44,745
フィード形式の詳細は
別のセッションで

309
00:20:47,247 --> 00:20:49,082
コンテンツの識別子がありますね

310
00:20:50,751 --> 00:20:54,221
“contentVersion”では
バージョン管理ができます

311
00:20:54,354 --> 00:20:56,723
ドキュメントを
更新する際に必要です

312
00:20:56,823 --> 00:21:00,661
マニフェストのバージョンと
一致していなければなりません

313
00:20:56,823 --> 00:21:00,661
マニフェストのバージョンと
一致していなければなりません

314
00:21:02,863 --> 00:21:04,464
次に“url”ですが―

315
00:21:04,731 --> 00:21:10,137
ダウンロード時に
必要になるので とても大切です

316
00:21:10,337 --> 00:21:13,607
Zip圧縮されたドキュメントの
リンクになります

317
00:21:16,877 --> 00:21:20,848
“additionalInformation”は
追加のメタデータを格納できます

318
00:21:20,981 --> 00:21:23,050
好きな内容を入れてください

319
00:21:23,250 --> 00:21:28,655
キーと値のペアを持つ
オブジェクトの配列です

320
00:21:28,856 --> 00:21:32,859
この例では名前が"Made for"
値が“WWDC18”

321
00:21:32,960 --> 00:21:36,029
Swift Playgroundsの
詳細ビューに表示されます

322
00:21:39,233 --> 00:21:43,270
“publishedDate”と
“lastUpdatedDate”も必要で

323
00:21:43,737 --> 00:21:47,374
ISO 8601形式である必要があります

324
00:21:47,474 --> 00:21:50,644
コンテンツの発行日と―

325
00:21:50,744 --> 00:21:53,747
最終更新日が反映されます

326
00:21:56,517 --> 00:22:00,854
最後に
画像用の３つのキーがあります

327
00:21:56,517 --> 00:22:00,854
最後に
画像用の３つのキーがあります

328
00:22:01,288 --> 00:22:04,992
“thumbnailURL”は
Swift Playgrounds内の画像用で

329
00:22:05,893 --> 00:22:09,029
ドキュメントの
詳細ビューにも使われます

330
00:22:10,797 --> 00:22:15,335
“previewImageURLs”は
詳細ビューの画像用で

331
00:22:15,435 --> 00:22:19,640
プレイグラウンドの
補足情報を表示できます

332
00:22:20,774 --> 00:22:25,479
そして旧バージョンではバナー用の
“bannerImageURL”がありました

333
00:22:25,579 --> 00:22:31,251
サポートする場合は
こちらの画像も含む必要があります

334
00:22:33,821 --> 00:22:39,026
さて フィード形式を設定したので
発行に移りましょう

335
00:22:39,960 --> 00:22:43,297
これらのファイルを発行するには？

336
00:22:43,497 --> 00:22:48,669
feed.jsonファイルと
ウェブ上のドキュメントが必要です

337
00:22:49,169 --> 00:22:51,305
ウェブホストも必要です

338
00:22:53,373 --> 00:22:56,310
発行すると
ウェブホストが要求されます

339
00:22:56,510 --> 00:23:02,516
GitHubやSquarespaceなど
様々な手段がありますが

340
00:22:56,510 --> 00:23:02,516
GitHubやSquarespaceなど
様々な手段がありますが

341
00:23:02,616 --> 00:23:06,386
今日はGitHubページの例を使います

342
00:23:08,055 --> 00:23:12,125
GitHubはウェブサイトを
作成するためのツールです

343
00:23:12,226 --> 00:23:15,062
GitHubリポジトリから
直接ホストされています

344
00:23:15,195 --> 00:23:17,331
Gitを使いコンテンツを管理します

345
00:23:18,065 --> 00:23:21,969
必要な いくつかの
手順について説明します

346
00:23:23,737 --> 00:23:25,806
まず GitHubアカウントの取得

347
00:23:26,607 --> 00:23:28,742
GitHubのサイトでできます

348
00:23:30,377 --> 00:23:34,748
次に“ユーザ名.github.io”という
リポジトリの作成

349
00:23:34,848 --> 00:23:37,417
この形式は変えられません

350
00:23:37,518 --> 00:23:40,787
このリポジトリに
コンテンツを保存します

351
00:23:43,023 --> 00:23:45,559
リポジトリをMacに複製したら

352
00:23:45,659 --> 00:23:50,464
index.htmlファイルが作成でき
ホームページとして保存します

353
00:23:50,564 --> 00:23:53,600
ここでは
“Hello WWDC!”とだけ表示します

354
00:23:55,502 --> 00:24:00,741
Xcodeのソース管理の詳細は
別のセッションをご参照ください

355
00:23:55,502 --> 00:24:00,741
Xcodeのソース管理の詳細は
別のセッションをご参照ください

356
00:24:04,044 --> 00:24:07,581
作成したファイルが
リポジトリにあることを確認し

357
00:24:07,681 --> 00:24:13,320
“ユーザ名.github.io”という
ウェブサイトにアクセスします

358
00:24:13,821 --> 00:24:19,359
さらにファイルやフォルダを
リポジトリに追加していき

359
00:24:19,760 --> 00:24:23,297
GitHubのウェブサイトを更新します

360
00:24:25,799 --> 00:24:29,536
現時点でフォルダには
index.htmlファイルしかありません

361
00:24:29,636 --> 00:24:31,939
これがウェブサイトの入り口です

362
00:24:32,039 --> 00:24:36,376
購読してもらうには
ファイルがあと数個必要です

363
00:24:37,211 --> 00:24:38,512
私たちには―

364
00:24:38,645 --> 00:24:41,515
“WWDC Photo Filters”という
ドキュメントがあります

365
00:24:41,615 --> 00:24:46,053
Core Imageを使ったクールな
写真フィルタのコンテンツです

366
00:24:46,153 --> 00:24:50,524
例として
そのリポジトリを見てみましょう

367
00:24:53,260 --> 00:24:56,930
最初に必要なのは
feed.jsonファイルです

368
00:24:57,030 --> 00:25:01,768
index.htmlファイルと
同階層のリポジトリに格納しました

369
00:24:57,030 --> 00:25:01,768
index.htmlファイルと
同階層のリポジトリに格納しました

370
00:25:03,704 --> 00:25:06,473
次にドキュメントの保存です

371
00:25:07,141 --> 00:25:11,578
発行した各プレイグラウンドは
フォルダに保存されています

372
00:25:11,912 --> 00:25:14,147
各コンテンツ用に
フォルダがあります

373
00:25:14,248 --> 00:25:18,752
“ImageTransitions”や
“IntrotoCI”などです

374
00:25:19,219 --> 00:25:21,455
つまり 最上位にあるのは―

375
00:25:21,555 --> 00:25:25,259
index.htmlファイルと
feed.jsonファイル

376
00:25:25,359 --> 00:25:27,394
そして 各ドキュメントの
フォルダです

377
00:25:29,463 --> 00:25:33,267
フォルダの１つを開くと
中身は４つ

378
00:25:33,400 --> 00:25:35,302
Zip圧縮された
playgroundbookファイル

379
00:25:35,402 --> 00:25:36,737
そして３つの画像

380
00:25:36,837 --> 00:25:41,675
それぞれ バナー用
プレビュー用 サムネイル用です

381
00:25:42,476 --> 00:25:45,812
圧縮されたPlaygound Bookを
ユーザがダウンロードします

382
00:25:47,948 --> 00:25:51,852
それでは feed.jsonファイルを
見てみましょう

383
00:25:52,419 --> 00:25:57,591
最上位のフィード識別子は
ウェブサイトのReverse DNSで

384
00:25:57,691 --> 00:26:01,028
“io.github.WWDCPhotoFilters”

385
00:25:57,691 --> 00:26:01,028
“io.github.WWDCPhotoFilters”

386
00:26:04,932 --> 00:26:09,870
４つのドキュメントには
それぞれの要素があります

387
00:26:12,539 --> 00:26:14,274
１つ目を見ると―

388
00:26:14,374 --> 00:26:17,277
コンテンツ識別子が
フィード識別子と一致

389
00:26:17,377 --> 00:26:19,246
タイトルが追加されています

390
00:26:22,549 --> 00:26:25,419
ドキュメントのURLがあります

391
00:26:25,519 --> 00:26:30,657
“/IntrotoCI
/IntrotoCI.playgroundbook.zip”

392
00:26:30,757 --> 00:26:36,063
ダウンロード用のリンクなので
間違えてはいけません

393
00:26:38,832 --> 00:26:41,735
画像のURLは相対パスにできます

394
00:26:41,835 --> 00:26:46,874
それには feed.jsonファイルの下に
フォルダを置く必要があります

395
00:26:46,974 --> 00:26:51,044
ここでは
“IntrotoCI/thumbnail.png”です

396
00:26:51,311 --> 00:26:54,815
各ドキュメントも
同じ形式にするといいでしょう

397
00:26:57,117 --> 00:27:00,320
オンラインで公開すれば
誰でも購読可能です

398
00:26:57,117 --> 00:27:00,320
オンラインで公開すれば
誰でも購読可能です

399
00:27:00,787 --> 00:27:05,626
URLを直接入力して feed.jsonに
アクセスすることも

400
00:27:05,726 --> 00:27:11,565
ユニバーサルリンクを使って
Safari内からSwift Playgroundsに

401
00:27:11,665 --> 00:27:13,367
リダイレクトで行くこともできます

402
00:27:14,668 --> 00:27:17,905
そのために必要なのが
フィードのURLと―

403
00:27:18,005 --> 00:27:21,108
ユニバーサルリンク
プレフィックスの結合です

404
00:27:22,843 --> 00:27:26,613
ここにindex.htmlファイルの
リンクのコードがあります

405
00:27:26,713 --> 00:27:29,316
ユニバーサルリンク
プレフィックスと結合させました

406
00:27:29,750 --> 00:27:34,488
“https://
developer.apple.com/ul/”

407
00:27:34,588 --> 00:27:38,225
私たちの購読用URLです

408
00:27:39,893 --> 00:27:42,529
そのリンクをアンカー要素へ
埋め込めます

409
00:27:42,629 --> 00:27:48,535
href属性で ユーザを簡単に
Swift Playgroundsへ導けるのです

410
00:27:50,270 --> 00:27:55,175
次にドキュメントを追加する手順の
デモを行います

411
00:27:56,310 --> 00:28:01,615
(拍手)

412
00:27:56,310 --> 00:28:01,615
(拍手)

413
00:28:02,416 --> 00:28:06,787
私たちは写真フィルタリングの
Playground Bookを発行しています

414
00:28:07,020 --> 00:28:11,358
私が新しく完成させたのは
“Content Aware Resizing”です

415
00:28:12,326 --> 00:28:18,165
コンテンツの重要な部分を損なわず
サイズ変更する方法です

416
00:28:18,265 --> 00:28:22,069
モニュメントバレーの
美しい写真があります

417
00:28:22,536 --> 00:28:26,039
トリミングし
幅を少し小さくしたいと思います

418
00:28:26,140 --> 00:28:29,243
でもスケールダウンは
避けたいところです

419
00:28:29,343 --> 00:28:32,713
美しい夕暮れを残すためです

420
00:28:33,480 --> 00:28:35,082
この方法では―

421
00:28:36,150 --> 00:28:40,187
写真内のすべてのピクセルを
比較し―

422
00:28:40,287 --> 00:28:42,523
重要度の低い垂直な線を
探します

423
00:28:42,623 --> 00:28:46,827
１列ずつ削除すれば
幅は小さくなっていきますが

424
00:28:46,927 --> 00:28:52,733
重要なのは 岩山や夕暮れが
そのまま残るということです

425
00:28:54,935 --> 00:29:00,374
“Content Aware Resizing”という
Playground Bookが―

426
00:28:54,935 --> 00:29:00,374
“Content Aware Resizing”という
Playground Bookが―

427
00:29:00,707 --> 00:29:03,677
“ContentAwareResizing”
フォルダに保存されています

428
00:29:05,078 --> 00:29:07,147
これでほぼ完了です

429
00:29:07,247 --> 00:29:09,883
あとはこれをZip圧縮するだけ

430
00:29:09,983 --> 00:29:11,952
そしてファイルを選択

431
00:29:12,052 --> 00:29:14,955
“CompressContentAwareResizing.
playgroundbook”です

432
00:29:15,055 --> 00:29:20,260
圧縮できたので
元のファイルはゴミ箱に移します

433
00:29:21,728 --> 00:29:24,364
そして２つの画像も移動

434
00:29:24,464 --> 00:29:28,869
フィード形式で必要な
サムネイル用とバナー用の画像です

435
00:29:28,969 --> 00:29:33,607
デスクトップに Thumbnail.pngと
BannerImage.pngという―

436
00:29:33,707 --> 00:29:35,008
２枚があります

437
00:29:35,709 --> 00:29:37,978
この２枚を入れます

438
00:29:38,345 --> 00:29:41,415
自分のフォルダ内にドラッグします

439
00:29:42,716 --> 00:29:47,221
“WWDC Photo Filters”の
リポジトリ内を見ると―

440
00:29:47,321 --> 00:29:49,923
３つのフォルダがあります

441
00:29:50,023 --> 00:29:53,160
それぞれに画像
Zip圧縮されたPlayground Book

442
00:29:53,260 --> 00:29:55,062
サムネイル用画像があります

443
00:29:55,162 --> 00:29:59,733
いいですね　私のフォルダに
必要なものがそろいました

444
00:30:00,033 --> 00:30:02,636
発行の準備ができています

445
00:30:03,604 --> 00:30:08,175
リポジトリに
ワークスペースを作成したので

446
00:30:08,275 --> 00:30:13,480
このフォルダをドラッグして
リポジトリに入れます

447
00:30:13,580 --> 00:30:16,850
“Content Aware Resizing”用の
別フォルダもあります

448
00:30:17,551 --> 00:30:21,021
問題がないか
ダブルチェックします

449
00:30:21,822 --> 00:30:25,959
最後のステップは
feed.jsonファイルの更新です

450
00:30:27,161 --> 00:30:32,800
documentsの配列には
“Image Transitions”と―

451
00:30:32,900 --> 00:30:34,701
“Intro to Core Image”と―

452
00:30:34,802 --> 00:30:37,171
“Test Out CIFilters!”の
オブジェクトがあります

453
00:30:37,304 --> 00:30:40,507
“Content Aware Resizing”を
追加します

454
00:30:41,808 --> 00:30:44,578
幸い スニペットを
作ってあります

455
00:30:44,678 --> 00:30:46,713
こちらです

456
00:30:47,815 --> 00:30:50,551
このネイルで
タイプするのは大変なので…

457
00:30:50,651 --> 00:30:53,754
あとはタイトルを
タイプするだけです

458
00:30:53,854 --> 00:30:59,827
“Content Aware Resizing”と
名付けます

459
00:31:01,128 --> 00:31:03,163
“detailSubtitle”は省略

460
00:31:03,263 --> 00:31:05,299
“overviewSubtitle”は―

461
00:31:05,399 --> 00:31:07,901
“Swiftで
Content Aware Resizingを試そう”

462
00:31:08,001 --> 00:31:09,603
内容説明もあります

463
00:31:09,703 --> 00:31:11,104
コンテンツ識別子は―

464
00:31:11,205 --> 00:31:16,743
“io.github.WWDCPhotoFilters
.contentAwareResizing”

465
00:31:16,844 --> 00:31:20,447
最初の発行なので
バージョンは1.0です

466
00:31:20,781 --> 00:31:24,885
URLはウェブサイトにマップされ
フォルダ名は―

467
00:31:24,985 --> 00:31:26,553
“ContentAwareResizing”

468
00:31:26,653 --> 00:31:30,490
“/ContentAwareResizing.
playgroundbook.zip”

469
00:31:31,558 --> 00:31:35,362
“publishedDate”は
今日の９時40分

470
00:31:35,462 --> 00:31:40,167
“lastUpdatedDate”も
同じ値ですね

471
00:31:41,034 --> 00:31:44,905
“thumbnailURL”と
“bannerImageURL”も入っています

472
00:31:45,005 --> 00:31:48,342
“additionalInformation”で
言語設定を英語に

473
00:31:48,442 --> 00:31:52,546
“previewImageURLs”は
今のところ空白です

474
00:31:53,647 --> 00:31:56,450
問題はなさそうですね

475
00:31:56,550 --> 00:32:01,422
Xcode Source Controlへ行き
実行します

476
00:31:56,550 --> 00:32:01,422
Xcode Source Controlへ行き
実行します

477
00:32:02,256 --> 00:32:04,258
選択されたファイルは４つ

478
00:32:04,358 --> 00:32:08,228
３つのファイルを追加し
feed.jsonを変更しました

479
00:32:08,729 --> 00:32:10,430
実行して―

480
00:32:10,864 --> 00:32:13,667
“デモブックを追加”と
入力します

481
00:32:15,602 --> 00:32:17,337
“Push to remote”を選択

482
00:32:18,739 --> 00:32:20,073
あとは祈るだけ

483
00:32:23,610 --> 00:32:25,579
ホリーを呼びます

484
00:32:25,679 --> 00:32:27,414
うまくいきました

485
00:32:28,348 --> 00:32:33,287
（拍手）

486
00:32:33,387 --> 00:32:36,723
早速ホリーに購読してもらいます

487
00:32:38,358 --> 00:32:42,863
ウェブサイトには
すてきな購読ボタンがあります

488
00:32:42,963 --> 00:32:44,464
タップすると―

489
00:32:45,199 --> 00:32:47,434
Swift Playgroundsに移動

490
00:32:48,569 --> 00:32:50,104
購読しましょう

491
00:32:54,141 --> 00:32:55,676
QuickTimeを再起動

492
00:33:05,586 --> 00:33:07,087
映りましたね

493
00:33:12,860 --> 00:33:14,695
すばらしい作品です

494
00:33:15,829 --> 00:33:19,399
ダウンロードすることも
できます

495
00:33:19,500 --> 00:33:23,370
URLは
“wwdcphotofilters.github.io”

496
00:33:23,837 --> 00:33:26,874
４つのPlayground Bookを
すべてダウンロードできます

497
00:33:26,974 --> 00:33:28,509
“Intro to Core Image”

498
00:33:28,609 --> 00:33:33,113
Transitionフィルタを使用した
“Image Transitions”

499
00:33:33,213 --> 00:33:36,884
そしてCore Image内で
フィルタを組み合わせたもの

500
00:33:36,984 --> 00:33:38,485
重ねるのも可能です

501
00:33:38,919 --> 00:33:42,022
最後に
“Content Aware Resizing”です

502
00:33:42,122 --> 00:33:43,524
（喝采）

503
00:33:43,624 --> 00:33:44,258
ありがとう

504
00:33:44,358 --> 00:33:45,692
（拍手）

505
00:33:45,792 --> 00:33:48,128
確認しましょう

506
00:33:48,328 --> 00:33:49,763
少しお待ちを

507
00:33:53,600 --> 00:33:55,502
サイトにアップされていますね

508
00:33:55,602 --> 00:34:00,407
（拍手）

509
00:33:55,602 --> 00:34:00,407
（拍手）

510
00:34:00,507 --> 00:34:03,143
“Content Aware Resizing”を
ダウンロードして―

511
00:34:05,179 --> 00:34:06,447
開きます

512
00:34:08,815 --> 00:34:09,983
できました

513
00:34:10,317 --> 00:34:14,588
右側のライブビューには
モニュメントバレーの写真

514
00:34:14,688 --> 00:34:18,926
コードを実行して
どうなるかを見ましょう

515
00:34:24,797 --> 00:34:30,270
このアルゴリズムは
画像内の垂直な線をすべて見て―

516
00:34:30,370 --> 00:34:35,976
変化の少ないものを
１列ずつ除去していくのです

517
00:34:36,076 --> 00:34:40,013
少しカットされましたが
きれいな画像です

518
00:34:41,915 --> 00:34:48,155
（拍手）

519
00:34:49,889 --> 00:34:51,391
本日は以上です

520
00:34:51,491 --> 00:34:56,630
より詳しく知りたい方は
私たちのラボまで来てください

521
00:34:56,730 --> 00:34:59,900
セッションについての詳細は―

522
00:35:00,000 --> 00:35:04,004
developer.apple.comで
確認できます

523
00:35:05,038 --> 00:35:06,540
ありがとうございました

524
00:35:06,640 --> 00:35:10,144
皆さんの作品を楽しみにしています

525
00:35:10,244 --> 00:35:10,911
ありがとうございました

526
00:35:11,345 --> 00:35:19,286
(拍手)