
1
00:00:07,074 --> 00:00:13,580
(音楽)

2
00:00:21,421 --> 00:00:27,961
(拍手)

3
00:00:29,263 --> 00:00:31,899
204セッションへようこそ

4
00:00:31,999 --> 00:00:35,135
“強力なパスワードと
コードの自動入力”

5
00:00:35,536 --> 00:00:36,703
チェルシーです

6
00:00:37,471 --> 00:00:42,609
昨日この話題を
耳にした方もいるでしょう

7
00:00:42,809 --> 00:00:45,913
さらに詳しい特徴を
紹介します

8
00:00:47,114 --> 00:00:50,017
iOS 12の新たな機能で―

9
00:00:50,117 --> 00:00:54,254
アカウント作成や認証が
簡単になります

10
00:00:55,856 --> 00:01:01,395
認証画面のあるアプリケーションの
開発者向けのセッションです

11
00:00:55,856 --> 00:01:01,395
認証画面のあるアプリケーションの
開発者向けのセッションです

12
00:01:02,229 --> 00:01:05,532
パスワード管理は
頭痛の種です

13
00:01:06,733 --> 00:01:12,206
パスワードマネージャを
使っていても―

14
00:01:12,306 --> 00:01:14,608
悩みは尽きません

15
00:01:15,475 --> 00:01:19,713
危険でも人は
安易な手段を求めがちです

16
00:01:20,180 --> 00:01:23,317
パスワードの使い回しや―

17
00:01:23,684 --> 00:01:27,254
推測されやすい
パスワードがそうです

18
00:01:28,622 --> 00:01:32,359
ユーザーにとって
最も安全なのは―

19
00:01:32,759 --> 00:01:36,930
サービスごとに
パスワードを変えることです

20
00:01:37,898 --> 00:01:40,467
パスワードの漏えいは―

21
00:01:40,834 --> 00:01:43,670
誰もが知る問題でしょう

22
00:01:44,404 --> 00:01:49,610
その都度 パスワードを
変更する必要があります

23
00:01:50,811 --> 00:01:54,414
強度の高い
パスワードの作成に―

24
00:01:54,515 --> 00:01:56,717
この機能が役立ちます

25
00:01:57,351 --> 00:02:02,689
パスワードへの意識の
高い低いにかかわらず

26
00:01:57,351 --> 00:02:02,689
パスワードへの意識の
高い低いにかかわらず

27
00:02:02,990 --> 00:02:06,293
どんなユーザーにも
有益な機能です

28
00:02:08,228 --> 00:02:10,697
ご紹介する機能は―

29
00:02:11,231 --> 00:02:14,835
iCloudキーチェーンが
ベースです

30
00:02:15,536 --> 00:02:20,874
生体認証でパスワードを守り
最高の安全性を誇ります

31
00:02:22,743 --> 00:02:26,079
Appleもアクセスできず―

32
00:02:26,180 --> 00:02:28,415
個人情報は保護されます

33
00:02:29,550 --> 00:02:34,721
アプリケーションでの
アカウント作成や認証にも便利です

34
00:02:35,522 --> 00:02:37,858
それを容易にする機能を―

35
00:02:37,958 --> 00:02:40,561
iOS 12に搭載しました

36
00:02:40,994 --> 00:02:43,564
実際にお見せします

37
00:02:45,332 --> 00:02:46,233
“デモ”

38
00:02:48,035 --> 00:02:50,003
Shinyアプリケーションを
使います

39
00:02:50,571 --> 00:02:54,374
アカウント作成や
ログインのデモ用に―

40
00:02:54,975 --> 00:02:56,276
欠かせません

41
00:02:56,610 --> 00:02:59,513
ではタップして進めます

42
00:03:00,447 --> 00:03:01,815
メール欄を選択

43
00:03:02,249 --> 00:03:04,952
ユーザー名が提示されます

44
00:03:05,285 --> 00:03:07,354
iOS 12の新機能です

45
00:03:08,222 --> 00:03:13,293
キーチェーンに蓄積された
認証情報がベースです

46
00:03:13,827 --> 00:03:18,265
Chelsea@example.comを
使います

47
00:03:18,966 --> 00:03:22,269
パスワード欄が
自動で選択され―

48
00:03:22,369 --> 00:03:24,838
強いパスワードが
提示されます

49
00:03:26,106 --> 00:03:29,776
パスワードは
“設定”で確認できます

50
00:03:29,877 --> 00:03:35,048
キーチェーンが利用できれば
別のデバイスでも使えます

51
00:03:35,482 --> 00:03:38,185
このまま先に進めます

52
00:03:38,886 --> 00:03:43,857
わずか数タップで
Shinyに戻ります

53
00:03:44,758 --> 00:03:49,730
では このまま続けて
２ファクタ認証を行います

54
00:03:50,264 --> 00:03:53,133
Shinyの画面をご覧ください

55
00:03:53,500 --> 00:03:55,969
メール欄をタップ

56
00:03:56,670 --> 00:04:00,607
認証情報が
提示されています

57
00:03:56,670 --> 00:04:00,607
認証情報が
提示されています

58
00:04:01,041 --> 00:04:02,042
選択します

59
00:04:02,743 --> 00:04:06,880
パスワード ユーザー名が
Face ID後に表示されます

60
00:04:08,115 --> 00:04:11,151
２ファクタ認証を行います

61
00:04:11,652 --> 00:04:15,022
コードを覚えなくても―

62
00:04:15,155 --> 00:04:20,427
受信したばかりなので
QuickType barで確認できます

63
00:04:20,726 --> 00:04:23,030
タップ１回で完了です

64
00:04:23,163 --> 00:04:24,064
(拍手)

65
00:04:24,164 --> 00:04:25,732
すばらしい機能です

66
00:04:29,002 --> 00:04:31,238
入力して送信した後―

67
00:04:32,072 --> 00:04:36,009
わずか数タップで
再ログインが可能です

68
00:04:37,311 --> 00:04:38,412
スライドに戻ります

69
00:04:39,913 --> 00:04:43,784
この機能を使っての
アカウント作成は―

70
00:04:44,151 --> 00:04:45,452
早くて簡単です

71
00:04:45,752 --> 00:04:48,822
パスワードに
頭を悩ませず―

72
00:04:49,223 --> 00:04:51,058
入力できました

73
00:04:52,125 --> 00:04:55,295
Shinyに戻る時も同じでした

74
00:04:55,796 --> 00:04:59,900
自動作成機能で作成した
パスワードはログインの

75
00:05:00,133 --> 00:05:03,070
インプリメンテーションと
なるのです

76
00:05:04,972 --> 00:05:06,206
本日の内容です

77
00:05:06,473 --> 00:05:09,243
パスワードの
自動入力の概要

78
00:05:09,676 --> 00:05:13,680
それこそが新たな機能の
ベースです

79
00:05:14,748 --> 00:05:18,919
次に強力なパスワードを
機能させる方法

80
00:05:19,786 --> 00:05:21,989
セキュリティコードの
自動入力

81
00:05:23,056 --> 00:05:26,827
さらに他社との認証連携

82
00:05:27,661 --> 00:05:33,033
最後にキーチェーンによる
パスワード管理

83
00:05:35,369 --> 00:05:38,839
自動入力は
iOS 11で紹介しました

84
00:05:39,540 --> 00:05:45,279
それを基に構築した
新たな機能もあります

85
00:05:48,916 --> 00:05:53,987
QuickType barを見れば
簡単にログインできます

86
00:05:54,421 --> 00:05:57,424
手順を振り返ってみましょう

87
00:05:59,793 --> 00:06:03,030
キーチェーンの
パスワードは―

88
00:05:59,793 --> 00:06:03,030
キーチェーンの
パスワードは―

89
00:06:03,130 --> 00:06:06,567
ドメインに基づいて
蓄積されます

90
00:06:07,367 --> 00:06:11,004
なのでアプリケーションと
ドメインの関連付けが―

91
00:06:11,405 --> 00:06:12,673
重要です

92
00:06:13,440 --> 00:06:17,611
これでQuickType barに
情報を表示できます

93
00:06:18,312 --> 00:06:22,516
Universal Linksなら
関連付け済みです

94
00:06:24,184 --> 00:06:26,987
その方法は簡単です

95
00:06:27,221 --> 00:06:30,657
entitlementsを
少し変えて―

96
00:06:30,924 --> 00:06:33,327
ファイルを送信します

97
00:06:34,228 --> 00:06:37,097
設定方法の詳細は―

98
00:06:37,364 --> 00:06:41,835
2017年のWWDCの資料を
参照してください

99
00:06:44,004 --> 00:06:49,576
タグ付けが正しければ
自動入力は機能します

100
00:06:50,410 --> 00:06:53,480
フィールドに適切な
Content Typeを与えます

101
00:06:54,314 --> 00:06:59,052
これから入力するフィールドと
既存のパスワードを―

102
00:06:59,586 --> 00:07:01,054
タグ付けします

103
00:06:59,586 --> 00:07:01,054
タグ付けします

104
00:07:02,089 --> 00:07:05,792
パスワードを
隠さず表示させる場合―

105
00:07:06,260 --> 00:07:10,397
適切なタグ付けが
とても重要です

106
00:07:10,631 --> 00:07:12,866
パスワードのお話でした

107
00:07:13,567 --> 00:07:14,868
それでは―

108
00:07:15,035 --> 00:07:19,706
自動入力の改善点について
ご紹介します

109
00:07:20,941 --> 00:07:25,212
iOS 11.3以降
WKWebViewを使用しています

110
00:07:25,879 --> 00:07:30,284
web技術を使う認証画面なら
便利です

111
00:07:31,885 --> 00:07:35,322
パスワードマネージャは
iOS 12で―

112
00:07:35,522 --> 00:07:37,324
自動入力に対応可能です

113
00:07:38,158 --> 00:07:43,697
つまり認証情報を
入力するにあたって―

114
00:07:44,097 --> 00:07:47,301
キーチェーン以外でも
利用できます

115
00:07:48,468 --> 00:07:50,637
開発者の方は―

116
00:07:50,971 --> 00:07:54,374
Provider Extensionを
ご確認ください

117
00:07:56,677 --> 00:07:59,513
新しいアカウントの場合―

118
00:07:59,980 --> 00:08:02,616
認証情報を保存します

119
00:07:59,980 --> 00:08:02,616
認証情報を保存します

120
00:08:03,517 --> 00:08:09,423
なので あらゆるデバイスで
利用できるのです

121
00:08:10,157 --> 00:08:15,028
パスワードの保存と
更新方法を説明します

122
00:08:16,430 --> 00:08:18,265
まずは保存です

123
00:08:18,365 --> 00:08:21,468
ログインシナリオを
推測します

124
00:08:22,636 --> 00:08:25,606
適格性の判断のため―

125
00:08:25,706 --> 00:08:29,243
アプリケーションとドメインの
関連性を確認します

126
00:08:29,843 --> 00:08:31,178
関連がなければ―

127
00:08:31,512 --> 00:08:33,547
保存機能は使えません

128
00:08:35,349 --> 00:08:40,821
次に保存する情報を探すため
場所を特定します

129
00:08:41,822 --> 00:08:44,358
ログインすると検知します

130
00:08:45,259 --> 00:08:50,297
保存か更新の判断基準は

131
00:08:50,597 --> 00:08:54,368
キーチェーンにはない
新たな情報かどうか

132
00:08:54,468 --> 00:08:57,671
またはユーザーが
更新したかによります

133
00:08:59,239 --> 00:09:02,743
アプリケーションの動作に
影響はないですが―

134
00:08:59,239 --> 00:09:02,743
アプリケーションの動作に
影響はないですが―

135
00:09:02,843 --> 00:09:05,712
正しく機能させる手順を
紹介します

136
00:09:06,513 --> 00:09:10,918
フィールドに適切な
context typeを置くこと

137
00:09:11,018 --> 00:09:12,853
データ入力と同じです

138
00:09:14,054 --> 00:09:19,159
ユーザー名などのフィールドを
View階層から削除する

139
00:09:19,259 --> 00:09:22,429
これでログインを
検知できます

140
00:09:23,130 --> 00:09:27,301
View Controllerを解除すれば
可能です

141
00:09:28,836 --> 00:09:31,872
View階層から
除外された後で―

142
00:09:31,972 --> 00:09:34,308
フィールドを
クリアにしてください

143
00:09:34,408 --> 00:09:38,178
こうして
認証情報として保存できます

144
00:09:39,580 --> 00:09:42,916
ドメインが正しいか
確認してください

145
00:09:43,116 --> 00:09:46,720
アプリケーションに
パスワードを保存すれば―

146
00:09:46,820 --> 00:09:48,922
“設定”で確認できます

147
00:09:49,389 --> 00:09:52,759
ドメインが
適切でなければ―

148
00:09:52,860 --> 00:09:57,731
それに関連した情報を使って
無効にできます

149
00:09:58,765 --> 00:10:01,201
従来は
認証情報の保存に―

150
00:09:58,765 --> 00:10:01,201
従来は
認証情報の保存に―

151
00:10:01,301 --> 00:10:05,939
SecAddSharedWebCredentialを
使っていたでしょう

152
00:10:06,340 --> 00:10:09,576
でも今は
自動で保存できるので―

153
00:10:09,676 --> 00:10:12,779
もはや この関数は不要です

154
00:10:13,580 --> 00:10:18,385
でもログイン画面が
WebViewなら―

155
00:10:18,819 --> 00:10:20,787
これを使いたくなります

156
00:10:22,990 --> 00:10:29,129
確実にパスワードを
保存するための要点です

157
00:10:29,396 --> 00:10:32,199
アプリケーションと
ドメインの関連付け

158
00:10:33,000 --> 00:10:36,203
フィールドへの
適切なタグ付け

159
00:10:37,271 --> 00:10:43,043
ログイン時に表示される
プロンプトを確認して―

160
00:10:43,143 --> 00:10:45,112
ログインを検知すること

161
00:10:47,014 --> 00:10:52,019
自動入力が機能すれば
ログインは容易になります

162
00:10:53,520 --> 00:10:58,725
新規ユーザーはまず
アカウントを作成します

163
00:10:59,426 --> 00:11:04,731
デモでご覧のとおり
この手続きはかなり簡単です

164
00:10:59,426 --> 00:11:04,731
デモでご覧のとおり
この手続きはかなり簡単です

165
00:11:05,499 --> 00:11:07,167
次はレザから―

166
00:11:07,434 --> 00:11:11,238
強度の高いパスワードを
紹介します

167
00:11:11,572 --> 00:11:12,339
ありがとう

168
00:11:12,506 --> 00:11:18,345
(拍手)

169
00:11:18,445 --> 00:11:19,479
どうも

170
00:11:20,647 --> 00:11:25,953
パスワードの
自動作成について説明します

171
00:11:27,120 --> 00:11:30,757
アカウント作成は
ストレスの塊です

172
00:11:30,858 --> 00:11:33,727
使用頻度が
低かったりすると―

173
00:11:33,827 --> 00:11:38,832
適当なパスワードを
使ってしまいます

174
00:11:39,399 --> 00:11:42,302
セキュリティは低下します

175
00:11:43,036 --> 00:11:46,740
新規アカウントを
作成する代わりに

176
00:11:46,840 --> 00:11:50,510
SNSアカウントを
使用することを

177
00:11:51,211 --> 00:11:53,714
懸念する人もいます

178
00:11:55,516 --> 00:11:59,453
この機能なら
アカウント作成は容易です

179
00:11:59,553 --> 00:12:03,891
ログイン手順は
便利で安全です

180
00:11:59,553 --> 00:12:03,891
ログイン手順は
便利で安全です

181
00:12:03,991 --> 00:12:07,828
パスワードに悩む必要は
ありません

182
00:12:08,529 --> 00:12:12,332
ユーザー名も
提示してくれます

183
00:12:12,900 --> 00:12:17,171
わずか数タップで
作成できるのです

184
00:12:17,271 --> 00:12:20,774
だからユーザーが増加します

185
00:12:22,176 --> 00:12:25,746
では この機能を
ご紹介します

186
00:12:27,114 --> 00:12:30,617
チェルシーの説明に
似ていますが―

187
00:12:31,084 --> 00:12:34,755
View Controllerで
タイプを推測できます

188
00:12:34,855 --> 00:12:37,257
これは認証用です

189
00:12:38,392 --> 00:12:41,862
関連するドメインに
基づいて―

190
00:12:42,196 --> 00:12:46,967
パスワードが保存可能か
判断するため―

191
00:12:47,234 --> 00:12:49,069
適格性を確認します

192
00:12:49,169 --> 00:12:50,037
確認できたら―

193
00:12:50,737 --> 00:12:54,975
ユーザー名やパスワードなど
認証情報を―

194
00:12:55,075 --> 00:12:57,344
検知できるのです

195
00:12:58,512 --> 00:13:01,448
ユーザー名欄が
FirstResponderなら―

196
00:12:58,512 --> 00:13:01,448
ユーザー名欄が
FirstResponderなら―

197
00:13:02,049 --> 00:13:03,917
ユーザー名を提示します

198
00:13:04,384 --> 00:13:06,753
iOS 12の新機能です

199
00:13:06,920 --> 00:13:09,857
提示されたユーザー名で
進めます

200
00:13:10,991 --> 00:13:14,161
パスワード欄が
FirstResponderになり―

201
00:13:14,595 --> 00:13:18,398
強力なパスワードが
自動入力されます

202
00:13:18,832 --> 00:13:23,337
そのパスワードで
ログインするだけで―

203
00:13:24,171 --> 00:13:26,607
パスワードが保存されます

204
00:13:27,641 --> 00:13:32,679
特に選択することなく
自動的に進められます

205
00:13:33,046 --> 00:13:35,249
しかし この機能と

206
00:13:35,349 --> 00:13:38,752
アプリケーションとの
適合性確認のため―

207
00:13:38,852 --> 00:13:41,388
いくつか手順を踏みます

208
00:13:43,123 --> 00:13:49,029
チェルシーの説明と
大まかな内容は同じです

209
00:13:51,932 --> 00:13:56,436
適切なContent Typeと
フィールドをタグ付けします

210
00:13:57,371 --> 00:14:02,676
iOS 12では
New Passwordを―

211
00:13:57,371 --> 00:14:02,676
iOS 12では
New Passwordを―

212
00:14:02,843 --> 00:14:05,345
UITextContentTypeに
タグ付けします

213
00:14:06,813 --> 00:14:10,417
UITableViewで
ログイン画面を作る場合―

214
00:14:10,984 --> 00:14:14,188
ユーザー名と
パスワードには―

215
00:14:14,288 --> 00:14:16,523
固有のUITextフィールドを
使います

216
00:14:16,990 --> 00:14:21,495
ユーザー名とパスワードを
検知すると―

217
00:14:21,695 --> 00:14:25,499
確実に値を
読み込むことができます

218
00:14:27,201 --> 00:14:30,070
フォームを変えた場合―

219
00:14:30,604 --> 00:14:34,241
ユーザー名とパスワードを
検知できれば―

220
00:14:34,341 --> 00:14:39,179
変更後のフォームにも
適用できます

221
00:14:40,614 --> 00:14:43,217
ユーザー名は
編集不可にできます

222
00:14:44,284 --> 00:14:49,056
ログインフォームは
変更フォームにも適用します

223
00:14:50,824 --> 00:14:55,996
ではパスワードの
フォーマットの話をします

224
00:14:59,133 --> 00:15:01,969
パスワードは20文字です

225
00:14:59,133 --> 00:15:01,969
パスワードは20文字です

226
00:15:02,469 --> 00:15:06,139
大文字 数字
ハイフン 小文字

227
00:15:06,807 --> 00:15:09,810
これらを含みます

228
00:15:10,711 --> 00:15:14,648
エントロピーが71ビット以上の
パスワードです

229
00:15:15,582 --> 00:15:19,620
他のサービスに使える
強力なパスワードです

230
00:15:20,954 --> 00:15:25,626
アプリケーション独自のルールを
定義することも可能です

231
00:15:26,527 --> 00:15:27,694
先述のとおり―

232
00:15:28,262 --> 00:15:34,001
たいてい互換性があるので
この作業は不要です

233
00:15:34,568 --> 00:15:36,670
でもアプリケーションの
バックエンドで―

234
00:15:36,770 --> 00:15:42,476
初期フォーマットとは
別のルールが必要な場合―

235
00:15:42,843 --> 00:15:44,411
それを適用できます

236
00:15:45,379 --> 00:15:49,750
そのためには
新たな言語を使います

237
00:15:50,784 --> 00:15:55,022
フォーマットにしたがい
rulesDescriptorを作ります

238
00:15:55,422 --> 00:16:01,161
UITextInputPasswordRulesの
インスタンスを作り―

239
00:15:55,422 --> 00:16:01,161
UITextInputPasswordRulesの
インスタンスを作り―

240
00:16:01,261 --> 00:16:04,598
パスワードルールに
当てはめます

241
00:16:04,698 --> 00:16:10,437
これでルールに基づいた
パスワードが作成されます

242
00:16:12,039 --> 00:16:15,642
Password Rules
Validation Toolも作りました

243
00:16:16,677 --> 00:16:20,447
このツールで
正確なルールを確認し―

244
00:16:21,014 --> 00:16:25,819
望みどおりのパスワードを
作成できます

245
00:16:28,856 --> 00:16:31,692
この機能を
アプリケーションに生かす―

246
00:16:31,792 --> 00:16:35,028
手順を紹介してきました

247
00:16:35,128 --> 00:16:36,530
実際にお見せします

248
00:16:37,931 --> 00:16:39,967
私はShinyの開発者です

249
00:16:40,067 --> 00:16:45,005
パスワード自動作成機能との
互換性を確認します

250
00:16:45,272 --> 00:16:46,874
まず最初に―

251
00:16:46,974 --> 00:16:51,145
iOS 12 SDKで
Shinyを立ち上げます

252
00:16:51,578 --> 00:16:54,114
Xcodeで“実行”をクリック

253
00:16:57,818 --> 00:17:01,255
アカウントを作成します

254
00:16:57,818 --> 00:17:01,255
アカウントを作成します

255
00:17:02,256 --> 00:17:06,226
メール欄をタップしても
表示されません

256
00:17:06,993 --> 00:17:11,598
パスワード欄をタップしても
同様です

257
00:17:11,698 --> 00:17:15,035
Xcodeに戻って調べます

258
00:17:18,305 --> 00:17:23,010
まずアプリケーションに関連する
ドメインを確認します

259
00:17:23,510 --> 00:17:27,714
Shinyの関連ドメインを
確認していたので―

260
00:17:27,814 --> 00:17:33,620
ログインしたい時に
自動入力で表示できました

261
00:17:34,454 --> 00:17:40,627
次に認証画面の
View Controllerを確認します

262
00:17:42,196 --> 00:17:44,131
メール欄をクリック

263
00:17:46,533 --> 00:17:47,668
ここで―

264
00:17:48,168 --> 00:17:51,104
Content Typeが
“不明”でした

265
00:17:51,205 --> 00:17:54,274
正しく設定し直します

266
00:17:55,242 --> 00:18:00,114
ユーザー名を
メールアドレスにしたいので

267
00:17:55,242 --> 00:18:00,114
ユーザー名を
メールアドレスにしたいので

268
00:18:00,214 --> 00:18:03,684
正しく設定してあることを
確認します

269
00:18:03,784 --> 00:18:07,254
ではパスワード欄を
見てみましょう

270
00:18:09,823 --> 00:18:15,095
Content Typeが
不明になっているので―

271
00:18:16,563 --> 00:18:19,666
New Passwordを選択します

272
00:18:22,569 --> 00:18:27,808
パスワードなので
文字が隠れる設定にします

273
00:18:30,811 --> 00:18:33,847
ではShinyに戻ります

274
00:18:38,986 --> 00:18:42,656
アカウント作成から
メール欄をタップ

275
00:18:42,756 --> 00:18:46,160
ユーザー名が提示されました

276
00:18:46,326 --> 00:18:48,996
このユーザー名で進めます

277
00:18:49,096 --> 00:18:51,398
パスワードを確認します

278
00:18:51,832 --> 00:18:55,202
通常は ここで完了です

279
00:18:55,302 --> 00:18:57,871
認証手続きに進みます

280
00:19:00,073 --> 00:19:01,975
今回はデモなので―

281
00:19:02,075 --> 00:19:05,812
パスワードに$が必要です

282
00:19:06,346 --> 00:19:11,585
独自のパスワードルールを
特定するためです

283
00:19:12,085 --> 00:19:16,690
Password Rules
Validation Toolが便利です

284
00:19:16,990 --> 00:19:21,361
これを使えば
適切なルールを指定し―

285
00:19:21,462 --> 00:19:26,166
希望どおりのパスワードを
作成できます

286
00:19:26,266 --> 00:19:27,901
やってみましょう

287
00:19:29,102 --> 00:19:32,573
Password Rules
Validation Toolには―

288
00:19:32,873 --> 00:19:34,975
developer.apple.comから
飛びます

289
00:19:35,976 --> 00:19:37,844
今回はデモなので―

290
00:19:37,945 --> 00:19:41,915
大文字 小文字
数字に加えて―

291
00:19:42,216 --> 00:19:46,453
$もパスワードに
必要となります

292
00:19:47,621 --> 00:19:49,189
ページの下部に―

293
00:19:49,723 --> 00:19:52,659
パスワード例が表示されます

294
00:19:53,193 --> 00:19:56,463
アプリケーションで
テストが必要なら―

295
00:19:56,997 --> 00:20:00,334
パスワードを
ダウンロードできます

296
00:19:56,997 --> 00:20:00,334
パスワードを
ダウンロードできます

297
00:20:01,301 --> 00:20:05,405
パスワードに
問題がなければ―

298
00:20:05,672 --> 00:20:06,673
選択肢は２つ

299
00:20:07,407 --> 00:20:10,077
UIKit用の
アプリケーションなら―

300
00:20:10,611 --> 00:20:13,747
UIKit用をコピーします

301
00:20:13,847 --> 00:20:16,183
ウェブページなら―

302
00:20:16,283 --> 00:20:19,887
HTML用をコピーします

303
00:20:20,954 --> 00:20:22,189
デモでは―

304
00:20:22,923 --> 00:20:27,628
アプリケーションに合わせて
UIKit用をコピーします

305
00:20:30,564 --> 00:20:35,369
コピーしたら
Xcodeに戻ります

306
00:20:36,403 --> 00:20:37,838
パスワードを選び―

307
00:20:38,939 --> 00:20:43,377
パスワードルールの
フィールドにペーストします

308
00:20:45,679 --> 00:20:47,714
そしてShinyに戻ります

309
00:20:53,587 --> 00:20:54,288
よし

310
00:20:55,622 --> 00:20:57,257
アカウント作成をタップ

311
00:20:58,258 --> 00:21:01,595
提示されたユーザー名で
進めます

312
00:20:58,258 --> 00:21:01,595
提示されたユーザー名で
進めます

313
00:21:01,695 --> 00:21:06,733
パスワードはルールに
適合しているはずです

314
00:21:06,833 --> 00:21:08,569
サインインします

315
00:21:10,671 --> 00:21:12,439
入れました

316
00:21:13,774 --> 00:21:16,610
(拍手)

317
00:21:16,710 --> 00:21:17,544
ありがとう

318
00:21:19,413 --> 00:21:24,551
この機能とアプリケーションとの
適合は簡単だったでしょう

319
00:21:26,120 --> 00:21:27,221
ありがとう　レザ

320
00:21:27,788 --> 00:21:33,060
パスワード自動入力の
実装手順の紹介でした

321
00:21:33,961 --> 00:21:38,899
アプリケーションとドメインを
関連付けてください

322
00:21:40,200 --> 00:21:44,671
フィールドに
適切なタグを付けてください

323
00:21:46,573 --> 00:21:52,179
ログインが検知されることを
確認してください

324
00:21:53,247 --> 00:21:56,850
この３ステップで
ほぼ完了です

325
00:21:57,050 --> 00:22:01,922
Appleの設定と
互換性がない場合は―

326
00:21:57,050 --> 00:22:01,922
Appleの設定と
互換性がない場合は―

327
00:22:02,156 --> 00:22:05,459
独自のパスワードルールを
作りましょう

328
00:22:05,559 --> 00:22:09,763
適合するパスワードが
作成できます

329
00:22:12,566 --> 00:22:15,903
Automatic Strong Passwordsを
確実に機能させることで―

330
00:22:16,003 --> 00:22:21,308
強力なパスワードを使用でき
ユーザーを守ることができます

331
00:22:23,343 --> 00:22:27,648
SMSを使うアプリケーションや
サービスは―

332
00:22:27,748 --> 00:22:30,551
セキュリティコードを
送信します

333
00:22:31,518 --> 00:22:36,590
コードの適切な運用方法を
ハリスが紹介します

334
00:22:37,658 --> 00:22:42,563
(拍手)

335
00:22:42,663 --> 00:22:44,498
どうも　チェルシー

336
00:22:45,165 --> 00:22:47,768
こんにちは　ハリスです

337
00:22:48,001 --> 00:22:51,505
これを紹介できて
うれしいです

338
00:22:52,206 --> 00:22:55,442
まず皆さんにお聞きします

339
00:22:55,542 --> 00:23:00,914
こんなメッセージを
受け取ったことがある方は？

340
00:22:55,542 --> 00:23:00,914
こんなメッセージを
受け取ったことがある方は？

341
00:23:02,916 --> 00:23:07,988
現時点では大半の人が
定期的に受信してます

342
00:23:08,856 --> 00:23:12,493
では これを受信した後―

343
00:23:12,726 --> 00:23:14,828
こんな手順を踏む方は？

344
00:23:15,462 --> 00:23:17,431
コードを覚えて―

345
00:23:17,531 --> 00:23:20,968
入力したのに
数字をタイプミス

346
00:23:21,068 --> 00:23:22,803
それでやり直す

347
00:23:23,036 --> 00:23:24,338
挙手して

348
00:23:26,840 --> 00:23:28,909
最後の質問です

349
00:23:29,977 --> 00:23:35,415
最後まで手順を踏んで
こんな気持ちになる方？

350
00:23:37,751 --> 00:23:41,221
もう こんな手間とは
さよならです

351
00:23:41,488 --> 00:23:44,792
iOS 12と
macOS Mojaveによる―

352
00:23:44,892 --> 00:23:47,694
自動入力をご紹介します

353
00:23:47,861 --> 00:23:49,196
新たな機能は―

354
00:23:49,329 --> 00:23:54,401
２ファクタ認証の
煩わしさを解消します

355
00:23:55,802 --> 00:23:58,205
ここで重要なのは―

356
00:23:58,305 --> 00:24:03,644
これは２ファクタ認証に
代わるものではない点です

357
00:23:58,305 --> 00:24:03,644
これは２ファクタ認証に
代わるものではない点です

358
00:24:04,578 --> 00:24:07,414
コードを打つ手間を―

359
00:24:07,548 --> 00:24:11,185
単に省いただけなのです

360
00:24:12,219 --> 00:24:15,089
それ以上でも
以下でもありません

361
00:24:15,255 --> 00:24:19,293
(拍手)

362
00:24:19,393 --> 00:24:23,130
iOS 12とmacOSでは―

363
00:24:23,597 --> 00:24:27,768
記憶力を鍛える代わりに
こうします

364
00:24:28,669 --> 00:24:31,405
QuickType barを
１回タップ

365
00:24:31,905 --> 00:24:33,106
認証完了です

366
00:24:34,041 --> 00:24:38,278
皆さんの気分は
こうなっているはず

367
00:24:40,447 --> 00:24:43,016
では技術的な話をします

368
00:24:44,117 --> 00:24:48,188
他の自動入力と同じく
この機能も―

369
00:24:48,288 --> 00:24:50,524
難しい設定は一切ありません

370
00:24:51,525 --> 00:24:57,164
ですが確実に機能させるため
手順を踏んでみましょう

371
00:24:58,532 --> 00:25:01,435
タグ付けの話をしてきました

372
00:24:58,532 --> 00:25:01,435
タグ付けの話をしてきました

373
00:25:02,035 --> 00:25:05,639
紹介するのは
oneTimeCodeを伴う―

374
00:25:05,739 --> 00:25:07,708
UITextContentTypeです

375
00:25:08,709 --> 00:25:13,547
これらをタグ付けし
自動入力を機能させます

376
00:25:15,816 --> 00:25:21,655
システムキーボードを使って
コード入力を行います

377
00:25:22,422 --> 00:25:27,995
特注のキーボードや
inputViewの設定は―

378
00:25:28,228 --> 00:25:30,898
控えるようにしてください

379
00:25:31,231 --> 00:25:35,936
必要なUIの表示や
コード入力の手順に―

380
00:25:36,036 --> 00:25:40,040
影響を与えてしまうからです

381
00:25:40,440 --> 00:25:46,180
またアクセシビリティも
阻害されるかもしれません

382
00:25:47,514 --> 00:25:51,518
必ずシステムキーボードを
使いましょう

383
00:25:51,618 --> 00:25:54,488
そうすれば自動入力は
毎回機能します

384
00:25:56,690 --> 00:26:01,662
この機能を最大限に
引き出すために―

385
00:25:56,690 --> 00:26:01,662
この機能を最大限に
引き出すために―

386
00:26:01,762 --> 00:26:03,931
適切にメッセージを作ります

387
00:26:04,932 --> 00:26:06,333
iOSとmacOSは―

388
00:26:06,433 --> 00:26:11,972
コードを含むメッセージを
データ検出できます

389
00:26:12,272 --> 00:26:16,009
特に実際のコード列に
近い―

390
00:26:16,109 --> 00:26:19,413
コードやパスコードを
検知します

391
00:26:19,746 --> 00:26:24,451
言語別のメッセージ例を
スライドに載せました

392
00:26:25,586 --> 00:26:29,423
iOSやmacOSがコードを
確実に検出するか―

393
00:26:29,523 --> 00:26:33,026
確認する方法は
いたってシンプルです

394
00:26:33,460 --> 00:26:36,463
自分宛てにメッセージを
送ればいいのです

395
00:26:36,897 --> 00:26:39,299
コードをタップして―

396
00:26:39,500 --> 00:26:44,104
“コードをコピー”と出たら
正しく機能しています

397
00:26:44,304 --> 00:26:45,973
コードを入手します

398
00:26:48,141 --> 00:26:53,280
iOSやmacOSがサポートされた
すべての場所で使えます

399
00:26:53,447 --> 00:26:58,819
この手順に従っても
ウェブ上やアプリケーションで

400
00:26:58,919 --> 00:27:04,691
自動入力が機能しない場合
バグ報告をしてください

401
00:26:58,919 --> 00:27:04,691
自動入力が機能しない場合
バグ報告をしてください

402
00:27:04,792 --> 00:27:06,260
対応します

403
00:27:07,928 --> 00:27:09,696
ここまでで―

404
00:27:09,963 --> 00:27:14,568
iOSネイティブアプリケーションでの
操作を説明しました

405
00:27:16,403 --> 00:27:21,041
この機能は
Safariでも利用できます

406
00:27:21,808 --> 00:27:23,777
さらに優れているのは―

407
00:27:23,977 --> 00:27:28,081
MacからSafariで
ログインする場合―

408
00:27:28,348 --> 00:27:32,853
iPhoneに届いたコードを
Macに入力できます

409
00:27:32,953 --> 00:27:38,058
つまりクリック１回で
コードを入力できます

410
00:27:38,158 --> 00:27:41,395
メッセージを見直すとか―

411
00:27:41,495 --> 00:27:44,498
iPhoneを捜す必要は
ありません

412
00:27:44,932 --> 00:27:50,470
(拍手)

413
00:27:51,572 --> 00:27:54,174
Safariで自動入力を
使うため―

414
00:27:54,474 --> 00:27:58,345
新しいautocomplete属性を
紹介します

415
00:27:58,445 --> 00:27:59,980
oneTimeCodeです

416
00:28:00,214 --> 00:28:04,618
本日紹介した
UITextContentTypeは―

417
00:28:04,785 --> 00:28:07,621
ウェブプラットフォームを
持ちます

418
00:28:07,721 --> 00:28:10,891
そのおかげでウェブや
アプリケーションでの―

419
00:28:10,991 --> 00:28:13,694
自動入力がスムーズに
行えます

420
00:28:14,561 --> 00:28:19,633
適切にタグ付けすれば
最高の機能を発揮します

421
00:28:21,802 --> 00:28:25,005
iOS 12とmacOS Mojaveの
新機能である―

422
00:28:25,105 --> 00:28:28,308
コードの自動入力を
紹介しました

423
00:28:28,408 --> 00:28:33,313
これで２ファクタ認証の
ストレスから解放です

424
00:28:36,350 --> 00:28:39,152
紹介した機能に伴って―

425
00:28:39,253 --> 00:28:43,657
ユーザーの安全性を
保護しながらも―

426
00:28:43,757 --> 00:28:47,361
彼らとの関係を
シンプルに築けます

427
00:28:48,562 --> 00:28:51,598
他社との認証連携が―

428
00:28:51,698 --> 00:28:54,668
必要な方もいるでしょう

429
00:28:54,768 --> 00:28:56,904
人気のSNSがそうです

430
00:28:57,571 --> 00:29:03,644
そんな方のためにiOS 12の
新しいAPIをご紹介します

431
00:28:57,571 --> 00:29:03,644
そんな方のためにiOS 12の
新しいAPIをご紹介します

432
00:29:04,111 --> 00:29:08,615
ASWebAuthenticationSessionの
機能を説明します

433
00:29:10,851 --> 00:29:12,753
Shinyに戻ります

434
00:29:12,953 --> 00:29:16,089
今回はexample.comを
選びます

435
00:29:16,190 --> 00:29:18,292
有名なSNSです

436
00:29:19,893 --> 00:29:21,628
タップすると―

437
00:29:21,728 --> 00:29:26,200
アプリケーションが
新しいAPIを通知します

438
00:29:26,633 --> 00:29:31,271
このAPIで
ログインが早まる理由は―

439
00:29:31,371 --> 00:29:34,274
Safariとのcookie情報の
共有です

440
00:29:35,075 --> 00:29:37,411
もちろん その前に―

441
00:29:37,511 --> 00:29:40,214
ユーザーの同意が必要です

442
00:29:41,682 --> 00:29:45,719
安全なView Controllerが
同意後に提供され―

443
00:29:45,819 --> 00:29:49,389
認証連携の手続きに進みます

444
00:29:50,457 --> 00:29:55,896
iPhoneでexample.comに
ログインしているので―

445
00:29:55,996 --> 00:29:57,898
“許可”をタップ

446
00:29:59,800 --> 00:30:00,367
よし

447
00:29:59,800 --> 00:30:00,367
よし

448
00:30:00,467 --> 00:30:05,939
タップ２回だけで
認証連携が完了しました

449
00:30:06,974 --> 00:30:11,678
以前は
別のプラットフォームで―

450
00:30:11,778 --> 00:30:14,515
実施していたかもしれません

451
00:30:15,749 --> 00:30:21,688
iOS 12で認証連携を行うには
このAPIが信頼できます

452
00:30:23,123 --> 00:30:27,795
このAPIでのログインが
早いのは―

453
00:30:27,895 --> 00:30:32,566
cookie情報を
共有しているからです

454
00:30:33,233 --> 00:30:38,939
つまり他社との
認証連携に基づきます

455
00:30:39,039 --> 00:30:43,110
Safariで
ログインする場合―

456
00:30:43,210 --> 00:30:45,712
画面を見る必要もありません

457
00:30:47,047 --> 00:30:52,119
パスワードとコードの
自動入力を確認して―

458
00:30:52,219 --> 00:30:56,223
手間が省けたことを
実感してください

459
00:30:57,524 --> 00:31:03,363
シンプルに実行可能な
ブロックベースのAPIを―

460
00:30:57,524 --> 00:31:03,363
シンプルに実行可能な
ブロックベースのAPIを―

461
00:31:03,464 --> 00:31:05,232
皆さんに提供します

462
00:31:06,200 --> 00:31:07,367
ご覧ください

463
00:31:08,802 --> 00:31:12,506
ASWebAuthentication
Sessionを介する―

464
00:31:12,606 --> 00:31:14,908
認証連携がいかに簡単か

465
00:31:16,109 --> 00:31:20,247
まず このAPIの構成を
インポートします

466
00:31:21,582 --> 00:31:24,585
他社が提供する―

467
00:31:24,685 --> 00:31:28,088
oauthURLを定義付けします

468
00:31:29,423 --> 00:31:34,061
これに従って
オブジェクトを作ります

469
00:31:34,161 --> 00:31:39,633
認証の最後に関与する
oauthURLをパスします

470
00:31:40,134 --> 00:31:45,372
認証の間
強参照を維持することが―

471
00:31:45,505 --> 00:31:47,341
重要になります

472
00:31:47,441 --> 00:31:52,279
望めば それを
中止することもできます

473
00:31:54,081 --> 00:31:57,251
ノンブロッキング通信も
可能です

474
00:31:57,451 --> 00:32:01,121
その場合
ユーザーの同意を求めます

475
00:31:57,451 --> 00:32:01,121
その場合
ユーザーの同意を求めます

476
00:32:01,221 --> 00:32:04,024
Safariが蓄積した
cokie情報を―

477
00:32:04,124 --> 00:32:06,026
共有するためです

478
00:32:06,126 --> 00:32:10,864
そしてView Controllerで
認証画面に移動します

479
00:32:12,132 --> 00:32:17,304
認証を完了するか
それを中止した場合―

480
00:32:17,404 --> 00:32:20,541
完了ハンドラで
結果を処理できます

481
00:32:22,342 --> 00:32:26,914
ASWebAuthenticationSessionでの
認証連携は―

482
00:32:27,014 --> 00:32:29,049
実にシンプルなのです

483
00:32:29,149 --> 00:32:30,884
コードもわずかです

484
00:32:32,119 --> 00:32:33,654
iOS 12なら―

485
00:32:33,954 --> 00:32:38,826
このAPIの認証連携は
信頼できますし

486
00:32:38,926 --> 00:32:41,662
SFAuthenticationSessionに
代わるものです

487
00:32:42,396 --> 00:32:46,567
アプリケーションに
認証連携が必要なら―

488
00:32:46,700 --> 00:32:49,536
新しいAPIを
強くお薦めします

489
00:32:51,171 --> 00:32:53,874
では次に
チェルシーから―

490
00:32:53,974 --> 00:32:57,911
iOS 12とmacOS Mojaveで
構築した―

491
00:32:58,011 --> 00:33:01,648
パスワード管理の新機能を
紹介します

492
00:32:58,011 --> 00:33:01,648
パスワード管理の新機能を
紹介します

493
00:33:01,748 --> 00:33:02,716
ありがとう

494
00:33:02,916 --> 00:33:08,522
(拍手)

495
00:33:08,622 --> 00:33:09,656
ありがとう

496
00:33:10,124 --> 00:33:12,726
iOS 12とmacOS Mojaveで
構築した―

497
00:33:12,826 --> 00:33:17,498
iCloudキーチェーンの
新機能を紹介します

498
00:33:18,398 --> 00:33:21,135
昨日 聞いた方も
いるでしょう

499
00:33:22,736 --> 00:33:27,875
ここまで認証時の利点を
説明しました

500
00:33:28,809 --> 00:33:32,880
しかしアカウントを
相互に利用する時など―

501
00:33:32,980 --> 00:33:35,249
ケースは様々です

502
00:33:35,516 --> 00:33:39,586
そこでキーチェーンに
新たな機能を加え―

503
00:33:39,686 --> 00:33:43,090
アカウント管理を
容易にしました

504
00:33:44,424 --> 00:33:48,262
パスワードは
Siriに聞いてください

505
00:33:48,862 --> 00:33:51,932
正しいパスワードを
検出し―

506
00:33:52,166 --> 00:33:57,037
別のデバイスで使う場合も
読み上げてくれます

507
00:33:58,672 --> 00:34:02,709
アカウント情報を
共有する人は―

508
00:33:58,672 --> 00:34:02,709
アカウント情報を
共有する人は―

509
00:34:03,777 --> 00:34:08,482
相手にAirDropして
伝えるだけです

510
00:34:10,818 --> 00:34:14,188
パスワードリストの
デザインを変え―

511
00:34:14,288 --> 00:34:17,357
より読み取りやすくしました

512
00:34:19,059 --> 00:34:23,630
macOSのリストも
同じく変えました

513
00:34:25,632 --> 00:34:28,869
他に新たな機能として―

514
00:34:28,969 --> 00:34:33,340
パスワードを使い回すと
警告されます

515
00:34:34,341 --> 00:34:40,080
その場合 タップすると
パスワードを変更できます

516
00:34:40,614 --> 00:34:42,516
この機能は―

517
00:34:42,616 --> 00:34:47,221
強力で固有のパスワードの
利用を促進します

518
00:34:49,656 --> 00:34:55,429
Safariのパスワードリストも
同様の機能があります

519
00:34:57,431 --> 00:35:03,337
iOSデバイスの近くなら
tvOSも自動入力が可能です

520
00:34:57,431 --> 00:35:03,337
iOSデバイスの近くなら
tvOSも自動入力が可能です

521
00:35:04,471 --> 00:35:08,875
(拍手)

522
00:35:08,976 --> 00:35:12,579
もっと便利な機能を
知りたい方は―

523
00:35:12,813 --> 00:35:17,217
“tvOS 12の新機能”を
ご確認ください

524
00:35:19,286 --> 00:35:23,123
自動入力は
とても便利な機能で―

525
00:35:23,457 --> 00:35:26,326
アカウント管理に役立ちます

526
00:35:27,794 --> 00:35:32,499
皆さんのアプリケーションを
変えることはありません

527
00:35:33,567 --> 00:35:37,304
ですが新たな機能のテストは
大事です

528
00:35:37,671 --> 00:35:40,274
推奨した手順で
行ってください

529
00:35:41,775 --> 00:35:46,480
手順に従っても
うまく機能しない場合―

530
00:35:46,747 --> 00:35:49,616
バグ報告をしてください

531
00:35:51,819 --> 00:35:57,624
Password Rules
Validation ToolのURLです

532
00:35:58,458 --> 00:36:00,894
関連するセッションです

533
00:35:58,458 --> 00:36:00,894
関連するセッションです

534
00:36:01,662 --> 00:36:07,167
パスワードマネージャの
開発者の方はこちら

535
00:36:07,901 --> 00:36:10,738
パスワードの
自動入力について―

536
00:36:10,838 --> 00:36:15,208
2017年のWWDC資料を
ご覧ください

537
00:36:16,710 --> 00:36:21,682
今日のセッションに関して
ご質問などがあれば

538
00:36:21,982 --> 00:36:26,153
Password Autofillラボを
お訪ねください

539
00:36:26,253 --> 00:36:28,188
今週 あと数回開催されます

540
00:36:29,423 --> 00:36:32,926
ご来場
ありがとうございました

541
00:36:33,026 --> 00:36:34,595
(拍手)