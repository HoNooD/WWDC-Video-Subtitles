
1
00:00:07,074 --> 00:00:15,315
(音楽)

2
00:00:22,122 --> 00:00:31,031
(拍手)

3
00:00:31,265 --> 00:00:32,698
ようこそ

4
00:00:33,300 --> 00:00:34,935
パヴェルです

5
00:00:35,035 --> 00:00:39,273
ClassKitについて
マリンと話します

6
00:00:40,774 --> 00:00:43,377
３部構成にしました

7
00:00:43,610 --> 00:00:47,347
ClassKitの概要説明では

8
00:00:47,714 --> 00:00:50,450
データの流れを話します

9
00:00:50,617 --> 00:00:54,521
続いて
クラスについて取り上げ

10
00:00:54,621 --> 00:00:57,791
面白い特徴を紹介します

11
00:00:58,192 --> 00:01:03,130
最後はアプリケーションへの
適用についてです

12
00:00:58,192 --> 00:01:03,130
最後はアプリケーションへの
適用についてです

13
00:01:03,797 --> 00:01:06,066
では 始めましょう

14
00:01:09,036 --> 00:01:12,973
ClassKitは教育向けの
フレームワークで

15
00:01:13,073 --> 00:01:15,609
学校等で活用されます

16
00:01:17,277 --> 00:01:21,815
例えば 教師が
アプリケーションを使い

17
00:01:21,915 --> 00:01:25,552
生徒に課題を出すことができます

18
00:01:26,653 --> 00:01:33,126
更に そうした課題の進捗を
管理することもできます

19
00:01:34,361 --> 00:01:36,663
個人情報は守られます

20
00:01:36,763 --> 00:01:38,966
具体的に説明します

21
00:01:39,700 --> 00:01:43,403
教師は課題の進捗を
確認できますが

22
00:01:43,504 --> 00:01:49,009
自ら出した課題の進捗以外は
見られない仕組みです

23
00:01:50,544 --> 00:01:53,647
ClassKitを導入すれば

24
00:01:53,747 --> 00:01:59,152
生徒の学習と教師の指導の
効率が一層増します

25
00:01:59,853 --> 00:02:04,958
アプリケーションで
課題を把握できるからです

26
00:01:59,853 --> 00:02:04,958
アプリケーションで
課題を把握できるからです

27
00:02:05,826 --> 00:02:11,765
教師にとっては生徒の
学習状況を見通せる上に

28
00:02:12,032 --> 00:02:15,435
個別指導も可能になります

29
00:02:15,802 --> 00:02:18,805
学習状況が正確に分かると

30
00:02:18,906 --> 00:02:23,377
必要な課題を
工夫して出せるでしょう

31
00:02:23,777 --> 00:02:26,947
デベロッパの皆さんにも
利点があります

32
00:02:27,047 --> 00:02:32,519
教師にとっては
自分の仕事に影響します

33
00:02:32,619 --> 00:02:36,990
皆さんのアプリケーションが
気に入れば

34
00:02:37,090 --> 00:02:40,060
学校中で勧めてもらえます

35
00:02:40,928 --> 00:02:46,033
類似の技術に
Apple School Managerがあります

36
00:02:46,400 --> 00:02:50,671
IT管理者はこのシステムを使って

37
00:02:51,004 --> 00:02:56,109
管理対象 Apple IDを
学校関係者に発行できます

38
00:02:56,543 --> 00:03:01,481
要は 教師と生徒の全員に
このIDが付与されます

39
00:02:56,543 --> 00:03:01,481
要は 教師と生徒の全員に
このIDが付与されます

40
00:03:01,949 --> 00:03:04,651
この他にも IT管理者は

41
00:03:04,751 --> 00:03:09,089
教科ごとにクラスを作れます

42
00:03:10,224 --> 00:03:13,594
そして
特定のIDを持つ教師と生徒を

43
00:03:13,760 --> 00:03:17,264
各クラスに割り当てられます

44
00:03:18,298 --> 00:03:22,569
コンテンツとデバイスも
管理できます

45
00:03:23,270 --> 00:03:27,407
デベロッパの利点と
先ほど言ったように―

46
00:03:28,442 --> 00:03:34,181
ClassKitと連動して
生徒の進捗が記録されます

47
00:03:36,817 --> 00:03:41,288
また 学校はアプリケーションを
一括購入できます

48
00:03:41,588 --> 00:03:45,192
ClassKitに対応している場合

49
00:03:45,292 --> 00:03:49,796
“スクールワークと連動”に
チェックマークが付きます

50
00:03:51,265 --> 00:03:55,836
スクールワークは
まもなくリリースされます

51
00:03:56,170 --> 00:04:01,875
このアプリケーションで
生徒はHandoutを確認し

52
00:03:56,170 --> 00:04:01,875
このアプリケーションで
生徒はHandoutを確認し

53
00:04:01,975 --> 00:04:05,345
教師は課題を作成できます

54
00:04:05,445 --> 00:04:08,182
システム内では課題を
Handoutと呼びます

55
00:04:09,049 --> 00:04:15,889
例えば コンテンツの１つが
Handout内のタスクになります

56
00:04:18,559 --> 00:04:23,597
教師は特定のHandoutを
確認すれば

57
00:04:23,697 --> 00:04:27,701
アプリケーション上で
生徒の進捗を把握できます

58
00:04:28,702 --> 00:04:32,539
Handoutの
流れを見てみましょう

59
00:04:33,473 --> 00:04:37,477
作成する前に準備が必要です

60
00:04:38,045 --> 00:04:43,584
課題としてアサインする内容を
決めておいてください

61
00:04:45,919 --> 00:04:53,026
本フレームワークではCLS準拠の
コンテキストを使用しており

62
00:04:53,126 --> 00:04:56,697
コンテンツをツリー構造で表せます

63
00:04:57,164 --> 00:05:00,667
アプリケーションに合わせ
再定義した―

64
00:04:57,164 --> 00:05:00,667
アプリケーションに合わせ
再定義した―

65
00:05:01,835 --> 00:05:04,404
App コンテキストが
用意されています

66
00:05:05,005 --> 00:05:10,210
コンテキストツリーの
ルートとなっています

67
00:05:10,677 --> 00:05:15,349
すべてのコンテンツが
ここから派生します

68
00:05:18,685 --> 00:05:23,757
コンテンツは
できるだけ早く定義してください

69
00:05:23,857 --> 00:05:28,262
コンテンツの定義が
速やかであるほど

70
00:05:28,362 --> 00:05:31,398
教師がすぐに利用できます

71
00:05:32,900 --> 00:05:35,369
コンテキストツリーができたら

72
00:05:35,636 --> 00:05:41,775
教師はスクールワーク上で
ボタンをタップするだけです

73
00:05:42,543 --> 00:05:45,712
Handoutを新規作成できます

74
00:05:46,446 --> 00:05:49,883
特定のコンテンツを指定して

75
00:05:50,484 --> 00:05:54,922
あとはHandoutを
生徒に送るだけです

76
00:05:55,489 --> 00:06:01,195
生徒がHandoutをタップすると
アプリケーションが起動します

77
00:05:55,489 --> 00:06:01,195
生徒がHandoutをタップすると
アプリケーションが起動します

78
00:06:01,495 --> 00:06:05,866
この時点で
必要なコンテキストが生成されます

79
00:06:06,400 --> 00:06:09,636
生徒たちが同じコンテンツを

80
00:06:09,736 --> 00:06:13,407
使うようにガイドしてください

81
00:06:15,242 --> 00:06:18,612
手法はマリンが説明します

82
00:06:19,046 --> 00:06:24,418
そして 実際に生徒が
課題に取りかかると

83
00:06:24,585 --> 00:06:27,721
進捗の記録が始まります

84
00:06:27,988 --> 00:06:32,492
データはすべて
１つのレポートに集約され

85
00:06:32,593 --> 00:06:35,696
教師のデバイスに送られます

86
00:06:36,263 --> 00:06:40,534
教師は作成した
Handoutにアクセスし

87
00:06:40,634 --> 00:06:42,703
レポートを確認します

88
00:06:46,139 --> 00:06:49,643
このフローの実現に必要なのは

89
00:06:49,743 --> 00:06:52,980
教師と生徒の
管理対象 Apple IDです

90
00:06:53,413 --> 00:06:56,850
それと 動作テストできるように

91
00:06:56,950 --> 00:07:00,954
最低でも
１台のデバイスが必要です

92
00:06:56,950 --> 00:07:00,954
最低でも
１台のデバイスが必要です

93
00:07:01,788 --> 00:07:05,692
より一層
実行しやすくするため

94
00:07:05,792 --> 00:07:09,129
デベロッパモードを用意しました

95
00:07:09,563 --> 00:07:15,536
このモードではデベロッパが
教師として操作できます

96
00:07:15,903 --> 00:07:19,606
つまり Handoutを作成したり

97
00:07:19,706 --> 00:07:23,710
生徒の進捗を
確認したりできます

98
00:07:23,810 --> 00:07:27,648
また 生徒として課題に取り組み

99
00:07:27,748 --> 00:07:31,118
進捗を教師と共有できます

100
00:07:33,187 --> 00:07:36,390
開発データの
リセット機能もあり―

101
00:07:37,691 --> 00:07:41,595
個人的には何度も利用しました

102
00:07:42,429 --> 00:07:45,599
続いて クラスを説明します

103
00:07:46,066 --> 00:07:48,836
DataStoreから始めます

104
00:07:50,370 --> 00:07:54,474
コンテキストツリーを
管理するものです

105
00:07:57,544 --> 00:08:01,482
ここでコンテキストが
プロパティとして表示され

106
00:07:57,544 --> 00:08:01,482
ここでコンテキストが
プロパティとして表示され

107
00:08:01,915 --> 00:08:07,187
システム内のオブジェクトの
変更履歴が記録されます

108
00:08:07,855 --> 00:08:11,024
オブジェクトを保存するには―

109
00:08:11,458 --> 00:08:15,863
CLSDataStoreをコールしてください

110
00:08:18,031 --> 00:08:24,238
CLSDataStoreの
共有インスタンスもあります

111
00:08:25,239 --> 00:08:29,243
コンテキストの話に移りましょう

112
00:08:30,811 --> 00:08:35,482
先ほどの例では
３つの階層がありました

113
00:08:35,682 --> 00:08:39,186
コンテキストの使い方や特徴は

114
00:08:39,285 --> 00:08:43,222
後ほどマリンが詳しく説明します

115
00:08:43,457 --> 00:08:47,127
私はコンテキストIDの話をします

116
00:08:48,195 --> 00:08:53,000
ClassKitの
アイデンティティは２つです

117
00:08:53,400 --> 00:08:55,802
まずidentifierプロパティ

118
00:08:56,803 --> 00:08:59,106
このプロパティは―

119
00:08:59,206 --> 00:09:03,143
兄弟ノード内で
コンテキストを識別します

120
00:08:59,206 --> 00:09:03,143
兄弟ノード内で
コンテキストを識別します

121
00:09:04,344 --> 00:09:06,446
つまり同じ識別子を

122
00:09:06,547 --> 00:09:10,918
複数のコンテキストに
設定しても構いません

123
00:09:11,185 --> 00:09:14,721
親ノードが別なら
問題ありません

124
00:09:15,789 --> 00:09:20,127
これをContext Identifier Pathと
呼んでいます

125
00:09:21,128 --> 00:09:25,098
ツリー内で
特定のコンテキストを

126
00:09:25,199 --> 00:09:28,502
識別する時に必要となります

127
00:09:29,002 --> 00:09:33,907
これはコンテキスト識別子の
配列です

128
00:09:34,308 --> 00:09:39,813
パスに沿い 最後の
ノードに到達するまで

129
00:09:40,047 --> 00:09:43,884
コンテキストを走査します

130
00:09:45,452 --> 00:09:47,955
実際に見てみましょう

131
00:09:50,023 --> 00:09:56,163
コンテキストカードが 本　第２章
第１節の順に指しています

132
00:09:56,797 --> 00:09:59,032
コンテキストツリーもあります

133
00:09:59,199 --> 00:10:02,636
第１節を探すには
Appに行き―

134
00:09:59,199 --> 00:10:02,636
第１節を探すには
Appに行き―

135
00:10:03,036 --> 00:10:04,738
次に本に進みます

136
00:10:04,838 --> 00:10:08,509
本の子である第２章を見つけ

137
00:10:08,809 --> 00:10:11,912
同様に第１節を見つけます

138
00:10:12,379 --> 00:10:18,552
第１節はパスの最後なので
ここが参照先となります

139
00:10:20,287 --> 00:10:24,258
コンテキストの検索法は
複数あります

140
00:10:24,658 --> 00:10:28,095
絶対パスを使って検索する場合

141
00:10:28,195 --> 00:10:32,933
matchingIdentifierPathを呼びます

142
00:10:34,034 --> 00:10:39,540
完了ブロックはパス内の
全コンテキストを返します

143
00:10:39,640 --> 00:10:41,008
この場合の配列は--

144
00:10:41,508 --> 00:10:47,014
App 本 第２章 第１節 となります

145
00:10:47,915 --> 00:10:51,218
もし第１節の中に
第２章がなければ

146
00:10:51,318 --> 00:10:57,024
完了ブロック内のその後の配列は
Appと本になります

147
00:10:57,858 --> 00:11:02,262
ここで欠けているコンテキストを
他のもので補えます

148
00:10:57,858 --> 00:11:02,262
ここで欠けているコンテキストを
他のもので補えます

149
00:11:03,464 --> 00:11:06,366
相対パスでの検索も可能です

150
00:11:07,000 --> 00:11:11,572
特定のコンテキストの
子孫を探す時に便利です

151
00:11:11,972 --> 00:11:16,944
descendantMatchingIdentifierPath
です

152
00:11:17,411 --> 00:11:22,883
該当コンテキストがなければ
nilになります

153
00:11:24,484 --> 00:11:28,822
一般的な
コンテキスト検索法として

154
00:11:28,922 --> 00:11:33,026
Context Matching
プレディケートが使えます

155
00:11:33,126 --> 00:11:38,398
この例ではコンテキストの
子の探し方を示しています

156
00:11:39,366 --> 00:11:43,036
CLSDataStoreDelegateもあります

157
00:11:43,537 --> 00:11:49,643
これはパスを利用した手法と
組み合わせて使います

158
00:11:51,778 --> 00:11:56,116
デリゲートの定義の例がこちらです

159
00:11:59,386 --> 00:12:02,856
利用できない
コンテキストがあり

160
00:11:59,386 --> 00:12:02,856
利用できない
コンテキストがあり

161
00:12:02,956 --> 00:12:08,228
必要に応じて追加で
作成したい時に役立ちます

162
00:12:08,328 --> 00:12:12,766
まず最初に
パス内にクエリを出します

163
00:12:12,866 --> 00:12:17,204
コンテキストが見つからなければ

164
00:12:17,304 --> 00:12:21,909
createContextforIdentifierを
コールします

165
00:12:22,009 --> 00:12:26,647
存在しないコンテキストを
生成することができます

166
00:12:27,314 --> 00:12:32,986
作成されたコンテキストは
適切な場所に追加されます

167
00:12:35,556 --> 00:12:39,726
動的なコンテンツを利用する
アプリケーションに便利です

168
00:12:39,993 --> 00:12:42,596
流れを見てみましょう

169
00:12:43,230 --> 00:12:48,202
先ほどと同じパスですが
不完全な構造です

170
00:12:48,535 --> 00:12:49,970
デリゲートもあります

171
00:12:51,138 --> 00:12:57,177
先ほどと同じように
Appから本に向かいます

172
00:12:57,644 --> 00:13:01,648
続いて
第２章に進むはずですが

173
00:12:57,644 --> 00:13:01,648
続いて
第２章に進むはずですが

174
00:13:02,282 --> 00:13:06,353
存在しないので
デリゲートを使い生成します

175
00:13:06,587 --> 00:13:12,793
ツリー内の正しい位置に
コンテキストが追加されます

176
00:13:13,427 --> 00:13:17,531
第１節にも
同じ処理を行いましょう

177
00:13:18,198 --> 00:13:20,634
第１節はパスの最後なので

178
00:13:20,734 --> 00:13:23,470
ここがパスの参照先です

179
00:13:26,073 --> 00:13:29,042
次はActivity Objectです

180
00:13:30,777 --> 00:13:35,916
教師への進捗報告に
使われるオブジェクトで

181
00:13:36,183 --> 00:13:39,586
実は これが
レポートになります

182
00:13:42,256 --> 00:13:46,360
常にコンテキストに
ひも付けられています

183
00:13:46,460 --> 00:13:48,996
単体では存在しません

184
00:13:49,363 --> 00:13:52,499
新規で作成するには―

185
00:13:53,367 --> 00:13:56,937
CLSContext.createNewActivityを
コールします

186
00:13:57,037 --> 00:14:00,807
レシーバと共に返されます

187
00:13:57,037 --> 00:14:00,807
レシーバと共に返されます

188
00:14:02,810 --> 00:14:07,781
コンテキストに関連した
アクティビティを調べるには

189
00:14:07,881 --> 00:14:12,619
CLS Context上の
プロパティをクエリします

190
00:14:14,721 --> 00:14:18,025
アクティビティの新規作成は―

191
00:14:18,125 --> 00:14:21,728
アクティビティの実行と同義です

192
00:14:22,062 --> 00:14:26,433
つまり 教師に
新しい進捗レポートが送られます

193
00:14:30,170 --> 00:14:35,742
進捗機能を設定するには
直接プロパティを追加します

194
00:14:36,276 --> 00:14:41,248
この時 開始から終了の
範囲を入力します

195
00:14:42,416 --> 00:14:45,786
直接プロパティを設定するのは―

196
00:14:46,019 --> 00:14:49,323
開始の数値を０にするのと同じです

197
00:14:51,425 --> 00:14:55,496
範囲の一部または全部を
重複させて

198
00:14:55,662 --> 00:14:59,633
繰り返し用いても問題ありません

199
00:15:00,000 --> 00:15:03,871
最終的には
正しい範囲の進捗が

200
00:15:03,971 --> 00:15:07,007
教師のもとへ報告されます

201
00:15:08,442 --> 00:15:14,214
もう１つ Activity Itemの
話もしましょう

202
00:15:14,748 --> 00:15:17,151
Activity Itemとは―

203
00:15:18,485 --> 00:15:23,290
報告の一部として
教師に提供される数値です

204
00:15:25,159 --> 00:15:30,631
各アクティビティは１つ
primaryActivityItemを持ち―

205
00:15:30,731 --> 00:15:33,934
この情報が先生に表示されます

206
00:15:34,034 --> 00:15:35,602
進捗とは別の情報です

207
00:15:36,537 --> 00:15:39,873
例えばテストの点数などに
活用できます

208
00:15:41,174 --> 00:15:44,311
この他にも複数の情報を

209
00:15:45,112 --> 00:15:50,317
additionalActivityItems
として追加できます

210
00:15:50,617 --> 00:15:55,289
例えばヒントの数や
個々の質問への答えなどです

211
00:15:57,457 --> 00:16:00,461
現状 Activity Itemには

212
00:15:57,457 --> 00:16:00,461
現状 Activity Itemには

213
00:16:01,028 --> 00:16:04,965
サブクラスを３つ定義しています

214
00:16:05,866 --> 00:16:08,669
まずCLSQuantityItemは

215
00:16:08,769 --> 00:16:13,640
ヒントの数などを
求める際に役立ちます

216
00:16:14,341 --> 00:16:19,246
CLSScoreItemは
全体に対する数値を出すので

217
00:16:19,780 --> 00:16:24,351
テストの点数などを
求めるのに便利です

218
00:16:24,651 --> 00:16:27,187
CLSBinaryItemは―

219
00:16:27,888 --> 00:16:33,193
２択式の問題に
回答するのに使えます

220
00:16:34,561 --> 00:16:37,631
ではActivity Itemを作り

221
00:16:37,731 --> 00:16:41,668
primaryActivityItemを
追加しましょう

222
00:16:41,902 --> 00:16:46,974
“Total Score”というタイトルで
Score Itemを作成します

223
00:16:47,274 --> 00:16:52,179
primaryActivityItemとして
関連付けるため

224
00:16:52,412 --> 00:16:55,883
プロパティを設定します

225
00:16:58,018 --> 00:17:02,456
additionalActivityItemsの
追加も同様です

226
00:16:58,018 --> 00:17:02,456
additionalActivityItemsの
追加も同様です

227
00:17:02,623 --> 00:17:05,925
ここでは
CLSQuantityItemを作成しています

228
00:17:06,026 --> 00:17:09,530
タイトルは“Hints”です

229
00:17:10,230 --> 00:17:13,300
作成したアイテムを渡した後―

230
00:17:13,400 --> 00:17:19,071
addAdditionalActivityItem
をコールします

231
00:17:19,172 --> 00:17:23,242
これでアクティビティに
ひも付きます

232
00:17:23,977 --> 00:17:28,448
Activity Itemを扱う際の
注意点があります

233
00:17:29,182 --> 00:17:34,621
まず primaryActivityItemの
サブクラス統一です

234
00:17:35,522 --> 00:17:40,928
教師が２人の生徒に
同じ課題を出す場合を考えます

235
00:17:41,395 --> 00:17:47,267
primaryActivityItemを
生徒ＡではScoreItemに設定し

236
00:17:47,901 --> 00:17:52,639
生徒ＢではBinaryItemに
設定したとします

237
00:17:52,940 --> 00:17:58,445
これだと教師への報告時に
データを統合できません

238
00:17:58,779 --> 00:18:04,318
ScoreItemとBinaryItemは
互換性がありません

239
00:17:58,779 --> 00:18:04,318
ScoreItemとBinaryItemは
互換性がありません

240
00:18:04,585 --> 00:18:07,154
primaryActivityItemに関し

241
00:18:07,621 --> 00:18:10,924
サブクラスは統一してください

242
00:18:11,625 --> 00:18:17,130
また タイトルは
明確かつ簡潔にしましょう

243
00:18:17,231 --> 00:18:22,669
設定したタイトルは
教師の目に触れる情報です

244
00:18:24,238 --> 00:18:29,443
additionalActivityItemsも
ぜひ ご活用ください

245
00:18:29,877 --> 00:18:36,483
教師が生徒を理解する上で必要な
多くの情報を提供できます

246
00:18:37,351 --> 00:18:42,456
これからマリンが
実際の動作を説明します

247
00:18:42,789 --> 00:18:48,796
(拍手)

248
00:18:51,498 --> 00:18:52,933
こんにちは

249
00:18:53,133 --> 00:18:56,870
ClassKitチームのマリンです

250
00:18:57,137 --> 00:19:02,809
既存アプリケーションへの
適用について話します

251
00:18:57,137 --> 00:19:02,809
既存アプリケーションへの
適用について話します

252
00:19:03,143 --> 00:19:07,181
サンプルアプリケーションを
用意しました

253
00:19:07,848 --> 00:19:13,086
計算テストのアプリケーション
Quizzlerです

254
00:19:13,387 --> 00:19:19,259
まず 計算問題の種類を
選択する画面が表示されます

255
00:19:19,426 --> 00:19:21,962
足し算にしましょう

256
00:19:22,863 --> 00:19:25,766
こちらが次の質問です

257
00:19:25,866 --> 00:19:30,804
高成績者の得点表を見るか
計算を始めるか

258
00:19:30,904 --> 00:19:33,707
どちらかを選択します

259
00:19:33,907 --> 00:19:36,210
計算を始めましょう

260
00:19:37,144 --> 00:19:40,647
表示される計算問題を解いて

261
00:19:40,914 --> 00:19:44,952
最後まで終えると
成績が分かります

262
00:19:45,552 --> 00:19:48,956
このようなアプリケーションに

263
00:19:49,056 --> 00:19:52,526
ClassKitを適用する
方法を解説します

264
00:19:53,427 --> 00:19:56,363
まず どのような
コンテキストデータが

265
00:19:56,463 --> 00:20:00,300
このアプリケーションに
適しているか考えます

266
00:19:56,463 --> 00:20:00,300
このアプリケーションに
適しているか考えます

267
00:20:00,968 --> 00:20:02,302
続いて―

268
00:20:02,569 --> 00:20:08,041
生徒の学習データについても
掘り下げましょう

269
00:20:08,876 --> 00:20:13,480
ディープリンクの方法は
２通りあります

270
00:20:13,580 --> 00:20:16,383
まずはユニバーサルリンク

271
00:20:16,717 --> 00:20:20,954
対応済みの
アプリケーションであれば

272
00:20:21,054 --> 00:20:26,460
ユニバーサルリンクプロパティを
設定するだけです

273
00:20:27,661 --> 00:20:33,300
このサンプルは非対応の
アプリケーションなので

274
00:20:33,400 --> 00:20:37,504
ハンドラを使う
第２の方法を用います

275
00:20:38,505 --> 00:20:42,609
デベロッパモードと
スクールワークで

276
00:20:42,709 --> 00:20:45,579
実装テストを行います

277
00:20:46,447 --> 00:20:51,185
ではコンテキストの
構造を見ていきます

278
00:20:51,652 --> 00:20:54,421
まずUIと対応する―

279
00:20:54,521 --> 00:20:58,859
コンテキストツリーを
作ることにしましょう

280
00:20:59,126 --> 00:21:03,397
そうすると
このような構造になります

281
00:20:59,126 --> 00:21:03,397
そうすると
このような構造になります

282
00:21:03,831 --> 00:21:08,735
Appのコンテキストが最上位で

283
00:21:09,169 --> 00:21:14,474
その下位が足し算と掛け算の
コンテキストです

284
00:21:14,608 --> 00:21:18,846
更に得点表と
テストのコンテキストが

285
00:21:18,946 --> 00:21:21,348
それぞれ続きます

286
00:21:21,915 --> 00:21:27,621
前述のとおりコンテキストは
アプリケーションの一部で

287
00:21:27,721 --> 00:21:30,858
生徒にアサインされます

288
00:21:31,091 --> 00:21:35,429
それを念頭に置き
得点表について考えます

289
00:21:36,063 --> 00:21:40,267
得点表のコンテキストが
何かというと

290
00:21:40,367 --> 00:21:42,436
高得点の記録です

291
00:21:42,803 --> 00:21:47,841
教師はこれを生徒へ
アサインしませんよね

292
00:21:49,042 --> 00:21:52,279
ですので消去します

293
00:21:52,946 --> 00:21:55,883
すると構造はこうなります

294
00:21:56,483 --> 00:22:00,087
次は足し算のコンテキストですが

295
00:21:56,483 --> 00:22:00,087
次は足し算のコンテキストですが

296
00:22:00,354 --> 00:22:03,690
その実体は何でしょうか？

297
00:22:04,091 --> 00:22:06,960
単に足し算のテストですよね

298
00:22:07,327 --> 00:22:12,766
これらは重複するので
１つにまとめるべきです

299
00:22:12,866 --> 00:22:17,804
掛け算のコンテキストにも
同じことが言えます

300
00:22:18,605 --> 00:22:21,642
ツリーはこうなりました

301
00:22:22,209 --> 00:22:25,812
パヴェルと先の展開を話し合い

302
00:22:25,913 --> 00:22:31,552
引き算と割り算のテストの
追加を検討しました

303
00:22:31,652 --> 00:22:35,789
その場合 兄弟ノードを
簡単に作れます

304
00:22:36,056 --> 00:22:40,861
皆さんのアプリケーションに
合った構造を考える時は

305
00:22:40,961 --> 00:22:46,200
現状に加え 将来的な内容も
考慮してください

306
00:22:46,300 --> 00:22:49,469
構造の拡張性を確保しましょう

307
00:22:50,737 --> 00:22:53,307
コンテキストに関して説明します

308
00:22:53,841 --> 00:22:56,977
まずタイトルを明確にします

309
00:22:57,077 --> 00:23:01,115
タイトルとは
教師と生徒にとって

310
00:22:57,077 --> 00:23:01,115
タイトルとは
教師と生徒にとって

311
00:23:01,215 --> 00:23:06,887
どんなコンテキストか
知るための情報だからです

312
00:23:07,654 --> 00:23:11,658
コンテキストは
なるべく早い段階で決めましょう

313
00:23:12,159 --> 00:23:17,431
この例では
静的コンテンツがあるので

314
00:23:17,531 --> 00:23:21,535
起動と同時に
内容を決められます

315
00:23:22,870 --> 00:23:25,105
次は 教師のために

316
00:23:25,205 --> 00:23:29,910
決まった順で
コンテキストを表示します

317
00:23:30,077 --> 00:23:33,814
そこで サンプルでは足し算を

318
00:23:33,914 --> 00:23:38,819
掛け算の上に
表示させようと思います

319
00:23:38,919 --> 00:23:41,221
そのために役立つのが

320
00:23:41,321 --> 00:23:45,159
displayOrderプロパティです

321
00:23:46,093 --> 00:23:49,496
コンテキストが決まったので

322
00:23:49,596 --> 00:23:52,366
次は生徒側を見ましょう

323
00:23:53,367 --> 00:23:56,537
これはスクールワークの画面で

324
00:23:56,637 --> 00:24:01,208
学習データが
このように表示されます

325
00:23:56,637 --> 00:24:01,208
学習データが
このように表示されます

326
00:24:01,942 --> 00:24:06,513
生徒がテストにかけた時間を

327
00:24:06,613 --> 00:24:09,149
記録するのが良さそうです

328
00:24:09,383 --> 00:24:10,651
そのため―

329
00:24:10,751 --> 00:24:16,323
メソッドのstartとstopを
コールしましょう

330
00:24:17,157 --> 00:24:22,496
更に テストの点数を
表示できるといいですよね

331
00:24:22,996 --> 00:24:26,767
ただ よく考えると
生徒の得点は

332
00:24:26,867 --> 00:24:31,338
テストで恐らく
最も重要な情報です

333
00:24:31,438 --> 00:24:35,876
スクールワークの画面上で
目立たせましょう

334
00:24:36,109 --> 00:24:40,948
そのためには
CLSScoreItemを作成して

335
00:24:41,048 --> 00:24:44,351
primaryActivityItemに
設定します

336
00:24:44,451 --> 00:24:47,588
すると 画面に反映されます

337
00:24:48,689 --> 00:24:54,795
加えて それぞれの回答の
正誤も表示したいところです

338
00:24:55,462 --> 00:25:01,068
ですから 今度は
CLSBinaryItemを作成して

339
00:24:55,462 --> 00:25:01,068
ですから 今度は
CLSBinaryItemを作成して

340
00:25:01,635 --> 00:25:06,640
additionalActivityItems
として追加します

341
00:25:07,474 --> 00:25:11,478
書くコードの内容は
決まったので

342
00:25:11,578 --> 00:25:14,848
実際の動作を見てみましょう

343
00:25:20,287 --> 00:25:24,558
私のディスプレイの
Xcodeを映します

344
00:25:24,992 --> 00:25:29,429
まず プロジェクトの
ターゲットを選びます

345
00:25:30,063 --> 00:25:33,433
Capabilitiesペインを選択し

346
00:25:33,534 --> 00:25:36,737
ClassKitのAPIを見つけます

347
00:25:37,438 --> 00:25:40,507
ClassKitをオンにすれば

348
00:25:40,607 --> 00:25:43,744
コードを書く準備は万全です

349
00:25:44,244 --> 00:25:47,047
アプリケーションを起動すればすぐ

350
00:25:47,147 --> 00:25:50,450
コンテキストを
書き始められます

351
00:25:50,551 --> 00:25:53,720
デリゲートを起動します

352
00:25:54,054 --> 00:26:00,027
コンテキストをパブリッシュする
関数を作成します

353
00:25:54,054 --> 00:26:00,027
コンテキストをパブリッシュする
関数を作成します

354
00:26:01,995 --> 00:26:05,032
ここに関数が作成されました

355
00:26:05,132 --> 00:26:09,770
CLSContextの
インスタンスを生成します

356
00:26:10,204 --> 00:26:13,340
コンテキストの型を渡して

357
00:26:14,274 --> 00:26:19,513
固有の識別子と
簡潔なタイトルを入力します

358
00:26:20,047 --> 00:26:23,450
displayOrderも忘れず追加し

359
00:26:23,550 --> 00:26:27,187
足し算を掛け算の上に
表示させます

360
00:26:27,821 --> 00:26:30,591
掛け算も同様に
インスタンスを生成し

361
00:26:30,691 --> 00:26:34,261
displayOrderを設定します

362
00:26:34,862 --> 00:26:40,667
その後はコンテキストの
辞書を作成しておきます

363
00:26:41,668 --> 00:26:45,973
これを追加する
親コンテキストを選択します

364
00:26:46,140 --> 00:26:48,008
水平構造なので

365
00:26:48,108 --> 00:26:53,146
親は常に
App コンテキストになります

366
00:26:53,680 --> 00:26:58,218
これらのコンテキストが存在するか
クエリを発行します

367
00:26:58,352 --> 00:27:00,354
プレディケートを作り

368
00:26:58,352 --> 00:27:00,354
プレディケートを作り

369
00:27:00,521 --> 00:27:05,225
親コンテキスト以下を
すべて検索します

370
00:27:05,726 --> 00:27:10,631
CLSDataStoreの
共有インスタンスに対して

371
00:27:11,265 --> 00:27:16,937
プレディケートに一致する
全コンテキストを検索します

372
00:27:17,638 --> 00:27:20,541
コンテキストの配列が返されます

373
00:27:21,175 --> 00:27:25,913
存在する全コンテキストに
これを繰り返します

374
00:27:26,580 --> 00:27:29,783
その各コンテキストを

375
00:27:29,917 --> 00:27:34,188
コンテキスト辞書から
消去しましょう

376
00:27:35,455 --> 00:27:39,927
次は 存在しない
コンテキストへのイテレートです

377
00:27:40,260 --> 00:27:42,496
各コンテキストを

378
00:27:42,596 --> 00:27:47,100
親コンテキストの下に
子として追加しましょう

379
00:27:47,968 --> 00:27:50,337
変更を保存します

380
00:27:50,904 --> 00:27:55,175
これで起動時に関数を使えます

381
00:27:57,845 --> 00:28:02,182
コンテキストが実在するか
テストしましょう

382
00:27:57,845 --> 00:28:02,182
コンテキストが実在するか
テストしましょう

383
00:28:03,083 --> 00:28:06,420
私のデバイス画面を映します

384
00:28:06,820 --> 00:28:09,590
Quizzlerが起動しました

385
00:28:10,057 --> 00:28:12,392
ただ 見た目は以前と同じです

386
00:28:12,659 --> 00:28:16,597
作成したコンテキストの
確認に用いるのが

387
00:28:16,797 --> 00:28:19,900
デベロッパモードと
スクールワークです

388
00:28:20,000 --> 00:28:23,837
ホームボタンを押し
設定を開きます

389
00:28:24,705 --> 00:28:28,008
デベロッパ設定を探します

390
00:28:28,609 --> 00:28:33,447
選択するとClassKitの
APIが出てきます

391
00:28:33,747 --> 00:28:39,553
ここを切り替えることで
教師として操作できます

392
00:28:39,786 --> 00:28:41,955
選択を確認したら

393
00:28:42,322 --> 00:28:46,460
ホームボタンから
スクールワークを開きます

394
00:28:48,328 --> 00:28:53,767
起動時のウェルカム画面は
閉じて先に進みます

395
00:28:53,867 --> 00:28:58,105
画面の右上に見える
プラスボタンは

396
00:28:58,338 --> 00:29:00,841
教師でログインした印です

397
00:28:58,338 --> 00:29:00,841
教師でログインした印です

398
00:29:01,074 --> 00:29:05,646
タップすると
Handout作成画面が開き

399
00:29:05,812 --> 00:29:07,815
課題を追加できます

400
00:29:08,415 --> 00:29:12,486
ここにQuizzlerが表示されます

401
00:29:12,719 --> 00:29:16,723
ちゃんとコンテキストが
ありました

402
00:29:16,823 --> 00:29:20,727
これで存在を確認できましたね

403
00:29:21,128 --> 00:29:26,266
ちなみに足し算の下に
掛け算が表示されています

404
00:29:26,433 --> 00:29:30,604
displayOrderも
正しく機能しています

405
00:29:31,004 --> 00:29:36,443
では今から 足し算の問題を
Handoutに追加して

406
00:29:36,543 --> 00:29:39,980
自分のクラスに配布します

407
00:29:40,614 --> 00:29:44,151
TOフィールドでクラスを選び―

408
00:29:45,018 --> 00:29:47,688
Handoutに名前を付けます

409
00:29:49,223 --> 00:29:54,728
“Post”をタップすると
Handoutをクラスに送れます

410
00:29:54,828 --> 00:29:58,165
同時にコンテキストが認証され

411
00:29:58,265 --> 00:30:01,902
進捗データの
記録が始まります

412
00:29:58,265 --> 00:30:01,902
進捗データの
記録が始まります

413
00:30:02,736 --> 00:30:08,742
Handoutをタップすると
コンテキストが表示されます

414
00:30:08,842 --> 00:30:13,614
隣にアプリケーションの
アイコンもあります

415
00:30:13,914 --> 00:30:18,786
ここから足し算テストに
飛べるはずなので

416
00:30:18,886 --> 00:30:20,554
タップします

417
00:30:21,355 --> 00:30:26,760
アプリケーションは開きますが
画面が違います

418
00:30:27,027 --> 00:30:32,266
ディープリンクを忘れたので
Xcodeで追加します

419
00:30:32,900 --> 00:30:38,338
デリゲートに戻って
ハンドラを追加しましょう

420
00:30:39,940 --> 00:30:42,376
このハンドラが処理する―

421
00:30:42,476 --> 00:30:47,514
ユーザアクティビティを選択します

422
00:30:47,614 --> 00:30:50,150
contextIdentifierPathを続けます

423
00:30:51,018 --> 00:30:53,086
ここまでできたら―

424
00:30:53,320 --> 00:30:59,259
コンテキストにひも付く
計算問題をインスタンス化します

425
00:30:59,860 --> 00:31:04,264
そして先ほどの関数を
コールします

426
00:30:59,860 --> 00:31:04,264
そして先ほどの関数を
コールします

427
00:31:04,364 --> 00:31:09,403
もしコンテキストがなければ
作成しましょう

428
00:31:09,670 --> 00:31:14,041
エラーがあれば返されるので
対処します

429
00:31:15,042 --> 00:31:18,078
更に メインのスレッドで

430
00:31:18,445 --> 00:31:24,685
storyboardとviewControllerを
インスタンス化します

431
00:31:25,219 --> 00:31:30,457
viewControllerで計算問題の
見え方を設定します

432
00:31:30,724 --> 00:31:36,497
では ディープリンクが
機能するかテストしましょう

433
00:31:36,997 --> 00:31:42,469
再度 私のデバイスで
スクールワークを開きます

434
00:31:44,371 --> 00:31:47,207
アイコンをタップします

435
00:31:48,141 --> 00:31:51,912
今回は足し算テストに
飛びました

436
00:31:52,146 --> 00:31:56,483
次は生徒の学習データに
移りましょう

437
00:31:56,583 --> 00:31:58,085
Xcodeに戻って

438
00:31:58,185 --> 00:32:03,290
テスト開始時にコールされる
コードに進みましょう

439
00:31:58,185 --> 00:32:03,290
テスト開始時にコールされる
コードに進みましょう

440
00:32:04,391 --> 00:32:07,628
先ほど話していた機能を―

441
00:32:08,195 --> 00:32:11,231
テストに設定しましょう

442
00:32:12,399 --> 00:32:13,867
タイマーです

443
00:32:13,967 --> 00:32:19,573
まず CLSDataStoreに
クエリを発行します

444
00:32:19,907 --> 00:32:25,179
対象はAppコンテキストの全子孫で

445
00:32:25,279 --> 00:32:29,950
Identifier Pathが一致し
テストにひも付くものです

446
00:32:30,517 --> 00:32:35,823
任意のコンテキストが
返されます

447
00:32:35,923 --> 00:32:38,258
becomeActiveを確認し

448
00:32:38,559 --> 00:32:43,030
新規アクティビティを
インスタンス化します

449
00:32:43,163 --> 00:32:46,033
このコードが実行されるのは

450
00:32:46,133 --> 00:32:50,704
生徒が新たに
テストを始める時だからです

451
00:32:51,138 --> 00:32:55,642
アクティビティとプロパティを
キャッシュします

452
00:32:56,877 --> 00:33:00,414
タイマー用に
startをコールします

453
00:32:56,877 --> 00:33:00,414
タイマー用に
startをコールします

454
00:33:00,914 --> 00:33:05,419
各問題への回答も
報告したいと思います

455
00:33:05,652 --> 00:33:10,591
回答時にコールされる
コードを見ていきます

456
00:33:11,758 --> 00:33:14,595
ここで活用するのは

457
00:33:14,695 --> 00:33:18,899
すでに実行している
アクティビティです

458
00:33:19,233 --> 00:33:24,204
そして CLSBinaryItemを
インスタンス化します

459
00:33:24,505 --> 00:33:29,843
固有の識別子と
明確なタイトルをつけます

460
00:33:30,277 --> 00:33:33,947
型も忘れずに渡してください

461
00:33:34,848 --> 00:33:37,684
生徒の回答について

462
00:33:37,785 --> 00:33:42,122
正解かどうかを
valueで設定します

463
00:33:42,823 --> 00:33:48,262
このBinaryItemを
additionalActivityItemsとして

464
00:33:48,362 --> 00:33:50,430
実行中の
アクティビティに追加します

465
00:33:51,098 --> 00:33:56,270
あとは タイマーの停止と
総得点の設定ですね

466
00:33:56,537 --> 00:34:02,309
テスト終了時にコールされる
コードを見ていきます

467
00:33:56,537 --> 00:34:02,309
テスト終了時にコールされる
コードを見ていきます

468
00:34:03,010 --> 00:34:06,980
現在実行中のアクティビティを
取得します

469
00:34:07,347 --> 00:34:11,518
では CLSScoreItemを
作りましょう

470
00:34:11,752 --> 00:34:15,054
識別子とタイトルは
固有にします

471
00:34:15,389 --> 00:34:19,326
それから満点中
生徒が何点を取ったか

472
00:34:19,493 --> 00:34:22,396
データを渡します

473
00:34:22,963 --> 00:34:28,702
primaryActivityItemとして
ScoreItemを追加します

474
00:34:28,902 --> 00:34:30,536
ここのポイントは

475
00:34:30,637 --> 00:34:35,342
CLSActivityItemの
サブクラス統一です

476
00:34:35,442 --> 00:34:38,344
常にScoreItemです

477
00:34:39,079 --> 00:34:42,516
stopでタイマーを停止させ

478
00:34:42,815 --> 00:34:45,351
変更をすべて保存します

479
00:34:45,786 --> 00:34:48,121
生徒の学習データに関し

480
00:34:48,222 --> 00:34:52,226
正しく設定できたか
テストしましょう

481
00:34:52,726 --> 00:34:58,031
今回は 生徒として
操作できるよう切り替えます

482
00:34:58,132 --> 00:35:02,236
そのため
デベロッパ設定に戻ります

483
00:34:58,132 --> 00:35:02,236
そのため
デベロッパ設定に戻ります

484
00:35:02,469 --> 00:35:05,205
各種ある設定の中から

485
00:35:05,305 --> 00:35:08,242
生徒に切り替えます

486
00:35:08,675 --> 00:35:11,511
スクールワークを開きます

487
00:35:12,346 --> 00:35:16,750
画面の右上に
プラスボタンがないのは

488
00:35:16,850 --> 00:35:19,253
生徒だからです

489
00:35:19,520 --> 00:35:22,823
教師からHandoutが
届いています

490
00:35:22,923 --> 00:35:27,194
タップすると
課題内容が表示されて

491
00:35:27,294 --> 00:35:31,465
アイコンから
テスト画面に飛べます

492
00:35:31,999 --> 00:35:36,003
進捗記録が
教師に送られることが

493
00:35:36,103 --> 00:35:37,671
アラートされます

494
00:35:37,771 --> 00:35:39,339
これを閉じ―

495
00:35:39,940 --> 00:35:43,677
すべての問題を
解いていきます

496
00:35:45,212 --> 00:35:47,114
最後に成績が出ます

497
00:35:47,214 --> 00:35:49,149
100％得点しました

498
00:35:49,416 --> 00:35:54,488
スクールワークに戻ると
データを確認できます

499
00:35:54,588 --> 00:35:57,291
所要時間と得点です

500
00:35:57,458 --> 00:36:00,828
得点がはっきり目立ちますね

501
00:35:57,458 --> 00:36:00,828
得点がはっきり目立ちますね

502
00:36:00,928 --> 00:36:04,798
Activity Itemが
機能しています

503
00:36:04,898 --> 00:36:06,934
更にタップすると

504
00:36:07,034 --> 00:36:10,270
設定した全データが出ます

505
00:36:10,370 --> 00:36:15,876
ここに総得点とタイトルも
表示されています

506
00:36:16,143 --> 00:36:21,048
下にあるのは
１問ずつにかけた時間です

507
00:36:21,148 --> 00:36:26,620
各問題について
設定したタイトルも見えます

508
00:36:26,954 --> 00:36:32,092
これで 設定内容の確認は
完了しました

509
00:36:32,459 --> 00:36:36,330
では パヴェルに登壇してもらい

510
00:36:36,430 --> 00:36:39,366
内容を振り返りましょう

511
00:36:39,533 --> 00:36:45,539
(拍手)

512
00:36:48,308 --> 00:36:49,677
ありがとう

513
00:36:50,344 --> 00:36:54,281
ClassKitでの
重要点をまとめます

514
00:36:54,948 --> 00:37:01,255
まず 教師が使えるように
コンテキストを早く決めます

515
00:36:54,948 --> 00:37:01,255
まず 教師が使えるように
コンテキストを早く決めます

516
00:37:01,455 --> 00:37:06,560
すべてをコンテキストに
する必要はありません

517
00:37:07,694 --> 00:37:11,365
必要な時には
デリゲートが使えます

518
00:37:11,865 --> 00:37:15,869
additionalActivityItemsも
便利です

519
00:37:16,003 --> 00:37:19,439
生徒の進捗を把握する上で

520
00:37:19,540 --> 00:37:24,044
役に立つ詳細情報を
教師に提供できます

521
00:37:25,212 --> 00:37:28,448
教育関係全般に
言えることですが―

522
00:37:28,849 --> 00:37:31,451
StoreKitへの依存をなくしましょう

523
00:37:31,985 --> 00:37:35,989
学校でApp 内課金は
不適切です

524
00:37:36,356 --> 00:37:38,859
また パージ可能領域は―

525
00:37:39,693 --> 00:37:44,198
一般に便利ですが学校では特に

526
00:37:44,298 --> 00:37:49,670
iPadが共有されることが多く
容量が貴重だからです

527
00:37:50,003 --> 00:37:53,907
最後は
Managed app configurationです

528
00:37:54,241 --> 00:37:56,176
これで設定を行えば

529
00:37:56,276 --> 00:37:59,446
学校のIT管理者の
負担が減ります

530
00:38:00,247 --> 00:38:04,718
今日話した内容のリンクや
詳細情報は

531
00:38:04,818 --> 00:38:08,255
developer.apple.com/education
までどうぞ

532
00:38:09,223 --> 00:38:13,093
引き続きWWDCを
お楽しみください

533
00:38:13,227 --> 00:38:14,361
以上です

534
00:38:14,461 --> 00:38:20,200
(拍手)