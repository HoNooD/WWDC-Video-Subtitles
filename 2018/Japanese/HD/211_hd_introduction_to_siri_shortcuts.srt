
1
00:00:07,074 --> 00:00:16,583
(音楽)

2
00:00:20,721 --> 00:00:29,496
(拍手)

3
00:00:29,663 --> 00:00:32,198
アリ･ワインスタインです

4
00:00:32,299 --> 00:00:35,469
今日は
ウィレム･マテラーと共に

5
00:00:35,569 --> 00:00:37,871
Siri Shortcutsを
ご紹介します

6
00:00:39,139 --> 00:00:43,043
２年前 最初のSiriKitを
発表しました

7
00:00:43,143 --> 00:00:48,182
Siriがアプリケーションと
連携して支払いをしたり

8
00:00:48,282 --> 00:00:53,520
メッセージを送信したり
できるようになりました

9
00:00:53,754 --> 00:00:56,590
しかし 今年は
もっと高性能な―

10
00:00:56,690 --> 00:01:00,561
Shortcutsを
発表したいと思います

11
00:00:56,690 --> 00:01:00,561
Shortcutsを
発表したいと思います

12
00:01:01,562 --> 00:01:04,197
Shortcutsの主な仕事は

13
00:01:04,298 --> 00:01:08,635
アプリケーションの主機能を
Siriに開示することです

14
00:01:08,735 --> 00:01:13,273
これによりユーザは
今までと違った方法や場所で

15
00:01:13,373 --> 00:01:15,409
アプリケーションを使えます

16
00:01:15,509 --> 00:01:18,779
ユーザのエンゲージメントに
効果的な方法です

17
00:01:19,847 --> 00:01:25,319
ショートカットの開示は
可能性を広げるのです

18
00:01:25,419 --> 00:01:29,056
ではShortcutsは
どこで使えるのでしょう

19
00:01:30,824 --> 00:01:34,061
Shortcutsの導入でSiriは

20
00:01:34,161 --> 00:01:39,366
ユーザの意図を把握し
レベルの高い提案をします

21
00:01:39,466 --> 00:01:44,238
検索中にもタイミング良く
提案がされます

22
00:01:45,639 --> 00:01:51,845
Siri Shortcutsは
Apple Watchでも使えます

23
00:01:53,447 --> 00:01:57,050
Siriが必要と判断した時
ロック画面に

24
00:01:57,150 --> 00:01:59,353
提案が表示されます

25
00:01:59,453 --> 00:02:02,756
ショートカットを
タップすると

26
00:01:59,453 --> 00:02:02,756
ショートカットを
タップすると

27
00:02:02,856 --> 00:02:06,193
すぐさまアプリケーションを
利用できます

28
00:02:07,261 --> 00:02:09,295
また Siriに話しかけて

29
00:02:09,395 --> 00:02:12,499
ショートカットを
追加できます

30
00:02:12,599 --> 00:02:17,871
この場合も検索と同じ
画面が表示されます

31
00:02:19,173 --> 00:02:23,277
アプリケーションは
Siriを通じて

32
00:02:23,377 --> 00:02:26,113
音声による
会話を提供できます

33
00:02:26,213 --> 00:02:29,349
Siriが音声でユーザに

34
00:02:29,449 --> 00:02:33,453
コーヒーができる時間を
教えてくれます

35
00:02:35,355 --> 00:02:38,292
ショートカットを
追加する時は

36
00:02:38,392 --> 00:02:41,161
フレーズを選択します

37
00:02:41,261 --> 00:02:45,599
ショートカットを起動する
合い言葉を選べるのです

38
00:02:45,766 --> 00:02:48,836
デベロッパがこの
フレーズを提案します

39
00:02:48,936 --> 00:02:52,139
この場合は
“コーヒータイム”でしょう

40
00:02:52,239 --> 00:02:54,741
追加したショートカットは

41
00:02:54,842 --> 00:02:57,678
全てのiOSデバイスで
使えます

42
00:02:57,778 --> 00:03:01,348
Apple Watchや
HomePodでも使えます

43
00:02:57,778 --> 00:03:01,348
Apple Watchや
HomePodでも使えます

44
00:03:02,616 --> 00:03:05,953
新しいShortcutsを使えば

45
00:03:06,053 --> 00:03:09,423
誰でも独自のショートカット
が作れます

46
00:03:09,523 --> 00:03:13,694
いくつかのステップを
ドラッグするだけでよく

47
00:03:13,794 --> 00:03:18,098
アプリケーションに特化した
ステップも入れられます

48
00:03:19,166 --> 00:03:23,337
本日はShortcutsの
適用方法と

49
00:03:23,437 --> 00:03:27,608
優れた提案のための
最適化についてご説明します

50
00:03:27,741 --> 00:03:31,778
また プライバシーの
問題についてと

51
00:03:31,879 --> 00:03:35,349
メディア再生に関しても
お話しします

52
00:03:36,450 --> 00:03:40,387
まず ShortcutsのAPIの
導入について説明します

53
00:03:41,421 --> 00:03:44,191
ショートカット作成の
手順は３つ

54
00:03:44,291 --> 00:03:46,793
まずは
ショートカットの定義です

55
00:03:46,894 --> 00:03:50,697
開示したいショートカットを
定義して

56
00:03:50,797 --> 00:03:54,468
Siriにアプリケーションを
理解させます

57
00:03:55,302 --> 00:03:57,905
次にショートカットを
提供します

58
00:03:58,005 --> 00:04:00,974
アプリケーションが
使用される度に

59
00:03:58,005 --> 00:04:00,974
アプリケーションが
使用される度に

60
00:04:01,074 --> 00:04:04,711
それをシステムに
報告するのです

61
00:04:04,811 --> 00:04:09,016
Siriは報告を基に
提案を作ります

62
00:04:09,116 --> 00:04:12,920
３つ目はショートカットの
ハンドルです

63
00:04:13,020 --> 00:04:18,492
ユーザがショートカットを
使いたいとします

64
00:04:18,591 --> 00:04:21,795
その場合アプリケーションや
Extensionが

65
00:04:21,894 --> 00:04:24,832
適切に起動され
処理されなくてはなりません

66
00:04:25,866 --> 00:04:29,069
ショートカットを
定義する前に

67
00:04:29,169 --> 00:04:32,873
まず何を開示するかを
決めます

68
00:04:32,973 --> 00:04:35,375
そのアプリケーションで

69
00:04:35,475 --> 00:04:38,478
最もしたいことを
考えると簡単です

70
00:04:38,579 --> 00:04:42,216
それに関するものが
候補になります

71
00:04:42,583 --> 00:04:45,419
開示するショートカットは

72
00:04:45,519 --> 00:04:49,823
ユーザをアプリケーションへ
直行させてくれるのです

73
00:04:49,990 --> 00:04:53,961
そのアプリケーションの
本来の機能を

74
00:04:54,061 --> 00:04:56,263
もっと迅速に利用できます

75
00:04:57,097 --> 00:04:59,666
時間短縮は大幅でなくては
なりません

76
00:04:59,766 --> 00:05:02,269
普通に起動するのと

77
00:04:59,766 --> 00:05:02,269
普通に起動するのと

78
00:05:02,369 --> 00:05:05,105
同じ速度では
意味がありません

79
00:05:05,205 --> 00:05:09,743
時間の短縮にならない
ショートカットだと

80
00:05:10,077 --> 00:05:12,179
頻繁に提案されません

81
00:05:12,279 --> 00:05:18,051
またユーザが関心を持ち
何度も使うショートカットを

82
00:05:18,318 --> 00:05:21,755
開示しなければなりません

83
00:05:21,855 --> 00:05:24,191
数回しか使われない―

84
00:05:24,291 --> 00:05:27,928
ショートカットは
意味がありません

85
00:05:28,962 --> 00:05:33,467
そして いつでも
実行できる必要があります

86
00:05:33,567 --> 00:05:37,437
特定の環境下でのみ
利用できるものは

87
00:05:37,538 --> 00:05:39,873
確実性に欠けます

88
00:05:40,741 --> 00:05:44,111
開示するショートカットを
決定したら

89
00:05:44,211 --> 00:05:47,047
APIをチェックします

90
00:05:48,949 --> 00:05:53,020
Shortcuts用のAPIは
２つあります

91
00:05:53,120 --> 00:05:55,722
１つはNSUserActivity

92
00:05:55,989 --> 00:06:00,360
アプリケーションの機能を
簡単に伝えることができ

93
00:05:55,989 --> 00:06:00,360
アプリケーションの機能を
簡単に伝えることができ

94
00:06:00,460 --> 00:06:04,464
SpotlightやHandoffと
連動します

95
00:06:05,365 --> 00:06:07,434
２つ目はIntentです

96
00:06:07,534 --> 00:06:12,973
Intentはアプリケーションの
機能を詳細に伝えます

97
00:06:13,073 --> 00:06:17,511
SiriKitにはすでに
各種Intentが含まれていて

98
00:06:18,178 --> 00:06:21,949
アプリケーションと
Siriの連動を助けます

99
00:06:22,049 --> 00:06:24,418
今後はShortcuts用の

100
00:06:24,518 --> 00:06:28,222
カスタムIntentが
自分で定義できます

101
00:06:29,223 --> 00:06:32,125
ショートカットを
開示する時は

102
00:06:32,226 --> 00:06:35,062
まずNSUserActivityか
Intentかを選びます

103
00:06:35,162 --> 00:06:37,297
判断基準を見てみましょう

104
00:06:40,133 --> 00:06:43,670
NSUserActivityは
何かを開くなど

105
00:06:43,770 --> 00:06:47,541
単純なショートカットに
向いています

106
00:06:47,641 --> 00:06:50,911
例えば既にSpotlight検索で

107
00:06:51,011 --> 00:06:53,747
インデックスした
ショートカットなどです

108
00:06:53,847 --> 00:06:58,919
または既にNSUserActivityに
提供したものなどもです

109
00:07:00,888 --> 00:07:04,691
しかしShortcutsの
長所を有効利用するには

110
00:07:04,791 --> 00:07:06,493
Intentを使いましょう

111
00:07:06,593 --> 00:07:09,496
アプリケーションを
起動せずに使え

112
00:07:10,030 --> 00:07:14,401
カスタマイズした音声と
インターフェイスも入れられ

113
00:07:15,202 --> 00:07:18,138
後ほどウィレムが
説明しますが

114
00:07:18,238 --> 00:07:20,774
パラメータ予測もできます

115
00:07:21,642 --> 00:07:24,044
方法を決定したら

116
00:07:24,144 --> 00:07:27,748
あとは実際に
実装してみましょう

117
00:07:29,783 --> 00:07:32,719
まずはNSUserActivityを
使います

118
00:07:32,853 --> 00:07:36,723
初めは
ショートカットの定義です

119
00:07:36,823 --> 00:07:42,162
アプリケーションの
Info.plistファイルで

120
00:07:42,262 --> 00:07:45,032
アクティビティタイプを
登録します

121
00:07:46,333 --> 00:07:50,170
次にショートカットを
提供します

122
00:07:50,270 --> 00:07:53,240
対象アプリケーションに対し
常に

123
00:07:53,340 --> 00:07:58,245
NSUserActivityオブジェクト
を準備しておきます

124
00:07:59,146 --> 00:08:01,448
ここで重要なフラグが

125
00:07:59,146 --> 00:08:01,448
ここで重要なフラグが

126
00:08:01,548 --> 00:08:04,318
isEligibleForPrediction
です

127
00:08:04,418 --> 00:08:08,322
全てのアクティビティを
ショートカットにします

128
00:08:08,422 --> 00:08:11,725
既存の
アクティビティについて

129
00:08:11,825 --> 00:08:14,628
このフラグを
“true”にするだけです

130
00:08:14,728 --> 00:08:17,998
ショートカットが自動で
作成されます

131
00:08:18,532 --> 00:08:22,236
isEligibleForSearchも
“true”にすれば

132
00:08:22,336 --> 00:08:25,806
isEligibleForPredictionが
有効になります

133
00:08:26,340 --> 00:08:31,645
isEligibleForHandoffは
“true”がデフォルトのため

134
00:08:31,745 --> 00:08:37,484
そのままでアクティビティを
デバイス間で共有できます

135
00:08:38,852 --> 00:08:43,023
アクティビティを作る時は
あとで使えるように

136
00:08:43,123 --> 00:08:47,694
userInfo辞書に
情報を入れましょう

137
00:08:48,762 --> 00:08:51,965
次にUIViewControllerか
UIResponderオブジェクトに

138
00:08:52,065 --> 00:08:57,004
アクティビティを追加し
カレントにします

139
00:08:58,605 --> 00:09:02,743
定義と提供が終わったら
ハンドルします

140
00:08:58,605 --> 00:09:02,743
定義と提供が終わったら
ハンドルします

141
00:09:02,843 --> 00:09:05,979
NSUserActivityを使うと

142
00:09:06,079 --> 00:09:09,683
常にアプリケーションから
開きます

143
00:09:09,850 --> 00:09:13,120
そのためには
continueUserActivityという

144
00:09:13,220 --> 00:09:16,857
AppDelegateのメソッドを
実装します

145
00:09:16,957 --> 00:09:22,229
まずアクティビティタイプが
正しいか確認します

146
00:09:22,329 --> 00:09:25,165
正しかったら
アクティビティ登録前の

147
00:09:25,265 --> 00:09:27,734
状態に戻します

148
00:09:28,936 --> 00:09:32,339
これでSiriが
ショートカットを

149
00:09:32,439 --> 00:09:35,242
提案できるようになりました

150
00:09:37,077 --> 00:09:40,247
次はIntentを使った方法です

151
00:09:41,148 --> 00:09:43,417
まずショートカットを
定義します

152
00:09:43,517 --> 00:09:49,523
最初にどのタイプのIntentを
使用するか決めます

153
00:09:50,090 --> 00:09:53,393
SiriKitには
メッセージの送信など

154
00:09:53,494 --> 00:09:56,864
様々なIntentが
含まれています

155
00:09:57,364 --> 00:10:02,903
ではXcodeでカスタムの
Intentを定義しましょう

156
00:09:57,364 --> 00:10:02,903
ではXcodeでカスタムの
Intentを定義しましょう

157
00:10:03,003 --> 00:10:06,173
既に
作りたいショートカットが

158
00:10:06,273 --> 00:10:10,277
SiriKitのIntentにあれば
それを使います

159
00:10:10,377 --> 00:10:13,080
なければ自分で定義できます

160
00:10:13,280 --> 00:10:17,451
自分で定義する場合も
既存のものを使う時も

161
00:10:17,551 --> 00:10:21,622
まずXcodeで Intentの
定義ファイルを作ります

162
00:10:21,955 --> 00:10:27,594
私はスープを注文する
アプリケーションを

163
00:10:27,694 --> 00:10:30,797
友人と開発しています

164
00:10:30,898 --> 00:10:36,303
Siriと連携して
簡単にスープを注文できます

165
00:10:36,937 --> 00:10:41,909
Intentエディタで
Intentを作りましょう

166
00:10:42,009 --> 00:10:45,412
Xcodeで
ファイルから新規を選び

167
00:10:45,512 --> 00:10:48,582
“Definition File”を
選択します

168
00:10:49,249 --> 00:10:51,385
するとIntentエディタが
表示されます

169
00:10:51,485 --> 00:10:55,322
左下のプラスボタンを押して
開始します

170
00:10:56,823 --> 00:11:00,060
まずIntentに名前を付けます

171
00:10:56,823 --> 00:11:00,060
まずIntentに名前を付けます

172
00:11:00,160 --> 00:11:03,096
今回は
“OrderSoup”とします

173
00:11:04,798 --> 00:11:07,568
次にIntentのメタデータを
入力します

174
00:11:07,668 --> 00:11:09,903
ステップごとに
見てみましょう

175
00:11:10,470 --> 00:11:13,273
最初は“カテゴリ”です

176
00:11:13,373 --> 00:11:16,710
カテゴリが定義されると

177
00:11:16,810 --> 00:11:20,480
SiriがIntentと連動します

178
00:11:20,581 --> 00:11:23,684
今回は“Order”を
選びます

179
00:11:23,784 --> 00:11:28,589
これでSiriは
“注文完了です”と言ったり

180
00:11:28,689 --> 00:11:31,925
画面に“注文”と表示します

181
00:11:32,226 --> 00:11:36,096
Intentの目的に合う
カテゴリを

182
00:11:36,196 --> 00:11:38,499
選ぶのが良いでしょう

183
00:11:39,399 --> 00:11:42,836
次はIntentの
“見出し”と“説明”です

184
00:11:42,936 --> 00:11:48,108
使えるショートカットが
ここで分かります

185
00:11:48,942 --> 00:11:52,679
これは事前にユーザの同意を
得るかどうかを

186
00:11:52,779 --> 00:11:57,284
決定するための
チェックボックスです

187
00:11:57,384 --> 00:12:01,088
“注文しますか？”と
Siriが尋ねれば

188
00:11:57,384 --> 00:12:01,088
“注文しますか？”と
Siriが尋ねれば

189
00:12:01,188 --> 00:12:05,893
間違ってスープを注文する
心配がありません

190
00:12:07,661 --> 00:12:10,898
次は“パラメータ”です

191
00:12:10,998 --> 00:12:14,768
ショートカットに渡す
パラメータを定義します

192
00:12:14,868 --> 00:12:17,437
今回は２つあります

193
00:12:17,538 --> 00:12:22,042
注文された商品のリストと
配達場所です

194
00:12:22,142 --> 00:12:26,180
パラメータは 文字 数
人 場所などの情報を

195
00:12:26,280 --> 00:12:29,850
タイプ別に
リスト化しています

196
00:12:29,950 --> 00:12:34,955
作りたいパラメータが
リストにない場合は

197
00:12:35,055 --> 00:12:38,892
“カスタムタイプ”を
選びます

198
00:12:40,294 --> 00:12:43,597
次はショートカットの
タイプです

199
00:12:43,697 --> 00:12:48,769
ユーザに提案したい
タイプを全て定義します

200
00:12:49,469 --> 00:12:53,140
各タイプには 予測される
パラメータが入っています

201
00:12:53,240 --> 00:12:58,612
タイプを選ぶと
パラメータに値が入り

202
00:12:58,712 --> 00:13:01,782
見出しなどの表示が
決まります

203
00:12:58,712 --> 00:13:01,782
見出しなどの表示が
決まります

204
00:13:01,882 --> 00:13:05,586
Shortcutsが背景で
実行されない場合

205
00:13:05,686 --> 00:13:09,056
アプリケーションを
起動する必要がある場合は

206
00:13:09,156 --> 00:13:12,059
“Background”の
チェックを外してください

207
00:13:12,159 --> 00:13:15,896
Intentに
複数のタイプが含まれ

208
00:13:15,996 --> 00:13:19,433
一部だけ背景で
実行される場合があります

209
00:13:19,533 --> 00:13:23,303
Soup Chefが
まさにそのケースです

210
00:13:23,403 --> 00:13:28,842
注文の商品と場所の両方が
予測できた場合は

211
00:13:28,942 --> 00:13:31,178
背景で実行されます

212
00:13:31,278 --> 00:13:35,782
しかし 配達場所だけが
タイプに入っていると

213
00:13:36,483 --> 00:13:41,188
Siriは
情報が不十分と予測します

214
00:13:41,288 --> 00:13:45,292
その場合は
背景で実行させずに

215
00:13:45,392 --> 00:13:50,164
アプリケーションを開き
ユーザに場所を尋ねます

216
00:13:50,964 --> 00:13:55,302
関係する全ての
ショートカットタイプを選び

217
00:13:55,402 --> 00:13:58,739
Siriが
予測しやすいようにします

218
00:13:58,839 --> 00:14:01,308
できれば
全てのショートカットが

219
00:13:58,839 --> 00:14:01,308
できれば
全てのショートカットが

220
00:14:01,408 --> 00:14:05,012
背景で
作動するのが望ましいですね

221
00:14:05,112 --> 00:14:09,683
ユーザの利用が
迅速になることで

222
00:14:09,783 --> 00:14:12,452
より頻繁な提案がなされます

223
00:14:13,654 --> 00:14:17,891
Intentには16のタイプを
設定できます

224
00:14:18,725 --> 00:14:23,797
定義が終わると Xcodeは
自動的にIntentのクラスと

225
00:14:23,931 --> 00:14:27,034
Intent取り扱いプロトコルの
コードを生成します

226
00:14:27,134 --> 00:14:30,571
今回は“OrderSoupIntent”の
クラスと

227
00:14:30,671 --> 00:14:33,740
“OrderSoupIntentHandling”の
プロトコル

228
00:14:33,841 --> 00:14:38,979
プロパティはIntentの
定義ファイルのとおりです

229
00:14:39,713 --> 00:14:43,650
どのターゲットに対して
コードが生成されたか

230
00:14:43,750 --> 00:14:46,820
考慮する必要があります

231
00:14:46,920 --> 00:14:51,959
矛盾する同じクラスを
選ばないためです

232
00:14:52,492 --> 00:14:56,396
では私のインスペクタで

233
00:14:56,497 --> 00:14:59,299
ターゲットを見てみましょう

234
00:15:00,934 --> 00:15:06,540
全てのターゲットにIntentの
定義ファイルがあります

235
00:15:06,640 --> 00:15:10,310
Target Membership下の
ボックスをチェックします

236
00:15:10,410 --> 00:15:13,146
フレームワークがある場合

237
00:15:13,247 --> 00:15:17,084
複数のターゲットでコードを
生成しないでください

238
00:15:17,217 --> 00:15:21,855
Intentのクラスのみを
作るようにします

239
00:15:21,955 --> 00:15:24,158
“Intent Classes”を選び

240
00:15:24,258 --> 00:15:29,463
“No Generated Classes”を
他のターゲットに選びます

241
00:15:29,563 --> 00:15:35,169
アプリケーションに
フレームワークがない場合

242
00:15:35,269 --> 00:15:38,906
全てのターゲットを
調べる必要があります

243
00:15:40,073 --> 00:15:43,510
そこでXcodeで
カスタムIntentを定義します

244
00:15:44,211 --> 00:15:47,714
定義が終われば
提供は簡単です

245
00:15:47,815 --> 00:15:50,984
Intentオブジェクトを
インスタンス化し

246
00:15:51,084 --> 00:15:56,256
パラメータを入れINInteraction
オブジェクトを提供します

247
00:15:56,757 --> 00:16:02,362
ユーザがショートカットを
使う度この操作を行います

248
00:15:56,757 --> 00:16:02,362
ユーザがショートカットを
使う度この操作を行います

249
00:16:02,462 --> 00:16:07,334
つまりユーザが
スープを注文する度に

250
00:16:07,434 --> 00:16:12,639
Intentを提供し
Siriの予測を助けるのです

251
00:16:14,041 --> 00:16:18,011
あとは実際に
ハンドルするだけです

252
00:16:18,111 --> 00:16:20,948
NSUserActivityと同様に

253
00:16:21,048 --> 00:16:25,919
continueUserActivity
メソッドを使います

254
00:16:26,019 --> 00:16:31,725
IntentはNSUserActivityの
オブジェクトとして渡され

255
00:16:31,825 --> 00:16:36,597
アクティビティタイプは
Intentのクラス名になります

256
00:16:36,697 --> 00:16:39,533
ここでは
“OrderSoupIntent”です

257
00:16:40,100 --> 00:16:42,970
continueUserActivityだけを
実装すると

258
00:16:43,070 --> 00:16:45,305
ショートカットは毎回
アプリケーションを開きます

259
00:16:45,405 --> 00:16:48,475
背景で実行されず
Siriとの連動がなく

260
00:16:48,575 --> 00:16:50,844
カスタムボイスも使えません

261
00:16:50,944 --> 00:16:52,913
Extensionを作ると

262
00:16:53,013 --> 00:16:56,250
背景で
ショートカットが使えます

263
00:16:57,017 --> 00:17:01,421
それにはXcodeで
新しいターゲットを作り

264
00:16:57,017 --> 00:17:01,421
それにはXcodeで
新しいターゲットを作り

265
00:17:01,522 --> 00:17:04,258
Intents Extension
テンプレートを選びます

266
00:17:05,659 --> 00:17:09,663
そしてハンドラを
プロトコルに対応させます

267
00:17:09,762 --> 00:17:13,867
ここでは
OrderSoupIntentHandlingに

268
00:17:13,967 --> 00:17:16,236
合わせて実装します

269
00:17:16,336 --> 00:17:21,340
従来のSiriKitと違い
Resolveメソッドは要りません

270
00:17:21,441 --> 00:17:27,381
Intentはカスタマイズせずに
使用可能だからです

271
00:17:27,481 --> 00:17:31,852
Intentのプロパティの値が
全て有効か確認します

272
00:17:31,952 --> 00:17:35,656
値が無効で
ハンドルできない場合は

273
00:17:35,756 --> 00:17:38,525
エラーコードを返します

274
00:17:38,625 --> 00:17:42,829
ハンドル時には
ショートカットが起動します

275
00:17:42,930 --> 00:17:45,933
この場合はスープの注文です

276
00:17:46,033 --> 00:17:51,805
Responseオブジェクトに
注文の結果を返します

277
00:17:52,839 --> 00:17:56,310
背景で実行される
全てのショートカットには

278
00:17:56,410 --> 00:17:59,112
Intents Extensionを
実装します

279
00:17:59,213 --> 00:18:02,983
そうすると
アプリケーションを開かずに

280
00:17:59,213 --> 00:18:02,983
そうすると
アプリケーションを開かずに

281
00:18:03,083 --> 00:18:07,521
ロック画面や検索中に
Shortcutsが使えます

282
00:18:07,621 --> 00:18:11,225
背景で作動するものが
最も価値がありますが

283
00:18:11,325 --> 00:18:13,560
他にも優れた
ショートカットを作れます

284
00:18:13,660 --> 00:18:17,197
Intents Extensionを
実装する場合も

285
00:18:17,297 --> 00:18:19,933
continueUserActivityは
常に実装してください

286
00:18:20,033 --> 00:18:24,538
Siriのカードを
タップしたりすることで

287
00:18:24,638 --> 00:18:30,277
ショートカットを
起動できるからです

288
00:18:31,645 --> 00:18:36,150
ではINRelevantShortcutも
ご紹介します

289
00:18:36,250 --> 00:18:40,754
Siriの文字盤で
ショートカットを表示します

290
00:18:40,854 --> 00:18:44,391
これにはIntentか
アクティビティを含む

291
00:18:44,491 --> 00:18:47,694
INRelevantShortcut
オブジェクトを提供します

292
00:18:48,095 --> 00:18:52,099
ショートカットに
関連情報も入れられます

293
00:18:52,199 --> 00:18:54,134
提案のタイミングを

294
00:18:54,234 --> 00:18:58,405
Siriの文字盤が
理解するヒントになります

295
00:18:59,273 --> 00:19:04,578
Watchのアプリケーション
なしでも使えます

296
00:18:59,273 --> 00:19:04,578
Watchのアプリケーション
なしでも使えます

297
00:19:04,678 --> 00:19:08,282
iOSでショートカットを
開示すると

298
00:19:08,382 --> 00:19:12,052
Siriの文字盤にも
すぐに表示されます

299
00:19:12,152 --> 00:19:17,291
ShortcutsとAPIの
説明が終わったので

300
00:19:17,391 --> 00:19:19,827
ウィレムと交代します

301
00:19:19,927 --> 00:19:23,931
XcodeでのShortcutsの
実装を説明します

302
00:19:24,631 --> 00:19:25,532
ウィレム

303
00:19:25,699 --> 00:19:34,308
(拍手)

304
00:19:34,575 --> 00:19:35,776
ありがとう　アリ

305
00:19:36,410 --> 00:19:42,483
Shortcutsの
最初のデモができて光栄です

306
00:19:42,649 --> 00:19:47,287
Xcodeに行く前に
まずSoup Chefの―

307
00:19:47,387 --> 00:19:51,291
アプリケーションを
お見せします

308
00:19:51,391 --> 00:19:52,693
画面に出します

309
00:19:59,266 --> 00:20:01,502
これがSoup Chefです

310
00:19:59,266 --> 00:20:01,502
これがSoup Chefです

311
00:20:01,602 --> 00:20:04,938
開くと注文履歴が
表示されます

312
00:20:05,038 --> 00:20:07,908
まだ 注文履歴は空です

313
00:20:08,008 --> 00:20:11,078
プラスボタンを押し
注文します

314
00:20:11,211 --> 00:20:15,282
スープのメニューが
出てきました

315
00:20:15,382 --> 00:20:17,117
トマトスープにします

316
00:20:18,352 --> 00:20:22,756
次に 数量とオプションを
選びます

317
00:20:22,856 --> 00:20:26,059
赤トウガラシ入り
トマトスープを１つ注文

318
00:20:26,326 --> 00:20:29,630
“注文実行”
ボタンを押します

319
00:20:30,330 --> 00:20:34,034
履歴には注文した品が
表示されました

320
00:20:34,768 --> 00:20:38,305
履歴から
注文の詳細も見られます

321
00:20:38,672 --> 00:20:41,175
これはアクティビティに
リンクしています

322
00:20:41,642 --> 00:20:45,312
これをユーザに
提案しましょう

323
00:20:45,412 --> 00:20:49,449
過去に頼んだおいしい
スープを思い出せます

324
00:20:51,018 --> 00:20:53,554
ユーザに提案するには

325
00:20:53,687 --> 00:20:56,156
Xcodeを使います

326
00:20:58,192 --> 00:21:02,129
viewControllerで
注文の詳細を見ます

327
00:20:58,192 --> 00:21:02,129
viewControllerで
注文の詳細を見ます

328
00:21:02,729 --> 00:21:05,199
ユーザアクティビティを作り

329
00:21:05,332 --> 00:21:07,701
requiredUserInfoKeysを
設定します

330
00:21:07,868 --> 00:21:10,404
EligibleForSearchも設定

331
00:21:12,439 --> 00:21:17,077
EligibleForPredictionも
有効にします

332
00:21:22,082 --> 00:21:24,818
では試してみましょう

333
00:21:34,194 --> 00:21:38,198
まずアクティビティ情報を
提供するため

334
00:21:39,566 --> 00:21:40,901
画面に戻ります

335
00:21:41,568 --> 00:21:43,937
情報の提供を確認します

336
00:21:44,037 --> 00:21:47,007
デベロッパ向けの設定を
２つ追加しました

337
00:21:47,107 --> 00:21:51,545
検索中でも
情報の提供を確認できます

338
00:21:51,745 --> 00:21:56,483
追加には設定から
デベロッパセクションに行き

339
00:21:57,551 --> 00:21:59,720
“Display Recent
Shortcuts”と

340
00:21:59,820 --> 00:22:04,925
“Display Donations on
Lock Screen”をオンにします

341
00:21:59,820 --> 00:22:04,925
“Display Donations on
Lock Screen”をオンにします

342
00:22:06,126 --> 00:22:10,364
ホームに戻り検索します

343
00:22:10,464 --> 00:22:14,167
提供した情報が
表示されています

344
00:22:14,501 --> 00:22:18,672
(拍手)

345
00:22:18,872 --> 00:22:22,242
タップすると
アプリケーションが開き

346
00:22:22,342 --> 00:22:26,280
提供した注文情報が
再び表示されます

347
00:22:27,548 --> 00:22:31,218
しかし機能は
これだけではありません

348
00:22:31,318 --> 00:22:34,521
スープを注文するのが
目的なので

349
00:22:34,621 --> 00:22:37,891
ユーザにスープを
提案しましょう

350
00:22:37,991 --> 00:22:41,428
アプリケーションを
開かずに行うには

351
00:22:41,528 --> 00:22:44,131
Intentを使います

352
00:22:44,965 --> 00:22:48,769
内蔵されたIntentは
ありませんが

353
00:22:49,036 --> 00:22:54,007
iOS 12では
カスタムIntentが作れます

354
00:22:56,143 --> 00:22:59,446
まずIntentの
定義ファイルを作ります

355
00:22:59,546 --> 00:23:03,150
ファイルメニューから
新規ファイルを開き

356
00:22:59,546 --> 00:23:03,150
ファイルメニューから
新規ファイルを開き

357
00:23:04,084 --> 00:23:07,488
“SiriKit Intent Definition
File”を選びます

358
00:23:08,155 --> 00:23:09,289
“次”をクリック

359
00:23:09,756 --> 00:23:12,159
名前は
Intentのままにして

360
00:23:12,259 --> 00:23:14,394
“Resources”のグループに
入れます

361
00:23:14,495 --> 00:23:16,430
“作成”を押して完了です

362
00:23:17,564 --> 00:23:21,568
Intentエディタが
表示されました

363
00:23:21,802 --> 00:23:26,340
正しいターゲットに
定義ファイルがあるか確認し

364
00:23:26,507 --> 00:23:30,978
利用する全てのターゲットに
Intentを入れます

365
00:23:31,078 --> 00:23:33,947
共有フレームワークに
追加するので

366
00:23:34,248 --> 00:23:38,619
ターゲットに対し
コードは生成しません

367
00:23:38,719 --> 00:23:44,024
“No Generated Classes”を
ターゲットの隣で選びます

368
00:23:44,925 --> 00:23:47,461
次にIntentを追加します

369
00:23:47,995 --> 00:23:53,200
左下のプラスボタンから
“New Intent”を選びます

370
00:23:53,967 --> 00:23:56,703
OrderSoupと名付けます

371
00:23:58,772 --> 00:24:02,843
カテゴリは“Order”と入力

372
00:23:58,772 --> 00:24:02,843
カテゴリは“Order”と入力

373
00:24:03,477 --> 00:24:06,346
タイトルには
“Order Soup”と書きます

374
00:24:06,447 --> 00:24:11,118
説明には“Soup Chefの
スープ注文”と記入

375
00:24:12,186 --> 00:24:16,623
金銭取引が生じるので
注文前に確認します

376
00:24:16,723 --> 00:24:20,460
“User confirmation
required”を選択します

377
00:24:21,562 --> 00:24:26,166
次に３つのパラメータを
定義します

378
00:24:26,266 --> 00:24:28,068
１つ目はスープ

379
00:24:28,168 --> 00:24:29,903
２つ目は数量

380
00:24:30,003 --> 00:24:31,939
３つ目はオプション

381
00:24:32,039 --> 00:24:33,740
まずスープです

382
00:24:33,841 --> 00:24:38,912
パラメータセクションの
名前に“soup”と入れて

383
00:24:39,112 --> 00:24:44,017
タイプを“Custom”と
選びます

384
00:24:45,619 --> 00:24:50,124
次に 再度プラスを押して
名前に“quantity”を追加

385
00:24:50,390 --> 00:24:52,793
“Integer”を選びます

386
00:24:54,261 --> 00:24:57,130
次は“options”です

387
00:24:57,564 --> 00:25:01,368
これもタイプを“Custom”と
選びます

388
00:24:57,564 --> 00:25:01,368
これもタイプを“Custom”と
選びます

389
00:25:01,802 --> 00:25:04,738
複数のオプションを
選べるので

390
00:25:04,838 --> 00:25:06,974
“Array”もチェックします

391
00:25:08,475 --> 00:25:11,879
最後にショートカット
タイプを定義します

392
00:25:12,613 --> 00:25:15,382
この時点で
全てのパラメータを含む

393
00:25:15,482 --> 00:25:17,918
単一のショートカットを
定義します

394
00:25:18,452 --> 00:25:21,422
“Shortcut Types”で
プラスボタンを押し

395
00:25:21,955 --> 00:25:24,925
入れたいパラメータを
選びます

396
00:25:25,025 --> 00:25:27,628
“soup”と“quantity”と
“options”です

397
00:25:27,728 --> 00:25:30,464
よければボタンを
クリックします

398
00:25:31,131 --> 00:25:33,400
見出しに“Order”と入れ

399
00:25:33,500 --> 00:25:36,637
“quantity”を挿入します

400
00:25:36,937 --> 00:25:40,774
そして“soup with options”

401
00:25:41,375 --> 00:25:43,644
補足文は空のままです

402
00:25:43,744 --> 00:25:46,947
必要な情報は見出しに
入れましたからね

403
00:25:47,848 --> 00:25:50,651
背景でIntentを
実行したいので

404
00:25:51,185 --> 00:25:53,954
“Support background
execution”はそのままです

405
00:25:56,290 --> 00:25:59,126
最初のIntentが
定義できました

406
00:25:59,226 --> 00:26:00,427
使ってみましょう

407
00:25:59,226 --> 00:26:00,427
使ってみましょう

408
00:26:00,794 --> 00:26:05,332
注文オブジェクトに２つの
ヘルパーメソッドを追加し

409
00:26:05,432 --> 00:26:08,168
Intentとの変換を
容易にします

410
00:26:09,403 --> 00:26:11,638
注文のクラスに行き

411
00:26:11,738 --> 00:26:17,211
下段に注文のExtensionを
追加します

412
00:26:18,078 --> 00:26:21,548
Intentを戻す変数が
含まれています

413
00:26:22,082 --> 00:26:23,717
そこにIntentを作成します

414
00:26:23,817 --> 00:26:28,322
スープと数量 オプションを
セットしIntentを返します

415
00:26:28,922 --> 00:26:32,426
ExtensionはIntentを示す
新しい初期化子も定義します

416
00:26:32,526 --> 00:26:36,497
スープと数量
オプションを抽出し

417
00:26:36,597 --> 00:26:40,434
これらの値で注文を
初期化します

418
00:26:41,168 --> 00:26:42,903
すごく役立ちそうです

419
00:26:43,837 --> 00:26:48,609
次に 注文の度にIntentを
提供するようにします

420
00:26:48,709 --> 00:26:51,311
スープ注文の
データマネージャーを開き

421
00:26:52,579 --> 00:26:55,682
“placeOrder”メソッドで
提供ロジックを追加します

422
00:26:57,417 --> 00:27:02,022
注文Intentを含む
INInteractionを作成し

423
00:26:57,417 --> 00:27:02,022
注文Intentを含む
INInteractionを作成し

424
00:27:02,122 --> 00:27:04,958
相互作用を
提供するだけです

425
00:27:07,294 --> 00:27:09,263
最後にIntentをハンドルする
必要があります

426
00:27:09,363 --> 00:27:12,099
まずアプリケーションに
サポートを追加します

427
00:27:12,466 --> 00:27:14,768
AppDelegateに行き

428
00:27:14,868 --> 00:27:18,038
“continueUserActivity”で
サポートを追加します

429
00:27:20,707 --> 00:27:22,409
“userActivity”のタイプが

430
00:27:22,509 --> 00:27:27,147
実行したいクラス名と
同じか確認します

431
00:27:27,381 --> 00:27:31,318
同じ場合はIntentを
userActivityから取り出し

432
00:27:31,418 --> 00:27:33,253
注文を生成します

433
00:27:33,353 --> 00:27:35,522
最後に注文画面を
提示します

434
00:27:36,156 --> 00:27:37,891
Appを起動していますが

435
00:27:37,991 --> 00:27:40,494
恐らくユーザは
すぐに注文せず

436
00:27:40,594 --> 00:27:43,497
先に
カスタマイズしたいはずです

437
00:27:43,597 --> 00:27:46,400
それで注文画面を
提示しました

438
00:27:47,701 --> 00:27:48,869
最後です

439
00:27:48,969 --> 00:27:52,206
Intentを背景で
実行できるよう

440
00:27:52,306 --> 00:27:55,075
Intents Extensionで
サポートを追加します

441
00:27:55,609 --> 00:27:58,145
まずIntents Extensionを
追加するため

442
00:27:58,245 --> 00:28:01,415
“ファイル”“ ビュー ”
“ターゲット”と進みます

443
00:27:58,245 --> 00:28:01,415
“ファイル”“ ビュー ”
“ターゲット”と進みます

444
00:28:02,349 --> 00:28:04,885
“Intetent Extension”を選びます

445
00:28:05,619 --> 00:28:09,189
“SoupChefIntents”と
名付け

446
00:28:09,289 --> 00:28:10,557
終了をクリックします

447
00:28:12,793 --> 00:28:17,064
Intentを使う新たな
ターゲットを追加したので

448
00:28:17,164 --> 00:28:20,601
Intent定義ファイルが
含まれるようにします

449
00:28:20,701 --> 00:28:23,103
定義ファイルに戻り

450
00:28:23,203 --> 00:28:25,505
ターゲットに追加します

451
00:28:25,672 --> 00:28:28,842
コードを生成したくないので

452
00:28:28,942 --> 00:28:31,044
“No Generated Classes”を
選択します

453
00:28:34,781 --> 00:28:39,219
Extensionが同じ
データにアクセスできるよう

454
00:28:39,319 --> 00:28:41,155
同じアプリケーション
グループに追加します

455
00:28:41,622 --> 00:28:46,793
プロジェクト設定で
Intentターゲットを選び

456
00:28:47,027 --> 00:28:50,364
“Capabilities”で
同じグループに追加します"

457
00:28:52,499 --> 00:28:55,235
これでターゲットに
作成された―

458
00:28:55,335 --> 00:28:57,371
Intentハンドラを
実装できます

459
00:28:59,973 --> 00:29:02,476
最初に共有フレームワークを
インポートします

460
00:28:59,973 --> 00:29:02,476
最初に共有フレームワークを
インポートします

461
00:29:04,311 --> 00:29:05,946
“SoupKit”です

462
00:29:07,047 --> 00:29:09,416
OrderSoupIntentを
実行するため

463
00:29:09,516 --> 00:29:13,987
Intentハンドラは その
プロトコルに準拠させます

464
00:29:15,656 --> 00:29:19,726
これはIntentの一部として
生成されました

465
00:29:21,462 --> 00:29:25,065
このプロトコルには
ハンドルメソッドがあります

466
00:29:25,532 --> 00:29:27,534
実装しましょう

467
00:29:30,170 --> 00:29:32,306
ハンドルメソッドで
Intentを取得します

468
00:29:32,639 --> 00:29:34,741
Intentから注文を作成します

469
00:29:34,842 --> 00:29:37,444
注文が成功すれば

470
00:29:37,544 --> 00:29:41,215
成功コードを伴う
Intentの応答で完了

471
00:29:41,615 --> 00:29:44,384
もし作成できなければ

472
00:29:44,618 --> 00:29:47,654
失敗コードと共に完了です

473
00:29:48,522 --> 00:29:49,356
以上です

474
00:29:49,456 --> 00:29:52,626
新しいIntentの
サポートを追加したので

475
00:29:52,893 --> 00:29:54,094
試しましょう

476
00:30:04,972 --> 00:30:08,342
最初にIntentの提供のため
注文します

477
00:30:08,442 --> 00:30:12,679
プラスボタンを押して
今回はクラムチャウダーに

478
00:30:13,180 --> 00:30:17,284
クルトンを入れて注文します

479
00:30:17,985 --> 00:30:19,586
ホーム画面に―

480
00:30:19,686 --> 00:30:22,389
提供したIntentがありました

481
00:30:22,489 --> 00:30:23,423
すばらしい

482
00:30:23,524 --> 00:30:28,495
(拍手)

483
00:30:28,595 --> 00:30:29,463
タップで

484
00:30:29,563 --> 00:30:33,066
ショートカット画面と
注文ボタンを表示

485
00:30:33,167 --> 00:30:36,637
タップすると
ボタンが背景に隠れ

486
00:30:37,438 --> 00:30:38,505
注文完了

487
00:30:38,839 --> 00:30:42,042
アプリケーションで
確認すると

488
00:30:42,142 --> 00:30:43,811
新しい注文があります

489
00:30:44,011 --> 00:30:45,445
とても簡単です

490
00:30:46,113 --> 00:30:53,687
(拍手)

491
00:30:54,121 --> 00:30:56,490
注文ボタンの代わりに

492
00:30:56,590 --> 00:30:58,492
ショートカット画面も使えます

493
00:30:58,592 --> 00:31:01,295
アプリケーションを
ショートカットで起動し

494
00:30:58,592 --> 00:31:01,295
アプリケーションを
ショートカットで起動し

495
00:31:01,395 --> 00:31:03,697
注文画面を開きます

496
00:31:03,797 --> 00:31:08,135
カスタマイズできるので
チーズを追加

497
00:31:08,235 --> 00:31:09,937
注文します

498
00:31:10,971 --> 00:31:11,705
できました

499
00:31:11,805 --> 00:31:15,809
最後に
Siriに追加しましょう

500
00:31:17,244 --> 00:31:21,682
設定画面の
“Siri & Search”です

501
00:31:22,149 --> 00:31:25,185
追加したい
ショートカットを選択します

502
00:31:25,285 --> 00:31:29,056
注文はクルトン入り
クラムチャウダー１つ

503
00:31:30,090 --> 00:31:34,128
関連付ける
フレーズを録音します

504
00:31:35,462 --> 00:31:36,630
“スープの時間”

505
00:31:38,332 --> 00:31:39,433
登録されました

506
00:31:39,533 --> 00:31:45,606
(拍手)

507
00:31:48,575 --> 00:31:51,745
ここまでを
振り返りましょう

508
00:31:51,845 --> 00:31:54,014
NSUserActivityを

509
00:31:54,114 --> 00:31:57,518
予測可能にすることから
始めました

510
00:31:57,785 --> 00:31:59,186
提案を可能にし

511
00:31:59,286 --> 00:32:02,523
コンテンツの開示を
容易にします

512
00:31:59,286 --> 00:32:02,523
コンテンツの開示を
容易にします

513
00:32:04,224 --> 00:32:06,827
次にカスタムIntentを
定義しました

514
00:32:06,927 --> 00:32:11,665
アプリケーションの主機能を
表現する最良の方法です

515
00:32:11,765 --> 00:32:13,967
事例はスープの注文でした

516
00:32:14,535 --> 00:32:17,538
ユーザが注文する度に

517
00:32:17,638 --> 00:32:20,707
Intentを提供します

518
00:32:21,675 --> 00:32:23,811
最後はIntentのハンドルです

519
00:32:23,911 --> 00:32:26,747
ExtensionとApp
両方をサポートしたので

520
00:32:26,847 --> 00:32:31,084
アプリケーションの起動が
ショートカットでできます

521
00:32:34,054 --> 00:32:37,090
Shortcutsの適用は
分かりましたね

522
00:32:37,291 --> 00:32:40,427
ここからは提案が
どうなされるのか

523
00:32:40,527 --> 00:32:44,898
提案を最良のものにする
方法を紹介します

524
00:32:47,067 --> 00:32:51,538
アプリケーションは毎回
アクティビティを提供します

525
00:32:52,306 --> 00:32:57,077
システムは 時 場所
その他の信号を認識します

526
00:32:58,445 --> 00:33:01,548
時と言えば１日の時間や

527
00:32:58,445 --> 00:33:01,548
時と言えば１日の時間や

528
00:33:01,648 --> 00:33:03,050
１週間の曜日です

529
00:33:03,150 --> 00:33:06,520
場所であれば
全ての場所の中から

530
00:33:06,620 --> 00:33:09,389
ユーザにとって重要な
場所か確認します

531
00:33:11,258 --> 00:33:14,895
提案のために
どう活用しているのでしょう

532
00:33:16,497 --> 00:33:18,265
ここでは時だけを考えます

533
00:33:19,133 --> 00:33:22,870
月曜のランチはクルトン入り
トマトスープ

534
00:33:23,737 --> 00:33:27,775
その夜は気分を変え
赤トウガラシ入りを注文

535
00:33:29,276 --> 00:33:33,113
翌日のランチはまた
クルトン入りです

536
00:33:33,213 --> 00:33:35,282
これを繰り返します

537
00:33:35,649 --> 00:33:37,084
すると金曜のランチに

538
00:33:37,184 --> 00:33:39,720
Siriは提案を試みます

539
00:33:40,387 --> 00:33:43,724
過去の行動から
パターンを探ります

540
00:33:43,824 --> 00:33:47,528
ランチにはいつも
クルトン入りなのに気付き

541
00:33:47,628 --> 00:33:51,298
クルトン入りを提案します

542
00:33:51,398 --> 00:33:53,467
私が望んだとおりです

543
00:33:54,468 --> 00:33:59,039
かなり高いレベルですが
どう機能するのでしょう

544
00:33:59,139 --> 00:34:01,141
最初はNSUserActivityです

545
00:33:59,139 --> 00:34:01,141
最初はNSUserActivityです

546
00:34:02,943 --> 00:34:06,613
注文画面でのアクティビティ
を想像してください

547
00:34:06,847 --> 00:34:09,483
userInfo辞書に
３つのキーがあります

548
00:34:09,583 --> 00:34:12,219
スープと数量
スクロール位置です

549
00:34:12,386 --> 00:34:14,922
Handoffを使ってユーザを

550
00:34:15,022 --> 00:34:17,424
最後に使った正確な位置に
戻せます

551
00:34:19,059 --> 00:34:22,562
どう提案されるか見ましょう

552
00:34:24,431 --> 00:34:26,800
まずアクティビティを
提供します

553
00:34:26,900 --> 00:34:29,436
スープはトマト
数量は１です

554
00:34:29,536 --> 00:34:31,605
スクロール位置は79ポイント

555
00:34:31,938 --> 00:34:34,808
次に似たような行動を
提供します

556
00:34:34,908 --> 00:34:37,377
今回はスクロール位置を
110にします

557
00:34:38,078 --> 00:34:39,379
続けると―

558
00:34:39,813 --> 00:34:42,882
ある時点でSiriが
提案しようとします

559
00:34:44,418 --> 00:34:46,018
過去の行動から

560
00:34:46,119 --> 00:34:49,089
同じ行動パターンを
見つけます

561
00:34:49,188 --> 00:34:52,693
でもスクロール位置に
ムラがあるので

562
00:34:52,826 --> 00:34:55,161
提案を見つけられません

563
00:34:56,396 --> 00:34:58,565
ではどう解決するか

564
00:34:59,900 --> 00:35:02,870
requiredUserInfoKeysを
使います

565
00:34:59,900 --> 00:35:02,870
requiredUserInfoKeysを
使います

566
00:35:03,804 --> 00:35:07,741
これはアクティビティの
既存プロパティです

567
00:35:07,841 --> 00:35:11,178
アクティビティが表す状態に
アプリケーションを―

568
00:35:11,278 --> 00:35:14,781
復元する必要最低限の
情報を示します

569
00:35:15,983 --> 00:35:19,086
パターンを探す際に
比較するのに使う―

570
00:35:19,186 --> 00:35:23,924
userInfo辞書のキーを
特定するのに使います

571
00:35:24,792 --> 00:35:26,727
先ほどの例で見ます

572
00:35:27,895 --> 00:35:32,566
requiredUserInfoKeysを
スープと量に特定します

573
00:35:32,699 --> 00:35:34,902
再度アクティビティを
提供します

574
00:35:35,002 --> 00:35:37,938
スープはトマトで数量は１

575
00:35:38,038 --> 00:35:39,707
スクロール位置は79ポイント

576
00:35:39,807 --> 00:35:42,109
しかしスクロール位置は
無視されます

577
00:35:42,976 --> 00:35:44,511
似た提供を行います

578
00:35:44,611 --> 00:35:47,047
またスクロール位置は
無視されます

579
00:35:47,147 --> 00:35:48,415
これを続けると

580
00:35:48,649 --> 00:35:52,019
ある時点でSiriが提案します

581
00:35:52,986 --> 00:35:56,023
アクティビティの一致する
パターンを探します

582
00:35:56,123 --> 00:35:59,126
スクロール位置は
考慮されないので

583
00:35:59,226 --> 00:36:00,427
次のように言えます

584
00:35:59,226 --> 00:36:00,427
次のように言えます

585
00:36:00,527 --> 00:36:04,898
“トマトスープ１つの
NSUserActivityは”

586
00:36:04,998 --> 00:36:07,568
“ユーザに良い提案である”

587
00:36:08,735 --> 00:36:09,870
今見たように

588
00:36:09,970 --> 00:36:13,507
正しいキーの特定が
非常に重要です

589
00:36:13,607 --> 00:36:16,677
でないとユーザは提案を
得られません

590
00:36:17,511 --> 00:36:19,913
requiredUserInfoKeysの
機能を見ました

591
00:36:20,714 --> 00:36:24,751
Intentも同じですが
より柔軟性が高いです

592
00:36:27,221 --> 00:36:30,791
Intentへの主信号は定義した
ショートカットタイプです

593
00:36:31,759 --> 00:36:36,663
提案に有効なパラメータの
組み合わせを定義します

594
00:36:38,332 --> 00:36:40,267
requiredUserInfoKeysに
似ていますが

595
00:36:40,367 --> 00:36:43,370
違いは複数の
定義ができる点です

596
00:36:44,838 --> 00:36:47,107
Soup Chefに適用します

597
00:36:48,342 --> 00:36:51,712
OrderSoupIntentの定義では
パラメータは３つ

598
00:36:51,812 --> 00:36:54,047
スープ 数量 オプションです

599
00:36:54,147 --> 00:36:57,951
ショートカットタイプは
単一でしたが

600
00:36:58,652 --> 00:37:00,988
理想的にはもっと必要です

601
00:36:58,652 --> 00:37:00,988
理想的にはもっと必要です

602
00:37:01,088 --> 00:37:05,259
ユーザの行動パターンを
探すのに選択肢が増えます

603
00:37:05,526 --> 00:37:07,361
今回は３つの
タイプを定義します

604
00:37:08,062 --> 00:37:12,299
１つはスープと数量で
次はスープとオプション

605
00:37:12,399 --> 00:37:15,068
最後は３つのパラメータ
全てです

606
00:37:16,370 --> 00:37:18,238
別の例に適用しましょう

607
00:37:19,339 --> 00:37:24,311
月曜のランチにクルトン入り
トマトスープを注文

608
00:37:24,812 --> 00:37:27,881
Soup Chefがこれを
システムに提供します

609
00:37:27,981 --> 00:37:30,851
そしてショートカットタイプ
に基づき

610
00:37:30,951 --> 00:37:33,420
可能な組み合わせに分けます

611
00:37:35,289 --> 00:37:38,425
その夜は赤トウガラシ入り
を注文

612
00:37:38,525 --> 00:37:40,160
これも同じように提供され

613
00:37:40,360 --> 00:37:43,197
可能な組み合わせに
分けられます

614
00:37:44,131 --> 00:37:46,667
翌日のランチには
クルトン入りを注文

615
00:37:46,767 --> 00:37:48,769
同様に分けられます

616
00:37:49,570 --> 00:37:51,338
１週間続けると

617
00:37:51,438 --> 00:37:54,308
金曜のランチに
Siriが提案します

618
00:37:55,008 --> 00:37:58,212
トマトスープの注文が
多いと―

619
00:37:59,713 --> 00:38:01,849
認識するでしょう

620
00:37:59,713 --> 00:38:01,849
認識するでしょう

621
00:38:02,816 --> 00:38:05,853
またランチにはいつも

622
00:38:05,953 --> 00:38:09,089
クルトン入りだと
分かるでしょう

623
00:38:10,124 --> 00:38:14,294
より詳細なショートカット
なので提案が容易です

624
00:38:14,695 --> 00:38:19,099
たぶんクルトン入りの注文を
提案するでしょう

625
00:38:20,067 --> 00:38:22,836
このように提案されるのです

626
00:38:23,170 --> 00:38:28,342
ここからは良い提案を
させる方法を説明します

627
00:38:28,442 --> 00:38:31,278
全ては良い提供からです

628
00:38:33,347 --> 00:38:37,384
良い提供は繰り返される
可能性が高いのです

629
00:38:37,484 --> 00:38:41,755
ユーザがよく見る
コンテンツや

630
00:38:41,855 --> 00:38:45,592
Intentでは
定期的に取る行動です

631
00:38:47,895 --> 00:38:52,699
また提供するペイロードが
一貫してないと

632
00:38:52,800 --> 00:38:56,003
パターンを見つける際に
比較ができません

633
00:38:57,871 --> 00:39:01,441
良い提供はタイムスタンプを
含みません

634
00:38:57,871 --> 00:39:01,441
良い提供はタイムスタンプを
含みません

635
00:39:01,542 --> 00:39:05,746
提案時点の時間は
関係なさそうだからです

636
00:39:06,847 --> 00:39:07,915
例えば

637
00:39:08,015 --> 00:39:12,119
特定の日の予定を教える
ショートカットは無意味です

638
00:39:12,219 --> 00:39:14,621
翌日にそれを見ても

639
00:39:14,721 --> 00:39:18,425
終わった会議には
関心がわきません

640
00:39:19,093 --> 00:39:23,063
しかし相対的時間は
より役立ちます

641
00:39:25,999 --> 00:39:30,537
ユーザの行動１つにつき
１つの提供をすべきです

642
00:39:30,637 --> 00:39:34,208
アプリケーション内での
多様な行動に対してもです

643
00:39:35,742 --> 00:39:39,479
Intentの正しいパラメータの
選択も重要です

644
00:39:39,580 --> 00:39:43,217
２つのタイプを見ます
最初はenumです

645
00:39:44,785 --> 00:39:48,455
Intent定義ファイルに
enumを定義し

646
00:39:48,555 --> 00:39:51,091
パラメータのタイプとして
使います

647
00:39:53,560 --> 00:39:56,263
パラメータの値が
制限される場合―

648
00:39:56,363 --> 00:39:58,098
enumがお薦めです

649
00:39:58,265 --> 00:40:02,002
スープ注文のIntentで
サイズを追加する場合

650
00:39:58,265 --> 00:40:02,002
スープ注文のIntentで
サイズを追加する場合

651
00:40:02,102 --> 00:40:04,104
enumが合理的です

652
00:40:04,204 --> 00:40:08,308
可能なサイズはＳＭＬ
ぐらいですから

653
00:40:09,843 --> 00:40:12,279
enumを使うと
より良い提案や

654
00:40:12,379 --> 00:40:15,148
明解な見出し
補足文につながります

655
00:40:15,582 --> 00:40:19,386
enumでの見出しなどの
生成法は

656
00:40:19,486 --> 00:40:22,122
Localizationの
セッションで学べます

657
00:40:23,824 --> 00:40:26,126
もう１つは
カスタムタイプです

658
00:40:26,994 --> 00:40:31,498
INObjectと生成された
Intentコードをもたらします

659
00:40:32,166 --> 00:40:35,836
INObjectは識別子と
表示文字列を結合します

660
00:40:37,271 --> 00:40:40,808
この識別子でオブジェクトを
参照できますが

661
00:40:41,341 --> 00:40:45,412
表示文字列には判読可能な
部分が含まれます

662
00:40:45,979 --> 00:40:47,814
ユーザもアプリケーションも

663
00:40:47,915 --> 00:40:51,218
パラメータの値を
常に把握できます

664
00:40:52,586 --> 00:40:54,221
INObjectの使用で

665
00:40:54,321 --> 00:40:57,591
パラメータ間の
依存も防げます

666
00:40:57,824 --> 00:40:58,992
説明します

667
00:41:00,127 --> 00:41:03,297
識別子と表示文字列の
組み合わせを表す―

668
00:41:03,397 --> 00:41:05,365
２つの方法があります

669
00:41:05,666 --> 00:41:08,469
２つのパラメータを
Intentに追加できます

670
00:41:08,569 --> 00:41:11,338
識別子と表示文字列に
1つずつです

671
00:41:11,438 --> 00:41:14,708
INObjectを使えば単一の
パラメータを追加できます

672
00:41:15,809 --> 00:41:18,278
最初の方法では表示文字列が

673
00:41:18,378 --> 00:41:23,083
識別子により参照される
オブジェクトに依存します

674
00:41:23,684 --> 00:41:27,121
Intentの提案の際に
問題が起きないよう

675
00:41:27,221 --> 00:41:28,989
依存関係をなくします

676
00:41:32,292 --> 00:41:34,094
優れたショートカットには

677
00:41:34,194 --> 00:41:37,764
分かりやすい見出しや
画像があります

678
00:41:37,965 --> 00:41:41,034
体験する前に見る
唯一のものなので

679
00:41:41,135 --> 00:41:44,838
タップしたとき何が起こるか
表すべきです

680
00:41:45,472 --> 00:41:47,641
もちろん期待どおりに動くか

681
00:41:47,741 --> 00:41:50,510
テストした方がいいでしょう

682
00:41:50,978 --> 00:41:52,679
テスト方法です

683
00:41:53,814 --> 00:41:56,650
追加した２つの
デベロッパ向けの設定では

684
00:41:56,750 --> 00:42:00,120
検索とロック画面で
提供を確認できます

685
00:41:56,750 --> 00:42:00,120
検索とロック画面で
提供を確認できます

686
00:42:00,220 --> 00:42:02,456
Siri Suggestionsの
代わりです

687
00:42:03,257 --> 00:42:07,861
これで提案した時の
表示内容が分かり

688
00:42:07,961 --> 00:42:11,531
期待どおりの動作を
確実にできます

689
00:42:13,367 --> 00:42:16,703
もう１つの方法はSiriに
ショートカットを追加します

690
00:42:17,104 --> 00:42:20,073
Xcodeスキームを編集して

691
00:42:20,174 --> 00:42:24,177
自動的にSiriを呼び出す
簡単なテスト法です

692
00:42:25,712 --> 00:42:30,317
スキームエディタ内の
Siri Intent Queryで

693
00:42:30,417 --> 00:42:33,287
Siriを呼び出す言葉を
作成します

694
00:42:35,088 --> 00:42:37,124
これでShortcutsの
アプリケーションに

695
00:42:37,224 --> 00:42:39,960
カスタムショートカットが
作成できます

696
00:42:41,228 --> 00:42:43,831
他のショートカットや

697
00:42:43,931 --> 00:42:47,701
ステップと連鎖した時の
動作確認ができます

698
00:42:51,205 --> 00:42:54,808
優れたショートカットの
提供とは何か

699
00:42:54,908 --> 00:42:58,312
ユーザへの提案の仕方を
見てきました

700
00:42:58,412 --> 00:43:01,048
次にプライバシーの考察です

701
00:42:58,412 --> 00:43:01,048
次にプライバシーの考察です

702
00:43:01,148 --> 00:43:05,219
ユーザを
動揺させない提案をします

703
00:43:07,888 --> 00:43:12,826
削除したものは永遠に
消えるとユーザは考えます

704
00:43:13,694 --> 00:43:17,297
これは信頼のために
尊重すべきです

705
00:43:17,397 --> 00:43:22,336
ユーザと無関係になった
提案はしないことです

706
00:43:22,903 --> 00:43:27,508
ユーザが削除できる情報が
含まれている場合

707
00:43:27,608 --> 00:43:31,111
適切な時期に確実に
提供を削除します

708
00:43:32,079 --> 00:43:35,916
NSUserActivityでの提供の
削除方法です

709
00:43:39,887 --> 00:43:43,090
削除の方法は２つあります

710
00:43:43,657 --> 00:43:45,626
Spotlightインデックスを
使用し

711
00:43:45,726 --> 00:43:47,928
relatedUniqueIdentifier
を設定します

712
00:43:48,028 --> 00:43:50,430
Spotlightからコンテンツを
削除するだけで

713
00:43:50,531 --> 00:43:52,766
自動的にアクティビティが
削除されます

714
00:43:53,867 --> 00:43:57,271
contentAttributeSet上の
relatedUniqueIdentifierを

715
00:43:57,371 --> 00:44:00,774
合致する検索可能項目の
識別子に入れます

716
00:43:57,371 --> 00:44:00,774
合致する検索可能項目の
識別子に入れます

717
00:44:01,275 --> 00:44:04,111
検索可能項目が削除されれば

718
00:44:04,211 --> 00:44:06,914
アクティビティも
削除されます

719
00:44:08,815 --> 00:44:11,485
Spotlightのインデックスを
使わない場合

720
00:44:11,585 --> 00:44:15,589
NSUserActivity上の
永久識別子を使います

721
00:44:16,290 --> 00:44:18,292
これは新しいプロパティです

722
00:44:18,392 --> 00:44:20,427
アクティビティを追跡でき

723
00:44:20,527 --> 00:44:23,163
適切な時に削除できます

724
00:44:26,100 --> 00:44:31,104
使う場合はアクティビティの
提供前に入れます

725
00:44:31,438 --> 00:44:32,806
削除したい識別子で

726
00:44:32,906 --> 00:44:37,511
deleteSavedUserActivities
を呼びます

727
00:44:37,778 --> 00:44:40,714
全てのアクティビティの
削除もできます

728
00:44:41,381 --> 00:44:43,550
例えばユーザが
ログアウトした時は

729
00:44:43,650 --> 00:44:46,720
“deleteAllSavedUserActivities”
を呼び出します

730
00:44:48,455 --> 00:44:50,023
Intentの既存のAPIは

731
00:44:50,124 --> 00:44:53,060
新しいアクティビティAPIに
似ています

732
00:44:54,995 --> 00:44:57,498
INInteractionを介して

733
00:44:57,598 --> 00:45:00,901
主要な提供Intentも
発生します

734
00:44:57,598 --> 00:45:00,901
主要な提供Intentも
発生します

735
00:45:02,503 --> 00:45:06,640
INInteractionには識別子と
グループ識別子があり

736
00:45:06,740 --> 00:45:10,277
提供された相互作用を複数
削除できます

737
00:45:12,312 --> 00:45:16,884
提供の前に識別子を
設定しておきます

738
00:45:17,484 --> 00:45:19,186
削除したい時は

739
00:45:19,286 --> 00:45:23,323
削除する識別子の配列で
“delete”を呼び出します

740
00:45:23,690 --> 00:45:27,761
共有グループ識別子を持つ
Intentを全て削除するには

741
00:45:27,861 --> 00:45:30,564
グループ識別子で
“delete”を呼び出します

742
00:45:31,498 --> 00:45:36,970
最後にNSUserActivity同様
Intentを全て削除するには

743
00:45:37,071 --> 00:45:39,707
“INInteraction”で
“deletAll”を呼び出します

744
00:45:41,542 --> 00:45:44,745
適切な時に
提供を削除してください

745
00:45:45,045 --> 00:45:47,514
それで最適な提案が生まれ

746
00:45:47,614 --> 00:45:52,252
関係のない提案で
ユーザに疑問を与えません

747
00:45:55,322 --> 00:46:00,694
ショートカットの作成と
提案に関し検討してきました

748
00:45:55,322 --> 00:46:00,694
ショートカットの作成と
提案に関し検討してきました

749
00:46:01,295 --> 00:46:04,531
最後に最良のメディア
ショートカット作成に

750
00:46:04,631 --> 00:46:07,101
使用するものを見ましょう

751
00:46:08,735 --> 00:46:12,139
Shortcutsに最適な
Intentを作成しました

752
00:46:12,372 --> 00:46:15,242
INPlayMediaIntentと
呼ばれ

753
00:46:15,342 --> 00:46:19,613
AV再生のショートカットを
作成し提供します

754
00:46:21,381 --> 00:46:24,284
ExtensionでIntentを
実行する時

755
00:46:24,385 --> 00:46:27,054
背景での実行を選択できます

756
00:46:27,621 --> 00:46:31,225
これでアプリケーションから
直接再生できます

757
00:46:35,529 --> 00:46:38,565
検索画面やロック画面で
提案されます

758
00:46:38,665 --> 00:46:42,069
ヘッドフォンを接続したとき
再生コントロールにも

759
00:46:42,169 --> 00:46:44,805
Intentのショートカットが
表示されます

760
00:46:45,172 --> 00:46:48,842
コンテンツ再生が更に
簡単です

761
00:46:50,577 --> 00:46:55,082
そしてHomePodで
うまく機能します

762
00:46:56,283 --> 00:46:59,653
Siriに再生のメディア
ショートカットを追加し

763
00:46:59,753 --> 00:47:02,122
HomePodで呼び出すだけです

764
00:46:59,753 --> 00:47:02,122
HomePodで呼び出すだけです

765
00:47:02,623 --> 00:47:06,427
HomePod経由でiPhoneから
再生されます

766
00:47:10,698 --> 00:47:13,967
興味のあるコンテンツを
システムに伝える―

767
00:47:14,067 --> 00:47:16,637
新しいAPIも作成しました

768
00:47:18,605 --> 00:47:21,074
定期配信コンテンツに
適しています

769
00:47:21,175 --> 00:47:23,744
ユーザに提案したいのは

770
00:47:23,844 --> 00:47:25,879
初めて体験する
コンテンツです

771
00:47:28,248 --> 00:47:30,684
優れたメディア
ショートカットにするため

772
00:47:30,784 --> 00:47:32,986
これらの機能を追加しました

773
00:47:33,454 --> 00:47:36,056
では まとめましょう

774
00:47:39,059 --> 00:47:43,163
Shortcutsはアプリケーション
をパワフルにします

775
00:47:43,897 --> 00:47:47,167
アプリケーションを開示して

776
00:47:47,267 --> 00:47:51,071
ユーザを巻き込む
新たな方法を提供します

777
00:47:51,171 --> 00:47:53,574
ロック画面 Siriの文字盤

778
00:47:53,674 --> 00:47:57,444
Siriの文字盤
Siri自体でも活用しましょう

779
00:47:57,544 --> 00:47:59,947
新しいアプリケーションでも

780
00:48:01,381 --> 00:48:04,585
Shortcutsは
NSUserActivityによって

781
00:48:04,685 --> 00:48:07,821
コンテンツを簡単に
開示できます

782
00:48:08,188 --> 00:48:09,957
またIntentの使用で

783
00:48:10,057 --> 00:48:13,961
よりシステムと
深く統合できます

784
00:48:14,061 --> 00:48:17,364
ユーザに全く新しい
体験を提供します

785
00:48:17,464 --> 00:48:23,036
(拍手)

786
00:48:23,136 --> 00:48:25,939
詳細はこちらのURLで
ご覧ください

787
00:48:26,040 --> 00:48:28,475
セッション211です

788
00:48:28,575 --> 00:48:30,978
今週はずっとラボにいます

789
00:48:31,478 --> 00:48:33,080
ありがとう

790
00:48:33,180 --> 00:48:35,616
皆さんのショートカットを
早く見たいです

791
00:48:35,716 --> 00:48:37,384
引き続き楽しんでください

792
00:48:37,484 --> 00:48:40,554
(拍手)