
1
00:00:07,074 --> 00:00:16,550
(音楽)

2
00:00:24,825 --> 00:00:30,030
(拍手)

3
00:00:30,130 --> 00:00:31,899
こんにちは

4
00:00:31,999 --> 00:00:33,867
ご来場ありがとう

5
00:00:33,967 --> 00:00:37,638
Xcodeチームのデビッドです

6
00:00:38,238 --> 00:00:42,109
今日は Swiftチームの
ジョーダンとともに

7
00:00:42,209 --> 00:00:46,446
Xcodeのビルド高速化の
話をします

8
00:00:46,947 --> 00:00:50,884
プロジェクトやその構成によって

9
00:00:50,984 --> 00:00:54,388
様々な改善策が使えます

10
00:00:54,488 --> 00:01:00,093
場合によっては ビルドを
著しく高速化できます

11
00:00:54,488 --> 00:01:00,093
場合によっては ビルドを
著しく高速化できます

12
00:01:01,261 --> 00:01:04,230
今日は
ビルド高速化について

13
00:01:04,565 --> 00:01:07,100
２つの視点で話します

14
00:01:08,836 --> 00:01:12,973
１つは全体的な
ビルド効率の向上です

15
00:01:13,540 --> 00:01:18,078
もう１つは リビルド時の
作業量の軽減

16
00:01:18,178 --> 00:01:20,247
特に インクリメンタルビルドの
話です

17
00:01:22,015 --> 00:01:24,885
これから私が説明するのは

18
00:01:24,985 --> 00:01:30,858
プロセスの並列化や
Run Scriptフェーズの扱いです

19
00:01:31,258 --> 00:01:36,697
Xcode 10のビルド時間測定の
新機能も紹介します

20
00:01:38,465 --> 00:01:43,070
また ジョーダンが
ソースレベルの話をします

21
00:01:43,604 --> 00:01:46,006
例えばSwiftでの依存関係の理解

22
00:01:46,507 --> 00:01:48,709
複雑な式の扱い方

23
00:01:49,343 --> 00:01:52,613
Objective-Cの
インターフェース制限などです

24
00:01:54,281 --> 00:01:56,416
まずは ビルドの並列化です

25
00:01:57,551 --> 00:02:00,754
Xcodeのプロジェクトでは

26
00:01:57,551 --> 00:02:00,754
Xcodeのプロジェクトでは

27
00:02:01,522 --> 00:02:05,626
ビルドしたい対象を
ターゲットで指定します

28
00:02:06,193 --> 00:02:10,764
例えば アプリケーション
フレームワーク ユニットテスト

29
00:02:11,832 --> 00:02:15,702
また ターゲット間には
依存関係があります

30
00:02:16,136 --> 00:02:19,673
依存関係を定義する方法は２つ

31
00:02:19,773 --> 00:02:23,644
Target Dependenciesによる
明示的な方法と

32
00:02:23,944 --> 00:02:28,649
Link Binary With Libraries
などの暗示的な方法です

33
00:02:28,882 --> 00:02:33,020
後ほど もう少し詳しく
説明します

34
00:02:33,353 --> 00:02:37,291
サンプルを見ながら
話をします

35
00:02:37,858 --> 00:02:40,894
プロジェクトの依存関係の図です

36
00:02:41,595 --> 00:02:45,966
単純に 全ターゲットが
並んでいます

37
00:02:46,066 --> 00:02:49,236
ここでは ５つをビルドします

38
00:02:50,137 --> 00:02:53,574
依存関係も示しています

39
00:02:54,641 --> 00:02:56,977
この２つの情報により

40
00:02:57,077 --> 00:02:59,546
Xcodeはビルドを行います

41
00:03:00,647 --> 00:03:03,584
タイムラインを見てください

42
00:03:06,920 --> 00:03:11,225
各ターゲットが
順番に処理されます

43
00:03:11,325 --> 00:03:14,795
１つが終わってから
次へ進みます

44
00:03:15,295 --> 00:03:18,031
何の問題もないのですが

45
00:03:18,332 --> 00:03:22,236
ハードウェア利用率に
無駄が生じます

46
00:03:22,469 --> 00:03:26,206
マルチコアのマシンなどは
特にそうです

47
00:03:26,707 --> 00:03:30,010
貴重な開発時間が奪われますね

48
00:03:30,944 --> 00:03:34,181
そこで 次を見てください

49
00:03:37,718 --> 00:03:40,721
これを見て気付くことは

50
00:03:40,888 --> 00:03:45,792
まず ビルドの処理量は
変わっていません

51
00:03:46,627 --> 00:03:49,730
しかし 時間は短縮されました

52
00:03:50,130 --> 00:03:53,767
この例では
大幅に減っています

53
00:03:54,868 --> 00:03:58,539
ハードウェアを
最大限に活用して

54
00:03:58,639 --> 00:04:00,941
時間を削減できました

55
00:03:58,639 --> 00:04:00,941
時間を削減できました

56
00:04:02,910 --> 00:04:08,015
では 並列化というものが
これほど有効なら

57
00:04:08,248 --> 00:04:13,353
この図のように 全部
同時にしてみては？

58
00:04:14,054 --> 00:04:19,059
まず エラーが出るのが
関の山でしょう

59
00:04:19,159 --> 00:04:24,364
依存関係の情報が
重要な要素となるからです

60
00:04:24,765 --> 00:04:26,300
このようにすると

61
00:04:26,600 --> 00:04:31,271
依存関係を無視して
ビルドすることになります

62
00:04:31,371 --> 00:04:33,173
うまくいきません

63
00:04:34,141 --> 00:04:35,576
では どうしましょう

64
00:04:35,809 --> 00:04:39,580
ビルドの並列化で
時間を短縮するには

65
00:04:39,680 --> 00:04:43,817
どうすればよいのでしょうか

66
00:04:44,351 --> 00:04:46,453
Xcodeは本来―

67
00:04:46,553 --> 00:04:51,358
ビルド並列化ができるように
設定されています

68
00:04:51,458 --> 00:04:53,460
スキームエディタを使います

69
00:04:53,794 --> 00:04:56,597
まず Scheme Chooserを開き

70
00:04:57,197 --> 00:04:58,699
Edit Schemeを選択

71
00:04:59,633 --> 00:05:02,202
Build Actionの中に

72
00:04:59,633 --> 00:05:02,202
Build Actionの中に

73
00:05:02,936 --> 00:05:05,205
Build Optionsがあります

74
00:05:05,339 --> 00:05:07,007
項目は２つです

75
00:05:07,107 --> 00:05:09,276
“Parallelize Build”と

76
00:05:09,443 --> 00:05:11,879
“Find Implicit Dependencies”
です

77
00:05:12,379 --> 00:05:14,515
前者を選択します

78
00:05:14,615 --> 00:05:18,619
Xcodeが依存関係の情報を
利用して

79
00:05:18,752 --> 00:05:21,755
ターゲットの並列化を
試みます

80
00:05:23,223 --> 00:05:27,427
では 依存関係の構成を
見てみましょう

81
00:05:28,228 --> 00:05:30,364
ビルドフェーズのエディタで
見られます

82
00:05:30,631 --> 00:05:34,868
プロジェクトナビゲータを
開いて

83
00:05:34,968 --> 00:05:36,470
プロジェクトを選択

84
00:05:36,570 --> 00:05:40,240
ここでは
ゲームプロジェクトです

85
00:05:41,341 --> 00:05:44,111
次にBuild Phasesをクリック

86
00:05:45,179 --> 00:05:49,049
ゲームターゲットのところを
見てください

87
00:05:49,149 --> 00:05:51,885
依存関係を確認できます

88
00:05:52,019 --> 00:05:57,357
Link Binary With Librariesに
注目してください

89
00:05:57,758 --> 00:05:59,193
このフェーズでは

90
00:05:59,293 --> 00:06:03,897
ターゲットとリンクさせる
アイテムを定義します

91
00:05:59,293 --> 00:06:03,897
ターゲットとリンクさせる
アイテムを定義します

92
00:06:04,631 --> 00:06:08,535
ここでは Physicsと
Utilitiesがあります

93
00:06:09,937 --> 00:06:12,940
これがプロジェクト内の
ターゲットで

94
00:06:13,040 --> 00:06:17,010
Xcodeが依存関係を
作成しています

95
00:06:17,678 --> 00:06:21,381
Autolinkなどのリンク機能や

96
00:06:21,615 --> 00:06:24,284
LD Build Flagsなどを
用いている場合

97
00:06:24,384 --> 00:06:28,021
暗示的な依存関係の
作成はできません

98
00:06:28,121 --> 00:06:31,658
明示的な依存関係を
このフェーズか―

99
00:06:32,125 --> 00:06:35,262
Target Dependenciesフェーズで
作成します

100
00:06:35,896 --> 00:06:39,500
さて このシェーダという
アイテムは

101
00:06:40,634 --> 00:06:43,637
リンク時には使用しません

102
00:06:43,737 --> 00:06:47,841
別のビルドフェーズで
使用されます

103
00:06:48,041 --> 00:06:51,411
それをXcodeに
知らせることが重要です

104
00:06:51,512 --> 00:06:54,882
ターゲットをビルドする前に

105
00:06:54,982 --> 00:06:59,219
シェーダのビルドとコンパイルも
完了させます

106
00:07:00,921 --> 00:07:06,660
このターゲットが含まれる
プロジェクトを参照するには

107
00:07:06,760 --> 00:07:11,798
これを 現在のプロジェクトの
下位にドラッグします

108
00:07:13,000 --> 00:07:15,502
その他の依存関係を見ると

109
00:07:16,803 --> 00:07:19,873
シェーダはUtilitiesに依存

110
00:07:20,841 --> 00:07:24,444
UtilitiesはPhysicsに
依存しています

111
00:07:25,345 --> 00:07:28,148
最後に Testsは

112
00:07:28,248 --> 00:07:31,718
ゲーム シェーダ Utilitiesに
依存しています

113
00:07:32,553 --> 00:07:36,123
プロジェクトの
構成を理解しました

114
00:07:36,223 --> 00:07:40,527
次に この連続的な
ビルドプロセスを

115
00:07:40,627 --> 00:07:43,897
並列化する手順を説明します

116
00:07:44,431 --> 00:07:47,067
まず テストに注目します

117
00:07:49,136 --> 00:07:54,208
これから話す依存関係を
３つに分類しました

118
00:07:54,408 --> 00:07:58,979
１つ目は“全部やる”依存と
名付けました

119
00:07:59,279 --> 00:08:03,817
このテストは 対象の
コンポーネントが多すぎます

120
00:07:59,279 --> 00:08:03,817
このテストは 対象の
コンポーネントが多すぎます

121
00:08:04,117 --> 00:08:08,755
ゲーム シェーダ Utilitiesの
３つです

122
00:08:09,957 --> 00:08:15,562
こういう場合は 個別に
分割する方がいいでしょう

123
00:08:16,663 --> 00:08:21,835
これによって 並列化の
最初の段階に入ります

124
00:08:23,270 --> 00:08:26,907
テストターゲットが
３つに分かれ

125
00:08:27,007 --> 00:08:29,610
ゲームのテストだけを
ビルドできます

126
00:08:30,744 --> 00:08:35,883
他の２つは別のターゲットと
並列化できます

127
00:08:35,982 --> 00:08:40,721
各コンポーネントが終わり次第
ビルド可能です

128
00:08:42,188 --> 00:08:45,659
次に説明する依存関係は

129
00:08:45,759 --> 00:08:49,363
“うるさい隣人”というものです

130
00:08:49,696 --> 00:08:53,433
この依存は
なくてはならないものです

131
00:08:53,534 --> 00:08:57,604
しかし 必要なのは
ターゲットの一部なのに

132
00:08:58,405 --> 00:09:00,674
全体を取得しています

133
00:08:58,405 --> 00:09:00,674
全体を取得しています

134
00:09:01,141 --> 00:09:05,879
ゲームは３つのターゲットに
依存しています

135
00:09:05,979 --> 00:09:07,247
これはいいでしょう

136
00:09:08,415 --> 00:09:13,253
怪しいのはシェーダと
Utilitiesの関係です

137
00:09:13,687 --> 00:09:16,490
シェーダはメタライブラリを
生成します

138
00:09:16,590 --> 00:09:20,527
これはGPUコードを
まとめたものです

139
00:09:21,328 --> 00:09:25,799
Utilitiesが生成するフレームは
CPUコードです

140
00:09:25,899 --> 00:09:29,303
ですから この依存関係は
疑問です

141
00:09:29,469 --> 00:09:34,074
Utilitiesの中に
ビルドフェーズがあります

142
00:09:34,174 --> 00:09:37,878
これは両ターゲットが使う
情報を生成します

143
00:09:37,978 --> 00:09:43,050
しかし Utilitiesの
その他の部分は不要です

144
00:09:43,250 --> 00:09:47,688
ですから 別ターゲットに
分割しましょう

145
00:09:48,555 --> 00:09:50,724
この少しの変更が

146
00:09:50,824 --> 00:09:54,995
全体のタイムラインに
大きな影響を及ぼします

147
00:09:57,097 --> 00:10:00,067
緑色が新たなターゲットです

148
00:09:57,097 --> 00:10:00,067
緑色が新たなターゲットです

149
00:10:00,167 --> 00:10:05,606
UtilitiesはCode Genに移動し
縮小できました

150
00:10:06,006 --> 00:10:08,408
Code Genは
他に依存しないため

151
00:10:08,542 --> 00:10:11,378
最初の方に移動できます

152
00:10:11,578 --> 00:10:16,049
赤で示したPhysicsとも
並列化できます

153
00:10:17,417 --> 00:10:22,189
シェーダはもう Utilitiesに
依存していないため

154
00:10:22,289 --> 00:10:25,592
他のビルドを待つ必要は
ありません

155
00:10:25,692 --> 00:10:28,729
Code Genの後に ビルド可能です

156
00:10:30,664 --> 00:10:35,536
最後は“忘れられた”依存です

157
00:10:36,637 --> 00:10:41,475
コードを移動したり
削除したりする過程で

158
00:10:41,975 --> 00:10:45,646
いわゆるデッドコードが
生じます

159
00:10:45,746 --> 00:10:48,549
依存関係でも同じです

160
00:10:48,649 --> 00:10:50,684
時々 削除を忘れます

161
00:10:51,385 --> 00:10:55,088
その場合は 単純に
削除するだけです

162
00:10:56,690 --> 00:10:59,793
ビルドは さらに短縮されます

163
00:11:00,160 --> 00:11:03,797
Utilitiesターゲットのビルドを

164
00:11:03,897 --> 00:11:08,202
Code Genの
直後にできるからです

165
00:11:11,271 --> 00:11:12,973
これまで Xcodeでは

166
00:11:13,507 --> 00:11:16,710
他に依存するターゲットを
ビルドする時―

167
00:11:17,411 --> 00:11:21,482
依存先のビルドを
待つ必要がありました

168
00:11:22,082 --> 00:11:23,984
Xcode 10の新機能で

169
00:11:24,084 --> 00:11:28,422
ビルドの一部を
並列化することが可能です

170
00:11:30,057 --> 00:11:33,794
コンパイルの開始が
早まります

171
00:11:34,428 --> 00:11:38,131
依存関係を含む
ビルドが完了すれば

172
00:11:38,232 --> 00:11:40,934
すぐ始められるからです

173
00:11:41,635 --> 00:11:44,071
リンクなども並列化できます

174
00:11:46,173 --> 00:11:49,910
Run Scriptは
ビルドフェーズの１つです

175
00:11:50,010 --> 00:11:54,148
このフェーズで
並列化を利用するには

176
00:11:54,248 --> 00:11:59,419
ターゲットが順に
完了するまで待たされます

177
00:12:00,387 --> 00:12:02,089
実は このフェーズでは

178
00:12:02,689 --> 00:12:06,527
プロセスを 自由に
カスタマイズできます

179
00:12:06,994 --> 00:12:12,266
柔軟な分 デベロッパの責任も
大きくなります

180
00:12:12,399 --> 00:12:15,002
それでは Run Scriptを設定し

181
00:12:15,102 --> 00:12:20,107
ビルドを効率よく行う
プロセスを説明します

182
00:12:22,342 --> 00:12:25,179
これが Run Scriptフェーズの
エディタです

183
00:12:25,279 --> 00:12:27,748
ビルドフェーズのエディタにも
あります

184
00:12:28,148 --> 00:12:32,452
まず スクリプト本体を
見てください

185
00:12:32,719 --> 00:12:35,823
ここに スクリプト全体を入れるか

186
00:12:35,923 --> 00:12:38,559
別の場所を参照します

187
00:12:39,560 --> 00:12:42,029
フェーズ全体を通して

188
00:12:42,362 --> 00:12:44,798
利用できる設定があります

189
00:12:44,898 --> 00:12:48,035
その１つ Source Groupを
使っています

190
00:12:49,236 --> 00:12:53,173
これを使うと
絶対パスや相対パスを

191
00:12:53,273 --> 00:12:56,443
提供する必要がなく 便利です

192
00:12:57,678 --> 00:13:00,414
次は入力ファイルです

193
00:12:57,678 --> 00:13:00,414
次は入力ファイルです

194
00:13:00,814 --> 00:13:03,717
このフェーズでは重要です

195
00:13:03,851 --> 00:13:06,286
この情報を利用して

196
00:13:06,386 --> 00:13:11,325
ビルドシステムはRun Scriptの
実行を決定します

197
00:13:12,125 --> 00:13:15,696
そのため
処理中に読まれるファイルを

198
00:13:15,796 --> 00:13:19,766
漏れなく含める必要があります

199
00:13:21,301 --> 00:13:25,973
入力するファイルが
多いこともあります

200
00:13:26,073 --> 00:13:28,108
大変そうに思えますね

201
00:13:28,609 --> 00:13:30,010
Xcode 10では―

202
00:13:30,744 --> 00:13:36,116
このリストを外部ファイルで
管理できます

203
00:13:36,216 --> 00:13:38,519
File Listといいます

204
00:13:39,553 --> 00:13:42,156
単純なテキストで

205
00:13:42,256 --> 00:13:45,159
ファイルを
リスト化したものです

206
00:13:46,193 --> 00:13:48,395
Run Scriptフェーズを通して

207
00:13:48,562 --> 00:13:51,732
同じビルド設定に
アクセスできます

208
00:13:52,900 --> 00:13:58,372
ただし ビルドの過程での
ファイルの修正や生成は不可です

209
00:13:58,739 --> 00:14:03,844
ビルドが始まると リストが読まれ
情報が使われます

210
00:13:58,739 --> 00:14:03,844
ビルドが始まると リストが読まれ
情報が使われます

211
00:14:06,380 --> 00:14:08,415
次は出力ファイルの話です

212
00:14:08,515 --> 00:14:12,586
これも ビルドに必要な
重要情報の１つです

213
00:14:12,953 --> 00:14:15,022
Xcodeはこの情報から

214
00:14:15,155 --> 00:14:18,058
Run Scriptの実行を決めます

215
00:14:19,226 --> 00:14:24,731
もちろん 出力ファイルにも
新機能は対応しています

216
00:14:25,532 --> 00:14:29,036
Run Scriptの実行は
どんな時でしょうか

217
00:14:29,770 --> 00:14:32,005
入力ファイルの宣言がないと

218
00:14:32,773 --> 00:14:37,177
ビルドのたびに
実行する必要があります

219
00:14:37,511 --> 00:14:40,781
ですから
入力の宣言は重要です

220
00:14:41,915 --> 00:14:47,187
次に 入力ファイルや
File Listの内容に

221
00:14:47,287 --> 00:14:50,057
変更があった場合です

222
00:14:50,424 --> 00:14:53,560
Run Scriptは戻されます

223
00:14:54,828 --> 00:14:58,065
出力ファイルが
見つからない場合―

224
00:14:58,198 --> 00:15:01,902
XcodeはRun Scriptを
実行します

225
00:14:58,198 --> 00:15:01,902
XcodeはRun Scriptを
実行します

226
00:15:02,002 --> 00:15:04,838
足りないファイルを
生成するためです

227
00:15:06,106 --> 00:15:07,908
Xcode 10では

228
00:15:08,208 --> 00:15:11,411
Run Scriptフェーズの
ヘルプがあります

229
00:15:12,279 --> 00:15:16,783
(拍手)

230
00:15:17,351 --> 00:15:19,753
今 話した内容を含めて

231
00:15:19,853 --> 00:15:23,223
さらに詳しい情報が
書かれています

232
00:15:23,323 --> 00:15:26,894
File Listを使う方法もです

233
00:15:28,161 --> 00:15:31,932
さて Run Scriptを設定して

234
00:15:32,032 --> 00:15:35,702
新たな依存関係を
宣言したとします

235
00:15:35,802 --> 00:15:38,338
依存サイクルに
陥ることがあります

236
00:15:38,639 --> 00:15:43,911
依存関係の どこかが
ループしている状態です

237
00:15:45,012 --> 00:15:50,617
Xcode 10では このサイクルの
検出力が向上しました

238
00:15:50,717 --> 00:15:55,789
サイクルを形成している
入力ファイルを

239
00:15:55,889 --> 00:15:57,891
漏れなく把握できます

240
00:15:58,892 --> 00:16:01,562
サイクルが良くないのは

241
00:15:58,892 --> 00:16:01,562
サイクルが良くないのは

242
00:16:01,662 --> 00:16:06,667
まず プロジェクト内の
構成に問題が出るからです

243
00:16:07,267 --> 00:16:10,938
次に 間違ったリビルドや

244
00:16:11,038 --> 00:16:14,107
古い情報の原因になります

245
00:16:15,409 --> 00:16:19,479
そのため
ヘルプを更新しました

246
00:16:19,947 --> 00:16:24,451
特に陥りやすい依存サイクルや

247
00:16:25,619 --> 00:16:30,591
その修復方法について
取り上げています

248
00:16:33,794 --> 00:16:37,464
最後の話題は
ビルド時間測定です

249
00:16:37,564 --> 00:16:41,268
これについては
新機能が２つあります

250
00:16:42,336 --> 00:16:43,470
まず １つ目

251
00:16:44,238 --> 00:16:49,910
各タスクの実行時間が分かる
行内の時間表示です

252
00:16:52,045 --> 00:16:54,248
ビルドログを見てください

253
00:16:54,515 --> 00:16:56,617
上にフィルターがあります

254
00:16:57,084 --> 00:17:01,188
“All”と“Recent”に注目

255
00:16:57,084 --> 00:17:01,188
“All”と“Recent”に注目

256
00:17:02,189 --> 00:17:05,291
“All”では
最終物を生成する―

257
00:17:05,392 --> 00:17:08,829
すべてのタスクが表示されます

258
00:17:09,329 --> 00:17:11,365
通常は 必要ありません

259
00:17:11,665 --> 00:17:14,434
何か問題がないかを
見たい時は

260
00:17:14,535 --> 00:17:17,938
“Recent”タブを使います

261
00:17:18,472 --> 00:17:21,208
前回のビルドで使用した―

262
00:17:21,308 --> 00:17:24,243
パスをすべて表示します

263
00:17:26,747 --> 00:17:31,585
もう１つの新機能は
Timing Summaryです

264
00:17:31,919 --> 00:17:34,988
Productメニューから行けます

265
00:17:35,122 --> 00:17:36,857
Perform Actionを選び

266
00:17:37,191 --> 00:17:38,892
Build with Timing Summaryへ

267
00:17:39,726 --> 00:17:43,330
すると ビルドログの最後に
ログが追加されます

268
00:17:46,066 --> 00:17:49,536
詳しく見ると 前回のビルドの

269
00:17:49,636 --> 00:17:53,373
全タスクの合計時間が
分かります

270
00:17:53,874 --> 00:17:57,644
やはり Recentタブは重要です

271
00:17:58,979 --> 00:18:03,350
特に注目すべきは
PhaseScriptExecutionです

272
00:17:58,979 --> 00:18:03,350
特に注目すべきは
PhaseScriptExecutionです

273
00:18:03,784 --> 00:18:06,353
前回のビルドを見ると

274
00:18:06,687 --> 00:18:09,990
シェルスクリプトを
実行しています

275
00:18:10,190 --> 00:18:11,925
この１つで５秒です

276
00:18:12,426 --> 00:18:16,130
インクリメンタルビルドの
１つ１つが―

277
00:18:16,296 --> 00:18:20,834
こうなっていたら
設定に不備があります

278
00:18:20,934 --> 00:18:25,172
対処すれば
ビルド時間を減らせます

279
00:18:28,375 --> 00:18:31,979
このTiming Summaryは

280
00:18:32,146 --> 00:18:37,151
コマンドラインからも
利用することができます

281
00:18:39,920 --> 00:18:45,425
では ここからはジョーダンが
ソースレベルの話をします

282
00:18:46,093 --> 00:18:51,431
(拍手)

283
00:18:52,533 --> 00:18:53,700
ありがとう

284
00:18:54,001 --> 00:18:56,737
やり方を１つ変えるだけで

285
00:18:56,837 --> 00:19:00,941
プロジェクトを改善する方法を
紹介しました

286
00:18:56,837 --> 00:19:00,941
プロジェクトを改善する方法を
紹介しました

287
00:19:01,241 --> 00:19:03,977
ソースやファイルの話の前に

288
00:19:04,077 --> 00:19:07,681
Xcode 10の新機能を
もう１つ紹介します

289
00:19:08,315 --> 00:19:13,220
この技を使っている人も
いると思います

290
00:19:13,320 --> 00:19:16,423
ファイルが多い時の対策です

291
00:19:17,591 --> 00:19:19,193
ご存じでしょう

292
00:19:19,593 --> 00:19:23,464
Whole Moduleモードを
使用することです

293
00:19:23,964 --> 00:19:27,201
前バージョンのXcodeでは

294
00:19:27,301 --> 00:19:31,238
デバッグビルドでも
Whole Moduleの方が

295
00:19:31,338 --> 00:19:36,677
デフォルトのIncrementalより
高速でした

296
00:19:37,244 --> 00:19:41,615
この方法で ビルド時間を
短縮できました

297
00:19:41,715 --> 00:19:47,254
コンパイラがファイル間で
処理を共有できるためです

298
00:19:47,354 --> 00:19:50,357
しかし インクリメンタル
ビルドを使えず

299
00:19:50,457 --> 00:19:54,795
毎回 全体を
リビルドすることになります

300
00:19:55,329 --> 00:19:58,398
Xcode 10では
インクリメンタルビルドを改良

301
00:19:58,499 --> 00:20:01,602
ファイル間で処理を
共有できます

302
00:19:58,499 --> 00:20:01,602
ファイル間で処理を
共有できます

303
00:20:01,702 --> 00:20:05,706
もう Whole Moduleを
使わなくてよいのです

304
00:20:07,608 --> 00:20:11,211
(拍手)

305
00:20:11,812 --> 00:20:16,016
使っていた方は
Build Settingsエディタで

306
00:20:16,116 --> 00:20:20,154
Compilation Modeの下の
Debugを選び

307
00:20:20,254 --> 00:20:21,889
Deleteキーを押す

308
00:20:22,089 --> 00:20:26,126
これで Incrementalモードに
戻せます

309
00:20:26,827 --> 00:20:29,963
ここでは詳しくは触れません

310
00:20:30,063 --> 00:20:32,900
“What's New in Swift”でも
触れましたし

311
00:20:33,000 --> 00:20:38,739
明日の“Behind the Scenes
of the Xcode Build Process”で

312
00:20:38,839 --> 00:20:42,576
さらに詳しい話をする予定です

313
00:20:45,345 --> 00:20:50,050
今日 話すべきことが
まだ３つ残っています

314
00:20:50,350 --> 00:20:56,089
１つ目は 複雑な式への
対処法についてです

315
00:20:56,657 --> 00:21:00,094
今回の両セクションの
重要ポイントを

316
00:20:56,657 --> 00:21:00,094
今回の両セクションの
重要ポイントを

317
00:21:00,194 --> 00:21:03,464
例証するのに最適だからです

318
00:21:03,797 --> 00:21:07,868
ビルドに時間がかかる時
ちょっとした情報を

319
00:21:07,968 --> 00:21:12,239
Xcodeに与えると
状況を改善できます

320
00:21:13,040 --> 00:21:17,844
複雑なSwiftの式を例に
見てみましょう

321
00:21:20,514 --> 00:21:23,383
私の最近のプロジェクトです

322
00:21:23,884 --> 00:21:29,590
この構造体を 私は
あちこちで使っています

323
00:21:30,023 --> 00:21:33,961
構造体自体には
問題はありません

324
00:21:34,061 --> 00:21:38,232
プロパティの型推定も
問題ありません

325
00:21:38,432 --> 00:21:43,203
しかし 型を推定する式が
やや複雑です

326
00:21:43,303 --> 00:21:48,509
少なくとも一目で分かる
単純なものではありません

327
00:21:48,976 --> 00:21:50,444
これが答えです

328
00:21:50,544 --> 00:21:53,647
0.0のように単純なものなら

329
00:21:53,747 --> 00:21:57,751
このDoubleという推定は
不要です

330
00:21:58,051 --> 00:22:01,955
しかし この式は
数字が大きく複雑です

331
00:21:58,051 --> 00:22:01,955
しかし この式は
数字が大きく複雑です

332
00:22:02,055 --> 00:22:06,160
reduceやpow関数も
使っています

333
00:22:06,393 --> 00:22:10,464
“double型”とは
分からなかったでしょう

334
00:22:11,031 --> 00:22:14,401
この情報を与えることで

335
00:22:14,501 --> 00:22:19,339
この構造体を用いたファイルの
処理を軽減できます

336
00:22:19,873 --> 00:22:23,177
さらに 皆さんの同僚が

337
00:22:23,277 --> 00:22:26,914
プロパティの型を
把握しやすくなります

338
00:22:27,915 --> 00:22:30,117
このわずかな情報が

339
00:22:30,217 --> 00:22:33,520
ビルド時間を大幅に短縮します

340
00:22:33,654 --> 00:22:36,957
優れたエンジニアリングの
お手本です

341
00:22:37,791 --> 00:22:40,761
次はクロージャの例です

342
00:22:41,528 --> 00:22:45,499
非オプショナル型の引数の
合計値を返す―

343
00:22:45,599 --> 00:22:48,435
関数を定義しています

344
00:22:48,936 --> 00:22:52,206
３つの引数がnilなら
nilを返します

345
00:22:53,207 --> 00:22:56,276
今 ある機能を
使おうとしています

346
00:22:56,376 --> 00:23:00,214
単式を含むクロージャがある時

347
00:22:56,376 --> 00:23:00,214
単式を含むクロージャがある時

348
00:23:00,347 --> 00:23:05,285
コンパイラがその式から
型を判定してくれる機能です

349
00:23:05,786 --> 00:23:07,588
非常に便利ですが

350
00:23:08,055 --> 00:23:11,291
時々 こんなコードになります

351
00:23:12,726 --> 00:23:16,363
これはひどい
レビューで却下でしょう

352
00:23:17,197 --> 00:23:22,336
入れ子の三項演算子や
nilとの明示的比較

353
00:23:22,436 --> 00:23:27,107
これでうまく動くとは
思えません

354
00:23:27,407 --> 00:23:29,443
別の問題もあります

355
00:23:29,643 --> 00:23:34,348
式が大きくなり
独立した断片が多いため

356
00:23:34,815 --> 00:23:40,254
Swiftのコンパイラは
時間内に処理できません

357
00:23:40,888 --> 00:23:44,958
コンパイラもお手上げという
究極の例です

358
00:23:45,726 --> 00:23:48,462
コードを再考しましょう

359
00:23:48,829 --> 00:23:53,033
まず 先ほどの例と
同じことをしてみます

360
00:23:53,133 --> 00:23:55,002
型を追加します

361
00:23:55,102 --> 00:23:58,205
クロージャでは
inの前に入れます

362
00:23:59,506 --> 00:24:03,544
しかし この場合
最善の策とは言えません

363
00:23:59,506 --> 00:24:03,544
しかし この場合
最善の策とは言えません

364
00:24:03,744 --> 00:24:05,512
前に戻します

365
00:24:06,613 --> 00:24:10,951
先ほど クロージャの型を
判定できるように

366
00:24:11,051 --> 00:24:14,388
単式を書こうとしました

367
00:24:15,122 --> 00:24:18,192
しかし ここでは不要です

368
00:24:18,659 --> 00:24:22,696
reduceを
呼び出しているのだから

369
00:24:23,197 --> 00:24:26,400
オプショナル型の
整数の配列です

370
00:24:26,733 --> 00:24:30,470
結果の型は戻り値と
一致するはずです

371
00:24:31,071 --> 00:24:34,975
だから reduceの
コールバックは

372
00:24:35,075 --> 00:24:37,978
オプショナル型の整数の
演算です

373
00:24:38,345 --> 00:24:42,382
クロージャに単式を入れる
必要はないのです

374
00:24:42,583 --> 00:24:47,387
ステートメントを分けて
読みやすくできます

375
00:24:48,489 --> 00:24:51,658
私の以前のコードを
変換したものです

376
00:24:52,559 --> 00:24:56,063
しかし
もっと高速にもできます

377
00:24:56,430 --> 00:24:59,500
読みやすく 管理しやすく

378
00:24:59,600 --> 00:25:02,903
コンパイル時間を
短くもできます

379
00:24:59,600 --> 00:25:02,903
コンパイル時間を
短くもできます

380
00:25:04,938 --> 00:25:07,474
最後にお見せする例は

381
00:25:07,574 --> 00:25:11,111
前の２つほどは
広く応用できません

382
00:25:11,378 --> 00:25:13,781
AnyObjectの話です

383
00:25:14,715 --> 00:25:20,621
AnyObjectはあらゆるクラス型
インスタンスを記述できます

384
00:25:20,721 --> 00:25:25,025
構造体や列挙型ではなく
１つのクラスです

385
00:25:25,659 --> 00:25:30,697
Objective-Cのid型から
持ち越した特長もあります

386
00:25:31,131 --> 00:25:33,934
それが この
メソッド呼び出し構文です

387
00:25:34,034 --> 00:25:39,573
AnyObject型の値の
メソッドを呼び出すと

388
00:25:40,307 --> 00:25:44,278
Objective-Cランタイムから
見える限り―

389
00:25:44,378 --> 00:25:48,549
Swiftはそれを許します

390
00:25:49,383 --> 00:25:51,852
しかし 代償があります

391
00:25:52,286 --> 00:25:56,156
コンパイラは 何が呼ばれるか
分からないため

392
00:25:56,256 --> 00:25:59,626
あらゆる可能性を探す
必要があります

393
00:25:59,726 --> 00:26:02,529
プロジェクトや
フレームワーク

394
00:25:59,726 --> 00:26:02,529
プロジェクトや
フレームワーク

395
00:26:02,696 --> 00:26:05,966
すべてを使うと想定します

396
00:26:06,700 --> 00:26:11,104
どれも合致しなければ
エラーを示すためです

397
00:26:12,840 --> 00:26:15,742
こちらの意思を もっと適切に

398
00:26:15,843 --> 00:26:19,479
もっと十分に
宣言できるはずです

399
00:26:19,580 --> 00:26:21,448
プロトコルを定義します

400
00:26:21,782 --> 00:26:25,252
同じファイルでも
別ファイルでも可能です

401
00:26:25,352 --> 00:26:29,256
デリゲートのプロパティを
変更して

402
00:26:29,356 --> 00:26:32,392
このプロトコルを
使うようにします

403
00:26:32,593 --> 00:26:36,163
これで呼び出すメソッドが
分かります

404
00:26:37,197 --> 00:26:40,968
メソッドが
正しく実行されているかを

405
00:26:41,068 --> 00:26:44,204
確認する機会も得られます

406
00:26:46,740 --> 00:26:52,346
再コンパイルの際に
コンパイラの作業量を

407
00:26:52,446 --> 00:26:55,449
軽減する技を説明しました

408
00:26:56,083 --> 00:26:59,653
では 再コンパイルを
しなければ？

409
00:26:59,920 --> 00:27:04,324
なぜ 再コンパイルが
必要なのでしょうか？

410
00:26:59,920 --> 00:27:04,324
なぜ 再コンパイルが
必要なのでしょうか？

411
00:27:04,625 --> 00:27:08,161
依存関係モデルを
理解しましょう

412
00:27:09,763 --> 00:27:14,001
Swiftの依存関係モデルは
ファイルに基づきます

413
00:27:14,101 --> 00:27:18,272
ヘッダファイルがないため
少し厄介です

414
00:27:18,605 --> 00:27:23,577
デフォルトで定義されたものが
すべて見えます

415
00:27:24,211 --> 00:27:27,548
左のファイルで
struct Pointを宣言しています

416
00:27:27,881 --> 00:27:29,716
右のファイルでは

417
00:27:29,817 --> 00:27:33,954
最初の宣言を参照し
コンパイラも分かっています

418
00:27:34,321 --> 00:27:38,625
右のファイルのxとyの
プロパティも同様です

419
00:27:41,361 --> 00:27:45,799
このため 左のファイルを
変更した場合―

420
00:27:46,467 --> 00:27:49,469
両ファイルの再コンパイルが
必要です

421
00:27:50,304 --> 00:27:52,473
これが重要なのは

422
00:27:52,573 --> 00:27:56,810
このイニシャライザを
正しく呼び出したいからです

423
00:27:58,645 --> 00:28:03,650
コンパイラは 関数本体の変更を
分かっています

424
00:27:58,645 --> 00:28:03,650
コンパイラは 関数本体の変更を
分かっています

425
00:28:03,750 --> 00:28:06,553
この場合
アサーションの変更です

426
00:28:07,855 --> 00:28:10,591
このファイルだけ
再コンパイルが必要で

427
00:28:11,024 --> 00:28:16,530
他のファイルは
変更する必要がありません

428
00:28:18,232 --> 00:28:21,135
しかし
コンパイラは保守的です

429
00:28:21,235 --> 00:28:24,104
このファイルに型を追加すると

430
00:28:24,271 --> 00:28:29,042
人間には 右のファイルに
影響がないと分かります

431
00:28:29,209 --> 00:28:32,479
しかし コンパイラは
両方リビルドします

432
00:28:34,248 --> 00:28:38,585
先ほど使用したゲームを
例にします

433
00:28:39,219 --> 00:28:41,788
ゲームとUtilitiesがあり

434
00:28:41,889 --> 00:28:44,758
それぞれのファイルを
示しています

435
00:28:45,559 --> 00:28:47,895
ゲームのファイルを
変更すると

436
00:28:49,696 --> 00:28:52,399
そのファイルの
再コンパイルが必要です

437
00:28:52,499 --> 00:28:56,503
それに依存するファイルも
同様です

438
00:28:56,970 --> 00:29:00,240
しかし Utilitiesのファイルは

439
00:28:56,970 --> 00:29:00,240
しかし Utilitiesのファイルは

440
00:29:00,340 --> 00:29:01,742
再コンパイルされません

441
00:29:02,176 --> 00:29:05,512
ターゲットは分かれ
依存関係にあります

442
00:29:05,612 --> 00:29:10,617
２組のファイル間には
目に見える関係はありません

443
00:29:12,553 --> 00:29:17,057
同様に Utilitiesの
ファイルを変更すると

444
00:29:17,157 --> 00:29:19,459
再コンパイルが必要です

445
00:29:19,560 --> 00:29:22,596
それに依存する
他のファイルもです

446
00:29:23,096 --> 00:29:26,033
しかし この依存関係は
粗いものです

447
00:29:26,166 --> 00:29:31,438
そのため Xcodeはゲーム内の
すべてを再コンパイルします

448
00:29:31,538 --> 00:29:35,242
関数本体だけの
変更でない限りです

449
00:29:36,877 --> 00:29:38,479
繰り返すと

450
00:29:38,879 --> 00:29:41,048
コンパイラは保守的です

451
00:29:41,148 --> 00:29:44,251
影響がないと
人間には分かっても

452
00:29:44,351 --> 00:29:47,221
コンパイラは分かりません

453
00:29:47,688 --> 00:29:52,760
コンパイラに分かるのは
関数本体の変更です

454
00:29:52,860 --> 00:29:55,729
他のファイルに影響がなく

455
00:29:55,829 --> 00:29:59,833
再コンパイルは不要だと
知っています

456
00:30:02,336 --> 00:30:05,606
ファイルの依存関係は
モジュール内で発生し

457
00:30:05,706 --> 00:30:10,377
Swiftの宣言は 互いに
暗黙的に見えています

458
00:30:10,811 --> 00:30:15,682
モジュールを超える
依存関係を扱う場合は

459
00:30:15,782 --> 00:30:18,185
ターゲット全体の
依存になります

460
00:30:20,187 --> 00:30:25,759
いずれもSwiftに関しては
良い情報ですが

461
00:30:25,859 --> 00:30:29,863
Objective-Cのターゲットが
混在する場合は？

462
00:30:29,963 --> 00:30:32,800
最後のセクションは
そこが焦点です

463
00:30:32,900 --> 00:30:38,138
混合言語の
インターフェース軽減の方法です

464
00:30:38,906 --> 00:30:43,443
アプリケーションの
パーツを見ましょう

465
00:30:44,077 --> 00:30:47,047
少し複雑な図になります

466
00:30:47,147 --> 00:30:51,318
動画なら 遠慮なく
止めながら見てください

467
00:30:52,319 --> 00:30:57,291
まず Objective-C
インターフェースのヘッダです

468
00:30:57,558 --> 00:31:02,129
Objective-Cで書かれ
Swiftに参照させたい部分です

469
00:30:57,558 --> 00:31:02,129
Objective-Cで書かれ
Swiftに参照させたい部分です

470
00:31:02,296 --> 00:31:06,733
あるいは ヘッダで宣言して
他の部分を参照させます

471
00:31:08,435 --> 00:31:13,006
Bridgingヘッダは
Swiftに参照させたい―

472
00:31:13,106 --> 00:31:16,577
情報をすべて集めたものです

473
00:31:18,011 --> 00:31:21,748
Xcodeのビルド設定で
管理します

474
00:31:21,849 --> 00:31:27,621
すると コンパイラは
Objective-Cインターフェースを

475
00:31:27,721 --> 00:31:29,156
Swiftに参照させます

476
00:31:30,457 --> 00:31:34,928
コンパイラは 次に
逆の役割を担う―

477
00:31:35,028 --> 00:31:37,030
Generatedヘッダを作成

478
00:31:37,164 --> 00:31:42,669
Swiftのどの部分をObjective-Cに
見せるかを記述します

479
00:31:43,704 --> 00:31:47,841
Objective-Cの
実装ファイルで使用され

480
00:31:48,475 --> 00:31:51,778
一部のヘッダは
最初から使えます

481
00:31:52,880 --> 00:31:58,619
もちろん Swiftコードに
依存しないものもありますが

482
00:31:58,852 --> 00:32:01,288
ここでは重視しません

483
00:31:58,852 --> 00:32:01,288
ここでは重視しません

484
00:32:02,556 --> 00:32:05,292
もう一度 左から見てみます

485
00:32:05,792 --> 00:32:08,228
Objective-Cのヘッダ

486
00:32:08,996 --> 00:32:12,399
Swiftに情報を与える
Bridgingヘッダ

487
00:32:13,267 --> 00:32:15,302
Swiftの実装ファイル

488
00:32:15,969 --> 00:32:20,274
Objective-Cに情報を返す
Generatedヘッダ

489
00:32:20,607 --> 00:32:24,178
Objective-Cの実装ファイルです

490
00:32:26,013 --> 00:32:28,015
このような図では

491
00:32:28,215 --> 00:32:31,418
矢印はすべて依存関係です

492
00:32:31,518 --> 00:32:34,121
ターゲット単位ではなく

493
00:32:34,221 --> 00:32:37,858
その中のファイル単位の依存です

494
00:32:38,358 --> 00:32:42,729
Generatedヘッダと
Bridgingヘッダが焦点です

495
00:32:42,830 --> 00:32:45,599
このヘッダの内容を減らせば

496
00:32:45,699 --> 00:32:49,203
変更の余地も少なくなるからです

497
00:32:49,303 --> 00:32:51,872
リビルドの必要性も減ります

498
00:32:53,373 --> 00:32:54,508
では 見てみましょう

499
00:32:54,908 --> 00:32:59,179
Generatedヘッダでは
privateキーワードが有効です

500
00:32:59,513 --> 00:33:03,183
この例では
ViewControllerがあります

501
00:32:59,513 --> 00:33:03,183
この例では
ViewControllerがあります

502
00:33:03,283 --> 00:33:07,020
その中に IBOutletプロパティと
IBActionメソッド

503
00:33:07,621 --> 00:33:12,226
デフォルトでは
Generatedヘッダで見えます

504
00:33:12,326 --> 00:33:16,697
Objective-Cが参照するためです

505
00:33:17,197 --> 00:33:19,333
プライベートの宣言は
ありません

506
00:33:20,500 --> 00:33:25,205
しかし 他のファイルから
見える必要は ほとんどなく

507
00:33:25,305 --> 00:33:27,541
Interface Builderで
使うだけです

508
00:33:28,208 --> 00:33:31,478
ですから
privateにすると

509
00:33:31,678 --> 00:33:35,749
この２つが
Generatedヘッダから消えます

510
00:33:37,451 --> 00:33:42,756
次の例は #selectorなどの
ランタイム機能に用いる―

511
00:33:42,856 --> 00:33:46,460
メソッドを扱う場合です

512
00:33:46,693 --> 00:33:50,297
NotificationCenter APIを
使っています

513
00:33:50,397 --> 00:33:54,735
通知が送られると
selectorを取得します

514
00:33:55,869 --> 00:34:00,741
ここでは Objective-Cに
このメソッドが見えればよく

515
00:33:55,869 --> 00:34:00,741
ここでは Objective-Cに
このメソッドが見えればよく

516
00:34:00,841 --> 00:34:06,280
その他のファイルは
このメソッドを使いません

517
00:34:08,148 --> 00:34:09,683
privateにします

518
00:34:10,016 --> 00:34:14,521
Generatedヘッダを
さらに削減できます

519
00:34:15,688 --> 00:34:19,493
この場合
別の選択肢もあります

520
00:34:19,592 --> 00:34:22,329
ブロックベースのAPIにすれば

521
00:34:22,696 --> 00:34:25,232
コードを整理できます

522
00:34:25,331 --> 00:34:30,237
関数から暗黙的に
状態をキャプチャできるからです

523
00:34:30,337 --> 00:34:33,739
コンテキストオブジェクトとする
必要はありません

524
00:34:35,708 --> 00:34:39,179
Generatedヘッダを削減する
最後の技は

525
00:34:39,980 --> 00:34:43,684
Swift 4に移行することです

526
00:34:44,351 --> 00:34:47,487
すでに聞いているでしょうが

527
00:34:47,588 --> 00:34:53,226
Swift 3モードのサポートは
Xcode 10が最後です

528
00:34:53,893 --> 00:34:57,831
ですから いずれにせよ必要です

529
00:34:57,931 --> 00:35:01,435
EditからConvertを選び
To Current Swift Syntaxへ

530
00:34:57,931 --> 00:35:01,435
EditからConvertを選び
To Current Swift Syntaxへ

531
00:35:02,436 --> 00:35:07,975
ただし この移行を行う時
Swift 3互換モードを

532
00:35:08,175 --> 00:35:12,613
維持する選択を
するかもしれません

533
00:35:12,713 --> 00:35:15,682
Swift 3 @objc Inferenceです

534
00:35:16,116 --> 00:35:20,821
Swift 3の規則を維持したまま
移行する選択肢です

535
00:35:21,088 --> 00:35:24,992
内部のメソッドとプロパティを
自動的に

536
00:35:25,092 --> 00:35:28,862
Objective-Cから
参照可能にします

537
00:35:30,197 --> 00:35:34,001
Swift 3で書いている場合でも

538
00:35:34,101 --> 00:35:39,139
この機能に頼らないケースが
多かったでしょう

539
00:35:39,373 --> 00:35:42,976
ランタイムにも
コンパイル時にも不要です

540
00:35:43,644 --> 00:35:48,916
そのため Objective-Cの
依存関係を明示的に指定したら

541
00:35:49,016 --> 00:35:55,022
@objc IBOutlet IBActionなど
いずれの場合でも

542
00:35:55,389 --> 00:36:00,094
この設定を選択して
Deleteキーを押します

543
00:35:55,389 --> 00:36:00,094
この設定を選択して
Deleteキーを押します

544
00:36:00,527 --> 00:36:03,997
要求を満たす
メソッドやプロパティのみ―

545
00:36:04,097 --> 00:36:07,267
属性を推定するモードに
戻ります

546
00:36:07,935 --> 00:36:11,271
または Objective-Cの
メソッドを無効にします

547
00:36:13,073 --> 00:36:17,277
Generatedヘッダについて
話をしました

548
00:36:17,377 --> 00:36:19,947
しかし Objective-Cのコードも

549
00:36:20,047 --> 00:36:23,350
同様に リビルドをもたらします

550
00:36:24,618 --> 00:36:27,087
Bridgingヘッダは

551
00:36:27,187 --> 00:36:31,825
Swiftに参照させる
ヘッダを集めたものです

552
00:36:32,559 --> 00:36:36,563
MyViewController.hに
着目します

553
00:36:36,763 --> 00:36:40,434
ごく普通のView Controllerの
宣言です

554
00:36:40,534 --> 00:36:43,537
しかし 別のヘッダも
含まれています

555
00:36:44,338 --> 00:36:47,708
いずれかのヘッダを変更したら

556
00:36:47,975 --> 00:36:53,747
ターゲット内のSwiftコードの
再コンパイルが必要です

557
00:36:54,915 --> 00:36:56,483
これは よくありません

558
00:36:58,252 --> 00:37:00,554
この例を見てください

559
00:36:58,252 --> 00:37:00,554
この例を見てください

560
00:37:00,654 --> 00:37:04,024
MyNetworkManager.hを
インポートするのは

561
00:37:04,124 --> 00:37:08,495
このプロパティを宣言する
ためだけです

562
00:37:09,563 --> 00:37:15,235
このプロパティは まったく
使われない可能性もあります

563
00:37:15,335 --> 00:37:19,807
その場合
ここでの宣言は不要です

564
00:37:20,340 --> 00:37:25,212
そこで Objective-Cの
Categoryを用いて

565
00:37:25,312 --> 00:37:27,181
インターフェースを
切ります

566
00:37:27,548 --> 00:37:31,051
MyViewController+Internalを
新たに定義して

567
00:37:31,485 --> 00:37:36,990
追加プロパティを宣言できる
Categoryを使います

568
00:37:37,091 --> 00:37:42,696
プロパティ合成機能は
そのまま利用できます

569
00:37:44,198 --> 00:37:49,036
インポートとプロパティを
下へ移動します

570
00:37:49,336 --> 00:37:50,437
見てください

571
00:37:50,704 --> 00:37:55,542
インポートされたヘッダは
ずっと小さくなり

572
00:37:55,642 --> 00:37:59,747
不必要なリビルドの原因が
低減しました

573
00:38:00,447 --> 00:38:01,915
もう１つあります

574
00:38:02,649 --> 00:38:04,585
定義したファイルは

575
00:38:04,718 --> 00:38:10,324
他に Objective-Cからのアクセスが
不要な場合もあります

576
00:38:11,091 --> 00:38:14,094
この場合
別ファイルは必要ありません

577
00:38:14,194 --> 00:38:17,464
Categoryを直接
実装ファイルに入れられます

578
00:38:18,298 --> 00:38:21,468
それでまったく問題ありません

579
00:38:21,568 --> 00:38:26,273
NetworkManagerの
プロパティ合成は有効です

580
00:38:28,175 --> 00:38:29,409
おさらいすると

581
00:38:30,043 --> 00:38:35,249
プライベートのブロックAPIで
ビルド設定をオフにして

582
00:38:35,349 --> 00:38:37,985
Generatedヘッダの内容を
縮小しました

583
00:38:38,719 --> 00:38:41,622
次に Objective-Cのヘッダから

584
00:38:41,722 --> 00:38:46,593
コンテンツを取り出して
Bridgingヘッダを縮小

585
00:38:47,027 --> 00:38:50,164
内容が減れば 処理も減ります

586
00:38:50,264 --> 00:38:56,136
変更の余地も少なくなり
リビルドも少なく済みます

587
00:38:56,637 --> 00:38:58,238
どちらも有効です

588
00:38:59,373 --> 00:39:00,607
では まとめます

589
00:38:59,373 --> 00:39:00,607
では まとめます

590
00:39:02,509 --> 00:39:04,711
今日 話した内容は

591
00:39:05,078 --> 00:39:08,882
Xcodeから
多くの情報を得るとともに

592
00:39:08,982 --> 00:39:14,555
多くの情報を提供して
ビルドを高速化する方法です

593
00:39:14,688 --> 00:39:18,392
ビルド効率を
向上させることができ

594
00:39:18,625 --> 00:39:22,329
リビルドの際の作業量を
減らせます

595
00:39:23,664 --> 00:39:28,135
駆け足になったので
動画もチェックしてください

596
00:39:28,235 --> 00:39:33,640
今日の正午と明日の午後にも
ぜひ お越しください

597
00:39:33,740 --> 00:39:36,243
ありがとうございました

598
00:39:36,343 --> 00:39:39,913
(拍手)