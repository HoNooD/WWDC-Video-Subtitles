
1
00:00:07,040 --> 00:00:16,383
(音楽)

2
00:00:20,420 --> 00:00:23,423
おはようございます　どうも

3
00:00:23,524 --> 00:00:26,593
(拍手)

4
00:00:27,461 --> 00:00:31,698
WWDCの最初の
セッションにようこそ

5
00:00:32,232 --> 00:00:35,969
私はホアキム　ご存知ですね

6
00:00:36,069 --> 00:00:37,971
カランとドンユアンと一緒に

7
00:00:38,071 --> 00:00:41,475
インターナショナライゼーションに
ついてお話しします

8
00:00:41,575 --> 00:00:44,711
まず 全体的な概要を
話してから―

9
00:00:44,811 --> 00:00:49,283
レイアウトをアダプティブにする
具体例の紹介や

10
00:00:49,383 --> 00:00:53,287
テキストに関する面白い話をします

11
00:00:54,821 --> 00:00:57,124
これは大事なテーマです

12
00:00:57,257 --> 00:01:03,730
インターナショナライゼーションは
使用言語に関わらず―

13
00:00:57,257 --> 00:01:03,730
インターナショナライゼーションは
使用言語に関わらず―

14
00:01:03,830 --> 00:01:07,501
すべてのAppに適用されます

15
00:01:08,869 --> 00:01:13,574
言語や居住国
あるいは出身国の枠を越え―

16
00:01:13,674 --> 00:01:20,547
より多くのカスタマーに
Appを広めるために欠かせません

17
00:01:20,781 --> 00:01:26,186
また 居住国と出身国が
一致しない場合もあります

18
00:01:28,322 --> 00:01:34,895
インターナショナライゼーションは
App全般に適用されます

19
00:01:35,329 --> 00:01:37,364
App制作の中で―

20
00:01:37,464 --> 00:01:43,704
継続的に行われるプロセスだと
お考えください

21
00:01:43,804 --> 00:01:47,341
あらゆる段階に関わります

22
00:01:47,441 --> 00:01:50,811
発想段階から設計や実装―

23
00:01:50,911 --> 00:01:54,381
そしてApp Storeでの配信まで
続きます

24
00:01:54,481 --> 00:01:57,417
App Storeでの
スクリーンショットや

25
00:01:57,518 --> 00:02:00,888
Appの名称も対象となります

26
00:01:57,518 --> 00:02:00,888
Appの名称も対象となります

27
00:02:02,956 --> 00:02:06,393
幅広い領域に関わるテーマです

28
00:02:08,695 --> 00:02:11,598
Appleはこの分野で
経験豊富です

29
00:02:11,965 --> 00:02:17,437
当社のカスタマーの70％以上は
米国外にいます

30
00:02:17,538 --> 00:02:23,377
ユーザは自分の言語に対応した
Appを求めるので

31
00:02:23,477 --> 00:02:28,549
言語だけでなく地域設定にも
適応する必要があります

32
00:02:30,250 --> 00:02:35,422
Appleでは38もの言語に対応し

33
00:02:35,522 --> 00:02:40,894
多様なキーボード設定や
入力モードを用意しています

34
00:02:40,994 --> 00:02:45,299
皆さんをサポートする基盤が
整っているのです

35
00:02:45,699 --> 00:02:49,603
すべてのAPIは
これら設定をサポートします

36
00:02:49,803 --> 00:02:52,673
これらのAPIを使うことで―

37
00:02:52,773 --> 00:02:57,811
皆さんのAppを多言語に対応させる
環境が整います

38
00:03:00,647 --> 00:03:04,785
日付や時刻表示を例に
考えましょう

39
00:03:04,885 --> 00:03:09,823
国際化を考える上で
日付や時刻は基本です

40
00:03:09,923 --> 00:03:12,693
慣習は地域によって違います

41
00:03:12,793 --> 00:03:16,830
この写真は
ポルトガルの鉄道駅です

42
00:03:16,930 --> 00:03:23,537
美しい建築ですが 
それより時刻表に注目してください

43
00:03:23,637 --> 00:03:27,307
掲示板はすべて24時間表示です

44
00:03:27,574 --> 00:03:33,580
24時間表示は駅だけでなく
各国の様々な場所で使われます

45
00:03:34,515 --> 00:03:39,853
Appは各地域の慣習に
対応する必要があります

46
00:03:39,987 --> 00:03:44,191
DateFormatterは
この作業を行うAPIで

47
00:03:44,291 --> 00:03:46,593
皆さんの仕事を楽にします

48
00:03:49,296 --> 00:03:54,067
暦も地域によって異なり
世界に何種類もあります

49
00:03:54,168 --> 00:03:59,239
同一国内で複数の暦を使うことも
珍しくありません

50
00:03:59,339 --> 00:04:04,411
宗教用とビジネス用を
使い分けたりします

51
00:03:59,339 --> 00:04:04,411
宗教用とビジネス用を
使い分けたりします

52
00:04:04,678 --> 00:04:07,514
うるう月やうるう年など―

53
00:04:07,614 --> 00:04:11,418
月や年の日数が
異なる場合もあります

54
00:04:11,518 --> 00:04:16,723
こうした慣習を
Appで正確に反映することは

55
00:04:16,822 --> 00:04:19,526
国際性の高さを示します

56
00:04:20,327 --> 00:04:23,063
これはiOSの
カレンダー Appですが

57
00:04:23,163 --> 00:04:26,867
太陰暦とグレゴリオ暦を
表示しています

58
00:04:26,967 --> 00:04:32,172
カレンダー AppのAPIと
DateFormatterで設定できます

59
00:04:34,541 --> 00:04:37,177
単位も同様です

60
00:04:37,277 --> 00:04:42,249
国や地域によってメートル法や
ヤード･ポンド法―

61
00:04:42,349 --> 00:04:46,086
摂氏や華氏など
異なる単位が使われます

62
00:04:46,386 --> 00:04:53,227
地域の適切なデフォルトを把握し
環境設定の変更にも対応が必要です

63
00:04:55,662 --> 00:04:59,633
単位だけでなく
数字そのものも対象です

64
00:04:59,733 --> 00:05:04,538
小数点記号や
３桁ごとの区切りに使う記号―

65
00:04:59,733 --> 00:05:04,538
小数点記号や
３桁ごとの区切りに使う記号―

66
00:05:04,638 --> 00:05:10,811
あるいは数字の表し方でさえも
地域によって異なります

67
00:05:11,411 --> 00:05:15,449
NumberFormatterを使えば
無料で対応できます

68
00:05:15,549 --> 00:05:20,187
一貫性だけでなく
分かりやすさの面で大事です

69
00:05:22,756 --> 00:05:27,160
テキストも幅広い分野で
対応が必要です

70
00:05:27,261 --> 00:05:35,035
人は子供の頃から学び書いてきた
言語や字体によって左右されます

71
00:05:35,135 --> 00:05:40,774
言語が違っても基本的な法則は
同じだと思いがちですが

72
00:05:40,874 --> 00:05:43,143
そうとは限りません

73
00:05:43,243 --> 00:05:46,280
例えば文字の方向です

74
00:05:46,380 --> 00:05:50,350
アラビア語 ヘブライ語
ウルドゥー語は

75
00:05:50,450 --> 00:05:52,853
右横書きの言語です

76
00:05:52,953 --> 00:05:56,423
皆さんが使う英語とは逆です

77
00:05:56,924 --> 00:05:58,492
他にも―

78
00:05:59,193 --> 00:06:03,297
中国語や日本語の書籍は
大部分が縦書きで

79
00:05:59,193 --> 00:06:03,297
中国語や日本語の書籍は
大部分が縦書きで

80
00:06:03,397 --> 00:06:06,033
右から左へ改行します

81
00:06:06,400 --> 00:06:12,039
こうした書式を知り
最適なレイアウトを用意することは

82
00:06:12,172 --> 00:06:16,176
皆さんのAppにとって
重要なことです

83
00:06:16,310 --> 00:06:18,178
UIフレームワークや

84
00:06:18,278 --> 00:06:21,348
TextKit等の
テキストフレームワークは

85
00:06:21,448 --> 00:06:24,985
どんな場合でも役立つので
ご活用ください

86
00:06:28,155 --> 00:06:31,525
人名はもう少し複雑です

87
00:06:31,859 --> 00:06:35,562
出身国によって
ミドルネームの有無や

88
00:06:35,662 --> 00:06:38,765
姓と名の順などの違いがあります

89
00:06:39,933 --> 00:06:45,772
こうした違いへの対応は
Appの評価に関わります

90
00:06:45,873 --> 00:06:49,142
ユーザは名前が正しく表記でき―

91
00:06:49,243 --> 00:06:53,113
細かく書式を設定できることを
期待します

92
00:06:53,714 --> 00:06:57,484
PersonNameComponents
Formatterが便利です

93
00:07:00,187 --> 00:07:04,791
他にも考慮すべきことがあります

94
00:07:05,993 --> 00:07:11,431
日常的に２つ以上の言語を使う
ユーザもいます

95
00:07:11,532 --> 00:07:13,734
例えば外国に移住したり

96
00:07:13,834 --> 00:07:17,671
もともと多言語の地域に
住む人々です

97
00:07:18,739 --> 00:07:20,674
他のケースもあります

98
00:07:22,142 --> 00:07:24,745
単一言語のAppでも

99
00:07:24,845 --> 00:07:31,818
ユーザが自分の母国語で
そのAppを使用することがあります

100
00:07:32,119 --> 00:07:37,090
これらのテーマは
どの言語でも重要であり

101
00:07:37,191 --> 00:07:43,330
設計から実装にいたる
すべての過程で考慮すべきです

102
00:07:46,033 --> 00:07:48,135
初めてでも心配ありません

103
00:07:48,535 --> 00:07:55,275
当社のAPIは充実しており
皆さんに代わって問題を解決します

104
00:07:55,375 --> 00:07:59,713
言語や地域による違いにも
対応します

105
00:07:59,813 --> 00:08:03,750
フォーマット設定用の
APIの例です

106
00:07:59,813 --> 00:08:03,750
フォーマット設定用の
APIの例です

107
00:08:03,851 --> 00:08:09,790
これらのAPIを詳しく説明する
セッションも ご用意しています

108
00:08:13,093 --> 00:08:15,896
では Appを国際化する際の

109
00:08:15,996 --> 00:08:21,335
アダプティブレイアウトを
詳しく見ていきましょう

110
00:08:23,170 --> 00:08:27,341
アダプティブレイアウトの
主な目標は

111
00:08:27,441 --> 00:08:30,344
あらゆる情報を表示することです

112
00:08:30,811 --> 00:08:34,248
Appを他言語に翻訳する場合―

113
00:08:34,815 --> 00:08:39,019
必ず問題となるのが
訳文の長さです

114
00:08:39,119 --> 00:08:42,188
言語によって長さは変わるので

115
00:08:42,322 --> 00:08:46,226
デザインやレイアウトの
最適化が必要です

116
00:08:48,128 --> 00:08:51,832
書字方向の問題もあります

117
00:08:51,932 --> 00:08:56,737
書字方向が変われば
デザインに影響があります

118
00:08:56,870 --> 00:09:01,241
テキストだけでなく
表示方法にも関係します

119
00:08:56,870 --> 00:09:01,241
テキストだけでなく
表示方法にも関係します

120
00:09:01,341 --> 00:09:04,411
特に横書きの場合は―

121
00:09:04,511 --> 00:09:08,882
文字と書字方向の両面で
注意が必要です

122
00:09:12,119 --> 00:09:15,055
そこでAuto Layoutの登場です

123
00:09:15,155 --> 00:09:17,291
ご存知かもしれません

124
00:09:17,591 --> 00:09:21,328
当社のレイアウトエンジンの
中核技術です

125
00:09:21,662 --> 00:09:25,499
Auto Layoutでは
明示的なフレームや

126
00:09:25,599 --> 00:09:28,469
コントロールやラベルの
位置の代わりに

127
00:09:28,735 --> 00:09:32,206
ビューの間の
制約や関係性を表します

128
00:09:32,306 --> 00:09:38,278
つまり 位置や大きさが
相対的に調整されるのです

129
00:09:40,080 --> 00:09:45,185
制約ベースのシステムでは
前辺や後辺を制約できます

130
00:09:45,886 --> 00:09:52,392
つまり 英語のような
左横書き言語を自動的に―

131
00:09:52,492 --> 00:09:58,499
アラビア語やヘブライ語などの
右横書き言語に変換できます

132
00:09:58,599 --> 00:10:02,970
Auto Layoutでは
コードを記述することなく

133
00:09:58,599 --> 00:10:02,970
Auto Layoutでは
コードを記述することなく

134
00:10:03,070 --> 00:10:07,841
書字方向を考慮した
アダプティブレイアウトを

135
00:10:07,941 --> 00:10:10,143
可能とします

136
00:10:13,914 --> 00:10:17,851
UIフレームワークの
コンポーネントやコンテナを

137
00:10:17,951 --> 00:10:20,020
使うのも有効です

138
00:10:20,120 --> 00:10:24,691
アダプティブなコンセプトを
共有しています

139
00:10:25,025 --> 00:10:30,030
CollectionViewや
StackViewをお勧めします

140
00:10:30,230 --> 00:10:32,499
これらを使うだけで

141
00:10:32,599 --> 00:10:38,805
複雑なレイアウトを持つ
Appを作ることができます

142
00:10:39,940 --> 00:10:42,676
これはStackViewの例です

143
00:10:42,776 --> 00:10:44,945
水平方向で―

144
00:10:45,045 --> 00:10:49,016
都市名は左側
時刻は右側に配置しました

145
00:10:49,116 --> 00:10:52,419
横書きで
きれいに収まっています

146
00:10:52,519 --> 00:10:55,556
もとは英語で左横書きです

147
00:10:55,656 --> 00:10:57,724
StackViewを使用して―

148
00:10:58,592 --> 00:11:01,628
ヘブライ語に変換しました

149
00:10:58,592 --> 00:11:01,628
ヘブライ語に変換しました

150
00:11:01,728 --> 00:11:04,398
自動的に対応します

151
00:11:04,498 --> 00:11:08,769
書字の概念を認識して
Auto Layoutを使うからです

152
00:11:10,871 --> 00:11:15,976
Auto Layoutや
書字方向の変換について

153
00:11:16,076 --> 00:11:20,614
詳しく知りたい方は
こちらをご参照ください

154
00:11:24,251 --> 00:11:27,855
Appのテキストや
コンテンツを考えるにあたり

155
00:11:27,955 --> 00:11:31,058
意識すべきことがあります

156
00:11:31,158 --> 00:11:34,128
幅を固定しないことです

157
00:11:34,228 --> 00:11:36,864
そうすれば後々苦労しません

158
00:11:36,964 --> 00:11:42,603
他言語に翻訳した際に
幅が自動調整できるだけでなく

159
00:11:42,703 --> 00:11:48,375
縦書きや複数行化に
対応できるようになります

160
00:11:48,709 --> 00:11:52,079
Appを設計する際には―

161
00:11:52,179 --> 00:11:58,085
何を優先して画面を使うのか
判断する必要があるでしょう

162
00:12:00,554 --> 00:12:06,293
先程説明したStackViewや
Auto Layoutを使っていれば

163
00:12:06,393 --> 00:12:10,497
ラベルやコントロールは
自動調整されます

164
00:12:10,597 --> 00:12:12,666
ラベルは伸縮し

165
00:12:12,766 --> 00:12:16,537
コントロールも
最適な表示となります

166
00:12:16,637 --> 00:12:22,376
両者の相対的な関係を
決めるだけで良いのです

167
00:12:25,445 --> 00:12:28,582
ここまで完了したとしましょう

168
00:12:28,682 --> 00:12:30,818
では あなたのAppが―

169
00:12:30,918 --> 00:12:36,823
正しくレイアウトされるか
どう確認すれば良いでしょう

170
00:12:36,924 --> 00:12:40,694
Xcodeには
これをテストする機能があり

171
00:12:40,794 --> 00:12:47,668
App制作の早い段階で
確認できるようになっています

172
00:12:48,569 --> 00:12:54,975
１つの方法は疑似言語で
言語サポート前に使うと良いです

173
00:12:55,075 --> 00:13:00,814
Xcode内で疑似言語を使って
Appを作動し

174
00:12:55,075 --> 00:13:00,814
Xcode内で疑似言語を使って
Appを作動し

175
00:13:00,914 --> 00:13:05,018
レイアウトやテキストを
確認します

176
00:13:05,118 --> 00:13:07,721
Bounded Stringが便利です

177
00:13:07,821 --> 00:13:12,860
各UI文字列の前後に
特定の文字を加えます

178
00:13:12,960 --> 00:13:19,466
クリッピングや切り詰めがないか
これで確認できます

179
00:13:19,566 --> 00:13:24,004
他にも便利な疑似言語を
ご用意しています

180
00:13:26,273 --> 00:13:31,745
Auto Layoutには
エラーを知らせる機能があります

181
00:13:31,845 --> 00:13:37,151
Interface Builderの中で
アンチパターンを警告します

182
00:13:37,284 --> 00:13:42,489
幅の制約 あるいは
コントロールやラベルの制約など

183
00:13:42,589 --> 00:13:47,461
翻訳後に問題を起こしそうな点を
拾います

184
00:13:50,631 --> 00:13:55,869
では ドンユアンに
デモをしてもらいましょう

185
00:13:55,969 --> 00:13:59,006
ありがとうございました

186
00:13:59,106 --> 00:14:00,908
(拍手)

187
00:13:59,106 --> 00:14:00,908
(拍手)

188
00:14:01,008 --> 00:14:02,242
ありがとう

189
00:14:09,449 --> 00:14:10,651
ドンユアンです

190
00:14:10,751 --> 00:14:16,490
役に立つテクニックと
陥りがちなトラブルをお見せします

191
00:14:17,291 --> 00:14:22,596
Vacation Planetは
惑星間旅行を扱うAppです

192
00:14:23,130 --> 00:14:29,736
地球内の外国だけでなく
他の惑星への旅行も手配できます

193
00:14:30,504 --> 00:14:35,709
以前から月に行きたかったので
予約しましょう

194
00:14:36,877 --> 00:14:41,548
月の目的地と
地球からの距離が表示されます

195
00:14:42,115 --> 00:14:44,952
行先はクラビウスとします

196
00:14:45,686 --> 00:14:48,188
詳細が表示されました

197
00:14:48,822 --> 00:14:52,826
割安なので
チケットを買い足します

198
00:14:53,994 --> 00:14:55,395
３枚にします

199
00:14:56,230 --> 00:14:57,631
できました

200
00:14:58,599 --> 00:15:05,005
英語で設計されたAppなので
レイアウトは問題ありません

201
00:14:58,599 --> 00:15:05,005
英語で設計されたAppなので
レイアウトは問題ありません

202
00:15:05,205 --> 00:15:09,443
他言語に翻訳した場合は
どうでしょう

203
00:15:09,843 --> 00:15:14,648
まだ開発中で 他言語に
ローカライズしていないので

204
00:15:14,748 --> 00:15:17,484
Xcodeの疑似言語を利用します

205
00:15:17,784 --> 00:15:22,823
まず 現在のスキームで
“Edit Scheme”をクリックします

206
00:15:23,457 --> 00:15:27,661
スキームエディタの中から
Application Languageを選択

207
00:15:28,195 --> 00:15:32,699
疑似言語の中から
Bounded String Pseudolanguageへ

208
00:15:33,534 --> 00:15:38,138
クリッピングや切り詰めを
発見するのに便利です

209
00:15:38,772 --> 00:15:40,941
実行しましょう

210
00:15:42,576 --> 00:15:46,146
この疑似言語は
各UI文字列の前後に

211
00:15:46,246 --> 00:15:49,082
特別な文字を加えたものです

212
00:15:49,416 --> 00:15:53,854
キャッチコピーは平気ですが
ボタン表示が切れました

213
00:15:54,254 --> 00:15:55,622
修正しましょう

214
00:15:57,491 --> 00:16:02,429
ボタンを選択すると
Xcodeに警告がありました

215
00:15:57,491 --> 00:16:02,429
ボタンを選択すると
Xcodeに警告がありました

216
00:16:05,165 --> 00:16:09,570
幅に制約があることが
問題のようです

217
00:16:10,871 --> 00:16:14,174
横の“i”ボタンから
詳しい情報を得ます

218
00:16:14,608 --> 00:16:19,479
警告サインをクリックして
情報を見ます

219
00:16:20,013 --> 00:16:22,816
３つの解決法がありますが

220
00:16:22,916 --> 00:16:28,889
制約を外してボタンの幅を
広げるのが良さそうです

221
00:16:29,890 --> 00:16:31,692
これで大丈夫です

222
00:16:32,793 --> 00:16:36,964
修正を確認する
簡単な方法を見せます

223
00:16:37,698 --> 00:16:40,801
右上の“Assistant Editor”を
押します

224
00:16:40,901 --> 00:16:42,169
真ん中です

225
00:16:44,304 --> 00:16:47,808
プレビューから
“Main.storyboard”を選びます

226
00:16:48,675 --> 00:16:52,179
プレビューペインでは
レイアウトを―

227
00:16:52,279 --> 00:16:55,516
異なるサイズと言語で
確認できます

228
00:16:56,617 --> 00:17:02,456
右下のリストから
先程の疑似言語を選択します

229
00:16:56,617 --> 00:17:02,456
右下のリストから
先程の疑似言語を選択します

230
00:17:04,124 --> 00:17:10,864
幅の制約をなくしたので
より長い文字列に対応できました

231
00:17:12,432 --> 00:17:16,002
疑似言語のDouble-Length
Pseudolanguageは

232
00:17:16,336 --> 00:17:19,540
ドイツ語 フィンランド語
ロシア語など

233
00:17:19,640 --> 00:17:23,911
長めの文字列を
確認するのに便利です

234
00:17:24,243 --> 00:17:27,281
英語の２倍になることもあります

235
00:17:27,647 --> 00:17:29,149
試しましょう

236
00:17:30,684 --> 00:17:35,455
ブラウズボタンは平気ですが
キャッチコピーが収まりません

237
00:17:36,223 --> 00:17:40,427
ラベルを確認すると
Center Xの制約しかありません

238
00:17:40,527 --> 00:17:45,799
前辺や後辺の制約がないので
はみ出ます

239
00:17:46,300 --> 00:17:50,070
前辺の制約を追加しましょう

240
00:17:50,470 --> 00:17:55,342
Controlキーを押しながら
ラベルをドラッグし

241
00:17:55,475 --> 00:17:58,045
“Leading Space to 
Safe Area”を選択します

242
00:17:59,713 --> 00:18:03,450
制約の数値を
調整することもできます

243
00:17:59,713 --> 00:18:03,450
制約の数値を
調整することもできます

244
00:18:03,817 --> 00:18:07,287
ここではマージンを
“20”とします

245
00:18:09,423 --> 00:18:13,861
ご覧のように
クリッピングが修正されました

246
00:18:14,294 --> 00:18:16,797
しかし 切り詰められています

247
00:18:16,897 --> 00:18:22,102
カスタマー向けの
大事なメッセージなので困ります

248
00:18:22,669 --> 00:18:28,141
必要に応じて複数行にする設定に
変更しましょう

249
00:18:28,742 --> 00:18:30,677
“Label”の中を見ると―

250
00:18:31,111 --> 00:18:34,214
“Lines”のプロパティが
“１”になっています

251
00:18:34,381 --> 00:18:37,484
ラベルが１行に制約されています

252
00:18:38,085 --> 00:18:40,120
この設定を“０”にすれば

253
00:18:41,288 --> 00:18:45,159
必要に応じて複数行になります

254
00:18:47,361 --> 00:18:51,832
先程の疑似言語を使い
３行となりました

255
00:18:52,833 --> 00:18:54,968
表示を英語に戻すと

256
00:18:55,435 --> 00:18:59,306
ラベルは予想どおり
１行に戻ります

257
00:19:00,340 --> 00:19:06,947
他のスクリーンサイズでも
Appを確認してください

258
00:19:07,448 --> 00:19:11,418
iPhone SEのような
小型のデバイスでは

259
00:19:11,518 --> 00:19:15,856
クリッピングや切り詰めが
起きがちです

260
00:19:17,624 --> 00:19:22,563
次に アラビア語などの
右横書き言語を試します

261
00:19:22,829 --> 00:19:27,000
まだローカライズ前の
段階なので―

262
00:19:27,534 --> 00:19:29,736
疑似言語を使います

263
00:19:30,370 --> 00:19:32,473
スキームエディタを開き

264
00:19:33,073 --> 00:19:35,309
Application Languageから―

265
00:19:35,576 --> 00:19:38,412
Right-to-Left Pseudolanguageを
選択します

266
00:19:39,513 --> 00:19:41,582
そして実行します

267
00:19:48,522 --> 00:19:49,957
ブラウズします

268
00:19:50,891 --> 00:19:55,562
書字方向が
右から左に変換されました

269
00:19:56,230 --> 00:19:58,198
何も手を加えていません

270
00:19:58,532 --> 00:20:02,836
UITableViewなどの
UIKitコンポーネントのお陰です

271
00:19:58,532 --> 00:20:02,836
UITableViewなどの
UIKitコンポーネントのお陰です

272
00:20:03,103 --> 00:20:05,672
システムにお任せです

273
00:20:05,973 --> 00:20:10,844
前辺となる右側に
タイトルが寄りました

274
00:20:11,111 --> 00:20:14,748
スクリーン左側が後辺になります

275
00:20:15,482 --> 00:20:17,951
次は木星に行くとします

276
00:20:18,952 --> 00:20:24,792
“戻る”ボタンは
左上ではなく右上です

277
00:20:25,325 --> 00:20:28,362
右横書きの言語では
自然な位置です

278
00:20:29,196 --> 00:20:31,532
木星の目的地を選択します

279
00:20:32,633 --> 00:20:35,802
詳細が表示されました

280
00:20:35,903 --> 00:20:40,073
ステッパーと人数ラベル以外は
問題なさそうです

281
00:20:40,440 --> 00:20:45,779
ステッパーはスクリーン左側の
後辺にあるべきです

282
00:20:46,046 --> 00:20:49,650
人数ラベルはスクリーン右側へ

283
00:20:49,983 --> 00:20:54,087
そして ここに
不要なスペースがあります

284
00:20:54,755 --> 00:20:56,890
Interface Builderで
修正しましょう

285
00:21:00,160 --> 00:21:02,396
問題の設定を探します

286
00:21:03,363 --> 00:21:04,865
ありました

287
00:21:05,532 --> 00:21:06,833
ズームします

288
00:21:10,771 --> 00:21:16,009
人数ラベルとステッパーを見ると
制約がありません

289
00:21:16,109 --> 00:21:17,244
修正します

290
00:21:17,644 --> 00:21:20,447
警告メッセージが出ています

291
00:21:21,181 --> 00:21:24,518
１つの方法は
人数ラベルとステッパーに

292
00:21:24,618 --> 00:21:28,455
前辺と後辺の制約を
設定することです

293
00:21:28,822 --> 00:21:33,494
右横書き言語では
前辺は右側 後辺は左側です

294
00:21:34,127 --> 00:21:39,733
しかし もっと簡単な方法は
UIStackViewです

295
00:21:39,833 --> 00:21:43,637
Auto Layoutと連動した
高性能のコンテナビューです

296
00:21:43,937 --> 00:21:47,608
右横書き言語の対応が無料です

297
00:21:48,342 --> 00:21:50,310
両方のビューを選択して

298
00:21:50,744 --> 00:21:55,315
右下の“Embed”ボタンをクリック

299
00:21:56,116 --> 00:21:57,818
“Stack View”を選択します

300
00:21:58,986 --> 00:22:01,822
２つのビューが指定されました

301
00:21:58,986 --> 00:22:01,822
２つのビューが指定されました

302
00:22:01,922 --> 00:22:05,692
あとは制約を追加するだけです

303
00:22:06,860 --> 00:22:08,629
対象を選択し

304
00:22:08,729 --> 00:22:11,098
“Add Constraints”ボタンを
クリック

305
00:22:11,865 --> 00:22:18,038
セルを自由に埋められるように
４ヵ所にゼロを入力

306
00:22:18,505 --> 00:22:21,842
“Constrain to margins”を
チェックします

307
00:22:21,942 --> 00:22:25,179
デフォルトのマージンが必要で

308
00:22:25,279 --> 00:22:30,083
先端部をセルのセパレータと
揃えたいからです

309
00:22:30,717 --> 00:22:31,785
できました

310
00:22:32,719 --> 00:22:35,155
変更を確認します

311
00:22:39,159 --> 00:22:40,561
ブラウズします

312
00:22:41,328 --> 00:22:43,530
次は地球を旅行します

313
00:22:44,598 --> 00:22:48,335
ポルトガルの
リスボンにしましょう

314
00:22:49,636 --> 00:22:52,372
ご覧のように―

315
00:22:52,473 --> 00:22:56,844
人数ラベルとステッパーが
UIStackViewに含まれ

316
00:22:56,944 --> 00:22:59,079
無料で右横書きに

317
00:22:59,513 --> 00:23:00,881
予約します

318
00:22:59,513 --> 00:23:00,881
予約します

319
00:23:02,216 --> 00:23:03,250
すばらしい

320
00:23:06,086 --> 00:23:08,355
まとめます

321
00:23:13,360 --> 00:23:18,699
Appのレイアウトを
国際化する手順は簡単です

322
00:23:18,899 --> 00:23:22,569
まず StackViewのような
コンテナを使うことです

323
00:23:22,669 --> 00:23:27,841
多くの手間が省けますし
とにかく使い勝手がいい

324
00:23:28,375 --> 00:23:31,145
細かい設定には
Auto Layoutをどうぞ

325
00:23:31,245 --> 00:23:36,517
右横書き言語に対応できるように
前辺 後辺の制約を忘れずに

326
00:23:37,017 --> 00:23:39,786
Appをローカライズする
前段階のテストは

327
00:23:39,920 --> 00:23:43,357
スキームエディタの
疑似言語が便利です

328
00:23:43,457 --> 00:23:47,027
警告が出た場合は
無視しないように

329
00:23:47,127 --> 00:23:51,965
クリッピングなどを避けるために
活用してください

330
00:23:52,466 --> 00:23:54,835
カランに引き継ぎます

331
00:23:55,102 --> 00:23:56,904
(拍手)

332
00:23:57,171 --> 00:23:58,438
ありがとう

333
00:23:59,306 --> 00:24:02,342
テキストの話をしましょう

334
00:23:59,306 --> 00:24:02,342
テキストの話をしましょう

335
00:24:04,611 --> 00:24:10,317
当社では 質の高い字体は
デザインの要だと考えています

336
00:24:11,251 --> 00:24:18,592
テキストの見た目やデザインは
とても重要なことなのです

337
00:24:19,226 --> 00:24:23,564
他言語に翻訳された際も同様です

338
00:24:26,800 --> 00:24:33,440
当社がAppをローカライズする際に
注意する点をお話しします

339
00:24:33,540 --> 00:24:38,645
それらを皆さんのAppに
生かす方法についても触れます

340
00:24:41,115 --> 00:24:43,817
３つのポイントがあります

341
00:24:43,917 --> 00:24:46,120
“言語とスクリプト”

342
00:24:46,220 --> 00:24:49,389
“書体”と“スタイル”です

343
00:24:49,890 --> 00:24:51,992
まず 言語とスクリプトです

344
00:24:54,661 --> 00:24:56,930
スクリプトとは何か？

345
00:24:57,030 --> 00:25:00,634
この場合 シェルスクリプトや
Pythonの話ではなく

346
00:24:57,030 --> 00:25:00,634
この場合 シェルスクリプトや
Pythonの話ではなく

347
00:25:00,868 --> 00:25:05,005
言語が書かれる方法を意味します

348
00:25:05,105 --> 00:25:08,742
つまり 書き言葉の文字です

349
00:25:08,876 --> 00:25:12,513
当社が対応する
左横書きの文字です

350
00:25:14,181 --> 00:25:17,117
右横書き文字もあります

351
00:25:18,819 --> 00:25:23,323
注意すべきなのは
それぞれの文字が

352
00:25:23,423 --> 00:25:27,561
複数の言語に
使用されていることです

353
00:25:27,694 --> 00:25:33,100
ラテン文字は英語だけでなく
ベトナム語にも使われます

354
00:25:33,834 --> 00:25:35,936
他の文字も同様です

355
00:25:36,036 --> 00:25:39,706
キリル文字も
複数の言語で使われます

356
00:25:40,307 --> 00:25:45,379
右横書きの文字では
アラビア文字が好例です

357
00:25:45,479 --> 00:25:47,981
アラビア語だけでなく

358
00:25:48,081 --> 00:25:51,785
ペルシャ語や
ウルドゥー語にも使われます

359
00:25:52,619 --> 00:25:56,957
今 スクリーンには
多様な言語が並んでいますが

360
00:25:57,157 --> 00:26:02,463
違う文字でAppを開発する際
多くの影響が出ます

361
00:25:57,157 --> 00:26:02,463
違う文字でAppを開発する際
多くの影響が出ます

362
00:26:02,563 --> 00:26:07,401
言語の概念が
全文字に共通ではないからです

363
00:26:07,501 --> 00:26:09,503
例を挙げましょう

364
00:26:11,472 --> 00:26:13,006
書体の話です

365
00:26:13,874 --> 00:26:16,977
ヘルスケアAppの英語版です

366
00:26:17,077 --> 00:26:20,047
たくさんのラベルがありますね

367
00:26:21,048 --> 00:26:23,517
これはカタロニア語です

368
00:26:25,853 --> 00:26:28,956
そしてベトナム語です

369
00:26:29,490 --> 00:26:35,629
テキストはすべて
同じシステムフォント―

370
00:26:35,729 --> 00:26:38,866
San Franciscoを
使用しています

371
00:26:39,466 --> 00:26:43,604
いずれも美しいレンダリングです

372
00:26:44,037 --> 00:26:48,108
San Franciscoは
多様な言語に対応するからです

373
00:26:48,242 --> 00:26:52,946
システムフォントなので
無料で利用できます

374
00:26:54,147 --> 00:27:00,087
Xcodeのテキストは
San Franciscoがデフォルトです

375
00:26:54,147 --> 00:27:00,087
Xcodeのテキストは
San Franciscoがデフォルトです

376
00:27:00,287 --> 00:27:04,591
他のフォントをご希望なら
TextStyleをどうぞ

377
00:27:06,660 --> 00:27:09,363
様々な用例を想定し

378
00:27:09,463 --> 00:27:14,334
綿密に作られたスタイルを
用意しています

379
00:27:14,535 --> 00:27:18,639
いずれも多様な言語に
対応しています

380
00:27:19,373 --> 00:27:24,578
どのTextStyleも
高い満足度を提供します

381
00:27:26,046 --> 00:27:28,081
更に上を目指すなら―

382
00:27:28,916 --> 00:27:35,022
フォントサイズを自動調整する
設定にできます

383
00:27:35,255 --> 00:27:40,794
文字サイズを変更している
ユーザには便利です

384
00:27:42,062 --> 00:27:48,168
テキストを確実に表示するためには
この機能をお勧めします

385
00:27:49,970 --> 00:27:55,475
先程のVacation Planetを使って
説明します

386
00:27:55,809 --> 00:27:58,712
今はシステムフォントなので

387
00:27:58,812 --> 00:28:03,016
バケーションらしい雰囲気に
変えましょう

388
00:27:58,812 --> 00:28:03,016
バケーションらしい雰囲気に
変えましょう

389
00:28:03,116 --> 00:28:08,255
タイトルでAppの雰囲気を
アピールするのです

390
00:28:08,922 --> 00:28:12,159
楽しいフォントを探しました

391
00:28:13,026 --> 00:28:14,761
例えばこれです

392
00:28:14,862 --> 00:28:17,397
既に申し上げたとおり―

393
00:28:17,498 --> 00:28:22,603
ローカリゼーションは
開発･設計段階から重要です

394
00:28:22,703 --> 00:28:28,242
まず このフォントが
他言語に対応するかを調べます

395
00:28:28,342 --> 00:28:31,912
翻訳済みのフランス語で試しました

396
00:28:32,479 --> 00:28:34,281
うまくいきません

397
00:28:34,548 --> 00:28:41,622
そこで少ない選択肢の中から
別の書体に変えることにしました

398
00:28:42,289 --> 00:28:45,526
結果はこのとおり 大丈夫でした

399
00:28:45,859 --> 00:28:50,330
フランス語の文字に対応した
書体でした

400
00:28:52,199 --> 00:28:58,739
次はベトナム語ですが
まだローカライズしていません

401
00:28:59,239 --> 00:29:02,543
そこでFont Bookを使います

402
00:28:59,239 --> 00:29:02,543
そこでFont Bookを使います

403
00:29:02,643 --> 00:29:08,448
すべてのMacにインストールされ
誰でも使えます

404
00:29:08,549 --> 00:29:12,553
リストの中から
希望の言語を選びます

405
00:29:12,653 --> 00:29:15,189
今回はベトナム語ですが

406
00:29:15,289 --> 00:29:20,694
フォントが対応していることを
確認できました

407
00:29:20,794 --> 00:29:24,932
リストにはキリル文字や
ギリシャ文字もあり

408
00:29:25,032 --> 00:29:30,437
後で様々な言語に
ローカライズできるでしょう

409
00:29:31,171 --> 00:29:34,208
留意すべき点もあります

410
00:29:34,308 --> 00:29:40,948
リストに希望の言語があっても
事前にテストすることは必要です

411
00:29:41,048 --> 00:29:45,452
実際に問題がないか
必ず確かめてください

412
00:29:48,956 --> 00:29:54,495
さて Vacation Planetを
楽しいフォントに変えました

413
00:29:55,429 --> 00:29:59,766
次は 事業拡大のために
言語を増やします

414
00:29:59,867 --> 00:30:02,069
まずは中国語です

415
00:29:59,867 --> 00:30:02,069
まずは中国語です

416
00:30:03,237 --> 00:30:07,174
文字列をすべて翻訳しました

417
00:30:07,274 --> 00:30:10,644
見事な簡体字の中国語です

418
00:30:10,944 --> 00:30:11,678
すごい

419
00:30:12,846 --> 00:30:16,683
でも タイトルを見てください

420
00:30:17,351 --> 00:30:22,923
英語版と違い 中国語は
システムフォントのままです

421
00:30:23,023 --> 00:30:26,793
中国語に対応していないからです

422
00:30:27,861 --> 00:30:33,534
先程のベトナム語と
同じプロセスを行います

423
00:30:33,634 --> 00:30:37,371
楽しいフォントになりました

424
00:30:39,039 --> 00:30:43,677
フォントのスタイルは
皆さんの選択次第ですが

425
00:30:43,777 --> 00:30:46,447
コードなら説明できます

426
00:30:47,915 --> 00:30:50,584
複雑ではありません

427
00:30:50,684 --> 00:30:54,822
ベースは
自分の言語のフォントです

428
00:30:54,922 --> 00:31:00,260
この場合は英語で
ラテン文字のフォントです

429
00:30:54,922 --> 00:31:00,260
この場合は英語で
ラテン文字のフォントです

430
00:31:01,195 --> 00:31:05,666
ここで皆さんに勧めたいのは
カスケードリストです

431
00:31:05,766 --> 00:31:07,501
どんな機能なのか

432
00:31:07,701 --> 00:31:12,873
例えば 英語から中国語に
レンダリングする際―

433
00:31:13,040 --> 00:31:18,312
フォントを複数指定し
優先順位を決められます

434
00:31:18,412 --> 00:31:21,949
指定しなければ
システムフォントになります

435
00:31:22,049 --> 00:31:27,721
リストを作れば
そこにあるフォントを優先します

436
00:31:28,322 --> 00:31:34,528
中国語のフォントを選び
カスケードリストを作成します

437
00:31:34,728 --> 00:31:38,465
Appを複数のスクリプトに
対応させる場合も

438
00:31:38,565 --> 00:31:40,968
同じリストに追加します

439
00:31:41,535 --> 00:31:43,203
リストを完成したら

440
00:31:43,303 --> 00:31:47,141
フォントディスクリプタを
新たに生成します

441
00:31:48,609 --> 00:31:52,746
Dynamic Typeを
採用している場合は

442
00:31:52,846 --> 00:31:55,582
それにも対応するはずです

443
00:31:55,749 --> 00:31:58,051
とても簡単です

444
00:31:59,353 --> 00:32:00,754
例を見ましょう

445
00:31:59,353 --> 00:32:00,754
例を見ましょう

446
00:32:02,222 --> 00:32:04,958
macOS Mojaveの
スクリーンセーバ

447
00:32:05,058 --> 00:32:06,627
Word of the Dayです

448
00:32:07,227 --> 00:32:11,064
やや丸みを帯びたフォントに
一新しました

449
00:32:11,165 --> 00:32:15,068
このスクリーンセーバに
対応する全言語で

450
00:32:15,169 --> 00:32:18,806
丸みを帯びたスタイルとしました

451
00:32:18,906 --> 00:32:20,474
これは日本語です

452
00:32:21,909 --> 00:32:25,879
中国語の簡体字と繁体字も
追加されました

453
00:32:29,449 --> 00:32:31,552
メッセージAppでは

454
00:32:31,652 --> 00:32:37,491
Tapback機能で
リアクションを返信できます

455
00:32:37,791 --> 00:32:41,128
英語では“HA HA”と
なっていますが

456
00:32:41,228 --> 00:32:45,732
翻訳された後も
スタイルがマッチしています

457
00:32:45,833 --> 00:32:50,404
すべての言語で
楽しさを演出しています

458
00:32:52,005 --> 00:32:53,640
書体は以上です

459
00:32:54,541 --> 00:32:56,143
次はスタイルです

460
00:32:56,743 --> 00:32:58,679
まず定義ですが―

461
00:32:59,446 --> 00:33:01,115
スタイルとは？

462
00:32:59,446 --> 00:33:01,115
スタイルとは？

463
00:33:01,482 --> 00:33:08,956
簡単に言えば 書体を決めた後に
テキストに加える特徴のことです

464
00:33:09,056 --> 00:33:12,993
例えばフォントの細さや太さ

465
00:33:13,093 --> 00:33:17,664
イタリックの有無や
サイズが挙げられます

466
00:33:19,433 --> 00:33:25,205
言語によっては 変換できない
スタイルがあることを

467
00:33:25,305 --> 00:33:27,274
覚えておきましょう

468
00:33:27,374 --> 00:33:32,446
では 変換できない例を
お見せします

469
00:33:32,780 --> 00:33:35,215
簡単な英文の文字列です

470
00:33:35,482 --> 00:33:39,987
“Mars”と“2 travelers”は
変数なのでイタリック体に

471
00:33:41,588 --> 00:33:44,358
繁体字中国語への翻訳です

472
00:33:45,492 --> 00:33:46,793
問題が２点

473
00:33:48,829 --> 00:33:54,268
“Mars”の中国語訳は
イタリック体になりません

474
00:33:54,368 --> 00:33:57,638
なぜなら
イタリック体は基本的に

475
00:33:57,771 --> 00:34:02,176
ラテン キリル
ギリシャ文字の概念なので

476
00:33:57,771 --> 00:34:02,176
ラテン キリル
ギリシャ文字の概念なので

477
00:34:03,310 --> 00:34:06,613
イタリック体は不適当です

478
00:34:07,014 --> 00:34:08,649
２点目ですが―

479
00:34:08,748 --> 00:34:14,188
中国語にはスペースや
大文字 小文字の概念がありません

480
00:34:14,288 --> 00:34:20,159
英語では当然の特徴が
翻訳すると消えてしまいます

481
00:34:20,928 --> 00:34:24,364
語順の違いにも注意が必要です

482
00:34:25,866 --> 00:34:31,405
“２”はイタリック体のままなので
見栄えが良くありません

483
00:34:33,273 --> 00:34:34,741
では 対策は？

484
00:34:35,742 --> 00:34:38,112
強調するのが目的なので

485
00:34:38,212 --> 00:34:43,951
イタリック体以外の方法で
強調してみました

486
00:34:44,051 --> 00:34:49,556
これは 当社が対応している
すべての言語で有効です

487
00:34:49,656 --> 00:34:53,060
ボールド体にする方法です

488
00:34:55,295 --> 00:35:00,234
最後に 文字単位で強調する方法を
お話しします

489
00:34:55,295 --> 00:35:00,234
最後に 文字単位で強調する方法を
お話しします

490
00:35:01,368 --> 00:35:03,670
検索機能を持つAppで

491
00:35:04,071 --> 00:35:09,042
ヒットした文字を
強調したとします

492
00:35:09,510 --> 00:35:15,282
英語の場合
文字をボールド体にすると有効です

493
00:35:17,551 --> 00:35:21,021
ヒンディー文字には不適当です

494
00:35:21,121 --> 00:35:27,895
読める方ならお分かりのとおり
右側は完全におかしくなっています

495
00:35:28,295 --> 00:35:35,235
文字の中に点線の円形が現れたら
変換は失敗です

496
00:35:35,869 --> 00:35:40,240
同じフォントファミリーでも
太さが違うと―

497
00:35:40,340 --> 00:35:44,177
別フォントだと
認識されるためです

498
00:35:44,311 --> 00:35:49,850
フォントが２つあると
適切な文字の連結ができません

499
00:35:51,318 --> 00:35:57,324
簡単な解決法は
別の方法で文字を強調することです

500
00:35:57,424 --> 00:36:02,963
例えば 文字の色を変えます

501
00:35:57,424 --> 00:36:02,963
例えば 文字の色を変えます

502
00:36:03,197 --> 00:36:07,000
ここでは強調したい数字は黒にして

503
00:36:07,101 --> 00:36:10,237
残りの文字はグレーにしました

504
00:36:10,504 --> 00:36:15,542
キーボードの文字に
点線の円形がありますが―

505
00:36:15,642 --> 00:36:18,745
これは問題ありません

506
00:36:21,882 --> 00:36:24,952
アラビア語でも同じです

507
00:36:25,052 --> 00:36:28,522
iOSとmacOSでは
よく使われる手法で

508
00:36:28,622 --> 00:36:31,091
とても便利です

509
00:36:32,259 --> 00:36:37,531
属性付きの文字列を使うと
作業が楽です

510
00:36:40,567 --> 00:36:41,535
最後に―

511
00:36:42,970 --> 00:36:45,305
これまでの話をまとめます

512
00:36:48,509 --> 00:36:50,611
インターナショナライゼーションは

513
00:36:50,711 --> 00:36:56,383
Appの開発や設計など
早い段階から始めましょう

514
00:36:59,553 --> 00:37:07,461
ローカライズしたい言語を決めたら
その都度 対応していきます

515
00:36:59,553 --> 00:37:07,461
ローカライズしたい言語を決めたら
その都度 対応していきます

516
00:37:07,661 --> 00:37:12,666
Auto LayoutやStackView
あるいはDynamic Typeは

517
00:37:12,766 --> 00:37:16,403
設計の段階でも簡単に使えます

518
00:37:16,503 --> 00:37:19,640
完成後にローカライズすると

519
00:37:19,740 --> 00:37:23,911
最初からやり直すことに
なりかねません

520
00:37:26,980 --> 00:37:31,285
APIが存在するかも
と感じた場合は―

521
00:37:31,518 --> 00:37:33,687
大抵 存在します

522
00:37:33,787 --> 00:37:39,026
データのフォーマットなどを
する場合は

523
00:37:39,126 --> 00:37:43,063
まずはフォーマッタクラスを
探しましょう

524
00:37:43,163 --> 00:37:47,034
実装を台無しにしてしまう前に―

525
00:37:47,501 --> 00:37:49,870
テキストのAPIも探しましょう

526
00:37:52,506 --> 00:37:57,044
そして 抜けが生じないよう
気をつけてください

527
00:37:57,678 --> 00:38:03,217
Appをローカライズする作業は
それぞれ異なります

528
00:37:57,678 --> 00:38:03,217
Appをローカライズする作業は
それぞれ異なります

529
00:38:03,484 --> 00:38:09,123
開発言語で特定した意図が
他言語にも反映され―

530
00:38:09,223 --> 00:38:14,661
何も失われることのないように
注意してください

531
00:38:16,029 --> 00:38:17,131
ありがとうございました

532
00:38:17,464 --> 00:38:22,069
(拍手)