
1
00:00:07,207 --> 00:00:15,516
(音楽)

2
00:00:21,455 --> 00:00:26,026
(拍手)

3
00:00:26,727 --> 00:00:32,466
ReplayKitによるライブスクリーン
ブロードキャストのセッションです

4
00:00:32,900 --> 00:00:35,903
私はアレキサンダーです

5
00:00:36,003 --> 00:00:41,375
ReplayKitのコンセプトと
新機能についてお話しします

6
00:00:42,543 --> 00:00:45,245
早速 始めましょう

7
00:00:47,347 --> 00:00:51,885
ReplayKitはアプリケーションの
画面や音声の―

8
00:00:51,985 --> 00:00:54,755
リアルタイムなキャプチャを
可能にするフレームワークです

9
00:00:55,055 --> 00:01:00,160
また編集･共有可能な
映像ファイル化もできます

10
00:00:55,055 --> 00:01:00,160
また編集･共有可能な
映像ファイル化もできます

11
00:01:01,595 --> 00:01:04,598
ライブブロードキャストも
サポートします

12
00:01:05,799 --> 00:01:09,002
ゲームなどの
アプリケーションに―

13
00:01:09,536 --> 00:01:13,407
ブロードキャストサービスで
音声や映像を―

14
00:01:13,507 --> 00:01:17,344
ストリーミングするツールを
提供します

15
00:01:18,712 --> 00:01:21,415
ブロードキャスト
アプリケーションでは―

16
00:01:21,515 --> 00:01:27,688
他のAppやiOSからキャプチャした
コンテンツを受け取り

17
00:01:27,788 --> 00:01:32,926
エンコードとサーバへの
直接ストリーミングができます

18
00:01:36,597 --> 00:01:41,235
ハイクオリティかつ
短い待ち時間での提供が可能で

19
00:01:41,502 --> 00:01:44,471
オーバーヘッドも少量です

20
00:01:44,872 --> 00:01:47,474
ユーザの
プライバシーを守るため―

21
00:01:47,574 --> 00:01:52,613
収録やブロードキャストには
承認が必要となり

22
00:01:52,713 --> 00:01:57,684
キャプチャする際は
インジケータが表示されます

23
00:02:02,289 --> 00:02:07,327
今回のテーマはReplayKitの
ブロードキャスト機能です

24
00:02:07,594 --> 00:02:12,065
App内ブロードキャストの
概要から始めます

25
00:02:12,399 --> 00:02:13,934
次にiOSのブロードキャスト

26
00:02:14,535 --> 00:02:19,406
そして新しいAPIである
System Broadcast Picker

27
00:02:20,774 --> 00:02:26,380
このAPIはアプリケーションから
直接ブロードキャストを開始します

28
00:02:28,615 --> 00:02:33,687
その後
Broadcast Extensionの実装や―

29
00:02:33,787 --> 00:02:37,257
新しいAPIへの
適用について話します

30
00:02:39,326 --> 00:02:45,399
さらにキャプチャした
コンテンツの保護の話もします

31
00:02:48,602 --> 00:02:51,505
それでは
ブロードキャストの概要です

32
00:02:54,174 --> 00:02:59,980
ReplayKitでは画面や音声の
ブロードキャストが可能です

33
00:03:00,113 --> 00:03:02,316
サードパーティのサービスを―

34
00:03:03,183 --> 00:03:05,953
iOSやデバイスから
直接検索します

35
00:03:06,053 --> 00:03:09,256
iOSでは
マイクやカメラを使った―

36
00:03:10,023 --> 00:03:14,695
オーディオやビデオコメンタリーの
提供が可能です

37
00:03:15,162 --> 00:03:20,367
コンテンツやサーバへの
アクセスも安全です

38
00:03:23,570 --> 00:03:26,440
例えば MobcrushやYouTubeで
ゲームをストリーミング

39
00:03:26,907 --> 00:03:29,309
WebExで画面をシェア

40
00:03:29,877 --> 00:03:32,379
TeamViewerを使って
カスタマーサポート

41
00:03:32,846 --> 00:03:36,016
描画Appを
Facebookでストリーミング

42
00:03:36,450 --> 00:03:39,253
どれもReplayKitで可能です

43
00:03:42,122 --> 00:03:44,958
元来 ライブブロードキャストは

44
00:03:45,158 --> 00:03:49,763
アプリケーションで
開始や停止をしていました

45
00:03:50,864 --> 00:03:54,535
ReplayKitのAPIと
直接 通信していたのです

46
00:03:54,801 --> 00:03:58,972
ReplayKit自体が
Broadcast Extensionを持ち

47
00:03:59,139 --> 00:04:03,477
アプリケーションから
映像と音声を受信して―

48
00:03:59,139 --> 00:04:03,477
アプリケーションから
映像と音声を受信して―

49
00:04:04,111 --> 00:04:07,748
Extensionがエンコードして
サーバに流していました

50
00:04:08,015 --> 00:04:11,018
それがApp内ブロードキャストです

51
00:04:13,954 --> 00:04:17,658
新しいReplayKit 2で
変わったのは―

52
00:04:17,925 --> 00:04:21,995
システム全体が
ブロードキャストされること

53
00:04:22,763 --> 00:04:24,364
ユーザはまず―

54
00:04:24,464 --> 00:04:28,502
コントロールセンターから
ブロードキャストを始めます

55
00:04:28,702 --> 00:04:31,572
開始や停止もここで実行します

56
00:04:33,307 --> 00:04:37,845
それがシステム全体での
ブロードキャストです

57
00:04:38,345 --> 00:04:43,016
音声や映像がExtension経由で
サーバにアップされます

58
00:04:43,417 --> 00:04:46,520
以上が大まかな違いです

59
00:04:48,322 --> 00:04:52,359
少しApp内ブロードキャストの
説明をします

60
00:04:53,393 --> 00:04:58,232
App内ブロードキャストでは
アプリケーションやゲームが

61
00:04:58,699 --> 00:05:01,101
キャプチャされる
コンテンツを提供します

62
00:04:58,699 --> 00:05:01,101
キャプチャされる
コンテンツを提供します

63
00:05:03,604 --> 00:05:08,976
開始や停止にはゲームが
ReplayKitのAPIを使います

64
00:05:10,043 --> 00:05:13,480
そしてブロードキャスト用の
コントローラとなり

65
00:05:13,580 --> 00:05:16,984
ユーザがサービスを
選択するのです

66
00:05:18,352 --> 00:05:19,753
それに沿って―

67
00:05:21,054 --> 00:05:25,392
ブロードキャスト
アプリケーションは機能します

68
00:05:25,859 --> 00:05:29,463
ReplayKitがゲームに代わり

69
00:05:29,796 --> 00:05:31,899
ユーザをサービスに
サインインさせ

70
00:05:31,999 --> 00:05:36,870
ブロードキャストコンテンツを
サーバにアップさせます

71
00:05:37,504 --> 00:05:40,974
それがReplayKitを使った
ブロードキャストでした

72
00:05:41,475 --> 00:05:46,547
Appでのブロードキャストの
開始や停止について―

73
00:05:46,647 --> 00:05:48,682
さらに情報が必要な場合は

74
00:05:48,782 --> 00:05:54,254
“Go Live with ReplayKit”の
セッションをご覧ください

75
00:05:55,823 --> 00:05:57,191
２年前のものです

76
00:05:59,092 --> 00:06:04,131
今日のセッションはiOSシステムの
ブロードキャストについて

77
00:05:59,092 --> 00:06:04,131
今日のセッションはiOSシステムの
ブロードキャストについて

78
00:06:04,431 --> 00:06:09,903
画面上のすべての映像と音声の
ブロードキャストです

79
00:06:10,470 --> 00:06:12,973
アプリケーション内ではなく

80
00:06:13,073 --> 00:06:17,344
例えばAppの休止中でも
開始と停止ができます

81
00:06:19,112 --> 00:06:22,950
コントロールセンターから
実行ができ

82
00:06:23,050 --> 00:06:28,722
ホーム画面からAppへの
移動時にも継続されます

83
00:06:29,189 --> 00:06:31,291
AppからAppへの移動時も
同じです

84
00:06:32,359 --> 00:06:35,796
どれもiOS 11から実装済みで

85
00:06:35,896 --> 00:06:39,099
これは去年リリースした
ReplayKit 2です

86
00:06:41,168 --> 00:06:43,403
このゲームの画面を―

87
00:06:43,770 --> 00:06:47,975
ブロードキャストしたいと
考えたとします

88
00:06:49,309 --> 00:06:54,515
コントロールセンターから
画面収録ボタンを押します

89
00:06:55,282 --> 00:07:00,487
すると収録のための
ピッカが立ち上がります

90
00:06:55,282 --> 00:07:00,487
すると収録のための
ピッカが立ち上がります

91
00:07:00,621 --> 00:07:04,958
そしてプロバイダを
選んでタップすると

92
00:07:05,058 --> 00:07:07,060
ストリームが始まります

93
00:07:08,762 --> 00:07:11,265
ゲームに戻ると―

94
00:07:12,165 --> 00:07:14,268
もうストリーム中です

95
00:07:14,568 --> 00:07:18,639
スクリーンからキャプチャした
メディアサンプルを受け取り

96
00:07:18,739 --> 00:07:21,441
ストリームをアップロードします

97
00:07:21,575 --> 00:07:27,948
ウェブブラウザ上の視聴者や
ストリーミング利用者が―

98
00:07:29,149 --> 00:07:32,853
世界中から
ブロードキャストを視聴します

99
00:07:36,290 --> 00:07:40,227
これがiOSシステムの
ブロードキャストです

100
00:07:40,327 --> 00:07:44,665
このブロードキャストで
興味深いことは

101
00:07:44,765 --> 00:07:49,703
App間の移動に関係なく
継続することです

102
00:07:50,037 --> 00:07:53,106
私のホーム画面から始めてみます

103
00:07:53,207 --> 00:07:56,376
この画面をブロードキャストします

104
00:07:57,644 --> 00:08:03,283
別のAppを開いてみても
ブロードキャストは続きます

105
00:07:57,644 --> 00:08:03,283
別のAppを開いてみても
ブロードキャストは続きます

106
00:08:03,650 --> 00:08:05,619
これが重要なのです

107
00:08:05,719 --> 00:08:08,722
ブロードキャストが
システム全体で行われ

108
00:08:08,822 --> 00:08:12,492
終了の際は
コントロールセンターに戻ります

109
00:08:13,193 --> 00:08:17,731
ステータスバー経由でも
コントロール可能です

110
00:08:19,466 --> 00:08:23,470
ランドスケープモードで
実行した場合も

111
00:08:23,570 --> 00:08:26,206
サポートは変わりません

112
00:08:28,075 --> 00:08:33,447
ポートレートモードと
往復することもできます

113
00:08:38,184 --> 00:08:42,289
以上が昨年までに
実装した機能です

114
00:08:42,556 --> 00:08:47,094
その後のフィードバックと
適用はすばらしいものでした

115
00:08:47,194 --> 00:08:52,466
今回のブロードキャストAPIは
様々なカテゴリで利用できます

116
00:08:53,200 --> 00:08:56,937
コミュニケーションや
ストリーミングやヘルプデスク

117
00:08:57,037 --> 00:08:59,173
教育やソーシャルなどです

118
00:09:01,508 --> 00:09:04,778
多かったフィードバックは―

119
00:09:05,312 --> 00:09:09,550
ブロードキャストのUIが
見つけにくいということでした

120
00:09:10,651 --> 00:09:15,155
我々が望んだのは簡単に
編集できるようにすることです

121
00:09:15,989 --> 00:09:19,893
目標はiOSシステムの
ブロードキャストを

122
00:09:19,993 --> 00:09:21,828
Appへ組み込むことです

123
00:09:22,029 --> 00:09:25,566
そこでSystem Broadcast Pickerを
紹介します

124
00:09:28,869 --> 00:09:30,971
図に戻ります

125
00:09:33,006 --> 00:09:34,474
追加したのは―

126
00:09:35,175 --> 00:09:39,913
ある意味 ２つの方式の
ハイブリッドです

127
00:09:42,516 --> 00:09:46,854
アプリケーションの能力を
向上させました

128
00:09:46,954 --> 00:09:50,057
iOSシステムのブロードキャストの
起点にしたのです

129
00:09:50,691 --> 00:09:54,728
コントロールセンターと
同じことができます

130
00:09:55,596 --> 00:10:01,301
ブロードキャストを開始し
App間の移動が可能であり

131
00:09:55,596 --> 00:10:01,301
ブロードキャストを開始し
App間の移動が可能であり

132
00:10:02,035 --> 00:10:04,738
ホーム画面へも移動できます

133
00:10:05,072 --> 00:10:08,475
アプリケーションから
ブロードキャストを開始し

134
00:10:08,775 --> 00:10:13,180
コントロールセンターで
停止することもできますし

135
00:10:13,280 --> 00:10:19,052
逆にコントロールセンターで開始し
アプリケーションで停止も可能です

136
00:10:22,356 --> 00:10:25,192
Broadcast Pickerによって

137
00:10:25,492 --> 00:10:31,498
アプリケーションから離れずに
ブロードキャストが可能です

138
00:10:31,598 --> 00:10:35,636
使うのは我々が
提供した単純なボタンのみ

139
00:10:35,736 --> 00:10:39,606
これがiOS 12で
可能になる新機能です

140
00:10:41,575 --> 00:10:43,544
例を見ましょう

141
00:10:44,545 --> 00:10:47,247
サンプルAppの“Fox 2”です

142
00:10:47,381 --> 00:10:50,117
上部のボタンが新しいものです

143
00:10:51,852 --> 00:10:54,721
このBroadcast Pickerボタンを
押すと

144
00:10:54,822 --> 00:10:59,593
コントロールセンターと
同じUIが―

145
00:10:59,693 --> 00:11:01,428
表示されます

146
00:10:59,693 --> 00:11:01,428
表示されます

147
00:11:02,629 --> 00:11:07,167
そこでプロバイダを選び
ブロードキャストを開始

148
00:11:08,502 --> 00:11:12,506
その時点でAppに戻っても
ブロードキャストは続き

149
00:11:13,073 --> 00:11:17,911
世界の人がストリームを
視聴することができます

150
00:11:20,647 --> 00:11:22,616
コードを説明します

151
00:11:23,750 --> 00:11:28,989
RPSystemBroadcastPickerView
という新しいクラスがあります

152
00:11:29,089 --> 00:11:31,825
UIビューのサブクラスで

153
00:11:31,925 --> 00:11:36,263
Interface Builderで追加できます

154
00:11:36,363 --> 00:11:39,900
カスタムクラス付きのビューです

155
00:11:40,934 --> 00:11:42,970
プログラムも可能です

156
00:11:43,103 --> 00:11:48,775
RPSystemBroadcastPickerViewの
インスタンスで実行し

157
00:11:48,876 --> 00:11:51,245
ビューの階層に加えるだけです

158
00:11:53,480 --> 00:11:58,385
これがBroadcast Pickerを使う
より簡単な方法です

159
00:11:59,753 --> 00:12:05,125
皆さんの多くはブロードキャスト
サービスのデベロッパですね

160
00:11:59,753 --> 00:12:05,125
皆さんの多くはブロードキャスト
サービスのデベロッパですね

161
00:12:05,926 --> 00:12:10,664
これでユーザはAppから直接
ブロードキャストでき

162
00:12:10,764 --> 00:12:15,335
チュートリアルを
用意する必要もありません

163
00:12:15,435 --> 00:12:17,905
画面収録を可能にする方法や

164
00:12:18,005 --> 00:12:21,108
サービスを探す方法などです

165
00:12:21,875 --> 00:12:26,213
しかし皆さんのサービスのみの
Broadcast Extensionを―

166
00:12:26,313 --> 00:12:29,783
表示したいと思うかもしれません

167
00:12:31,151 --> 00:12:36,957
ReplayKitのAPIでは
それが可能です

168
00:12:38,192 --> 00:12:42,429
それはビューの
プロパティの問題です

169
00:12:43,397 --> 00:12:48,769
Broadcast Extensionから
バンドルIDを取得して

170
00:12:48,902 --> 00:12:53,707
preferredExtensionという
ビューに割り当てます

171
00:12:56,276 --> 00:12:59,613
これがコードのサンプルです

172
00:13:00,848 --> 00:13:04,751
ビューの修正後に
プロパティを設定します

173
00:13:04,852 --> 00:13:08,188
先程との唯一の違いは―

174
00:13:08,288 --> 00:13:13,560
com.your-app.broadcast.
extensionへの変更です

175
00:13:13,660 --> 00:13:15,696
ExtensionのバンドルIDです

176
00:13:17,998 --> 00:13:19,333
図を見ましょう

177
00:13:20,267 --> 00:13:26,206
Appに組み込む
ピッカビューについて説明します

178
00:13:26,406 --> 00:13:32,012
Broadcast Pickerを
呼び出すショートカットで

179
00:13:32,112 --> 00:13:35,883
コントロールセンターと
同じUIです

180
00:13:36,750 --> 00:13:40,053
このピッカ自体は
システムのもので―

181
00:13:40,154 --> 00:13:45,292
アプリケーションは
ブロードキャストの状態を管理せず

182
00:13:45,425 --> 00:13:51,031
プログラムで
開始も停止もできません

183
00:13:54,635 --> 00:13:59,306
iOSシステムのブロードキャストを
追加するためにすべきことです

184
00:13:59,473 --> 00:14:02,376
新しいAPIは
とてもシンプルです

185
00:13:59,473 --> 00:14:02,376
新しいAPIは
とてもシンプルです

186
00:14:02,476 --> 00:14:06,446
このセッション中に
使ってみてください

187
00:14:08,081 --> 00:14:12,886
次にBroadcast Extensionの
開発プロセスを説明します

188
00:14:13,420 --> 00:14:17,391
Broadcast Extensionの
実装方法です

189
00:14:17,491 --> 00:14:23,864
Extensionとピッカの両方を
提供している場合の説明です

190
00:14:25,933 --> 00:14:27,367
再び図を表示します

191
00:14:27,467 --> 00:14:30,804
Broadcast Extensionに
移りますが

192
00:14:30,904 --> 00:14:34,741
その道のりを説明したいと
思います

193
00:14:39,746 --> 00:14:45,118
ブロードキャストアプリケーション
およびExtensionから始めましょう

194
00:14:45,219 --> 00:14:51,258
システムブロードキャスト中に
何が必要かを確認します

195
00:14:53,193 --> 00:14:58,432
まずアプリケーションと共に
Extensionをインストールします

196
00:14:58,632 --> 00:15:03,270
Facebookなら そのExtensionも
一緒にインストールします

197
00:14:58,632 --> 00:15:03,270
Facebookなら そのExtensionも
一緒にインストールします

198
00:15:04,204 --> 00:15:09,510
Broadcast Extensionと
アプリケーションは

199
00:15:09,910 --> 00:15:13,447
別のバイナリで
独自のプロセスで動きます

200
00:15:13,814 --> 00:15:19,052
プロセスはユーザが
直接呼び出すことになり

201
00:15:19,153 --> 00:15:21,088
独立しています

202
00:15:21,989 --> 00:15:27,895
通常はアプリケーションで
サインインさせますが

203
00:15:28,662 --> 00:15:34,034
Broadcast Picker APIを
採用するAppの場合は―

204
00:15:34,134 --> 00:15:36,937
例えばFacebookでの
ブロードキャストの前に

205
00:15:37,037 --> 00:15:41,508
メッセージを
タイプさせることができます

206
00:15:44,444 --> 00:15:46,380
Broadcast Extensionでは

207
00:15:47,314 --> 00:15:53,687
ブロードキャストに必要な
機能はすべてそろっています

208
00:15:55,656 --> 00:16:00,694
Extensionが扱うのは
ReplayKitが編集したサンプル

209
00:15:55,656 --> 00:16:00,694
Extensionが扱うのは
ReplayKitが編集したサンプル

210
00:16:00,861 --> 00:16:05,032
アプリケーションからの
音声サンプル

211
00:16:05,132 --> 00:16:08,569
画面の映像や
マイクからの音声などです

212
00:16:08,669 --> 00:16:14,408
それらをエンコードして
各サービスへアップロードします

213
00:16:17,344 --> 00:16:21,048
新たなブロードキャスト
サービスの開発のために

214
00:16:21,148 --> 00:16:23,851
我々はXcodeテンプレートを
提供します

215
00:16:24,885 --> 00:16:30,424
それを使ってExtensionを
追加すれば準備は完了です

216
00:16:30,891 --> 00:16:33,594
コードを見てみましょう

217
00:16:35,562 --> 00:16:39,833
Xcodeテンプレートで
Extensionを作成する場合

218
00:16:39,933 --> 00:16:42,269
SampleHandlerクラスを取得します

219
00:16:43,770 --> 00:16:48,876
ここでブロードキャスト中の
イベント用コードを追加します

220
00:16:50,043 --> 00:16:54,848
また音声と映像を処理する
この関数を使います

221
00:16:58,218 --> 00:17:01,922
これがブロードキャストの
ライフサイクルです

222
00:16:58,218 --> 00:17:01,922
これがブロードキャストの
ライフサイクルです

223
00:17:03,323 --> 00:17:06,926
各ステータスは
セットアップ 初期化

224
00:17:07,027 --> 00:17:10,497
開始 処理中
そして停止です

225
00:17:13,000 --> 00:17:17,104
左にある緑色の四角の
状態にある時は―

226
00:17:17,538 --> 00:17:20,574
Extensionは
実行されていません

227
00:17:20,674 --> 00:17:26,046
この時点でアプリケーションは
ログイン資格情報を得て

228
00:17:26,313 --> 00:17:31,351
共有キーチェーンを使い
Extensionにシェアします

229
00:17:31,852 --> 00:17:37,124
先程言ったように Facebookの
投稿用にタイプさせ

230
00:17:38,725 --> 00:17:42,129
それをExtensionに
渡すことができます

231
00:17:43,864 --> 00:17:46,600
ブロードキャストを
開始する時は―

232
00:17:46,700 --> 00:17:51,338
コントロールセンターかAppから
Broadcast Pickerを使います

233
00:17:52,506 --> 00:17:55,976
その後 ReplayKitが
Extensionプロセスを開始して

234
00:17:56,076 --> 00:17:59,112
SampleHandlerクラスの
インスタンスを作ります

235
00:17:59,880 --> 00:18:02,216
その時点においては

236
00:17:59,880 --> 00:18:02,216
その時点においては

237
00:18:02,316 --> 00:18:06,153
SampleHandlerのイニシャライザを
オーバーライドでき

238
00:18:06,687 --> 00:18:12,025
メディアサンプルには
直結しない処理が可能です

239
00:18:12,693 --> 00:18:15,028
だから例えば―

240
00:18:15,629 --> 00:18:21,268
ログイン資格情報を取得し
サーバとの接続を確立できます

241
00:18:23,871 --> 00:18:28,609
プロセスが始まり SampleHandlerの
インスタンスがありますが

242
00:18:30,777 --> 00:18:32,713
Extensionは―

243
00:18:32,813 --> 00:18:37,351
ReplayKitが音声や映像を
提供し始めることを通知されます

244
00:18:37,451 --> 00:18:39,953
使用する関数は
broadcastStartedです

245
00:18:40,754 --> 00:18:45,893
ここでメディアエンジンを
作成することができます

246
00:18:45,993 --> 00:18:51,198
あるいは サンプルを
リアルタイムで受信し―

247
00:18:51,298 --> 00:18:53,767
エンコードと
アップロードする準備も

248
00:18:56,370 --> 00:18:58,605
ブロードキャストが始まったら―

249
00:19:00,207 --> 00:19:03,710
ReplayKitが音声と
映像サンプルを提供し

250
00:19:04,044 --> 00:19:08,282
Extensionがエンコードと
皆さんが使用する―

251
00:19:08,382 --> 00:19:11,118
それぞれのサービスに
アップロードします

252
00:19:12,886 --> 00:19:16,156
ReplayKitが提供する
サンプルは３種類です

253
00:19:18,258 --> 00:19:20,828
画面からキャプチャした映像

254
00:19:21,228 --> 00:19:23,964
アプリケーションの音声

255
00:19:24,064 --> 00:19:28,068
そしてマイクから
キャプチャした音声です

256
00:19:28,302 --> 00:19:32,873
それらをExtensionが
エンコードしアップロードします

257
00:19:35,509 --> 00:19:40,047
Extensionに送られるすべてを
処理している関数が―

258
00:19:40,581 --> 00:19:42,749
processSampleBufferです

259
00:19:42,983 --> 00:19:49,022
これは CMSampleBufferという
単一関数を受け取ります

260
00:19:49,723 --> 00:19:53,460
必要なのはメディアの
エンコードとアップロードで

261
00:19:53,594 --> 00:19:58,932
ここでは Video Toolboxでの
エンコード方法を示します

262
00:19:59,733 --> 00:20:02,903
Video Toolboxをお薦めするのは

263
00:19:59,733 --> 00:20:02,903
Video Toolboxをお薦めするのは

264
00:20:03,003 --> 00:20:07,074
ハードウェアでの高速化が
可能だからです

265
00:20:07,875 --> 00:20:10,711
これはとても重要なことです

266
00:20:10,811 --> 00:20:15,649
Extensionは
メモリが小さいためです

267
00:20:19,186 --> 00:20:24,992
映像をエンコードし
サーバにストリーミングすると

268
00:20:25,659 --> 00:20:30,264
世界中の人が
映像をライブで視聴できます

269
00:20:31,532 --> 00:20:33,801
ただし検索方法が分かりません

270
00:20:34,968 --> 00:20:39,406
例えば“アングリーバード”の
ファンがいます

271
00:20:39,573 --> 00:20:42,743
ウェブサイトか
App内のどこかで―

272
00:20:42,843 --> 00:20:46,447
ゲームのブロードキャストを
見つけてもらいます

273
00:20:47,981 --> 00:20:50,851
これを実現するためには

274
00:20:50,984 --> 00:20:56,623
ストリームにゲームの情報を
追加する必要があります

275
00:20:58,258 --> 00:21:01,695
ReplayKitが提供する
API関数が―

276
00:20:58,258 --> 00:21:01,695
ReplayKitが提供する
API関数が―

277
00:21:01,795 --> 00:21:04,698
broadcastAnnotatedWith
ApplicationInfoです

278
00:21:04,798 --> 00:21:10,504
誰かがゲームを始めると
その情報が送信されます

279
00:21:10,938 --> 00:21:14,741
ReplayKitがExtensionに
開始を通知するのです

280
00:21:14,842 --> 00:21:18,378
そして詳細を
ディクショナリに提供します

281
00:21:21,014 --> 00:21:25,752
例としてReplayKitが
定義したキーがあります

282
00:21:25,853 --> 00:21:29,690
RPApplicationInfoBundle
IdentifierKeyです

283
00:21:29,790 --> 00:21:34,828
そしてバンドルIDを
メタデータとして渡します

284
00:21:40,334 --> 00:21:43,437
ユーザがブロードキャストを
停止する時は―

285
00:21:44,271 --> 00:21:47,708
ReplayKitは
broadcastFinishedを使います

286
00:21:47,808 --> 00:21:50,644
セッションが終了したことを
通知して

287
00:21:50,744 --> 00:21:54,548
SampleHandlerへの
サンプルの提供も終了します

288
00:21:55,983 --> 00:22:00,854
この関数で動画のアップロードを
終了することもあるでしょう

289
00:21:55,983 --> 00:22:00,854
この関数で動画のアップロードを
終了することもあるでしょう

290
00:22:00,954 --> 00:22:06,293
メディアエンジンなど
リリースしたいものもです

291
00:22:10,564 --> 00:22:15,435
以上がブロードキャストの
ライフサイクルです

292
00:22:15,669 --> 00:22:18,972
あと１つ重要な点があります

293
00:22:20,407 --> 00:22:21,475
前述しましたが―

294
00:22:23,377 --> 00:22:28,615
セットアップはすべて
アプリケーション内で行われます

295
00:22:29,383 --> 00:22:33,520
Appを用いて
ログイン資格情報を取得して

296
00:22:33,720 --> 00:22:36,857
ブロードキャストのための
名前を得ることができました

297
00:22:38,125 --> 00:22:42,262
その状態が左側の緑の四角です

298
00:22:43,030 --> 00:22:48,001
ブロードキャストが
開始されると

299
00:22:48,101 --> 00:22:51,338
Extensionの不備が
あるかもしれません

300
00:22:51,438 --> 00:22:56,810
例えばログイン処理で
エラーを起こしたりします

301
00:22:56,910 --> 00:23:00,414
その場合の対処法を教えましょう

302
00:22:56,910 --> 00:23:00,414
その場合の対処法を教えましょう

303
00:23:02,382 --> 00:23:07,054
ReplayKitがAPI経由で
ユーザに通知し

304
00:23:07,721 --> 00:23:13,093
問題解決に必要な
特定のアクションを提供します

305
00:23:14,862 --> 00:23:19,666
そしてExtensionが
API関数を呼び出して

306
00:23:19,766 --> 00:23:25,639
ReplayKitがセッションを終了し
警告します

307
00:23:27,107 --> 00:23:31,145
例えば エラーの理由が
Extensionから提供されます

308
00:23:31,245 --> 00:23:37,050
この例ではMobcrushの
ログインエラーの表示です

309
00:23:39,686 --> 00:23:43,524
ユーザがアプリケーションへの
移動を選択すると―

310
00:23:44,057 --> 00:23:46,894
ReplayKitがAppを起動

311
00:23:46,994 --> 00:23:52,866
あとは問題を処理して
ログインのためのUIを表示します

312
00:23:52,966 --> 00:23:55,602
これでブロードキャストが
実行されます

313
00:23:57,571 --> 00:24:01,408
broadcastStartedを
使ったコードの例です

314
00:23:57,571 --> 00:24:01,408
broadcastStartedを
使ったコードの例です

315
00:24:01,508 --> 00:24:06,079
ログインしていない時の
対処方法ですが

316
00:24:06,346 --> 00:24:10,117
finishBroadcastWithError
という関数があります

317
00:24:10,984 --> 00:24:13,520
ここで必要なのは―

318
00:24:14,154 --> 00:24:18,158
ユーザ情報辞書に
エラーの理由を渡すことです

319
00:24:18,258 --> 00:24:23,564
ReplayKitは この文字列を使い
セッション停止後に表示させます

320
00:24:29,603 --> 00:24:30,571
それでは…

321
00:24:32,873 --> 00:24:35,843
以上がBroadcast
Extensionについてです

322
00:24:36,643 --> 00:24:40,114
ご覧のように
プロセスは簡潔です

323
00:24:41,548 --> 00:24:44,117
アプリケーションが
セットアップして―

324
00:24:44,585 --> 00:24:47,254
Extensionに情報を伝えます

325
00:24:50,724 --> 00:24:56,363
セッション開始後は
メディアサンプルをエンコード

326
00:24:57,097 --> 00:25:00,167
画面上のアプリケーションの
情報を使用して

327
00:24:57,097 --> 00:25:00,167
画面上のアプリケーションの
情報を使用して

328
00:25:00,267 --> 00:25:03,504
ブロードキャストを
検索してもらえます

329
00:25:05,305 --> 00:25:08,809
もう１点だけお話しします

330
00:25:10,477 --> 00:25:13,781
アプリケーションの
コンテンツ保護です

331
00:25:15,115 --> 00:25:19,686
ブロードキャストなどで
キャプチャしたくないものを

332
00:25:20,287 --> 00:25:23,490
含んでしまう可能性があります

333
00:25:24,291 --> 00:25:28,562
映像と音声の両方に
当てはまることです

334
00:25:30,030 --> 00:25:34,668
キャプチャされていることを
通知するAPIがあります

335
00:25:34,768 --> 00:25:38,138
UIKitフレームワークから
提供されるもので

336
00:25:38,739 --> 00:25:43,143
Capturedと呼ばれる
UIScreenのプロパティです

337
00:25:43,911 --> 00:25:49,583
この値に変化があった時には
通知を受け取れます

338
00:25:49,683 --> 00:25:55,923
収録が始まると音声を止めて
映像を非表示にします

339
00:25:57,090 --> 00:26:02,796
また特殊な例として AirPlayでの
画面ミラーリングがあります

340
00:25:57,090 --> 00:26:02,796
また特殊な例として AirPlayでの
画面ミラーリングがあります

341
00:26:03,831 --> 00:26:10,771
通知ハンドラの例を使用し
説明したいと思います

342
00:26:11,472 --> 00:26:15,776
基本的にミラーリングは
画面が複数あり

343
00:26:15,876 --> 00:26:20,080
この“screens”という配列に
複数の要素が存在

344
00:26:20,180 --> 00:26:26,086
ミラーリング中にisCapturedが
“yes”を返しても

345
00:26:26,787 --> 00:26:30,691
再生続行のため
さらなるチェックをします

346
00:26:34,294 --> 00:26:38,432
以上がライブスクリーン
ブロードキャストの仕組みです

347
00:26:38,532 --> 00:26:39,600
要約すると―

348
00:26:40,667 --> 00:26:44,505
ReplayKitが提供する
高レベルなAPIでは

349
00:26:44,605 --> 00:26:49,009
単体のAppまたは画面上のすべてを
ブロードキャストできます

350
00:26:50,110 --> 00:26:53,847
iOS 12では
アプリケーションから―

351
00:26:53,947 --> 00:26:58,819
直接実行するための
APIや手段を提供します

352
00:27:00,020 --> 00:27:04,057
実際にプログラムが必要なのは
Broadcast Extensionです

353
00:27:04,157 --> 00:27:07,294
それで映像のエンコードも
実行します

354
00:27:09,162 --> 00:27:13,600
Appのコンテンツの保護の
話もしました

355
00:27:17,671 --> 00:27:20,807
より詳細な情報は
デベロッパWebサイトへどうぞ

356
00:27:21,108 --> 00:27:27,214
本日15時にラボで
ReplayKitの実習があります

357
00:27:27,314 --> 00:27:30,284
質問がある方は
お越しください

358
00:27:30,384 --> 00:27:31,818
お待ちしています

359
00:27:33,887 --> 00:27:36,857
本日は
ありがとうございました

360
00:27:36,957 --> 00:27:42,463
ブロードキャストの新しい方法を
提供できてうれしいです

361
00:27:42,563 --> 00:27:46,400
採用いただければ光栄です

362
00:27:46,600 --> 00:27:52,272
Xcodeテンプレートを使って
ぜひ作成してみてください

363
00:27:52,372 --> 00:27:57,945
Broadcast Pickerの
Appへの追加もお願いします

364
00:27:58,312 --> 00:28:03,550
iOSからのブロードキャストを
実現してください

365
00:27:58,312 --> 00:28:03,550
iOSからのブロードキャストを
実現してください

366
00:28:03,784 --> 00:28:06,253
(拍手)