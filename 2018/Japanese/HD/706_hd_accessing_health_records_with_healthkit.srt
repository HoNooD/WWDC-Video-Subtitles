
1
00:00:07,174 --> 00:00:16,750
（音楽）

2
00:00:21,755 --> 00:00:28,962
（拍手）

3
00:00:29,663 --> 00:00:34,668
ヘルスチームの
ジェイソン･モーリーです

4
00:00:35,335 --> 00:00:37,070
同僚のペイトンと―

5
00:00:37,304 --> 00:00:43,243
iOS 12に搭載した新機能を
これからご紹介します

6
00:00:44,111 --> 00:00:46,813
HealthKitです

7
00:00:49,016 --> 00:00:51,852
今年の初め iOS 11.3で―

8
00:00:51,952 --> 00:00:54,555
ヘルスケアを紹介しました

9
00:00:55,322 --> 00:00:58,192
ユーザは医療機関から―

10
00:00:58,292 --> 00:01:03,630
ヘルスケアデータを安全かつ
速やかに入手し保管できます

11
00:00:58,292 --> 00:01:03,630
ヘルスケアデータを安全かつ
速やかに入手し保管できます

12
00:01:04,798 --> 00:01:10,470
複数の医療機関から
データを集めて提供します

13
00:01:10,637 --> 00:01:14,708
検査値や基準値など
重要なデータを―

14
00:01:14,875 --> 00:01:17,878
ユーザは検索できるのです

15
00:01:18,045 --> 00:01:21,481
自分の体について
深く理解できます

16
00:01:24,051 --> 00:01:29,456
500を超えるアメリカ国内の
病院や診療所と―

17
00:01:29,590 --> 00:01:33,327
50を超える医療機関と
提携しています

18
00:01:33,460 --> 00:01:36,129
そして今も追加中です

19
00:01:39,099 --> 00:01:43,036
HL７協会の標準規格が
あったからこそー

20
00:01:43,337 --> 00:01:45,539
これが実現したのです

21
00:01:46,673 --> 00:01:51,612
医療情報の
相互運用のためのリソース

22
00:01:52,212 --> 00:01:55,015
つまりFHIRとSMARTです

23
00:01:57,551 --> 00:02:00,053
全ての始まりは健康です

24
00:01:57,551 --> 00:02:00,053
全ての始まりは健康です

25
00:02:00,954 --> 00:02:04,825
医療機関と安全に接続し―

26
00:02:05,559 --> 00:02:10,964
デバイスにヘルスケアデータを
直接ダウンロードします

27
00:02:13,066 --> 00:02:15,903
そしてHealthKitに保存し―

28
00:02:17,137 --> 00:02:20,340
複数の機関のデータを集計します

29
00:02:22,176 --> 00:02:24,444
iOS 12では―

30
00:02:24,545 --> 00:02:30,250
そのデータを利用できるよう
APIを提供します

31
00:02:35,489 --> 00:02:40,527
この機能をサポートする
新たなsampleTypeを紹介します

32
00:02:41,461 --> 00:02:46,266
次にアプリケーションを承認し
クエリを行う方法

33
00:02:48,001 --> 00:02:52,806
そしてFHIRで何が可能になるか

34
00:02:54,575 --> 00:02:57,177
最後に個人情報に関する―

35
00:02:57,277 --> 00:03:02,449
プライバシーの保護について
考えてみたいと思います

36
00:02:57,277 --> 00:03:02,449
プライバシーの保護について
考えてみたいと思います

37
00:03:05,085 --> 00:03:06,453
では始めましょう

38
00:03:08,455 --> 00:03:11,525
HealthKitの使用経験があれば―

39
00:03:11,625 --> 00:03:14,461
HKSampleTypeをご存じでしょう

40
00:03:15,195 --> 00:03:17,497
同じ種類のデータを
グループ化します

41
00:03:17,998 --> 00:03:20,667
例えばQuantityTypeは―

42
00:03:20,868 --> 00:03:24,838
数値が主となるデータグループです

43
00:03:25,072 --> 00:03:27,808
例えば歩数や心拍数などです

44
00:03:28,642 --> 00:03:32,613
一方 CategoryTypeは
計測データです

45
00:03:32,880 --> 00:03:36,783
睡眠時間や深さなどを測る
睡眠分析や

46
00:03:37,217 --> 00:03:39,987
月経痛の程度が
これ当たります

47
00:03:41,922 --> 00:03:46,493
今回新しく紹介する
HKClinicalTypeは―

48
00:03:46,627 --> 00:03:49,263
ヘルスケアレコードの分類です

49
00:03:49,463 --> 00:03:53,767
体調や薬物治療を
ヘルスケアで確認できます

50
00:03:56,803 --> 00:04:02,943
データタイプは
type identifierで区別されます

51
00:03:56,803 --> 00:04:02,943
データタイプは
type identifierで区別されます

52
00:04:03,944 --> 00:04:08,482
HKClinicalTypeIdentifierは―

53
00:04:08,749 --> 00:04:12,686
一致するクリニカルタイプを
特定します

54
00:04:14,555 --> 00:04:18,759
ここに挙げたように
アレルギーや持病があります

55
00:04:18,926 --> 00:04:22,129
妊娠のように期間が限られるもの

56
00:04:22,229 --> 00:04:25,399
２型糖尿病のような治療中のもの

57
00:04:26,800 --> 00:04:28,435
予防注射

58
00:04:29,770 --> 00:04:34,808
毎年の健康診断での血糖値の結果

59
00:04:36,376 --> 00:04:37,744
薬物治療

60
00:04:39,313 --> 00:04:43,083
診断手順や外科手術歴

61
00:04:43,984 --> 00:04:45,385
バイタルサイン

62
00:04:45,886 --> 00:04:48,121
つまり血圧や体重です

63
00:04:50,791 --> 00:04:54,294
sampleTypeや
sampleType identifierと―

64
00:04:54,495 --> 00:04:58,031
HKSampleのサブクラスを紹介します

65
00:04:58,665 --> 00:05:00,400
HKClinicalRecordです

66
00:04:58,665 --> 00:05:00,400
HKClinicalRecordです

67
00:05:01,368 --> 00:05:05,239
HealthKitのサンプルに
不慣れなら―

68
00:05:05,506 --> 00:05:10,811
それを補える講演や
詳細な資料を準備しています

69
00:05:13,413 --> 00:05:17,784
HKClincalRecordには
重要なプロパティがあります

70
00:05:19,386 --> 00:05:20,721
クリニカルタイプです

71
00:05:21,054 --> 00:05:27,160
これは与えられた記録を
定義するのに役立つのです

72
00:05:27,528 --> 00:05:29,196
知りたいのは―

73
00:05:29,596 --> 00:05:32,299
例えば予防注射の記録です

74
00:05:34,902 --> 00:05:36,537
提供する表示名は―

75
00:05:36,637 --> 00:05:41,875
ユーザに記録を示す時に
使う文字列です

76
00:05:42,209 --> 00:05:44,878
FHIRで選択されます

77
00:05:44,978 --> 00:05:50,484
ユーザに分かりやすい表示名を
選びます

78
00:05:52,686 --> 00:05:55,122
検査結果では―

79
00:05:55,522 --> 00:05:59,793
その代わりとなる表現が
たくさんあります

80
00:06:00,527 --> 00:06:04,031
LOINCでの
コーディングを含みます

81
00:06:04,131 --> 00:06:07,901
これは医療情報のための
標準基準で―

82
00:06:08,001 --> 00:06:11,071
FHIRに要求されます

83
00:06:13,307 --> 00:06:17,678
LOINCでのコーディングと
lookup関数で―

84
00:06:17,778 --> 00:06:22,549
表示名として掲げる
正準名を提供します

85
00:06:25,752 --> 00:06:29,389
そしてFHIRへのアクセスを
許可します

86
00:06:29,490 --> 00:06:33,260
HKClinicalRecordは
とても有用です

87
00:06:33,360 --> 00:06:37,297
ですから この話は後で
もう一度します

88
00:06:41,335 --> 00:06:47,774
ヘルスケアデータの出どころや
元情報の全てがとても重要です

89
00:06:48,609 --> 00:06:51,778
情報源を知りたいでしょう

90
00:06:53,080 --> 00:06:57,417
HKSourceで
設計したHealthKitは―

91
00:06:57,518 --> 00:07:00,654
HKSampleで使用可能です

92
00:06:57,518 --> 00:07:00,654
HKSampleで使用可能です

93
00:07:02,389 --> 00:07:08,729
共有している医療機関の
名前を設定します

94
00:07:09,596 --> 00:07:15,068
そして複数のユーザに
デバイスを介して―

95
00:07:15,169 --> 00:07:19,139
バンドルIDを提供します

96
00:07:22,876 --> 00:07:25,612
以上が新しいsampleTypeです

97
00:07:25,712 --> 00:07:29,917
次はアプリケーションの
承認方法です

98
00:07:37,224 --> 00:07:42,563
ご覧のとおり医療記録の
情報量はかなり豊富です

99
00:07:43,163 --> 00:07:48,101
ユーザへ優れた提案をする
いい機会です

100
00:07:48,202 --> 00:07:52,506
ヘルスケアデータを十分に
活用する機会を与えます

101
00:07:54,408 --> 00:08:00,347
しかし ご承知のとおり
これは個人情報を含みます

102
00:07:54,408 --> 00:08:00,347
しかし ご承知のとおり
これは個人情報を含みます

103
00:08:01,348 --> 00:08:06,186
例えば服用中の薬の情報や―

104
00:08:06,353 --> 00:08:09,423
日々の健康状態などです

105
00:08:10,557 --> 00:08:16,063
親しい友人や家族でもあっても
共有を控える情報です

106
00:08:16,897 --> 00:08:22,135
情報を医療機関と
相互利用するので―

107
00:08:22,603 --> 00:08:26,139
新たな診断が
つくかもしれません

108
00:08:27,140 --> 00:08:32,111
アクセスやデータ管理を
容易にするため―

109
00:08:32,279 --> 00:08:37,384
ヘルスケアレコードの
承認フローを紹介します

110
00:08:38,150 --> 00:08:40,554
アプリケーションが
承認を求めると―

111
00:08:40,854 --> 00:08:45,759
クリニカルタイプ特有の
許可シートを提供します

112
00:08:47,161 --> 00:08:51,932
情報の共有と
その機密性について―

113
00:08:52,032 --> 00:08:54,134
ユーザに通知します

114
00:08:55,903 --> 00:08:58,772
これは新たな承認フローです

115
00:08:58,939 --> 00:09:01,174
いつ依頼しても―

116
00:08:58,939 --> 00:09:01,174
いつ依頼しても―

117
00:09:01,441 --> 00:09:05,045
そのタイミングを計り―

118
00:09:05,145 --> 00:09:10,484
理解できるよう
十分な内容を伝えてください

119
00:09:13,120 --> 00:09:19,092
その後 ユーザは
希望したカテゴリから―

120
00:09:19,293 --> 00:09:22,196
共有するデータタイプを
選択できます

121
00:09:23,430 --> 00:09:26,567
新しいpurpose stringや―

122
00:09:26,767 --> 00:09:31,104
プライバシーポリシーを
提供します

123
00:09:31,572 --> 00:09:34,908
ユーザに説明する絶好の機会です

124
00:09:35,008 --> 00:09:38,979
データにアクセスして
何をしたいのか

125
00:09:39,079 --> 00:09:41,582
データをどう守るか

126
00:09:43,584 --> 00:09:48,822
自分の依頼が必要性と
つり合っているか確認します

127
00:09:49,223 --> 00:09:52,659
主要機能に関連性がなければ―

128
00:09:52,759 --> 00:09:57,364
ユーザは驚き 心配するはずです

129
00:09:57,965 --> 00:10:05,205
最終的にユーザが医療機関と
情報交換するにあたって―

130
00:09:57,965 --> 00:10:05,205
最終的にユーザが医療機関と
情報交換するにあたって―

131
00:10:05,906 --> 00:10:11,078
新しいデータの管理方法を
紹介します

132
00:10:11,778 --> 00:10:17,017
新しいデータの共有前に
毎回 デフォルトで尋ねます

133
00:10:18,385 --> 00:10:22,055
新しいデータを利用する時は―

134
00:10:22,222 --> 00:10:24,658
常に許可シートの提示が必要です

135
00:10:25,058 --> 00:10:31,231
クエリを実行する場合は
事前の承認が必要です

136
00:10:35,269 --> 00:10:39,506
では承認申請の方法を
案内します

137
00:10:40,841 --> 00:10:45,345
HealthKitの経験者には
おなじみのフローです

138
00:10:45,812 --> 00:10:48,048
まずプロジェクトを設定します

139
00:10:50,317 --> 00:10:53,453
その後 承認依頼を行い―

140
00:10:54,354 --> 00:10:56,323
クエリを実行します

141
00:10:58,859 --> 00:11:04,565
プロジェクト設定のため
ヘルスケアレコードの―

142
00:10:58,859 --> 00:11:04,565
プロジェクト設定のため
ヘルスケアレコードの―

143
00:11:05,999 --> 00:11:08,168
Xcodeへの追加が必要です

144
00:11:11,171 --> 00:11:15,275
それからHealth Records
Usage Descriptionを―

145
00:11:15,375 --> 00:11:18,078
Info.plistに追加します

146
00:11:20,514 --> 00:11:23,750
データを利用する理由を―

147
00:11:23,851 --> 00:11:27,221
ユーザに説明するいい機会です

148
00:11:30,557 --> 00:11:33,527
この後 承認を依頼します

149
00:11:34,695 --> 00:11:38,031
ここで
アクセスするタイプを定義します

150
00:11:38,232 --> 00:11:39,633
症状

151
00:11:39,933 --> 00:11:41,835
予防注射

152
00:11:42,302 --> 00:11:43,837
薬物治療

153
00:11:46,874 --> 00:11:50,944
そしてHealthStoreで
承認を依頼します

154
00:11:52,012 --> 00:11:54,181
エラーに対処した後は

155
00:11:55,749 --> 00:11:57,918
クエリの実行です

156
00:11:59,086 --> 00:12:02,789
ユーザの
プライバシー保護のため―

157
00:11:59,086 --> 00:12:02,789
ユーザの
プライバシー保護のため―

158
00:12:02,956 --> 00:12:09,329
彼らが許可または拒否する
カテゴリを明かしません

159
00:12:13,634 --> 00:12:14,768
次にクエリについて

160
00:12:14,868 --> 00:12:18,138
HKClinicalRecordは
HKSampleなので―

161
00:12:18,238 --> 00:12:23,443
既存のサンプルクエリ基盤を
利用できます

162
00:12:23,977 --> 00:12:29,449
AnchoredObjectQueryなどが
機能して―

163
00:12:29,683 --> 00:12:32,786
ユーザが連続呼び出しを
許可すると―

164
00:12:32,986 --> 00:12:35,389
バックグラウンドで作業します

165
00:12:38,425 --> 00:12:41,862
クエリを実行したいタイプを
定義します

166
00:12:43,664 --> 00:12:45,666
これはサンプルクエリです

167
00:12:46,600 --> 00:12:49,336
HealthStoreで実行できます

168
00:12:53,006 --> 00:12:55,442
基本的な承認フローです

169
00:12:56,276 --> 00:13:01,682
ヘルスケアレコード特有の
追加のメカニズムを導入しました

170
00:12:56,276 --> 00:13:01,682
ヘルスケアレコード特有の
追加のメカニズムを導入しました

171
00:13:03,617 --> 00:13:07,721
Get Request Status for
Authorizationは―

172
00:13:07,821 --> 00:13:12,659
許可シートを提示する場合に
定義するAPIです

173
00:13:14,661 --> 00:13:17,531
これによって―

174
00:13:18,198 --> 00:13:22,202
承認シートの確認が
ユーザに必要か決定し―

175
00:13:22,302 --> 00:13:28,275
コンテキスト提供のため
承認の前にUIを示します

176
00:13:31,678 --> 00:13:36,416
そのためにHealthStoreで
このAPIを呼び出し―

177
00:13:37,317 --> 00:13:38,819
エラーを処理します

178
00:13:40,587 --> 00:13:43,857
依頼ステータスの要求により―

179
00:13:44,091 --> 00:13:48,795
承認依頼の前に
UIを示すことができます

180
00:13:52,399 --> 00:13:56,837
アクセスを希望するデータには―

181
00:13:56,937 --> 00:13:59,840
複数のタイプがあるかもしれません

182
00:14:00,073 --> 00:14:03,110
リサーチアプリケーションなら―

183
00:14:03,844 --> 00:14:09,383
結果が偏らないよう
総合的なタイプが必要です

184
00:14:11,084 --> 00:14:17,524
Info.plistの新たなキーで
タイプを特定できます

185
00:14:18,258 --> 00:14:23,130
このタイプへのアクセスを
許可しなければ―

186
00:14:23,630 --> 00:14:26,934
新しい要求タイプの
エラーに戻ります

187
00:14:27,067 --> 00:14:30,237
そして対応方法を決定し

188
00:14:30,471 --> 00:14:35,108
このデータがなければ
続けられないと説明します

189
00:14:38,712 --> 00:14:44,852
Info.plistに閲覧権限キーを
加えたら実行できます

190
00:14:45,853 --> 00:14:51,024
アレルギー 症状 予防注射を
特定しています

191
00:14:53,293 --> 00:14:57,397
そして新たなエラーを
処理します

192
00:15:00,667 --> 00:15:06,306
これを賢く使い
アプリケーション機能を―

193
00:15:06,406 --> 00:15:09,476
限定しないでください

194
00:15:09,877 --> 00:15:14,548
共有するデータ量にかかわらず
多くのユーザに―

195
00:15:14,748 --> 00:15:17,751
恩恵を受けさせたいはずです

196
00:15:21,855 --> 00:15:24,324
これが承認フローです

197
00:15:24,625 --> 00:15:27,427
注目したい点があります

198
00:15:28,395 --> 00:15:32,232
データにアクセスしたいなら―

199
00:15:32,332 --> 00:15:35,269
まず毎回 承認依頼が必要です

200
00:15:35,636 --> 00:15:42,176
新しいデータが入ると
ユーザは承認シートを確認します

201
00:15:42,810 --> 00:15:46,113
ですので
許可シートを提示しましょう

202
00:15:48,081 --> 00:15:52,519
必要なデータだけ
要求してください

203
00:15:54,221 --> 00:15:58,458
最後に新しいAPIの利用を
検討してください

204
00:15:58,692 --> 00:16:04,064
コンテキストを提供し
承認のタイミングを計れます

205
00:15:58,692 --> 00:16:04,064
コンテキストを提供し
承認のタイミングを計れます

206
00:16:07,467 --> 00:16:10,604
では同僚のペイトンが―

207
00:16:10,704 --> 00:16:13,273
アプリケーションを紹介します

208
00:16:13,474 --> 00:16:14,174
ありがとう

209
00:16:14,308 --> 00:16:15,442
（拍手）

210
00:16:16,243 --> 00:16:17,244
ありがとう

211
00:16:17,678 --> 00:16:21,181
これは登山者向けの
アプリケーションです

212
00:16:21,615 --> 00:16:24,718
HealthKitを使って―

213
00:16:24,818 --> 00:16:28,522
ウォーキングやハイキングを
管理します

214
00:16:28,889 --> 00:16:31,992
広範囲に及ぶ市場調査の結果

215
00:16:32,092 --> 00:16:35,963
登山者は山へ旅行する者だと
判断しました

216
00:16:36,063 --> 00:16:40,334
旅行者は予防接種の状況を
知るべきです

217
00:16:40,434 --> 00:16:43,136
よって 推移特性により―

218
00:16:43,370 --> 00:16:46,773
登山者は予防接種の状況を
知るべきです

219
00:16:47,241 --> 00:16:52,946
そのため 予防接種の
ダッシュボードを制作中です

220
00:16:53,247 --> 00:16:55,582
タップしてみます

221
00:16:56,950 --> 00:16:59,820
これがダッシュボードです

222
00:16:59,920 --> 00:17:03,824
ワクチンの接種状況が
表示されます

223
00:16:59,920 --> 00:17:03,824
ワクチンの接種状況が
表示されます

224
00:17:03,991 --> 00:17:08,161
表示名で使うのは
HKClinicalRecordsです

225
00:17:08,628 --> 00:17:12,098
ヘルスケアレコードの権限を
追加しました

226
00:17:12,199 --> 00:17:17,871
Purpose Stringを作って
データの使用目的を示します

227
00:17:18,505 --> 00:17:21,340
ダッシュボードを実行します

228
00:17:21,775 --> 00:17:25,612
ImmunizationsViewControllerで
タブが動きます

229
00:17:25,945 --> 00:17:29,416
アプリケーションを
使う時は常に―

230
00:17:29,516 --> 00:17:33,754
承認依頼を出すことが基本です

231
00:17:34,054 --> 00:17:37,824
その点 viewWillAppearは
優れています

232
00:17:39,092 --> 00:17:43,464
接種記録のサンプルに
興味があることを―

233
00:17:43,931 --> 00:17:46,533
ここで最初に明記します

234
00:17:46,967 --> 00:17:48,035
次に―

235
00:17:49,870 --> 00:17:52,706
requestAuthorizationを
呼び出します

236
00:17:53,340 --> 00:17:58,312
成功したかどうかの確認や
エラー処理をします

237
00:17:59,379 --> 00:18:01,949
最終的に承認されたら―

238
00:17:59,379 --> 00:18:01,949
最終的に承認されたら―

239
00:18:02,049 --> 00:18:05,619
接種メソッドに
クエリを実行します

240
00:18:06,820 --> 00:18:10,691
ここでサンプルクエリを作ります

241
00:18:11,024 --> 00:18:14,561
サンプルリターンを繰り返して―

242
00:18:14,661 --> 00:18:18,432
私のデータソースへパスします

243
00:18:21,468 --> 00:18:23,937
これがサンプルクエリです

244
00:18:24,037 --> 00:18:26,974
接種記録のサンプルを使います

245
00:18:28,141 --> 00:18:32,146
ユーザの全ての記録が要るので
属性はなし

246
00:18:32,479 --> 00:18:34,915
同じ理由で―

247
00:18:35,082 --> 00:18:38,185
制限もかけません

248
00:18:38,986 --> 00:18:42,956
順番は問わないので
ソートはしません

249
00:18:43,457 --> 00:18:46,126
結果を確認し―

250
00:18:46,226 --> 00:18:49,830
エラーがあれば処理します

251
00:18:50,797 --> 00:18:53,867
次にサンプルを繰り返し―

252
00:18:54,334 --> 00:18:58,038
表示名で
データソースにパスします

253
00:19:00,440 --> 00:19:02,476
データソースの名前で―

254
00:19:02,910 --> 00:19:04,678
メインキューに飛びます

255
00:19:04,978 --> 00:19:08,882
そしてReload UIメソッドを
呼び出します

256
00:19:10,083 --> 00:19:14,555
HealthStoreで
サンプルクエリを実行します

257
00:19:15,089 --> 00:19:17,824
これで全部なので
やってみましょう

258
00:19:21,028 --> 00:19:25,299
トレーニングログが表示され
予防接種のタブをタップ

259
00:19:25,399 --> 00:19:28,168
承認シートが提示されます

260
00:19:28,268 --> 00:19:30,737
データの使用方法を―

261
00:19:31,138 --> 00:19:34,274
ユーザに説明しています

262
00:19:34,908 --> 00:19:36,276
続けてタップ

263
00:19:37,110 --> 00:19:42,182
好みに従いカテゴリの
許可か拒否を選べます

264
00:19:42,950 --> 00:19:46,620
この画面にはPurpose Stringと
プライバシーポリシーへの

265
00:19:46,720 --> 00:19:49,323
リンクも記載されています

266
00:19:49,857 --> 00:19:52,726
“全てを選択”ボタンはなく―

267
00:19:52,826 --> 00:19:56,563
カテゴリを一つ一つ
選択しなければなりません

268
00:19:57,231 --> 00:19:59,366
ではデモとして―

269
00:19:59,466 --> 00:20:03,170
予防接種記録を共有します

270
00:19:59,466 --> 00:20:03,170
予防接種記録を共有します

271
00:20:03,270 --> 00:20:07,508
Ask Before Sharingを
デフォルトで残し―

272
00:20:07,708 --> 00:20:09,076
“完了”をタップ

273
00:20:10,244 --> 00:20:14,248
ユーザの全ての予防接種記録が
表示されます

274
00:20:14,681 --> 00:20:15,249
そして…

275
00:20:15,349 --> 00:20:20,921
（拍手）

276
00:20:21,021 --> 00:20:27,794
FHIRのおかげでより多くの
医療記録を引き出せます

277
00:20:27,895 --> 00:20:30,164
ジェイソンに代わります

278
00:20:31,532 --> 00:20:32,466
ありがとう

279
00:20:32,799 --> 00:20:33,700
さて―

280
00:20:34,201 --> 00:20:40,007
アプリケーションでの
承認依頼の方法や―

281
00:20:40,574 --> 00:20:45,279
HKClinicalRecordの表示名の
利用方法が分かりました

282
00:20:45,379 --> 00:20:49,383
ユーザが知る方法で
情報提供が可能です

283
00:20:53,620 --> 00:21:00,227
ではFHIRで何ができるのかを
お伝えしましょう

284
00:20:53,620 --> 00:21:00,227
ではFHIRで何ができるのかを
お伝えしましょう

285
00:21:02,596 --> 00:21:07,801
ユーザは一生のうちで
複数の医療機関と関わります

286
00:21:08,068 --> 00:21:12,773
ですが医療記録システムが
異なることも多く―

287
00:21:13,340 --> 00:21:17,211
必ずしも同じ手順で
データを表せません

288
00:21:17,644 --> 00:21:20,881
相互運用が難しい原因です

289
00:21:23,517 --> 00:21:29,556
そこでArgonaut Projectが
開始されます

290
00:21:30,023 --> 00:21:34,361
JSONやOAuth 2.0を通じて―

291
00:21:34,461 --> 00:21:40,300
FHIRを
使用できるようにします

292
00:21:40,667 --> 00:21:46,273
医療機関との安定した接続と
一般的な形式での―

293
00:21:46,373 --> 00:21:49,710
ダウンロードを可能にします

294
00:21:49,810 --> 00:21:53,413
そして複数の機関と関連づけます

295
00:21:55,983 --> 00:22:00,854
FHIRはアレルギーから
処方箋までカバーする―

296
00:21:55,983 --> 00:22:00,854
FHIRはアレルギーから
処方箋までカバーする―

297
00:22:00,954 --> 00:22:05,926
ヘルスケアデータの
巨大な母集団です

298
00:22:06,393 --> 00:22:12,499
これをリソースと呼ばれる
データに構造化します

299
00:22:13,033 --> 00:22:17,271
リソースには
それぞれタイプがあり―

300
00:22:17,371 --> 00:22:19,506
全ヘルスケアデータに該当します

301
00:22:21,742 --> 00:22:23,977
選んだ８つのタイプは―

302
00:22:24,077 --> 00:22:28,849
Argonaut Projectで
定義されています

303
00:22:29,283 --> 00:22:34,254
これを７つの
クリニカルタイプに分けます

304
00:22:35,089 --> 00:22:38,325
カテゴリに基づき“診察”を―

305
00:22:38,525 --> 00:22:42,729
検査結果とバイタルサインに
振り分けます

306
00:22:43,263 --> 00:22:49,303
複数の薬物リソースを
“薬物治療”に入れます

307
00:22:52,039 --> 00:22:56,210
つまりFHIRはJSONで
データを表現し―

308
00:22:56,343 --> 00:23:00,981
全てのFHIRリソースで
キープロパティがあります

309
00:22:56,343 --> 00:23:00,981
全てのFHIRリソースで
キープロパティがあります

310
00:23:01,748 --> 00:23:03,951
リソースタイプは―

311
00:23:04,184 --> 00:23:06,386
“診察”で見ます

312
00:23:07,387 --> 00:23:12,726
そして検査結果や
バイタルサインを知らせます

313
00:23:15,195 --> 00:23:19,633
全てのリソースタイプに
IDがあります

314
00:23:20,968 --> 00:23:23,804
リソースを特定できますが―

315
00:23:23,904 --> 00:23:28,675
該当する医療機関の
ドメイン内のみで―

316
00:23:28,776 --> 00:23:30,911
固有な点にご注意ください

317
00:23:35,415 --> 00:23:39,753
FHIRの基盤はコーディングです

318
00:23:41,021 --> 00:23:45,492
外部の
コーディングシステムで―

319
00:23:45,959 --> 00:23:49,096
IDやコードを参照できます

320
00:23:49,496 --> 00:23:53,400
FHIR特有のシステムは多数あり―

321
00:23:53,567 --> 00:23:59,273
医療記録内の
ある項目について調べたり

322
00:23:59,373 --> 00:24:05,312
特定の項目について 複数の
医療機関を横断的に検索できます

323
00:23:59,373 --> 00:24:05,312
特定の項目について 複数の
医療機関を横断的に検索できます

324
00:24:07,948 --> 00:24:11,084
カテゴリのコーディングです

325
00:24:11,218 --> 00:24:14,087
検査結果だと分かります

326
00:24:16,323 --> 00:24:20,861
計測中の場合のコードもあります

327
00:24:22,596 --> 00:24:27,634
これはLOINCで定義される
血糖です

328
00:24:27,734 --> 00:24:31,004
データベースで検索すると―

329
00:24:31,138 --> 00:24:34,007
別名や詳細が分かります

330
00:24:36,910 --> 00:24:41,281
もちろん診察なので
数値もあります

331
00:24:41,381 --> 00:24:43,851
これは60mg/dlです

332
00:24:44,051 --> 00:24:46,253
単位もコーディングされ―

333
00:24:46,353 --> 00:24:50,457
状況を総合的に理解できます

334
00:24:54,361 --> 00:24:58,465
FHIRリソースには
多くの追加データも存在します

335
00:24:58,665 --> 00:25:03,971
Argonaut Projectの説明書も
ご一読ください

336
00:24:58,665 --> 00:25:03,971
Argonaut Projectの説明書も
ご一読ください

337
00:25:04,071 --> 00:25:06,707
最後に詳細をお知らせします

338
00:25:08,909 --> 00:25:13,180
HKFHIRResourceで
FHIRを設計します

339
00:25:13,914 --> 00:25:19,953
完全な生データにアクセスし
キープロパティを提供します

340
00:25:21,688 --> 00:25:25,125
リソースタイプやIDといった
共通要素を―

341
00:25:25,993 --> 00:25:27,528
表に出します

342
00:25:30,264 --> 00:25:35,536
SwiftやJSONで
データにアクセス可能です

343
00:25:35,969 --> 00:25:41,041
私のCodableの構造体と
診察を定義しています

344
00:25:41,775 --> 00:25:45,345
前に見た値を
引き出すために使います

345
00:25:46,947 --> 00:25:51,351
APIを通じてFHIRリソースを
共有するだけで―

346
00:25:51,452 --> 00:25:55,289
適切にデータを構築できます

347
00:25:58,192 --> 00:26:02,930
HKClinicalRecordの作業を
楽にするのは―

348
00:25:58,192 --> 00:26:02,930
HKClinicalRecordの作業を
楽にするのは―

349
00:26:03,163 --> 00:26:08,268
データをリソースタイプ別に
検索する述語関数です

350
00:26:08,368 --> 00:26:13,407
処方箋かFHIRの薬剤情報を
調べます

351
00:26:15,542 --> 00:26:19,079
リソースタイプやIDで―

352
00:26:19,179 --> 00:26:23,283
記録を特定できる
述語関数もあります

353
00:26:23,684 --> 00:26:28,755
FHIRリソース同士で
参照できるのは便利です

354
00:26:29,022 --> 00:26:33,460
例えば薬剤で
治療の状況を参照します

355
00:26:37,097 --> 00:26:41,668
ではFHIRを使う際に
必要な点を考えます

356
00:26:42,703 --> 00:26:47,107
まずFHIRには
独自の日付があります

357
00:26:47,441 --> 00:26:51,612
処方箋には処方日があります

358
00:26:51,712 --> 00:26:54,781
症状には発症日や
症状が消えた日―

359
00:26:54,882 --> 00:26:58,952
最初に処方箋が
出された日もあります

360
00:26:59,887 --> 00:27:02,990
リソースタイプ別に
直接アクセスして―

361
00:26:59,887 --> 00:27:02,990
リソースタイプ別に
直接アクセスして―

362
00:27:03,090 --> 00:27:06,226
FHIRを使ってください

363
00:27:06,727 --> 00:27:10,864
HKSampleのスーパークラスの
開始日と終了日は―

364
00:27:10,964 --> 00:27:15,102
リソースの最初の追加日が
設定されます

365
00:27:18,138 --> 00:27:21,241
ヘルスケアレコードの
特定の際には―

366
00:27:21,341 --> 00:27:24,611
リソースタイプやIDを使います

367
00:27:24,711 --> 00:27:28,949
更新は医療機関が行うので―

368
00:27:29,049 --> 00:27:32,186
生涯にわたって確認できます

369
00:27:34,888 --> 00:27:38,492
最後にFHIRとJSONは―

370
00:27:38,592 --> 00:27:42,596
数値の精度の上で
完全に一致はしません

371
00:27:43,263 --> 00:27:48,502
FHIRは小数位で桁数に
重要性を見いだしますが―

372
00:27:48,602 --> 00:27:52,973
SwiftやJSONでは失われます

373
00:27:53,607 --> 00:27:59,112
基本的にこの情報を
アクセス可能にするなら―

374
00:27:59,713 --> 00:28:03,917
SwiftやJSONは
不適切かもしれません

375
00:27:59,713 --> 00:28:03,917
SwiftやJSONは
不適切かもしれません

376
00:28:04,952 --> 00:28:07,888
では新しいAPIについて―

377
00:28:07,988 --> 00:28:11,391
ペイトンに語ってもらいます

378
00:28:12,726 --> 00:28:18,098
（拍手）

379
00:28:19,066 --> 00:28:20,067
ありがとう

380
00:28:20,601 --> 00:28:23,537
予防接種のダッシュボードです

381
00:28:23,737 --> 00:28:26,940
HealthKitで接種記録を取ります

382
00:28:27,040 --> 00:28:32,079
この段階でユーザが
内容を伝えるのは困難です

383
00:28:33,680 --> 00:28:37,618
それをチェックリストで解決します

384
00:28:37,851 --> 00:28:42,089
ユーザは要約を
分かりやすい言葉で閲覧できます

385
00:28:43,090 --> 00:28:46,693
混合ワクチンが免疫を作って―

386
00:28:46,793 --> 00:28:51,432
病気を予防することを
知る必要があります

387
00:28:53,000 --> 00:28:57,905
病気やワクチンの名称は
医療機関によって違います

388
00:28:58,238 --> 00:29:01,241
そこでFHIRの相互運用が
作動します

389
00:28:58,238 --> 00:29:01,241
そこでFHIRの相互運用が
作動します

390
00:29:01,842 --> 00:29:05,946
FHIRは定義済みのコードを使い―

391
00:29:06,046 --> 00:29:08,115
物事を特定します

392
00:29:09,449 --> 00:29:12,519
FHIRの説明書を見て―

393
00:29:12,619 --> 00:29:17,191
水ぼうそうワクチンで
特定するアルゴリズムです

394
00:29:18,926 --> 00:29:22,129
まずJSONで接種記録を取ります

395
00:29:23,297 --> 00:29:28,869
それをデシリアライズし
CVXでコードを引き出します

396
00:29:29,303 --> 00:29:32,439
CVXは予防接種のための
一般的なコーディングで

397
00:29:32,539 --> 00:29:35,943
領域が異なる薬剤は
別システムです

398
00:29:37,177 --> 00:29:41,615
水ぼうそうを予防する
ワクチンのリストと―

399
00:29:41,715 --> 00:29:45,786
CVXコードを比較してみます

400
00:29:45,886 --> 00:29:50,724
一致すると 水ぼうそうの横が
チェックされます

401
00:29:52,226 --> 00:29:54,695
JSONの接種記録について―

402
00:29:58,031 --> 00:30:02,169
構造はリソースタイプで
始まります

403
00:29:58,031 --> 00:30:02,169
構造はリソースタイプで
始まります

404
00:30:04,471 --> 00:30:06,473
ワクチンコードです

405
00:30:07,341 --> 00:30:10,410
中にコード配列が含まれます

406
00:30:11,445 --> 00:30:12,880
多数あるので―

407
00:30:13,514 --> 00:30:17,851
検索して
CVXを探す必要があります

408
00:30:18,185 --> 00:30:21,155
画面の例ではNDCなので―

409
00:30:21,688 --> 00:30:24,424
CVXが見つかるまで探します

410
00:30:25,058 --> 00:30:27,795
手元のコードを見ます

411
00:30:28,262 --> 00:30:31,465
MMRVワクチンだと分かります

412
00:30:33,600 --> 00:30:36,437
JSONの接種記録の構造です

413
00:30:37,037 --> 00:30:38,672
実際にやってみます

414
00:30:40,140 --> 00:30:43,243
ViewControllerに戻ります

415
00:30:43,777 --> 00:30:47,815
事前にいくつか処理をしています

416
00:30:48,515 --> 00:30:53,153
showChecklistの
プロパティで例示します

417
00:30:54,454 --> 00:30:58,292
チェックリストに
データを追加します

418
00:30:59,193 --> 00:31:02,196
ワクチンのメソッドへの
クエリです

419
00:30:59,193 --> 00:31:02,196
ワクチンのメソッドへの
クエリです

420
00:31:02,729 --> 00:31:07,134
matchCodedVaccineを
呼び出し―

421
00:31:07,568 --> 00:31:11,338
サンプルが
FHIRのリソースならパスです

422
00:31:11,972 --> 00:31:13,474
やってみます

423
00:31:16,343 --> 00:31:19,780
画面はmatchCodedVaccineです

424
00:31:19,880 --> 00:31:23,784
FHIRリソースデータを
デシリアライズし―

425
00:31:24,351 --> 00:31:27,821
ワクチンコードで
CVXを検索します

426
00:31:27,921 --> 00:31:32,726
そして異なる疾患のリストと
比較します

427
00:31:33,861 --> 00:31:37,965
デシリアライズする方法は
自由に選べます

428
00:31:38,098 --> 00:31:40,767
今日はSwift Codableにします

429
00:31:41,001 --> 00:31:45,572
興味のあるキーを求めて
Codableを定義します

430
00:31:48,141 --> 00:31:49,209
できました

431
00:31:49,510 --> 00:31:52,546
ワクチンコードがあり―

432
00:31:53,247 --> 00:31:56,417
それはコード列を
持っています

433
00:31:56,917 --> 00:32:00,988
ワクチンのコーディングは
システムとコードです

434
00:31:56,917 --> 00:32:00,988
ワクチンのコーディングは
システムとコードです

435
00:32:02,623 --> 00:32:06,627
JSONデコーダの例示です

436
00:32:07,294 --> 00:32:11,999
これでFHIRリソースの
データをデコードします

437
00:32:13,767 --> 00:32:17,504
コーディングを繰り返して―

438
00:32:18,472 --> 00:32:21,542
システムはCVXか確認します

439
00:32:24,078 --> 00:32:28,382
コードをパスして
データソースに記録します

440
00:32:28,782 --> 00:32:34,054
全てのメソッドで
疾患別のコードと比較します

441
00:32:34,154 --> 00:32:38,892
一致したら その疾患のUIで―

442
00:32:39,359 --> 00:32:41,628
記録を残します

443
00:32:43,030 --> 00:32:47,334
ワクチンのチェックリストを
作ってみます

444
00:32:48,235 --> 00:32:49,803
トレーニングログです

445
00:32:50,037 --> 00:32:52,539
ワクチンのタブをタップ

446
00:32:53,440 --> 00:32:57,110
ワクチンの
チェックリストができました

447
00:32:57,211 --> 00:33:01,982
（拍手）

448
00:32:57,211 --> 00:33:01,982
（拍手）

449
00:33:03,116 --> 00:33:05,853
FHIRの問題解決例です

450
00:33:06,386 --> 00:33:12,659
ユーザ同意について
ジェイソンからお話しします

451
00:33:13,260 --> 00:33:14,294
ジェイソン

452
00:33:15,262 --> 00:33:19,500
（拍手）

453
00:33:19,766 --> 00:33:20,634
ありがとう

454
00:33:20,801 --> 00:33:21,935
ペイトンから―

455
00:33:23,036 --> 00:33:27,908
FHIRデータの
呼び出し方の紹介でした

456
00:33:28,075 --> 00:33:33,013
ヘルスケアレコードについて
重要な情報を提供する―

457
00:33:33,113 --> 00:33:37,151
コーディングの活用の話題も
ありました

458
00:33:39,920 --> 00:33:46,827
ユーザのプライバシー保護について
少し考えてみたいと思います

459
00:33:47,494 --> 00:33:50,998
これらのデータは
とてもデリケートです

460
00:33:51,698 --> 00:33:55,068
徹底的にプライバシーを保護し―

461
00:33:55,235 --> 00:34:01,308
直接医療機関へ
接続できるようにしています

462
00:33:55,235 --> 00:34:01,308
直接医療機関へ
接続できるようにしています

463
00:34:01,875 --> 00:34:06,146
情報はデバイスに
ダウンロードでき―

464
00:34:06,480 --> 00:34:09,248
HealthKitで
安全に保管されます

465
00:34:09,817 --> 00:34:12,753
データへのアクセスには―

466
00:34:12,853 --> 00:34:14,955
管理ツールも提供します

467
00:34:16,389 --> 00:34:18,659
ユーザが求めるのは―

468
00:34:18,759 --> 00:34:22,996
個人データの慎重な取り扱いです

469
00:34:25,331 --> 00:34:30,603
どんな選択をしても
個人に直接影響を与えます

470
00:34:31,405 --> 00:34:33,974
プラスの影響です

471
00:34:34,074 --> 00:34:37,777
そのために このAPIを選びました

472
00:34:38,378 --> 00:34:40,647
ですが悪影響も否定できません

473
00:34:41,014 --> 00:34:44,551
データが扱えなくなったり―

474
00:34:44,751 --> 00:34:48,489
同意なく
共有されたりしたら―

475
00:34:49,255 --> 00:34:54,460
誠意を見せて
信頼関係を構築します

476
00:34:54,928 --> 00:34:58,732
データに関する
ポリシーを提示し―

477
00:34:59,500 --> 00:35:01,769
対応を知らせるのです

478
00:34:59,500 --> 00:35:01,769
対応を知らせるのです

479
00:35:02,669 --> 00:35:08,108
これはアプリケーションを
作った時点で始まっています

480
00:35:08,208 --> 00:35:10,711
そしてデータを取り扱う限り―

481
00:35:10,811 --> 00:35:14,748
それは どの段階でも続くのです

482
00:35:16,149 --> 00:35:20,053
例えばデータ管理の詳細を―

483
00:35:20,254 --> 00:35:23,223
ユーザに伝えることは大事です

484
00:35:23,557 --> 00:35:26,760
リテンションポリシーの公表や―

485
00:35:26,860 --> 00:35:32,833
データを削除できる
ツールの提供も行うべきです

486
00:35:35,636 --> 00:35:38,939
最終的には
ユースケースに比例した―

487
00:35:39,339 --> 00:35:42,042
データを依頼するべきです

488
00:35:42,376 --> 00:35:45,412
必要以上のデータを求めないこと

489
00:35:48,382 --> 00:35:51,251
木曜の午後４時からの
セッション―

490
00:35:51,351 --> 00:35:55,155
Better Apps Through
Better Privacyもお薦めです

491
00:35:55,255 --> 00:35:58,458
エコシステムにも触れていて―

492
00:35:58,559 --> 00:36:00,561
いい気づきを得られます

493
00:35:58,559 --> 00:36:00,561
いい気づきを得られます

494
00:36:01,228 --> 00:36:06,033
新しいサンプルタイプを
見てきました

495
00:36:06,500 --> 00:36:11,438
entitlementやprivacy stringの
配列や―

496
00:36:11,538 --> 00:36:15,008
承認依頼などを理解しました

497
00:36:17,177 --> 00:36:23,217
FHIRをもっと知りたいと
思ってくれたらうれしいです

498
00:36:24,785 --> 00:36:29,656
ユーザのプライバシーを
守る方法も伝えました

499
00:36:35,629 --> 00:36:41,435
皆さんのアプリケーションに
驚き続けたいです

500
00:36:41,568 --> 00:36:45,839
ユーザに大きな権限を
与えるものです

501
00:36:47,341 --> 00:36:52,012
これはHealthKitとの長い旅です

502
00:36:52,112 --> 00:36:57,151
ResearchKitやCareKitとの旅は
まだ続きます

503
00:36:57,818 --> 00:37:01,488
Health RecordsやHealthKitと―

504
00:36:57,818 --> 00:37:01,488
Health RecordsやHealthKitと―

505
00:37:01,922 --> 00:37:06,326
皆さんとの旅が続くことに
気持ちが弾みます

506
00:37:06,960 --> 00:37:10,330
今後の展開が
楽しみでなりません

507
00:37:13,801 --> 00:37:19,106
お話しした資料は
画面のURLで入手できます

508
00:37:19,573 --> 00:37:24,545
この後すぐ
健康に関するラボを行います

509
00:37:24,645 --> 00:37:28,148
新しいAPIを始めましょう

510
00:37:28,782 --> 00:37:33,487
明日の朝 同僚のニハリカと
カリームが―

511
00:37:33,587 --> 00:37:36,390
新たなワークアウトをご紹介します

512
00:37:36,823 --> 00:37:40,828
また明日の夜は
懇親会を予定しています

513
00:37:40,928 --> 00:37:45,466
お互いを知る
いい機会ですので―

514
00:37:45,599 --> 00:37:47,868
ぜひ ご参加ください

515
00:37:49,803 --> 00:37:53,340
他のセッションも
どうぞ お楽しみを

516
00:37:53,440 --> 00:37:57,111
（拍手）