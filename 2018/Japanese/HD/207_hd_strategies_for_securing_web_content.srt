
1
00:00:06,974 --> 00:00:16,450
(音楽)

2
00:00:22,055 --> 00:00:27,895
(拍手)

3
00:00:27,995 --> 00:00:33,300
SafariとWebKit担当の
ジョン･ビランデルです

4
00:00:34,535 --> 00:00:38,672
今日はウェブコンテンツの
セキュリティの話をします

5
00:00:38,805 --> 00:00:43,343
スウェーデン人からの
アドバイスと捉えてください

6
00:00:44,978 --> 00:00:50,150
“ウェブコンテンツ”とは
あまりにも広義すぎますが

7
00:00:50,284 --> 00:00:53,820
皆さんに関係のある話です

8
00:00:54,221 --> 00:00:57,991
Appの様々な面で
使用されています

9
00:00:58,258 --> 00:01:02,863
たとえば広告やログインフロー
スプラッシュスクリーン

10
00:00:58,258 --> 00:01:02,863
たとえば広告やログインフロー
スプラッシュスクリーン

11
00:01:02,963 --> 00:01:06,567
Safari View Controllerを
Appに使用していたり

12
00:01:06,667 --> 00:01:10,370
AppのUIがWebViewに
レンダリングされているかも

13
00:01:11,071 --> 00:01:15,475
ブラウザにレンダリングされたり
ウェブAppとAppをつなぐ―

14
00:01:16,276 --> 00:01:22,416
コンパニオンウェブAppを
使用することもあるでしょう

15
00:01:22,716 --> 00:01:27,454
従って セキュリティが
非常に重要となります

16
00:01:27,588 --> 00:01:31,024
ビジネスの継続や
お客様満足度の向上―

17
00:01:31,225 --> 00:01:33,560
競争力強化のためです

18
00:01:33,861 --> 00:01:39,333
セキュリティの確保が
生き残りの条件ともなります

19
00:01:40,367 --> 00:01:42,302
今日の話の中では―

20
00:01:43,270 --> 00:01:47,541
まず 通信や接続の
セキュリティの話をします

21
00:01:47,708 --> 00:01:53,981
何よりも先に行うべき基礎を
私が簡単に説明します

22
00:01:54,381 --> 00:01:57,284
セキュリティ確保は
ビジネスの要です

23
00:01:57,885 --> 00:02:00,921
次にクロスオリジン
ロックダウンについて―

24
00:01:57,885 --> 00:02:00,921
次にクロスオリジン
ロックダウンについて―

25
00:02:01,121 --> 00:02:07,227
WebKitで使用可能な技術を
ご紹介します

26
00:02:07,528 --> 00:02:10,464
お持ちの
ウェブコンテンツを―

27
00:02:10,697 --> 00:02:15,802
より高いセキュリティで
守るのに役立ちます

28
00:02:15,969 --> 00:02:19,506
我々は代わりに
行えないため―

29
00:02:19,606 --> 00:02:23,143
オプトインは
ご自身でしてもらいます

30
00:02:23,877 --> 00:02:29,049
セキュリティを学ぶことに
疑問がある方のため―

31
00:02:29,383 --> 00:02:35,489
実際の攻撃シナリオや
その防御策もご紹介します

32
00:02:35,589 --> 00:02:38,258
皆さんの
ウェブコンテンツを―

33
00:02:38,358 --> 00:02:40,661
守る方法が理解できます

34
00:02:41,195 --> 00:02:47,067
通信のセキュリティは
皆さんの身近な問題でしょう

35
00:02:47,734 --> 00:02:54,441
HTTPSとWSSへ移行する際の
セキュリティのことです

36
00:02:55,475 --> 00:02:58,846
HTTPとWSは
存在し続けていますが―

37
00:02:58,946 --> 00:03:03,951
使い続けるのは
避けた方がいいでしょう

38
00:02:58,946 --> 00:03:03,951
使い続けるのは
避けた方がいいでしょう

39
00:03:04,184 --> 00:03:06,620
セキュリティのためです

40
00:03:07,020 --> 00:03:12,993
ブラウザやAppを通して
表示するコンテンツは―

41
00:03:13,327 --> 00:03:16,296
信頼できるサーバを
経由させます

42
00:03:16,530 --> 00:03:19,867
誰かが操作するのを
防ぐためです

43
00:03:20,701 --> 00:03:23,704
メインコンテンツを
HTTPSへ移行するのを

44
00:03:23,871 --> 00:03:27,007
支援する技術をご紹介します

45
00:03:27,407 --> 00:03:30,978
単に移行するのは
もちろん―

46
00:03:31,245 --> 00:03:35,782
より厳格なセキュリティの
HSTSを使いましょう

47
00:03:36,483 --> 00:03:42,189
HSTSとはWebKitのような
レンダリングエンジンで―

48
00:03:42,656 --> 00:03:47,461
HTTPSを経由するよう
指示する役割を果たします

49
00:03:47,761 --> 00:03:51,265
HTTPへの
接続指示があっても―

50
00:03:51,365 --> 00:03:54,301
自動的にHTTPSに変換します

51
00:03:54,568 --> 00:03:58,372
プレーンテキスト接続は
行いません

52
00:03:59,173 --> 00:04:04,044
この設定を有効とする
期間も指定できます

53
00:03:59,173 --> 00:04:04,044
この設定を有効とする
期間も指定できます

54
00:04:04,311 --> 00:04:07,114
通常は半年先まで指定します

55
00:04:08,348 --> 00:04:11,652
次に 自分の管理外の
サーバから―

56
00:04:11,752 --> 00:04:14,888
コンテンツを読み込む場合です

57
00:04:15,122 --> 00:04:20,661
Upgrade Insecure Requestは

58
00:04:21,394 --> 00:04:25,732
ブラウザにリンクを
アップグレードするよう指示

59
00:04:25,833 --> 00:04:29,303
セキュリティの低い
サーバからの情報も―

60
00:04:29,403 --> 00:04:35,509
アップグレードするよう
指示してくれる仕組みです

61
00:04:36,343 --> 00:04:40,814
以上２点により
安全な接続が可能となります

62
00:04:42,082 --> 00:04:46,653
またcookieの
セキュリティ確保も必要です

63
00:04:46,787 --> 00:04:49,623
cookieのヘッダーに―

64
00:04:49,723 --> 00:04:51,892
セミコロンと
secureと入れます

65
00:04:52,159 --> 00:04:55,629
これにより
安全な場合のみ―

66
00:04:55,863 --> 00:04:59,766
cookieが送られるよう
指示できます

67
00:04:59,967 --> 00:05:03,837
プレーンテキストの指示が
あったとしても―

68
00:04:59,967 --> 00:05:03,837
プレーンテキストの指示が
あったとしても―

69
00:05:03,937 --> 00:05:06,306
cookieの情報は送られません

70
00:05:06,673 --> 00:05:11,879
接続の安全確保と共に
cookieの安全も不可欠です

71
00:05:13,046 --> 00:05:17,918
最後にApp特有の
セキュリティを説明します

72
00:05:18,385 --> 00:05:21,855
ATSという言葉を
ご存じでしょうか？

73
00:05:22,489 --> 00:05:24,992
iOS Appに対し―

74
00:05:25,292 --> 00:05:29,730
セキュリティの高い接続を
行うよう指示する機能です

75
00:05:30,397 --> 00:05:34,201
ウェブコンテンツの
セキュリティは―

76
00:05:34,301 --> 00:05:38,038
低い方がいいと
言う人もいます

77
00:05:38,739 --> 00:05:39,973
それではダメ

78
00:05:40,073 --> 00:05:46,046
任意のウェブコンテンツは
特にセキュリティが重要です

79
00:05:46,914 --> 00:05:50,317
通信の際のセキュリティの
次は―

80
00:05:50,417 --> 00:05:53,086
クロスオリジンロックダウンを
取り上げます

81
00:05:53,654 --> 00:05:58,225
“ロックダウン”と呼ぶ理由は
ウェブコンテンツの

82
00:05:58,325 --> 00:06:02,996
健全性や安全性を決めるのは
皆さん自身だからです

83
00:05:58,325 --> 00:06:02,996
健全性や安全性を決めるのは
皆さん自身だからです

84
00:06:03,197 --> 00:06:07,134
リスクを全て
取り締まることによって―

85
00:06:07,434 --> 00:06:10,604
希望どおりの
操作を可能とします

86
00:06:11,805 --> 00:06:17,544
まず クロスオリジンロードとは
何かについて説明します

87
00:06:17,978 --> 00:06:21,949
ウェブは
異なるサーバやオリジン―

88
00:06:22,049 --> 00:06:26,420
またはドメインからであっても

89
00:06:27,020 --> 00:06:29,556
一緒に組み込む特徴があります

90
00:06:30,390 --> 00:06:32,292
画像を例として挙げます

91
00:06:32,659 --> 00:06:35,696
ウェブ上のあらゆるサーバから

92
00:06:35,796 --> 00:06:38,832
画像を読み込むのが
クロスオリジンロード

93
00:06:39,466 --> 00:06:42,202
スクリプトも同様です

94
00:06:42,669 --> 00:06:48,141
元々の効力を保持したまま
読み込めるので―

95
00:06:48,242 --> 00:06:54,114
他のサーバからの場合は
注意が必要となります

96
00:06:54,281 --> 00:06:57,050
皆さんと同程度の力を
保有し―

97
00:06:57,217 --> 00:06:59,520
コンテンツを
所有するからです

98
00:06:59,987 --> 00:07:02,523
次にiframeの話をします

99
00:06:59,987 --> 00:07:02,523
次にiframeの話をします

100
00:07:02,656 --> 00:07:09,696
異なるドメインのサーバから
全ページを埋め込みます

101
00:07:09,796 --> 00:07:12,900
例を３つ挙げましょう

102
00:07:14,334 --> 00:07:18,772
このようなデータを守る
基本的な仕組みとして―

103
00:07:18,872 --> 00:07:24,044
セキュリティメカニズムが
20年以上前から存在します

104
00:07:24,144 --> 00:07:26,780
同一オリジンポリシーです

105
00:07:26,947 --> 00:07:31,185
実在するドメインで
例を挙げます

106
00:07:31,451 --> 00:07:35,656
画像を読み込む例と―

107
00:07:36,557 --> 00:07:39,493
スクリプトを読み込むCDN

108
00:07:39,860 --> 00:07:44,398
ソーシャルウィジェットの
iframeを挙げました

109
00:07:44,798 --> 00:07:51,071
“.example”とは
ウェブの例という意味です

110
00:07:51,338 --> 00:07:54,641
分かりにくければ
.comや.orgと考えてください

111
00:07:55,475 --> 00:08:00,013
クロスオリジンロードを
同一オリジンポリシーが管理

112
00:07:55,475 --> 00:08:00,013
クロスオリジンロードを
同一オリジンポリシーが管理

113
00:08:00,214 --> 00:08:02,950
画像などの各要素について―

114
00:08:03,050 --> 00:08:06,787
どこから読み込んだか
管理するのです

115
00:08:06,887 --> 00:08:09,189
何のための管理かって？

116
00:08:09,289 --> 00:08:13,727
コンテンツの基本的な
保護のためです

117
00:08:13,827 --> 00:08:18,232
コンテンツのiframeに
触れないようにしたり―

118
00:08:18,465 --> 00:08:22,302
書き加えたりしないように
するためです

119
00:08:22,603 --> 00:08:28,175
同一オリジンポリシーにより
コンテンツの中でも―

120
00:08:28,275 --> 00:08:31,245
異なるサーバのものを守ります

121
00:08:31,345 --> 00:08:35,082
コンテンツの加工を
防ぐためです

122
00:08:36,350 --> 00:08:39,119
同一オリジンポリシーとは

123
00:08:39,219 --> 00:08:42,089
２つのブラウザの
タブの調和と捉えられます

124
00:08:42,188 --> 00:08:47,361
一方のタブが他方の
様子を探ることはできません

125
00:08:47,794 --> 00:08:52,399
そこで同一オリジンポリシーが
役立つのです

126
00:08:53,734 --> 00:08:57,838
ではリスクを
どう取り締まるのか

127
00:08:58,138 --> 00:09:01,275
同一オリジンポリシーでは
不十分です

128
00:08:58,138 --> 00:09:01,275
同一オリジンポリシーでは
不十分です

129
00:09:01,508 --> 00:09:04,778
デフォルトへの
オプトインが必要です

130
00:09:04,978 --> 00:09:10,184
サブリソースの整合性から
取り掛かります

131
00:09:10,417 --> 00:09:14,221
scriptタグの
マークアップを変えるだけです

132
00:09:14,988 --> 00:09:18,325
次はコンテンツ
セキュリティポリシーで―

133
00:09:18,425 --> 00:09:21,061
ページ全体を守ります

134
00:09:21,295 --> 00:09:24,264
スクリプトを読み込む時―

135
00:09:24,431 --> 00:09:28,769
他のサーバからの
不要な情報は除外します

136
00:09:28,969 --> 00:09:32,573
次はサーバ構成についてです

137
00:09:32,873 --> 00:09:37,477
HTTPレスポンス
ヘッダーによる指示で―

138
00:09:37,578 --> 00:09:42,950
古いAPIサポートを
強いセキュリティに変えます

139
00:09:43,050 --> 00:09:45,485
不要なものは除外するのです

140
00:09:46,019 --> 00:09:49,890
サブリソースの整合性を
詳しく説明します

141
00:09:51,291 --> 00:09:53,160
この方法で―

142
00:09:53,260 --> 00:09:58,165
CDNからフレームワークを
読み込みます

143
00:09:58,732 --> 00:10:05,105
scriptタグはスクリプトを
取得するためのものです

144
00:09:58,732 --> 00:10:05,105
scriptタグはスクリプトを
取得するためのものです

145
00:10:05,372 --> 00:10:08,942
ウェブコンテンツを
正常に動かすため

146
00:10:09,209 --> 00:10:14,148
CDNを信頼して
スクリプトを取り出します

147
00:10:14,781 --> 00:10:21,889
しかし何らかの理由で
スクリプトに不備があると

148
00:10:22,389 --> 00:10:27,794
ウェブコンテンツが
不能となってしまいます

149
00:10:27,961 --> 00:10:30,597
理想のスクリプト入手のため―

150
00:10:30,931 --> 00:10:34,468
このようなscriptタグを
発信します

151
00:10:34,968 --> 00:10:38,639
ブラウザへの指示内容は―

152
00:10:38,739 --> 00:10:42,743
“JavaScriptに
取り込んだ内容を実行せよ”

153
00:10:43,010 --> 00:10:45,212
しかしより良い方法は―

154
00:10:45,312 --> 00:10:48,081
確実に
スクリプトを入手すること

155
00:10:48,515 --> 00:10:52,753
scriptタグにintegrity属性を
付与してもいいです

156
00:10:53,320 --> 00:10:58,458
チェックサムで確認します
SHA-256を使いましょう

157
00:10:58,559 --> 00:11:03,230
“このスクリプトを
CDNから取り出してくれ”

158
00:10:58,559 --> 00:11:03,230
“このスクリプトを
CDNから取り出してくれ”

159
00:11:03,831 --> 00:11:07,367
このように指示し
完全一致の場合に―

160
00:11:07,467 --> 00:11:08,836
実行させます

161
00:11:09,169 --> 00:11:12,005
これにより
ブラウザエンジンは―

162
00:11:12,105 --> 00:11:16,410
実行前にチェックサムと
比較します

163
00:11:17,110 --> 00:11:20,347
バージョンアップなどの
理由で―

164
00:11:20,447 --> 00:11:23,617
一致しない場合に
どうするのか

165
00:11:24,017 --> 00:11:28,121
このように追加の指示を
入れます

166
00:11:28,222 --> 00:11:31,258
ここではフレームワークを
求めます

167
00:11:31,692 --> 00:11:36,630
読み込みが成功したら
データを確認します

168
00:11:36,797 --> 00:11:41,335
データがない場合
自分のサーバに行き―

169
00:11:41,468 --> 00:11:44,638
そこから読み込みます

170
00:11:44,838 --> 00:11:51,411
正常に動くコンテンツや
サイトが手に入ります

171
00:11:51,945 --> 00:11:57,251
以上がサブリソースの
整合性の説明でした

172
00:11:57,451 --> 00:12:01,889
自分のページの
方針を決めるようなものです

173
00:11:57,451 --> 00:12:01,889
自分のページの
方針を決めるようなものです

174
00:12:02,523 --> 00:12:05,659
アーキテクチャポリシーです

175
00:12:05,759 --> 00:12:09,129
ソフトウェア
エンジニアなら―

176
00:12:09,229 --> 00:12:13,467
ディペンデンシーを
管理したいでしょう

177
00:12:14,501 --> 00:12:18,071
HTTPレスポンスヘッダーに
話を戻します

178
00:12:18,305 --> 00:12:20,874
自分のサーバから
発信する場合―

179
00:12:20,974 --> 00:12:23,944
このヘッダーを
付け足します

180
00:12:24,044 --> 00:12:29,983
ページ管理についての
方針などを指示するのです

181
00:12:30,551 --> 00:12:33,887
まずはデフォルトソースの
指示です

182
00:12:33,987 --> 00:12:39,059
遠隔でコンテンツを
読み込む際のサーバは―

183
00:12:39,526 --> 00:12:42,830
自分のもののみと設定します

184
00:12:42,930 --> 00:12:45,299
以上で設定は完了です

185
00:12:45,399 --> 00:12:51,505
これで設定した方針と
一致しない動作は防げます

186
00:12:51,605 --> 00:12:58,812
他のサーバからの読み込みも
WebKitに拒否されます

187
00:12:59,680 --> 00:13:04,518
No inlineという
コメントも入れました

188
00:12:59,680 --> 00:13:04,518
No inlineという
コメントも入れました

189
00:13:04,685 --> 00:13:10,691
これでインラインスクリプトは
許可されません

190
00:13:11,191 --> 00:13:14,194
アーキテクチャポリシーと
呼ぶのは

191
00:13:14,294 --> 00:13:20,167
マークアップやCSSファイルなどの
スタイリングから

192
00:13:21,301 --> 00:13:24,872
ロジックを複数ファイルに
分けていくためです

193
00:13:26,240 --> 00:13:31,345
cdn.exampleから
スクリプトを読み込む時

194
00:13:31,445 --> 00:13:37,818
デフォルトソースから行くと
禁止されてしまいます

195
00:13:38,085 --> 00:13:41,922
ここでホワイトリストメカニズムを
使用します

196
00:13:42,322 --> 00:13:47,227
cdn.exampleを
開くように指示することで―

197
00:13:47,327 --> 00:13:49,630
スクリプトを
読み込むことができます

198
00:13:49,730 --> 00:13:53,400
自身のサーバと
cdn.example以外からは

199
00:13:53,500 --> 00:13:54,835
読み込み拒否されます

200
00:13:55,802 --> 00:13:59,807
ソーシャルメディア
プラグインを―

201
00:13:59,907 --> 00:14:02,209
使いたいとします

202
00:13:59,907 --> 00:14:02,209
使いたいとします

203
00:14:02,309 --> 00:14:05,345
フレームソースを追加します

204
00:14:05,445 --> 00:14:08,515
“iframeを読み込みたい”

205
00:14:09,016 --> 00:14:12,252
“でも可能なのは
自分だけとする”

206
00:14:12,519 --> 00:14:17,491
このように自分で
設定すればいいのです

207
00:14:17,591 --> 00:14:21,862
逆のことも同じように
指示できます

208
00:14:22,229 --> 00:14:27,134
例えば自分のコンテンツが
読み込まれそうな時―

209
00:14:27,434 --> 00:14:33,841
frame ancestorsという
指示を入れればいいのです

210
00:14:33,941 --> 00:14:38,579
“コンテンツを読み込もうと
している人は―”

211
00:14:38,846 --> 00:14:44,718
“リストに名前がない限り
許可は与えない”と

212
00:14:45,285 --> 00:14:50,524
この場合news.exampleは
許可を与えているので―

213
00:14:50,624 --> 00:14:53,126
コンテンツを入手できます

214
00:14:53,994 --> 00:14:59,933
いろんなことを話したので
１つ１つ復習しましょう

215
00:15:00,300 --> 00:15:04,104
コンテンツセキュリティ
ポリシーは―

216
00:15:04,204 --> 00:15:08,842
デフォルトの
コード指定から始めます

217
00:15:08,942 --> 00:15:12,880
自分のオリジンと
ドメインを指定します

218
00:15:13,580 --> 00:15:20,087
次に スクリプトを読み込む
ドメインを追加します

219
00:15:20,687 --> 00:15:26,393
また フレームの読み込み先も
指定します

220
00:15:26,593 --> 00:15:30,931
誰かのページの
iframeに入る場合も

221
00:15:31,031 --> 00:15:36,003
frame ancestorで実行するため
ホワイトリストに登録します

222
00:15:36,837 --> 00:15:41,174
コンテンツセキュリティ
ポリシーの話は以上です

223
00:15:41,608 --> 00:15:47,915
攻撃シナリオの中でも
また取り上げる予定です

224
00:15:48,916 --> 00:15:51,752
次はcookieについてです

225
00:15:51,852 --> 00:15:57,391
ウェブが始まった当初
マジックだと言われました

226
00:15:57,958 --> 00:16:01,862
言葉どおり 様々なものに
利用できます

227
00:15:57,958 --> 00:16:01,862
言葉どおり 様々なものに
利用できます

228
00:16:02,162 --> 00:16:06,099
ユーザ認証をするという点から
慎重さが求められます

229
00:16:06,200 --> 00:16:11,438
ログインすると
Cookieが配布されますが

230
00:16:11,538 --> 00:16:16,543
盗まれたりレンダリングエンジンへ
移行されると

231
00:16:16,777 --> 00:16:19,546
ユーザが偽装される
可能性があります

232
00:16:19,780 --> 00:16:23,383
そのため慎重に
保護する必要があります

233
00:16:23,484 --> 00:16:27,855
プレーンテキスト要求に
応じないよう―

234
00:16:28,121 --> 00:16:30,224
設定しておきます

235
00:16:30,491 --> 00:16:34,528
HTTPOnlyのcookieを
見ていきましょう

236
00:16:35,062 --> 00:16:40,267
15年前程前からある
比較的古めの技術です

237
00:16:40,367 --> 00:16:42,870
HTTPOnlyというより―

238
00:16:43,270 --> 00:16:47,341
ウェブAPIのdocument.cookieの方が
有名でしょうか？

239
00:16:47,808 --> 00:16:52,179
JavaScriptでcookieの
読み書きが可能です

240
00:16:52,946 --> 00:16:57,851
他のサーバから
JavaScriptを読み込むと

241
00:16:57,951 --> 00:17:02,489
APIを通じ全ユーザのcookieへの
アクセス権を与えてしまいます

242
00:16:57,951 --> 00:17:02,489
APIを通じ全ユーザのcookieへの
アクセス権を与えてしまいます

243
00:17:03,190 --> 00:17:07,661
強力な権限を
与えすぎだと思います

244
00:17:07,761 --> 00:17:13,233
HTTPOnlyと指定した
cookieでログインする方が

245
00:17:13,567 --> 00:17:16,002
安全です

246
00:17:16,336 --> 00:17:22,608
このset-cookieヘッダーに
あるようにHTTPOnlyを送信し

247
00:17:23,143 --> 00:17:27,548
document.cookie APIで
cookieを表示しないよう指定します

248
00:17:28,015 --> 00:17:31,051
これでJavaScriptでcookieを
閲覧できなくなります

249
00:17:31,151 --> 00:17:36,657
操作したりや盗み出すことも
不可能となるのです

250
00:17:38,091 --> 00:17:43,831
また SameSite cookiesが
導入されました

251
00:17:44,398 --> 00:17:49,970
ここでもcookieの設定に
ヘッダーを使います

252
00:17:50,337 --> 00:17:54,474
SameSite=strictと
入力しました

253
00:17:54,575 --> 00:17:59,079
これは簡易版ですが
基本的な意味はこうです

254
00:17:59,479 --> 00:18:05,519
自分がオーナーのページのみ
cookieを送信します

255
00:17:59,479 --> 00:18:05,519
自分がオーナーのページのみ
cookieを送信します

256
00:18:05,619 --> 00:18:09,423
ユーザエクスペリエンスや
web view全体を

257
00:18:09,523 --> 00:18:12,893
管理している場合のみ
cookieを送信します

258
00:18:13,727 --> 00:18:16,330
信頼のないユーザに―

259
00:18:16,430 --> 00:18:19,933
ウェブコンテンツを
組み込まれた場合―

260
00:18:20,500 --> 00:18:25,973
SameSite cookiesは送信されず
サーバが検出します

261
00:18:26,073 --> 00:18:30,310
サーバはSameSite cookiesが
ないことから―

262
00:18:30,410 --> 00:18:34,314
盗もうとする
ユーザだと分かります

263
00:18:34,748 --> 00:18:37,284
慎重に対処すべきです

264
00:18:37,818 --> 00:18:42,456
コンテンツを守るための
方法は以上です

265
00:18:43,757 --> 00:18:46,326
次にクロスオリジン
ロックダウンです

266
00:18:46,426 --> 00:18:49,596
全く新しい技術と言えます

267
00:18:49,696 --> 00:18:53,801
このヘッダーの利用は
WebKitが初です

268
00:18:54,167 --> 00:18:58,539
コンテンツダウンロードを
制限するための―

269
00:18:58,639 --> 00:19:00,941
クロスオリジン
リソースポリシーです

270
00:18:58,639 --> 00:19:00,941
クロスオリジン
リソースポリシーです

271
00:19:02,176 --> 00:19:07,481
クロスオリジンで
読み込み可能なコンテンツは―

272
00:19:07,581 --> 00:19:12,586
すでに話したとおり
画像とスクリプトです

273
00:19:12,686 --> 00:19:15,756
ウェブができた頃から
存在し―

274
00:19:16,123 --> 00:19:21,595
他のサイトの読み込みを
禁止する仕組みは―

275
00:19:22,262 --> 00:19:25,332
これまでに ありませんでした

276
00:19:25,699 --> 00:19:30,571
誰でも どこからでも
画像を読み込めます

277
00:19:31,138 --> 00:19:36,410
しかし これを制限する
仕組みが誕生しました

278
00:19:36,810 --> 00:19:39,746
それがクロスオリジン
リソースポリシーです

279
00:19:39,847 --> 00:19:44,051
ここでSameという指示を
与えていますが―

280
00:19:44,151 --> 00:19:47,588
自分のサイトのみを
画像読み込み可能とします

281
00:19:47,688 --> 00:19:53,427
メインページの
ドメインが一致した場合

282
00:19:53,527 --> 00:19:57,931
ウェブコンテンツに
画像を読み込めます

283
00:19:58,031 --> 00:20:03,837
別の人が画像やスクリプトを
読み込もうとしたら―

284
00:19:58,031 --> 00:20:03,837
別の人が画像やスクリプトを
読み込もうとしたら―

285
00:20:03,937 --> 00:20:08,175
このヘッダーにより
それが防げます

286
00:20:09,276 --> 00:20:11,945
最近開発された技術です

287
00:20:13,146 --> 00:20:18,385
最後にクロスオリジン
ウィンドウポリシーです

288
00:20:18,485 --> 00:20:21,989
window.openという古いAPIです

289
00:20:22,156 --> 00:20:27,494
新しいウィンドウを
開くことによって―

290
00:20:27,594 --> 00:20:30,597
他者のページを開けます

291
00:20:31,031 --> 00:20:36,069
開くと言っても
通常のリンクと異なり―

292
00:20:36,170 --> 00:20:40,007
新しいウィンドウを
開くイメージです

293
00:20:40,707 --> 00:20:47,281
昔は格好の悪い
ポップアップが出てきました

294
00:20:48,415 --> 00:20:53,921
しかし古いAPIと異なり
ウィンドウが開きます

295
00:20:54,755 --> 00:20:57,758
誰かがコンテンツを
開いた時―

296
00:20:58,625 --> 00:21:02,796
“SameSite cookiesが
あるから大丈夫”

297
00:20:58,625 --> 00:21:02,796
“SameSite cookiesが
あるから大丈夫”

298
00:21:02,896 --> 00:21:05,099
そう思うでしょう

299
00:21:05,532 --> 00:21:10,838
しかし相手はウィンドウを
保有しているような状態です

300
00:21:11,672 --> 00:21:14,708
APIでウィンドウの
操作もでき―

301
00:21:14,808 --> 00:21:18,846
ナビゲートすることも
可能となります

302
00:21:19,980 --> 00:21:24,084
クロスオリジンウィンドウ
ポリシーでは―

303
00:21:24,184 --> 00:21:27,187
このような行為を
禁止できます

304
00:21:27,521 --> 00:21:33,160
このAPIを使用したサイトは
あまり多くなく―

305
00:21:33,260 --> 00:21:37,764
他者のウィンドウ操作も
まれではあります

306
00:21:38,165 --> 00:21:44,471
しかし確かに存在するので
ヘッダー指示により―

307
00:21:44,605 --> 00:21:47,541
禁止すべき行為と言えます

308
00:21:47,708 --> 00:21:51,478
サイト閲覧は可能でも
操作権限は与えません

309
00:21:51,945 --> 00:21:57,684
メッセージの投稿を行える
機能も存在します

310
00:21:57,985 --> 00:22:00,921
ウィンドウ間で会話をし―

311
00:21:57,985 --> 00:22:00,921
ウィンドウ間で会話をし―

312
00:22:01,021 --> 00:22:06,193
メッセージの投稿のみを
許可する仕組みです

313
00:22:07,127 --> 00:22:11,665
以上がクロスオリジン
ロックダウンの説明です

314
00:22:13,233 --> 00:22:16,336
それほど難しくないでしょう

315
00:22:16,437 --> 00:22:21,608
まずはホワイトリスト登録など
レスポンスヘッダーの設定

316
00:22:21,742 --> 00:22:27,314
そしてscriptタグの
integrity属性ですね

317
00:22:27,581 --> 00:22:30,818
ここで攻撃シナリオを
ご紹介し―

318
00:22:30,918 --> 00:22:37,491
リスクにどのような対処を
しているのか説明します

319
00:22:37,724 --> 00:22:41,428
クロスオリジン攻撃や
投機的実行攻撃

320
00:22:41,528 --> 00:22:46,633
ウィンドウコントロール攻撃に
ついて話します

321
00:22:47,100 --> 00:22:49,469
まずは
クロスオリジン攻撃です

322
00:22:50,337 --> 00:22:55,242
CDNに不具合が起こる
クロスサイトスクリプティング

323
00:22:55,342 --> 00:22:59,479
そしてご存知のクロスサイト
リクエストフォージェリ

324
00:23:00,581 --> 00:23:04,418
メッセージAppを
イメージしてください

325
00:23:04,518 --> 00:23:08,822
WebViewを伴う
ネイティブAppがあります

326
00:23:08,922 --> 00:23:14,695
ウェブブラウザ上でも
ウェブAppを使ったり

327
00:23:14,795 --> 00:23:19,199
メッセージを送り合ったり
することができます

328
00:23:19,299 --> 00:23:24,505
快いメッセージが
ほとんどとなりますが―

329
00:23:24,838 --> 00:23:30,777
一部 悪意のある内容のものも
含まれてしまいます

330
00:23:30,878 --> 00:23:33,146
こんなイメージです

331
00:23:34,047 --> 00:23:37,918
感じよく挨拶で始まり
マークアップが入ります

332
00:23:38,318 --> 00:23:44,658
Appやウェブサイトなど
どこかで間違えると―

333
00:23:45,559 --> 00:23:49,997
本物のマークアップとして
捉えられます

334
00:23:50,497 --> 00:23:55,836
すると攻撃者が
受け手のブラウザエンジンで―

335
00:23:56,370 --> 00:24:02,576
スクリプトを実行し
cookieを盗もうとします

336
00:23:56,370 --> 00:24:02,576
スクリプトを実行し
cookieを盗もうとします

337
00:24:02,676 --> 00:24:05,612
これには
完全な効力があるので―

338
00:24:05,712 --> 00:24:11,018
UIを乗っ取られる
可能性もあります

339
00:24:11,818 --> 00:24:16,890
これは起こってほしくない
事例ではありますが―

340
00:24:17,758 --> 00:24:22,663
HTTPOnlyの
認証cookieが設定されており

341
00:24:22,896 --> 00:24:26,767
悪意あるスクリプトは
無効にできます

342
00:24:27,367 --> 00:24:32,806
HTTPOnly cookieは
cookie自体を保護するものなので

343
00:24:33,307 --> 00:24:36,510
スクリプトはまだ実行中です

344
00:24:37,077 --> 00:24:39,947
では他に何ができるでしょう

345
00:24:40,614 --> 00:24:45,719
コンテンツセキュリティ
ポリシーは―

346
00:24:45,986 --> 00:24:50,524
スクリプト操作を
自分のみに可能とさせます

347
00:24:50,624 --> 00:24:57,731
インラインスクリプトを防ぎ
バグを引き起こしません

348
00:24:58,899 --> 00:25:03,971
ウェブページのポリシーを
設定しているので―

349
00:24:58,899 --> 00:25:03,971
ウェブページのポリシーを
設定しているので―

350
00:25:04,071 --> 00:25:06,707
外部からスクリプトを
挿入できません

351
00:25:08,208 --> 00:25:12,379
次にCDNが攻撃されたら
どうなるか

352
00:25:12,479 --> 00:25:16,783
防ぎたいものの
起こり得ることです

353
00:25:17,718 --> 00:25:20,687
CDNから読み込んだ
フレームワークは―

354
00:25:21,188 --> 00:25:26,593
スクリプトと同程度の
影響力がある要素です

355
00:25:28,061 --> 00:25:33,133
CDNが攻撃され
evil.exampleへと転送され

356
00:25:33,233 --> 00:25:36,103
攻撃コードを読み込めば
どうなるでしょう

357
00:25:36,537 --> 00:25:42,209
フレームワークは役に立つ
仕組みではありますが―

358
00:25:42,309 --> 00:25:44,344
悪さもします

359
00:25:44,778 --> 00:25:47,214
どう対処すべきなのか

360
00:25:47,481 --> 00:25:49,683
コンテンツセキュリティ
ポリシーで―

361
00:25:49,783 --> 00:25:51,919
ホワイトリスト登録を
しました

362
00:25:52,019 --> 00:25:54,054
そのためブラウザは―

363
00:25:54,154 --> 00:25:56,957
悪意あるスクリプトを
拒否します

364
00:25:58,192 --> 00:26:02,763
すると攻撃者も頭を使って
考え始めます

365
00:25:58,192 --> 00:26:02,763
すると攻撃者も頭を使って
考え始めます

366
00:26:03,297 --> 00:26:07,434
evil.exampleサーバに
転送する代わりに

367
00:26:07,534 --> 00:26:11,104
CDNサーバ上のスクリプト変更を
試みるでしょう

368
00:26:11,205 --> 00:26:15,309
そうすると
スクリプトは実行されますが

369
00:26:15,943 --> 00:26:21,081
サブリソースの整合性により
助かります

370
00:26:21,181 --> 00:26:26,253
自分のサーバ以外からの
スクリプトについては―

371
00:26:26,720 --> 00:26:31,391
チェックサムと合致しないと
除外されます

372
00:26:32,092 --> 00:26:34,194
攻撃は失敗します

373
00:26:35,662 --> 00:26:37,631
さて最後に―

374
00:26:37,731 --> 00:26:42,803
クロスサイト
リクエストフォージェリです

375
00:26:43,237 --> 00:26:47,174
フォージェリは
偽造という意味ですが―

376
00:26:47,274 --> 00:26:50,644
攻撃者はユーザの
リクエストに似た―

377
00:26:50,744 --> 00:26:56,483
偽のリクエストを
発信する場合があります

378
00:26:59,486 --> 00:27:02,589
メッセージAppの話に
戻りましょう

379
00:26:59,486 --> 00:27:02,589
メッセージAppの話に
戻りましょう

380
00:27:02,890 --> 00:27:07,094
ユーザがメッセージを送る
フォーラムでは―

381
00:27:07,194 --> 00:27:10,664
HTTPリクエストが送られます

382
00:27:10,764 --> 00:27:16,437
サーバにメッセージが届き
何の問題もないようなら―

383
00:27:16,537 --> 00:27:19,840
そのメッセージを
相手に送ります

384
00:27:20,641 --> 00:27:24,011
そこに悪意ある攻撃が入り―

385
00:27:24,111 --> 00:27:27,581
ユーザ情報を盗み取ります

386
00:27:27,681 --> 00:27:34,321
ユーザにリンクを送り
evil.exampleへ誘導します

387
00:27:34,421 --> 00:27:39,159
そこでネコに関する
興味深い統計を見せます

388
00:27:39,259 --> 00:27:44,464
この方法で しばらくの間
サイトに居させるのです

389
00:27:45,199 --> 00:27:48,035
そして気付かぬうちに―

390
00:27:48,135 --> 00:27:53,040
コンテンツに
リソースが読み込まれ

391
00:27:53,140 --> 00:27:57,144
ユーザの代わりに
メッセージを送り―

392
00:27:57,244 --> 00:28:01,381
cookieの機能も
自動的に付け足されます

393
00:27:57,244 --> 00:28:01,381
cookieの機能も
自動的に付け足されます

394
00:28:01,482 --> 00:28:04,384
これによりサーバは―

395
00:28:04,484 --> 00:28:09,389
ユーザはメッセージを
送りたいと誤解します

396
00:28:09,990 --> 00:28:14,895
内容はスパムや
マルウェアへのリンクでしょう

397
00:28:15,095 --> 00:28:19,633
最悪パートナーとの破局か…
話がそれました

398
00:28:19,733 --> 00:28:21,768
悪意のあるソフトウェアですね

399
00:28:23,504 --> 00:28:27,074
何としてでも
避けたいでしょう

400
00:28:27,941 --> 00:28:30,944
SameSite cookiesを

401
00:28:31,311 --> 00:28:34,181
幸運にも使用しています

402
00:28:34,281 --> 00:28:39,586
埋め込まれたことで
サーバの検出が働きます

403
00:28:39,720 --> 00:28:45,392
他のページのiframe内での
メッセージ送付は許可してません

404
00:28:45,526 --> 00:28:50,330
機密性の高い動作を行う場合
自分のUIである必要があり

405
00:28:50,430 --> 00:28:54,635
違う場合はリクエストを
拒否し 管理します

406
00:28:56,236 --> 00:29:02,876
クロスオリジン攻撃に対する
セキュリティは終了です

407
00:28:56,236 --> 00:29:02,876
クロスオリジン攻撃に対する
セキュリティは終了です

408
00:29:02,976 --> 00:29:07,347
次は新しく珍しい
攻撃の話をします

409
00:29:07,448 --> 00:29:11,051
投機的実行攻撃というものです

410
00:29:13,554 --> 00:29:18,725
ここでは投機的実行攻撃が
何かを説明し―

411
00:29:19,059 --> 00:29:23,997
その攻撃の手口と
対処法について取り上げます

412
00:29:25,199 --> 00:29:29,503
まずはCPUを
深く掘り下げていきます

413
00:29:29,603 --> 00:29:34,107
これがexecuting codeです

414
00:29:34,208 --> 00:29:38,278
様々な事柄に
条件付きで応じます

415
00:29:38,378 --> 00:29:43,016
“このxと呼ばれる
Array indexは安全か”

416
00:29:43,116 --> 00:29:47,221
“配列の範囲内か範囲外か”

417
00:29:47,321 --> 00:29:51,758
“範囲外であれば
エラー処理をするべきか”

418
00:29:51,859 --> 00:29:55,829
“範囲内なら 配列の中に
データを読み込もう”

419
00:29:56,964 --> 00:30:03,403
現在のCPUには学習能力が
備わっているので―

420
00:29:56,964 --> 00:30:03,403
現在のCPUには学習能力が
備わっているので―

421
00:30:03,504 --> 00:30:09,743
範囲内の場合 この配列を
読み込むのは安全だと判断

422
00:30:10,344 --> 00:30:16,517
安全かどうか判断する前に
推測から読み込むのです

423
00:30:16,617 --> 00:30:18,185
こんな感じです

424
00:30:18,285 --> 00:30:22,189
コードを見て
安全だろうと推測し

425
00:30:22,289 --> 00:30:26,126
そしてデータを読み込みます

426
00:30:26,226 --> 00:30:27,694
しかしこの場合―

427
00:30:27,795 --> 00:30:32,833
xは安全でなく
読み込みは誤りでした

428
00:30:32,933 --> 00:30:36,603
そこで正しく軌道修正します

429
00:30:38,005 --> 00:30:43,577
なぜこれでＯＫなのか？
あくまで予想だからです

430
00:30:43,677 --> 00:30:49,416
先取りして仕事を
進めておき 結論が出たら

431
00:30:49,516 --> 00:30:54,621
軌道修正すればいい
これが投機的実行です

432
00:30:55,589 --> 00:30:58,225
これが
どう攻撃に変わるのか？

433
00:30:58,325 --> 00:31:04,198
投機的実行の結果である
キャッシュ効果を―

434
00:30:58,325 --> 00:31:04,198
投機的実行の結果である
キャッシュ効果を―

435
00:31:04,298 --> 00:31:07,167
悪意あるコードが観察します

436
00:31:07,267 --> 00:31:12,873
そして読み込んだデータを
漏出してしまうのです

437
00:31:12,973 --> 00:31:17,911
読み込むべきではなくとも
キャッシュに痕跡が残ります

438
00:31:18,011 --> 00:31:24,351
攻撃者はキャッシュから
不正なデータを漏出できます

439
00:31:25,018 --> 00:31:27,654
ウェブコンテンツはどうか？

440
00:31:28,288 --> 00:31:30,357
同一オリジンポリシーの
話をしました

441
00:31:30,457 --> 00:31:35,596
20年間 我々を守ってきた
この仕組みのおかげで

442
00:31:35,696 --> 00:31:41,935
異なるオリジンのフレームからは
情報を読み取れません

443
00:31:43,136 --> 00:31:47,775
投機的実行攻撃の際
このポリシーは頼れません

444
00:31:48,709 --> 00:31:53,013
スクリプトを
書き出せるのであれば―

445
00:31:53,113 --> 00:32:00,521
投機的実行攻撃の際に
コンテンツを読み取れます

446
00:31:53,113 --> 00:32:00,521
投機的実行攻撃の際に
コンテンツを読み取れます

447
00:32:01,455 --> 00:32:04,458
ウェブ上の
大きな課題と言えます

448
00:32:04,591 --> 00:32:08,128
私はブラウザのベンダーと
一緒に

449
00:32:08,228 --> 00:32:13,767
デフォルトでこの問題を
解決するため尽力しています

450
00:32:13,867 --> 00:32:18,205
しかし皆さんのご協力が
必要なのです

451
00:32:18,305 --> 00:32:22,443
今まで見てきた防衛策に
皆さんがオプトインし

452
00:32:22,543 --> 00:32:28,015
より良いデフォルトが
欲しいと我々に伝えてほしい

453
00:32:28,115 --> 00:32:31,118
“古いAPIのサポートは
不要”とも

454
00:32:31,218 --> 00:32:33,287
我々はより積極的に―

455
00:32:33,387 --> 00:32:36,757
投機的実行攻撃に
立ち向えます

456
00:32:37,391 --> 00:32:41,795
さて 基本的な
対処法を見てみましょう

457
00:32:42,029 --> 00:32:47,134
evil.exampleのフレームとして

458
00:32:47,234 --> 00:32:53,106
ウェブコンテンツプロセスを
実行しないようにすることです

459
00:32:53,273 --> 00:32:56,944
evil.exampleの
フレームがあれば―

460
00:32:57,044 --> 00:33:02,616
同じプロセスを利用して
ウェブコンテンツを読み取れます

461
00:32:57,044 --> 00:33:02,616
同じプロセスを利用して
ウェブコンテンツを読み取れます

462
00:33:03,350 --> 00:33:06,086
どのように
防げるでしょうか？

463
00:33:06,186 --> 00:33:12,960
まずはWKWebView
というものがあります

464
00:33:14,661 --> 00:33:17,931
これはSafariの画面です

465
00:33:18,031 --> 00:33:23,437
現代版WebKitとも言える
WKWebViewを―

466
00:33:23,537 --> 00:33:25,739
長い間 使用してきました

467
00:33:26,340 --> 00:33:29,476
様々な利点があるのですが―

468
00:33:30,010 --> 00:33:36,116
evil.example webkit.org
ウェブコンテンツの３つのタブは

469
00:33:36,216 --> 00:33:39,386
個別にレンダリングされています

470
00:33:40,087 --> 00:33:45,659
またWKWebViewでは
ネットワークも個別で

471
00:33:45,759 --> 00:33:52,266
１つ１つにcookieや
HTTPヘッダーが付加されます

472
00:33:54,268 --> 00:33:56,803
投機的実行攻撃は―

473
00:33:56,904 --> 00:34:00,440
全て同じプロセスの場合に
効果を発揮します

474
00:33:56,904 --> 00:34:00,440
全て同じプロセスの場合に
効果を発揮します

475
00:34:00,541 --> 00:34:06,680
プロセスが同じだと
データも読み取り可能となります

476
00:34:07,047 --> 00:34:12,418
プロセスを分けてしまうと
攻撃が効果を発揮しません

477
00:34:12,518 --> 00:34:17,024
プロセス境界を越えることは
できないのです

478
00:34:17,157 --> 00:34:19,760
つまりすでに守られています

479
00:34:19,860 --> 00:34:24,063
ここで重要なのが
ウェブコンテンツプロセスは

480
00:34:24,164 --> 00:34:28,702
ネットワークに到達できず
攻撃も不可能だということです

481
00:34:29,969 --> 00:34:33,172
UIWebViewを
使用しているなら―

482
00:34:33,273 --> 00:34:39,478
我々はベータ版と見なし
お勧めしていません

483
00:34:40,414 --> 00:34:47,021
自身のウェブコンテンツと
evil.exampleが

484
00:34:47,420 --> 00:34:49,456
全てAppに入っている場合

485
00:34:50,257 --> 00:34:55,929
投機的実行攻撃をする側から
見ると 攻撃可能です

486
00:34:56,263 --> 00:34:58,599
全て同じプロセスで―

487
00:34:58,966 --> 00:35:03,737
投機的実行攻撃は防げません

488
00:34:58,966 --> 00:35:03,737
投機的実行攻撃は防げません

489
00:35:04,171 --> 00:35:07,007
UIWebViewは
やめた方がいいでしょう

490
00:35:07,741 --> 00:35:11,445
WKWebViewを使用すると―

491
00:35:12,780 --> 00:35:15,382
プロセスが異なるので

492
00:35:15,716 --> 00:35:20,220
攻撃された場合
他の要素に影響はありません

493
00:35:21,155 --> 00:35:26,226
次はWKWebViewの
セキュリティについてです

494
00:35:27,327 --> 00:35:31,098
social.exampleから
ウィジェットが提供されます

495
00:35:32,099 --> 00:35:36,403
そこで
インジェクション攻撃を受け―

496
00:35:36,503 --> 00:35:40,174
メッセージに
含まれるマークアップを

497
00:35:40,274 --> 00:35:42,976
表示してしまうかもしれません

498
00:35:43,310 --> 00:35:46,046
またアドネットワークが
攻撃され―

499
00:35:46,146 --> 00:35:52,452
そこからevil.exampleに
つながるのです

500
00:35:52,586 --> 00:35:59,193
evil.exampleのフレームが
ある状態では危険です

501
00:35:59,927 --> 00:36:03,931
コンテンツセキュリティ
ポリシーを展開し―

502
00:35:59,927 --> 00:36:03,931
コンテンツセキュリティ
ポリシーを展開し―

503
00:36:04,031 --> 00:36:08,435
フレームの読み込み先を
指定しました

504
00:36:09,103 --> 00:36:11,672
evil.exampleは
許可してはなりません

505
00:36:13,507 --> 00:36:19,279
これが害のあるフレームを
取り込んだ場合の対応です

506
00:36:20,347 --> 00:36:22,316
逆にウェブコンテンツが―

507
00:36:22,416 --> 00:36:27,121
害あるプロセスに
引き込まれることもあります

508
00:36:27,821 --> 00:36:31,125
どうやって防ぐのでしょう

509
00:36:31,458 --> 00:36:36,063
コンテンツセキュリティ
ポリシーの―

510
00:36:36,163 --> 00:36:39,900
frame ancestorの話を
思い出しましょう

511
00:36:40,000 --> 00:36:41,735
“none”と指定して

512
00:36:41,835 --> 00:36:45,372
iframeを拒否すれば
いいのです

513
00:36:45,472 --> 00:36:48,842
自分のウェブコンテンツ
なので―

514
00:36:48,942 --> 00:36:52,446
勝手にiframeには
取り込まれません

515
00:36:52,746 --> 00:36:55,916
このような指示を
入力すると―

516
00:36:56,016 --> 00:37:01,221
evil.exampleから
コンテンツが守られます

517
00:36:56,016 --> 00:37:01,221
evil.exampleから
コンテンツが守られます

518
00:37:01,321 --> 00:37:05,626
これはネットワークプロセス上で
行います

519
00:37:05,726 --> 00:37:11,231
攻撃は同じプロセススペースでのみ
起こるので

520
00:37:11,331 --> 00:37:16,303
JavaScriptが実行される前に
防ぐことが重要です

521
00:37:17,237 --> 00:37:22,442
次に
HTTPOnly cookieについて

522
00:37:22,542 --> 00:37:28,282
クロスサイトスクリプティングを
防ぐよりも重要です

523
00:37:28,382 --> 00:37:35,322
cookieを閲覧するAPI
document.cookieを覚えてますか？

524
00:37:35,989 --> 00:37:39,927
同一オリジンポリシーに
頼れなくなった今―

525
00:37:40,027 --> 00:37:45,332
evil.exampleがiframeに
到達できます

526
00:37:45,732 --> 00:37:46,900
最悪です

527
00:37:47,201 --> 00:37:53,040
しかしHTTPOnlyとすることで
これを防げます

528
00:37:53,173 --> 00:37:58,612
ウェブコンテンツプロセスに
移すことも不要です

529
00:37:59,446 --> 00:38:03,750
自動的にcookieを
投機的実行攻撃から守ります

530
00:37:59,446 --> 00:38:03,750
自動的にcookieを
投機的実行攻撃から守ります

531
00:38:05,118 --> 00:38:06,453
SameSite cookiesは

532
00:38:06,553 --> 00:38:10,324
コンテンツを組み込まれた場合に
対処します

533
00:38:10,424 --> 00:38:15,863
evil.exampleは
投機的実行攻撃を狙います

534
00:38:16,530 --> 00:38:21,501
しかしSameSite cookiesは
送信されず

535
00:38:21,602 --> 00:38:25,906
埋め込まれたコンテンツを
サーバーが検出

536
00:38:26,006 --> 00:38:30,210
リソースを組み込むのを
サーバが拒否します

537
00:38:31,278 --> 00:38:34,948
evil.exampleも防げます

538
00:38:35,716 --> 00:38:40,788
最後にクロスオリジンリソース
ポリシーについて話します

539
00:38:41,355 --> 00:38:46,593
この新しいヘッダーの
ブラウザエンジンでは

540
00:38:46,693 --> 00:38:52,099
サーバから画像やスクリプトを
読み込めるのは自分だけです

541
00:38:52,199 --> 00:38:56,703
サーバー上の画像やスクリプトに
ヘッダーを送ると

542
00:38:56,803 --> 00:39:01,074
evil.exampleによって
読み込まれるのを防ぎます

543
00:38:56,803 --> 00:39:01,074
evil.exampleによって
読み込まれるのを防ぎます

544
00:39:01,175 --> 00:39:04,077
ネットワークプロセスを
ブロックします

545
00:39:04,244 --> 00:39:10,851
再確認ですがプロセスを
分けることで攻撃を防げます

546
00:39:12,552 --> 00:39:19,393
最後はウィンドウ
コントロール攻撃です

547
00:39:20,360 --> 00:39:23,764
tabnappingとも呼ばれる攻撃と

548
00:39:23,864 --> 00:39:27,067
防衛方法を見てみましょう

549
00:39:28,335 --> 00:39:32,940
再びevil.exampleを
取り上げます

550
00:39:33,040 --> 00:39:34,608
window.openが行使され

551
00:39:34,708 --> 00:39:41,815
新しいウィンドウで誰かが
ウェブページを開いたようです

552
00:39:42,549 --> 00:39:46,553
SameSite cookiesもあり
大丈夫と思っても―

553
00:39:47,054 --> 00:39:48,989
安心はできません

554
00:39:49,089 --> 00:39:54,027
evil.exampleはユーザが
目を離すのを待ち―

555
00:39:54,161 --> 00:39:59,366
偽のページへ誘導する
操作を行います

556
00:39:59,466 --> 00:40:03,771
元のページのように
見せかけ―

557
00:39:59,466 --> 00:40:03,771
元のページのように
見せかけ―

558
00:40:04,171 --> 00:40:07,674
再ログインさせて
情報を盗みます

559
00:40:08,375 --> 00:40:12,312
管理を任せていると
起こり得ることです

560
00:40:13,146 --> 00:40:16,150
クロスオリジン
ウィンドウポリシーを―

561
00:40:16,717 --> 00:40:20,654
適用すると ウィンドウへの
誘導ができず―

562
00:40:20,754 --> 00:40:24,525
攻撃される心配もなくなります

563
00:40:25,859 --> 00:40:28,395
セキュリティの話は以上です

564
00:40:30,030 --> 00:40:34,001
ここからは
今日の内容を振り返り―

565
00:40:34,101 --> 00:40:39,606
帰宅もしくは帰社後に
行動に移してもらいたいです

566
00:40:40,674 --> 00:40:43,877
まずは通信の
セキュリティとして―

567
00:40:43,977 --> 00:40:46,380
HTTPSとWSSへ
移行してください

568
00:40:47,181 --> 00:40:52,119
CookieはHTTPOnlyとし
守ってください

569
00:40:52,219 --> 00:40:56,890
私は全てHTTPOnlyと
することをお勧めします

570
00:40:57,791 --> 00:41:03,163
UIWebViewは
WKWebViewに移行します

571
00:40:57,791 --> 00:41:03,163
UIWebViewは
WKWebViewに移行します

572
00:41:03,697 --> 00:41:07,234
あとはディフェンス
メカニズムについて

573
00:41:07,334 --> 00:41:10,370
コンテンツセキュリティ
ポリシーは―

574
00:41:10,470 --> 00:41:14,475
攻撃から守る
役割を果たします

575
00:41:16,176 --> 00:41:18,178
HTTPOnly cookieは

576
00:41:18,278 --> 00:41:23,450
クロスサイトスクリプティング
からも守れますが

577
00:41:23,884 --> 00:41:27,454
投機的実行攻撃は
確実に防げます

578
00:41:27,554 --> 00:41:31,425
HTTPOnly cookieは
送信されないからです

579
00:41:33,227 --> 00:41:38,098
サブリソースの整合性により
CDN攻撃から守ります

580
00:41:38,198 --> 00:41:42,569
他人の実行コードを
自分のページから除外します

581
00:41:44,538 --> 00:41:49,176
SameSite cookiesは
偽のリクエストにより―

582
00:41:49,276 --> 00:41:52,780
情報が盗み取られることを
防ぎます

583
00:41:52,880 --> 00:41:56,984
SameSite cookiesが
送信されない場合―

584
00:41:57,084 --> 00:42:00,053
このリスクに注意が必要です

585
00:41:57,084 --> 00:42:00,053
このリスクに注意が必要です

586
00:42:00,154 --> 00:42:03,056
投機的実行攻撃でも同様です

587
00:42:03,156 --> 00:42:09,263
害のあるページが
盗みを働いている時―

588
00:42:09,363 --> 00:42:13,167
SameSite cookiesは
送られません

589
00:42:14,501 --> 00:42:18,305
次にクロスオリジン
リソースポリシーです

590
00:42:18,705 --> 00:42:24,578
画像やスクリプトなどの
クロスオリジンロードを

591
00:42:24,678 --> 00:42:28,115
自分のサイトのみで
可能とします

592
00:42:28,482 --> 00:42:30,751
そして最後に
ウィンドウは―

593
00:42:30,851 --> 00:42:37,424
他者が操作できないように
注意が必要となります

594
00:42:40,227 --> 00:42:44,264
今日ご紹介したのは
簡単なものばかりです

595
00:42:44,365 --> 00:42:49,136
特に自分のサイトや
コンテンツなので―

596
00:42:49,269 --> 00:42:55,509
デフォルト設定では危ないため
各自オプトインしてください

597
00:42:56,276 --> 00:42:59,980
セキュリティの状態も
確認してください

598
00:43:00,280 --> 00:43:05,886
その目的で自分で攻撃を
仕掛けてみるのもお勧めです

599
00:43:05,986 --> 00:43:10,057
もちろん機能の確認も必要です

600
00:43:11,725 --> 00:43:15,162
WebKitはオープンソースの
プロジェクトで

601
00:43:15,262 --> 00:43:18,765
技術については
ブログに記載しています

602
00:43:18,999 --> 00:43:22,636
クロスオリジン
リソースポリシーと―

603
00:43:22,736 --> 00:43:26,473
クロスオリジンウィンドウ
ポリシーについても―

604
00:43:26,573 --> 00:43:29,977
このブログで
更新していきます

605
00:43:30,077 --> 00:43:35,883
現在 ブラウザのベンダーと
標準化の話し合いをしています

606
00:43:36,216 --> 00:43:42,422
そのため名称や機能に
変更がある可能性もあります

607
00:43:42,522 --> 00:43:49,296
何せ新しい仕組みなので
まだアクセスもできません

608
00:43:49,396 --> 00:43:53,901
サポート体制も
まだ構築できていません

609
00:43:55,436 --> 00:44:01,441
他にもSafariやWebKitの
セッションも開催しています

610
00:43:55,436 --> 00:44:01,441
他にもSafariやWebKitの
セッションも開催しています

611
00:44:01,542 --> 00:44:03,043
明日の14時です

612
00:44:03,143 --> 00:44:09,550
是非ご参加いただき 一緒に
最適な方法を探しましょう

613
00:44:09,850 --> 00:44:14,988
一般的な内容のセッションが
金曜日にもあります

614
00:44:16,290 --> 00:44:17,091
では また

615
00:44:17,191 --> 00:44:21,495
(拍手)