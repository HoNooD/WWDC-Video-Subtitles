
1
00:00:07,074 --> 00:00:15,582
(音楽)

2
00:00:20,921 --> 00:00:24,992
(拍手)

3
00:00:25,392 --> 00:00:26,293
おはよう

4
00:00:26,627 --> 00:00:31,031
テクノロジ･エバンジェリストの
エリック･ハンソンです

5
00:00:31,164 --> 00:00:34,868
今日はPhotosチームの
同僚３名と共に

6
00:00:34,968 --> 00:00:39,840
アプリケーションとPhotosの
連携について紹介します

7
00:00:42,376 --> 00:00:44,678
主なトピックは２つです

8
00:00:46,246 --> 00:00:49,550
macOS High Sierraで
導入された―

9
00:00:49,650 --> 00:00:52,853
Photos Project Extention API

10
00:00:53,987 --> 00:00:57,124
そして
ドラッグ＆ドロップを用いた

11
00:00:57,291 --> 00:01:00,494
アプリケーションとの連携です

12
00:00:57,291 --> 00:01:00,494
アプリケーションとの連携です

13
00:01:01,128 --> 00:01:04,096
まずはPhoto Project
Extensionからです

14
00:01:07,601 --> 00:01:11,538
iPhotoは2002年に
リリースされました

15
00:01:12,272 --> 00:01:15,509
このアプリケーションの登場は

16
00:01:15,609 --> 00:01:22,449
上質なフォトブックやカード 
カレンダーの作成を可能にしました

17
00:01:24,718 --> 00:01:31,358
これまでにiPhotoや
Photosを使って作成された作品は

18
00:01:31,458 --> 00:01:33,460
7000万点を超えます

19
00:01:37,364 --> 00:01:40,234
同時に この16年間で

20
00:01:40,334 --> 00:01:43,570
市場は飛躍を遂げてきました

21
00:01:43,971 --> 00:01:47,741
ユーザは 自分の作品を作る上で

22
00:01:47,841 --> 00:01:52,779
様々な選択肢を持てるように
なったのです

23
00:01:54,314 --> 00:01:58,185
優れたエコシステムが登場する中

24
00:01:58,652 --> 00:02:03,156
昨年 我々は新しいAPIを
発表しました

25
00:01:58,652 --> 00:02:03,156
昨年 我々は新しいAPIを
発表しました

26
00:02:03,724 --> 00:02:05,726
Photo Project Extensionです

27
00:02:08,061 --> 00:02:10,330
優れたExtensionはありました

28
00:02:11,064 --> 00:02:14,001
例えばMimeo Photosです

29
00:02:14,268 --> 00:02:19,139
非常に質の高い作品を
生み出すことができます

30
00:02:20,607 --> 00:02:25,579
WhiteWallでは写真を
絵画のように見せられます

31
00:02:26,680 --> 00:02:29,483
また友人や家族と共有できる―

32
00:02:29,583 --> 00:02:34,521
フォトアルバム作成の
デジタルサービスもあります

33
00:02:36,390 --> 00:02:40,861
最新のExtensionも
近々 追加される予定です

34
00:02:40,961 --> 00:02:42,362
その名もMotif

35
00:02:42,663 --> 00:02:48,402
Photosに直接連携された
最新のExtensionです

36
00:02:48,769 --> 00:02:50,237
リリースは今年の夏です

37
00:02:53,607 --> 00:02:57,578
これらすべてのエコシステムは

38
00:02:57,911 --> 00:03:01,748
デベロッパの皆さんも活用できる
Extensionです

39
00:02:57,911 --> 00:03:01,748
デベロッパの皆さんも活用できる
Extensionです

40
00:03:02,683 --> 00:03:06,553
膨大なメタデータや
コンテキストなどを

41
00:03:06,653 --> 00:03:09,656
Extensionに送ることができます

42
00:03:10,324 --> 00:03:15,128
ネイティブフレームワークの
スタックを使って

43
00:03:15,229 --> 00:03:21,401
世界中のユーザが喜ぶ
新しいものが作成できるのです

44
00:03:24,938 --> 00:03:26,540
この理由から―

45
00:03:27,808 --> 00:03:35,883
我々はPrint Productビジネスを
エコシステムへ移行していきます

46
00:03:37,618 --> 00:03:44,558
つまりExtensionを使って
作品を作成する手段となるのが

47
00:03:44,658 --> 00:03:48,061
このProject Extensionなのです

48
00:03:49,663 --> 00:03:54,902
そのためには
優れたPhotosの環境が必要です

49
00:03:56,170 --> 00:03:59,273
ではExtension APIの新機能を
紹介しましょう

50
00:04:00,741 --> 00:04:01,375
１つ目は―

51
00:04:03,110 --> 00:04:04,444
UIです

52
00:04:05,179 --> 00:04:10,184
PhotosアプリケーションにUIを
直接連携することで

53
00:04:11,018 --> 00:04:14,988
常にサイドバーが表示されます

54
00:04:15,622 --> 00:04:19,293
Extensionで
プロジェクトを作成する場合

55
00:04:19,392 --> 00:04:23,931
サイドバーから
コンテンツを移動できます

56
00:04:24,932 --> 00:04:30,470
使用したい写真を
検索することもできますし―

57
00:04:30,571 --> 00:04:33,707
コピーすることも可能です

58
00:04:35,943 --> 00:04:39,012
さらにPhotosの
強力な編集ツールも

59
00:04:39,379 --> 00:04:42,683
直接連携させることができます

60
00:04:44,585 --> 00:04:48,188
写真をダブルクリックするだけで

61
00:04:48,522 --> 00:04:52,059
編集ができるとしたら
どうでしょう？

62
00:04:52,426 --> 00:04:55,762
このAPIではそれが可能です

63
00:04:55,863 --> 00:04:59,533
瞬時に編集ツールを
起動できるのです

64
00:04:59,633 --> 00:05:04,104
スタックビューの上部に
セッションがあるので

65
00:04:59,633 --> 00:05:04,104
スタックビューの上部に
セッションがあるので

66
00:05:04,404 --> 00:05:06,807
あとは編集をするだけです

67
00:05:07,407 --> 00:05:12,012
他のアセットへの
アクセスも可能です

68
00:05:12,513 --> 00:05:16,250
編集終了後は
完了ボタンをクリックすれば

69
00:05:16,650 --> 00:05:19,853
元のプロジェクトに戻れます

70
00:05:20,287 --> 00:05:23,657
ライブラリの変更通知が
表示されたら―

71
00:05:23,757 --> 00:05:26,860
指示に従ってUIを更新します

72
00:05:29,429 --> 00:05:31,165
しかしアプリケーションや―

73
00:05:32,332 --> 00:05:35,802
Extensionを探せなかったら？

74
00:05:36,270 --> 00:05:41,508
我々はこの問題の改善に
力を入れてきました

75
00:05:42,209 --> 00:05:45,946
PhotosはMac App Storeに
リンクしています

76
00:05:47,047 --> 00:05:51,218
macOS MojaveのMac App Storeでは

77
00:05:51,318 --> 00:05:55,355
キュレートされたストーリーに
リンクできます

78
00:05:55,756 --> 00:05:59,626
特にExtensionに対してです

79
00:06:00,060 --> 00:06:04,097
我々は常に新しいものを取り入れ

80
00:06:04,431 --> 00:06:09,570
ユーザに最適な環境を
提供しているのです

81
00:06:10,971 --> 00:06:15,943
ストーリーからアプリケーションを
ダウンロードすれば―

82
00:06:16,710 --> 00:06:19,413
Extensionも
ダウンロードされます

83
00:06:20,080 --> 00:06:23,817
これまでデベロッパの皆さんは
ユーザに

84
00:06:23,917 --> 00:06:29,823
PhotosでのExtensionの使い方を
学んでもらう必要がありました

85
00:06:30,157 --> 00:06:31,792
これも改善されました

86
00:06:32,259 --> 00:06:35,095
アプリケーションの
ダウンロードと同時に

87
00:06:35,195 --> 00:06:38,665
作成モードが起動できるとしたら？

88
00:06:39,233 --> 00:06:40,901
それも可能なんです

89
00:06:41,835 --> 00:06:44,638
PhotosにURLスキームを加えました

90
00:06:44,738 --> 00:06:48,642
Extension識別子やカテゴリに

91
00:06:48,742 --> 00:06:51,845
簡単に渡すことができます

92
00:06:52,446 --> 00:06:56,583
そうすることで
Photosが最前面に表示され

93
00:06:56,884 --> 00:07:01,054
Extensionのオプションも
表示されます

94
00:06:56,884 --> 00:07:01,054
Extensionのオプションも
表示されます

95
00:07:01,922 --> 00:07:05,058
起動と同時に作成ができる―

96
00:07:05,159 --> 00:07:08,161
ユーザフレンドリーな機能です

97
00:07:11,431 --> 00:07:14,601
作成したプロジェクトは―

98
00:07:15,068 --> 00:07:17,971
所定の場所に保存されるべきです

99
00:07:18,705 --> 00:07:21,241
そう Photo Libraryです

100
00:07:22,009 --> 00:07:26,046
作成したすべてのプロジェクトは

101
00:07:26,146 --> 00:07:28,649
Project Galleryで確認できます

102
00:07:28,849 --> 00:07:33,554
Extensionで作成された
カスタムプレビューでは

103
00:07:33,987 --> 00:07:37,691
プロジェクトの全体像が
把握できます

104
00:07:37,791 --> 00:07:39,693
これを見てください

105
00:07:41,328 --> 00:07:47,234
既存のプロジェクトを開けば
作業の継続も可能ですが

106
00:07:47,801 --> 00:07:50,504
そこから新規の作成も可能です

107
00:07:50,604 --> 00:07:55,175
プロジェクトから
作成メニューを開くだけです

108
00:07:55,275 --> 00:07:59,813
Extensionの使い勝手を
よくするために

109
00:07:59,947 --> 00:08:02,516
様々なものを提供しています

110
00:07:59,947 --> 00:08:02,516
様々なものを提供しています

111
00:08:02,950 --> 00:08:07,688
しかしAppleのプロジェクトの場合
更に上を目指します

112
00:08:08,488 --> 00:08:14,795
写真やページの配列を崩さずに
皆さんに提供すれば

113
00:08:14,895 --> 00:08:20,400
Appleのプロジェクトを
別の形式に変換できるのです

114
00:08:20,501 --> 00:08:22,703
強くお勧めする方法です

115
00:08:25,205 --> 00:08:29,243
UIの新機能について
話をしてきましたが

116
00:08:29,610 --> 00:08:33,212
ここからは同僚に
バトンタッチします

117
00:08:33,380 --> 00:08:36,917
トビアス･コンラーディです

118
00:08:37,017 --> 00:08:41,989
(拍手)

119
00:08:42,089 --> 00:08:43,823
おはようございます

120
00:08:44,191 --> 00:08:48,161
Photosエンジニアの
トビアスです

121
00:08:48,262 --> 00:08:51,999
ここからは
変更点について紹介します

122
00:08:52,933 --> 00:08:54,868
まずは作成メニューです

123
00:08:55,068 --> 00:08:59,206
Photos Project Extensionの
導入時には

124
00:08:59,306 --> 00:09:03,043
Extensionは一列に
表示されていました

125
00:08:59,306 --> 00:09:03,043
Extensionは一列に
表示されていました

126
00:09:03,143 --> 00:09:05,479
しかし このままでは

127
00:09:05,579 --> 00:09:11,051
どんなプロジェクトが
作成できるのか判断できません

128
00:09:11,418 --> 00:09:16,456
そこで改良を加え
カテゴリ別に分類しました

129
00:09:16,957 --> 00:09:20,427
macOS Mojaveでの表示が
こちらです

130
00:09:20,527 --> 00:09:24,531
サブメニューが
カテゴリ別になっています

131
00:09:24,965 --> 00:09:28,068
カテゴリはフォトブック

132
00:09:28,168 --> 00:09:30,771
カレンダー　カード　壁用の装飾

133
00:09:30,871 --> 00:09:32,406
プリント　スライドショー

134
00:09:32,506 --> 00:09:36,410
そしてどれにも属さない
その他です

135
00:09:37,477 --> 00:09:41,348
これで目的のExtensionが
容易に特定できます

136
00:09:41,448 --> 00:09:43,750
壁紙を作成したい場合

137
00:09:44,084 --> 00:09:49,156
壁用の装飾に活用できる
Extensionがあります

138
00:09:49,990 --> 00:09:52,192
カテゴリーに分類するには

139
00:09:52,626 --> 00:09:57,998
info.plistの属性ディクショナリに
新しいキーを追加します

140
00:09:58,098 --> 00:09:59,933
PHProjectCategoryです

141
00:10:00,033 --> 00:10:05,005
この場合 キーの値となるのは
カテゴリーである―

142
00:10:05,105 --> 00:10:07,741
壁用の装飾もしくはその他です

143
00:10:10,043 --> 00:10:14,581
次にユーザが目にするのは
ピッカーシートです

144
00:10:14,715 --> 00:10:18,118
皆さんが提供するデータを元に

145
00:10:18,452 --> 00:10:23,023
プロジェクトタイプの概要が
表示されます

146
00:10:23,490 --> 00:10:27,094
これまでのAPIで問題だったのは

147
00:10:27,194 --> 00:10:32,399
最新価格やオファーが
表示されないことでした

148
00:10:32,499 --> 00:10:36,370
今回のAPIではその問題を改善し

149
00:10:36,470 --> 00:10:39,540
動的更新を可能にしました

150
00:10:40,073 --> 00:10:41,975
この動的更新に加え

151
00:10:42,075 --> 00:10:47,581
カスタムのフッターを
表示できるようにしました

152
00:10:47,681 --> 00:10:51,118
必要に応じて
規約の表示が可能です

153
00:10:53,787 --> 00:10:55,155
APIレベルでは

154
00:10:55,255 --> 00:10:58,725
動的APIはこのように見えます

155
00:10:59,159 --> 00:11:04,865
ProjectExtensionControllerには
新しいメソッドがあり

156
00:10:59,159 --> 00:11:04,865
ProjectExtensionControllerには
新しいメソッドがあり

157
00:11:04,965 --> 00:11:07,801
データソースを要求できます

158
00:11:07,901 --> 00:11:12,072
選択されたExtensionを
カテゴリーに渡し

159
00:11:12,172 --> 00:11:15,342
オブジェクトを無効化します

160
00:11:15,709 --> 00:11:17,778
データソースに戻ったら

161
00:11:17,878 --> 00:11:22,649
ProjectTypeDescriptionと
フッターテキストを要求します

162
00:11:23,283 --> 00:11:27,387
返された情報の無効化が
必要であれば

163
00:11:27,487 --> 00:11:31,825
Invalidatorを
使用することができます

164
00:11:31,925 --> 00:11:36,129
必要に応じてPhotosが
データをリフェッチし

165
00:11:36,230 --> 00:11:38,765
UIに最新情報を表示させます

166
00:11:42,269 --> 00:11:44,838
次はProjectInfoについてです

167
00:11:45,172 --> 00:11:50,510
これは構造体で
コンテンツに対する追加情報で

168
00:11:50,711 --> 00:11:57,050
キュレーションに反映される
sectionContentsに含まれます

169
00:11:57,618 --> 00:12:01,622
要素にはアセットの
レイアウトのヒントや

170
00:11:57,618 --> 00:12:01,622
要素にはアセットの
レイアウトのヒントや

171
00:12:01,722 --> 00:12:05,192
ウェイトやスコアを持っています

172
00:12:05,292 --> 00:12:11,198
またアセットは関心領域内に
重要な領域を持てます

173
00:12:11,498 --> 00:12:14,434
ProjectInfoはこのような感じです

174
00:12:14,535 --> 00:12:20,340
詳細は昨年の
What's New in Photos APIsで

175
00:12:24,444 --> 00:12:29,850
ProjectInfoは開始時に
Extensionに渡されます

176
00:12:30,417 --> 00:12:34,922
新しいアセットがプロジェクトに
追加されると

177
00:12:35,022 --> 00:12:38,292
ProjectInfoは無効化されます

178
00:12:38,692 --> 00:12:43,630
ProjectInfoの無効化の問題を
解決するには

179
00:12:43,730 --> 00:12:47,801
projectExtensionContextの
新APIを使います

180
00:12:48,702 --> 00:12:52,840
プロジェクト作成時に
ProjectInfoが渡された例です

181
00:12:52,940 --> 00:12:55,742
アセットも追加されています

182
00:12:55,876 --> 00:13:00,380
updateProjectInfoを
ProjectInfoで呼び出し

183
00:12:55,876 --> 00:13:00,380
updateProjectInfoを
ProjectInfoで呼び出し

184
00:13:00,480 --> 00:13:02,850
既存セクションを更新します

185
00:13:02,950 --> 00:13:06,053
そして新しいセクションを加えます

186
00:13:06,320 --> 00:13:09,022
さらに追加がある場合は

187
00:13:09,223 --> 00:13:12,326
同様にProjectInfoに渡し
セクションを更新

188
00:13:12,593 --> 00:13:15,229
新しいセクションを追加します

189
00:13:16,997 --> 00:13:21,502
次は関心領域について
詳しく説明しましょう

190
00:13:22,302 --> 00:13:26,173
これは重要な領域を
強調する機能です

191
00:13:26,273 --> 00:13:28,308
例えば人の顔です

192
00:13:28,575 --> 00:13:32,513
複数の人が画像に映っている場合

193
00:13:32,613 --> 00:13:37,518
同じ人に対する関心領域の
識別子は同じです

194
00:13:38,218 --> 00:13:40,354
Ｂの人に注目しましょう

195
00:13:41,855 --> 00:13:45,626
関心領域には識別子の他にも

196
00:13:45,726 --> 00:13:48,262
ウェイトも表示されます

197
00:13:48,362 --> 00:13:54,368
これはプロジェクト内での
重要度を表しています

198
00:13:55,502 --> 00:13:59,740
しかし画像内での
ウェイトを変えたい場合

199
00:13:59,840 --> 00:14:03,810
このAPIでの変更は困難です

200
00:13:59,840 --> 00:14:03,810
このAPIでの変更は困難です

201
00:14:04,178 --> 00:14:09,149
そこで関心領域の
クオリティを示すスコアを

202
00:14:09,283 --> 00:14:11,585
新たに画像に追加します

203
00:14:12,186 --> 00:14:17,724
左の写真を見ると
Ｂの人のピントはずれていますが

204
00:14:17,825 --> 00:14:20,694
右ではピントが合っています

205
00:14:20,794 --> 00:14:25,098
つまり右の方が
スコアが高いことになります

206
00:14:27,301 --> 00:14:29,870
APIではこのように

207
00:14:29,970 --> 00:14:35,008
関心領域の重要度を示すウェイトが
書かれています

208
00:14:35,108 --> 00:14:38,212
そして クオリティもです

209
00:14:39,980 --> 00:14:44,151
ではここで
関心領域の活用法について

210
00:14:44,251 --> 00:14:46,487
簡単なデモをお見せします

211
00:14:46,587 --> 00:14:51,992
また変更時のライブラリ通知にも
注目してください

212
00:14:52,092 --> 00:14:55,662
updateProjectInfo APIを
使っています

213
00:15:03,570 --> 00:15:04,438
さて…

214
00:15:05,239 --> 00:15:09,076
これはスライドショーの
Extensionです

215
00:15:09,443 --> 00:15:13,647
では実際にアルバムから
写真を選択し

216
00:15:13,747 --> 00:15:18,619
Extensionから
新規プロジェクトを作成しましょう

217
00:15:20,287 --> 00:15:25,225
ビューには全アイテムが見られる
オーバービューと

218
00:15:25,492 --> 00:15:29,630
スライドショーになる
再生ビューがあります

219
00:15:31,365 --> 00:15:35,169
スライドショーでは
常に中心へズームされ

220
00:15:35,269 --> 00:15:38,038
あまり面白味がありません

221
00:15:38,372 --> 00:15:43,710
関心領域を使ってズームの領域を
指定したいと思います

222
00:15:44,845 --> 00:15:47,347
Xcodeに切り替えましょう

223
00:15:50,184 --> 00:15:54,188
preferredZoomRectを見てください

224
00:15:54,288 --> 00:15:58,225
同じRectが
返されるようになっています

225
00:15:58,325 --> 00:16:01,962
このコードを変更しましょう

226
00:15:58,325 --> 00:16:01,962
このコードを変更しましょう

227
00:16:06,266 --> 00:16:10,204
まずは要素から関心領域を抜き出し

228
00:16:10,304 --> 00:16:14,408
ウェイトとクオリティの順に
並べ替えます

229
00:16:14,842 --> 00:16:19,379
並べ替えたリストの
最後の要素を取り出し

230
00:16:19,479 --> 00:16:21,048
そのRectへと返します

231
00:16:22,082 --> 00:16:24,418
Extensionに戻ると…

232
00:16:38,098 --> 00:16:43,370
重要度の高い領域へと
ズームするようになりました

233
00:16:43,971 --> 00:16:45,539
よくなりましたね

234
00:16:45,639 --> 00:16:48,742
(拍手)

235
00:16:48,842 --> 00:16:51,678
次は写真を追加しましょう

236
00:16:51,778 --> 00:16:55,449
サイドバーにあるアルバムを
ドラッグし

237
00:16:55,549 --> 00:16:59,186
Extension上でドロップします

238
00:17:00,120 --> 00:17:02,623
何も変わりませんね

239
00:17:02,823 --> 00:17:06,026
正常に追加されてはいるのですが

240
00:17:06,126 --> 00:17:08,762
ビューは変更されません

241
00:17:09,029 --> 00:17:11,598
これでは困りますね

242
00:17:12,465 --> 00:17:14,701
再度Xcodeに戻りましょう

243
00:17:16,603 --> 00:17:21,074
projectViewControllerには
beginProjectと

244
00:17:21,175 --> 00:17:24,912
resumeProjectメソッドが
ありますね

245
00:17:25,012 --> 00:17:28,315
ここにChangeObservationを
登録します

246
00:17:31,018 --> 00:17:34,154
こちらのメソッドにも追加します

247
00:17:36,423 --> 00:17:39,726
まずPhotoKitの
オブジェクトがあり

248
00:17:39,827 --> 00:17:43,597
そして追加された
アセットがあります

249
00:17:43,697 --> 00:17:47,134
アセットのフェッチ結果を得てから

250
00:17:47,234 --> 00:17:51,471
ライブラリに
ChangeObserverを登録します

251
00:17:51,705 --> 00:17:54,942
まずプロジェクトを終了します

252
00:17:56,043 --> 00:18:00,114
Xcodeのエラーが表示されるので

253
00:17:56,043 --> 00:18:00,114
Xcodeのエラーが表示されるので

254
00:18:00,681 --> 00:18:02,549
ChangeObserverを追加します

255
00:18:02,816 --> 00:18:05,886
そしてここに…

256
00:18:09,423 --> 00:18:11,892
photoLibraryDidChangeを
追加します

257
00:18:12,759 --> 00:18:17,498
これはPhoto Libraryが
変更された時に呼び出され

258
00:18:18,098 --> 00:18:22,503
変更のインスタンスが得られます

259
00:18:23,537 --> 00:18:28,609
オブジェクトのChangeDetailsに
変更インスタンスを要求します

260
00:18:28,742 --> 00:18:33,046
プロジェクトのfetchAllAssetsを
変更するので

261
00:18:33,146 --> 00:18:35,215
そのfetchResultを渡します

262
00:18:35,682 --> 00:18:40,754
変更結果が戻されたら
キャッシュされたフェッチ結果と

263
00:18:40,854 --> 00:18:45,392
fetchResultsAfterChangesを
更新します

264
00:18:45,492 --> 00:18:47,794
projectExtensionContextを得たら

265
00:18:47,895 --> 00:18:52,799
updateProjectInfoを呼び出し
ProjectInfoに渡します

266
00:18:53,567 --> 00:18:56,603
updateProjectInfoが返されたら

267
00:18:56,703 --> 00:19:01,275
高度な方法で同じ
セットアップコードを呼び出します

268
00:18:56,703 --> 00:19:01,275
高度な方法で同じ
セットアップコードを呼び出します

269
00:19:02,242 --> 00:19:04,344
プロジェクトに戻ります

270
00:19:19,660 --> 00:19:20,294
さて…

271
00:19:23,464 --> 00:19:29,036
アルバムをExtensionへと
ドラッグ＆ドロップします

272
00:19:29,136 --> 00:19:31,939
写真が追加されました

273
00:19:32,039 --> 00:19:37,110
Photo Libraryの
ChangeObservationがリッスンされ

274
00:19:37,211 --> 00:19:40,614
変更が通知されると
ProjectInfoが更新されます

275
00:19:41,315 --> 00:19:46,453
(拍手)

276
00:19:48,388 --> 00:19:53,760
ProjectInfoを活用することで
Extensionを改善し

277
00:19:54,228 --> 00:19:58,599
ProjectInfoの関心領域も
改善できます

278
00:19:58,866 --> 00:20:02,169
またChangeObserverを登録すると

279
00:19:58,866 --> 00:20:02,169
またChangeObserverを登録すると

280
00:20:02,269 --> 00:20:07,574
変更が通知され
ProjectInfoが更新されます

281
00:20:10,410 --> 00:20:13,146
重要なことが２つあります

282
00:20:13,313 --> 00:20:15,649
アセットやアルバムは

283
00:20:15,749 --> 00:20:20,687
PhotosからExtensionに
コピーすることはできます

284
00:20:20,821 --> 00:20:26,560
しかしテキストなどを
ペーストしたい場合もあるでしょう

285
00:20:26,660 --> 00:20:31,565
その場合 ExtensionやPhotosは
ペーストのタイミングを

286
00:20:31,665 --> 00:20:33,300
知る必要があります

287
00:20:33,567 --> 00:20:35,969
validateMenuItemを実装して

288
00:20:36,603 --> 00:20:43,177
Extensionがコンテンツを
受け付けるか確認してください

289
00:20:43,277 --> 00:20:47,381
return falseなら
Photosとして対応してみます

290
00:20:47,481 --> 00:20:52,753
逆にreturn trueなら
ペーストが可能です

291
00:20:54,021 --> 00:20:56,290
ドラッグ＆ドロップでも同じです

292
00:20:56,623 --> 00:21:02,396
PhotosではPhotoKitの
オブジェクトをドラッグできますが

293
00:20:56,623 --> 00:21:02,396
PhotosではPhotoKitの
オブジェクトをドラッグできますが

294
00:21:02,763 --> 00:21:07,034
型が違うとExtensionが
干渉することもあります

295
00:21:07,201 --> 00:21:11,071
Extensionに登録されるドラッグは

296
00:21:11,171 --> 00:21:16,610
内部のものか
対応したいものだけにしてください

297
00:21:16,710 --> 00:21:21,482
WKWebViewでは多くの型の
ドラッグが登録されているので

298
00:21:21,582 --> 00:21:24,017
十分注意してください

299
00:21:25,986 --> 00:21:28,956
私からの紹介は以上です

300
00:21:29,056 --> 00:21:31,191
次は同僚のサンナが

301
00:21:31,291 --> 00:21:36,830
他者のアプリケーションとの
連携について紹介します

302
00:21:36,930 --> 00:21:37,564
どうも

303
00:21:37,664 --> 00:21:40,467
(拍手)

304
00:21:40,567 --> 00:21:41,602
ありがとう

305
00:21:42,336 --> 00:21:45,906
Photosエンジニアのサンナです

306
00:21:46,039 --> 00:21:49,943
今日はドラッグ＆ドロップを使った

307
00:21:50,043 --> 00:21:55,415
アプリケーション間の
アイテム移動についてお話します

308
00:21:57,484 --> 00:22:02,656
ドラッグ＆ドロップは
アイテム移動に便利な機能ですが

309
00:21:57,484 --> 00:22:02,656
ドラッグ＆ドロップは
アイテム移動に便利な機能ですが

310
00:22:03,223 --> 00:22:06,460
うまく機能しないこともあります

311
00:22:10,130 --> 00:22:14,134
このような問題を
解決していきましょう

312
00:22:14,535 --> 00:22:15,169
では…

313
00:22:15,269 --> 00:22:18,338
(拍手)

314
00:22:18,438 --> 00:22:21,275
まずは問題の理解からです

315
00:22:22,876 --> 00:22:25,846
macOSではNSPasteboardを
使っています

316
00:22:25,946 --> 00:22:28,582
両方のアプリケーションでは

317
00:22:28,682 --> 00:22:34,121
データの読み書きが
メインスレッドで行われています

318
00:22:34,221 --> 00:22:38,992
ローカルにデータが
保存される状況下では

319
00:22:39,092 --> 00:22:41,061
PasteboardにURLを
置くことができました

320
00:22:41,361 --> 00:22:43,197
これは昔のことです

321
00:22:43,297 --> 00:22:48,836
iCloudを使用している場合
データはローカルにありません

322
00:22:48,936 --> 00:22:52,673
そこでURLをPastboardに置く前に

323
00:22:52,773 --> 00:22:55,576
データのダウンロードが必要です

324
00:22:56,643 --> 00:23:00,514
またドラッグ＆ドロップの
設定も関係してきます

325
00:22:56,643 --> 00:23:00,514
またドラッグ＆ドロップの
設定も関係してきます

326
00:23:00,614 --> 00:23:04,184
つまり位置情報を保存する場合

327
00:23:04,284 --> 00:23:08,555
メタデータを含まない
新規ファイルが転送されます

328
00:23:09,122 --> 00:23:14,328
メインスレッドで
ダウンロードや転送を行うと

329
00:23:14,428 --> 00:23:17,498
時間がかかってしまいます

330
00:23:19,399 --> 00:23:23,504
そこで非同期のAPIが
必要になります

331
00:23:24,404 --> 00:23:29,243
ここで登場するのが
File Promiseです

332
00:23:30,377 --> 00:23:35,015
このAPIは
ローカルに存在しないファイルを

333
00:23:35,115 --> 00:23:39,319
指示された場所に
書き込んでくれます

334
00:23:39,586 --> 00:23:43,357
また裏での
ファイルの書き込みも可能です

335
00:23:45,526 --> 00:23:48,662
方法は２通りあります

336
00:23:48,762 --> 00:23:51,965
NSFilePromiseReceiverを使った
ファイルの受信と

337
00:23:52,065 --> 00:23:55,369
NSFilePromiseProviderを使った
ファイルの送信です

338
00:23:55,802 --> 00:24:00,474
これらのAPIは
macOS Sierraから導入されました

339
00:23:55,802 --> 00:24:00,474
これらのAPIは
macOS Sierraから導入されました

340
00:24:02,376 --> 00:24:05,279
まずはFile Promiseの受信からです

341
00:24:08,882 --> 00:24:10,484
原則として―

342
00:24:11,151 --> 00:24:14,655
ドラッグ＆ドロップをサポートする
アプリケーションでは

343
00:24:14,755 --> 00:24:18,258
ファイルURLとFile Promiseの
両方に対応しています

344
00:24:19,960 --> 00:24:22,896
File Promiseを提供する
アプリケーションは複数あります

345
00:24:23,997 --> 00:24:29,169
Photosではドラッグする際
File Promiseを使います

346
00:24:29,636 --> 00:24:31,638
macOS Mojaveからは

347
00:24:31,738 --> 00:24:36,810
人やメモリーのドラッグも
可能になっています

348
00:24:36,944 --> 00:24:39,847
様々なケースで
File Promiseが使われています

349
00:24:40,647 --> 00:24:43,951
Mailではメッセージを
Finderにドラッグする時に

350
00:24:44,051 --> 00:24:47,054
File Promiseを使っています

351
00:24:47,754 --> 00:24:52,192
Safariでは
画像をドラッグする時です

352
00:24:52,693 --> 00:24:58,966
Keynoteでは スライドの一部を
ドラッグする時です

353
00:25:00,467 --> 00:25:03,303
つまりファイルを送受信したければ

354
00:25:03,403 --> 00:25:09,176
File Promiseを読み込み
受信を承諾する必要があります

355
00:25:09,776 --> 00:25:12,513
ではコードを見てみましょう

356
00:25:14,982 --> 00:25:18,619
まずregisterForDraggedTypesを
呼び出し

357
00:25:18,719 --> 00:25:21,355
承諾する型を登録させます

358
00:25:21,455 --> 00:25:24,324
File Promiseを承諾するために

359
00:25:24,424 --> 00:25:29,863
NSFilePromiseRecevier内の
readableDraggerdTypesを使います

360
00:25:31,999 --> 00:25:38,906
ドラッグ操作を実行したり
アイテムを列挙したりするには

361
00:25:39,373 --> 00:25:44,511
NSFilePromiseReciverに
supportを追加しておきます

362
00:25:45,112 --> 00:25:49,850
これは質の高い表現を
含む場合があるからです

363
00:25:52,419 --> 00:25:56,690
各filePromiseReceiverに対して
Promiseを呼び出します

364
00:25:57,224 --> 00:25:58,959
準備が整ったら―

365
00:25:59,626 --> 00:26:05,532
operationQueueで
Reader Blockが呼び出されます

366
00:25:59,626 --> 00:26:05,532
operationQueueで
Reader Blockが呼び出されます

367
00:26:07,501 --> 00:26:11,205
operationQueueの提供が重要です

368
00:26:12,339 --> 00:26:16,477
これはファイルが
ダウンロードされている間

369
00:26:16,577 --> 00:26:21,548
メインスレッドを
ブロックさせないためです

370
00:26:22,182 --> 00:26:24,818
ネットワークが遅い場合

371
00:26:24,918 --> 00:26:30,891
ファイルのダウンロードには
時間がかかってしまいます

372
00:26:33,527 --> 00:26:38,632
これを改善するには
ローディングを表示させ

373
00:26:39,099 --> 00:26:43,537
準備が整った時点で
UIを置き換えます

374
00:26:45,873 --> 00:26:48,375
これはMailの例です

375
00:26:49,543 --> 00:26:55,649
画像がダウンロードされている間の
プレースホルダーUIです

376
00:27:00,921 --> 00:27:03,490
File Promiseの受信です

377
00:27:03,590 --> 00:27:06,627
次は送信を見ていきましょう

378
00:27:07,094 --> 00:27:10,964
データがローカルに
存在しない場合は

379
00:27:11,198 --> 00:27:15,836
アプリケーションに
これを実装してみてください

380
00:27:16,437 --> 00:27:18,939
では実際にAPIを見ながら

381
00:27:19,773 --> 00:27:21,842
説明していきましょう

382
00:27:25,646 --> 00:27:30,317
まずNSFilePromiseProviderの
インスタンスを作成します

383
00:27:32,553 --> 00:27:35,255
Promisedファイルごとにです

384
00:27:35,355 --> 00:27:40,160
Pasteboardに書き込む
filePromiseProviderには

385
00:27:40,260 --> 00:27:43,964
ファイルの型とデリゲートが
必要です

386
00:27:44,198 --> 00:27:47,835
デリゲートは重いファイルを
処理してくれます

387
00:27:48,402 --> 00:27:52,639
デリゲートに対するメソッドは
３つだけです

388
00:27:53,040 --> 00:27:56,109
１つ目はDrag Destinationによって
呼び出され

389
00:27:56,710 --> 00:27:59,780
ファイル名を返します

390
00:27:59,913 --> 00:28:04,184
２つ目は
operationQueueを返します

391
00:27:59,913 --> 00:28:04,184
２つ目は
operationQueueを返します

392
00:28:04,852 --> 00:28:10,390
ファイルが書き込まれる場所ですね

393
00:28:11,024 --> 00:28:13,460
このメソッドを実装し

394
00:28:13,560 --> 00:28:17,664
operatonQueueを提供することを
お勧めします

395
00:28:18,065 --> 00:28:22,102
メインキューの使用を
避けるためです

396
00:28:24,137 --> 00:28:30,210
最後にファイルを書き込む
writePromiseを呼び出します

397
00:28:31,612 --> 00:28:34,815
completionHandlerの呼び出しも
忘れないでください

398
00:28:37,151 --> 00:28:40,921
以上がPromiseの送受信です

399
00:28:41,021 --> 00:28:46,226
File Promiseを送受信するのに
使用できる

400
00:28:46,326 --> 00:28:49,696
APIについてもカバーしました

401
00:28:49,797 --> 00:28:54,134
次はヨアヒムが
実際にデモをお見せします

402
00:28:54,234 --> 00:28:55,035
どうも

403
00:28:55,202 --> 00:28:58,939
(拍手)

404
00:28:59,039 --> 00:28:59,773
ありがとう

405
00:29:01,975 --> 00:29:02,976
おはよう

406
00:29:03,477 --> 00:29:08,849
では問題のある
簡単なアプリケーションを例にして

407
00:29:09,016 --> 00:29:12,786
Xcodeで
問題を解決していきましょう

408
00:29:19,893 --> 00:29:25,299
このアプリケーションに
ファイルをドラッグして

409
00:29:25,699 --> 00:29:28,702
このようにドロップします

410
00:29:29,503 --> 00:29:33,373
右上にあるボタンをクリックすると

411
00:29:33,974 --> 00:29:37,644
テキストを追加することができます

412
00:29:38,378 --> 00:29:40,647
少し上に動かしましょう

413
00:29:41,381 --> 00:29:45,485
準備が整ったら
このアプリケーションを―

414
00:29:46,487 --> 00:29:48,856
iMessageに送ります

415
00:29:52,626 --> 00:29:57,564
次にウェブで見つけた画像を
追加したいので

416
00:29:57,664 --> 00:29:59,433
Safariを開きます

417
00:30:01,135 --> 00:30:05,339
これをアプリケーションに
ドラッグします

418
00:30:06,773 --> 00:30:09,309
うまくいきませんね

419
00:30:09,409 --> 00:30:13,247
Xcodeから
この問題を修正しましょう

420
00:30:17,117 --> 00:30:20,187
これはメインの
View Controllerです

421
00:30:20,387 --> 00:30:24,091
問題の場所へと移動しましょう

422
00:30:24,391 --> 00:30:26,627
中身を見てみます

423
00:30:28,962 --> 00:30:32,800
ファイルのURLしか
登録されていないので

424
00:30:32,966 --> 00:30:37,638
FilePromiseReceiverも登録します

425
00:30:41,575 --> 00:30:46,313
次はドラッグ操作の部分を
修正しましょう

426
00:30:46,647 --> 00:30:50,450
FilePromiseReceiverが
必要になります

427
00:30:51,185 --> 00:30:52,052
では…

428
00:30:52,853 --> 00:30:55,289
次のメソッドに移動します

429
00:30:56,723 --> 00:31:01,328
サポートクラスのリストには
NSURLしかありません

430
00:30:56,723 --> 00:31:01,328
サポートクラスのリストには
NSURLしかありません

431
00:31:01,428 --> 00:31:05,499
そこで最初のインデックスに
追加をします

432
00:31:05,999 --> 00:31:08,602
NSFilePromise…

433
00:31:09,870 --> 00:31:11,138
Receiver

434
00:31:15,342 --> 00:31:19,713
Enumerationメソッドに
新規のケースを追加します

435
00:31:26,887 --> 00:31:32,359
受け取ったPromisedファイルの
URLを得たら

436
00:31:32,459 --> 00:31:35,329
同じメソッドを呼び出します

437
00:31:35,429 --> 00:31:39,700
ファイルのURLを得た時だけ
呼び出されます

438
00:31:40,601 --> 00:31:42,336
実際に見てみましょう

439
00:31:48,175 --> 00:31:49,810
アプリケーションです

440
00:31:50,277 --> 00:31:53,380
Safariの画像をドラッグすると…

441
00:31:53,881 --> 00:31:55,482
うまくいきました

442
00:31:55,582 --> 00:32:00,454
(拍手)

443
00:31:55,582 --> 00:32:00,454
(拍手)

444
00:32:00,554 --> 00:32:04,558
既存メソッド２つを
修正するだけです

445
00:32:04,758 --> 00:32:07,161
File Promiseの承諾ですね

446
00:32:08,962 --> 00:32:11,832
ではテキストを追加しましょう

447
00:32:15,169 --> 00:32:16,370
こんな感じです

448
00:32:16,537 --> 00:32:20,340
作成した画像を
まだ送信したくない場合

449
00:32:20,440 --> 00:32:24,578
デスクトップに
保存できたらいいですよね

450
00:32:27,247 --> 00:32:29,083
うまくいきません

451
00:32:29,183 --> 00:32:32,519
再度Xcodeに戻りましょう

452
00:32:38,025 --> 00:32:44,164
クラスの一番下にあるのは
オブジェクトを返すメソッドです

453
00:32:44,498 --> 00:32:48,802
この状態では
NSImageしか返しません

454
00:32:49,369 --> 00:32:53,474
これをfilePromisedProviderに
置き換えます

455
00:32:56,944 --> 00:32:59,012
fileProviderを作成し

456
00:32:59,346 --> 00:33:02,883
JPEGイメージを与えます

457
00:32:59,346 --> 00:33:02,883
JPEGイメージを与えます

458
00:33:03,250 --> 00:33:08,489
このuserInfoプロパティを使って
snapshotItemを保存します

459
00:33:08,856 --> 00:33:12,059
これは書き込みの際に使用します

460
00:33:13,927 --> 00:33:18,899
NSFilePromiseProvideDelegeteに
実装しましょう

461
00:33:22,035 --> 00:33:23,370
こんな感じです

462
00:33:24,471 --> 00:33:25,806
下に移動します

463
00:33:26,106 --> 00:33:29,710
そして３つのデリゲートを
実装します

464
00:33:32,146 --> 00:33:34,848
ファイル名を返すデリゲート

465
00:33:36,483 --> 00:33:39,820
ここでは静的ファイル名にします

466
00:33:41,188 --> 00:33:44,091
次はoperationQueueを返す
デリゲート

467
00:33:44,691 --> 00:33:46,894
ここにありましたね

468
00:33:47,861 --> 00:33:52,533
最後はファイルを
ディスクに書き込むデリゲート

469
00:33:58,639 --> 00:34:02,209
これでfilePromiseProviderから

470
00:33:58,639 --> 00:34:02,209
これでfilePromiseProviderから

471
00:34:02,309 --> 00:34:05,846
snapshotObjectが得られます

472
00:34:05,946 --> 00:34:11,385
ディスクへの書き込みには
JPEGを使用します

473
00:34:13,554 --> 00:34:14,655
見てみましょう

474
00:34:19,726 --> 00:34:22,362
今回はPhotosを使います

475
00:34:24,965 --> 00:34:26,967
画像をアプリケーションに…

476
00:34:28,001 --> 00:34:29,770
ドラッグします

477
00:34:31,038 --> 00:34:32,505
テキストを入れて…

478
00:34:36,143 --> 00:34:40,547
Finderデスクトップに
ドロップします

479
00:34:42,014 --> 00:34:42,783
このとおり

480
00:34:42,882 --> 00:34:47,987
(拍手)

481
00:34:55,596 --> 00:34:58,365
ご覧のように簡単な手順で

482
00:34:58,465 --> 00:35:04,505
Supportの追加や
UXの改善をすることができます

483
00:34:58,465 --> 00:35:04,505
Supportの追加や
UXの改善をすることができます

484
00:35:04,838 --> 00:35:07,341
ではエリックを呼びましょう

485
00:35:07,474 --> 00:35:08,108
どうも

486
00:35:08,208 --> 00:35:12,679
(拍手)

487
00:35:12,780 --> 00:35:13,914
すばらしい

488
00:35:14,014 --> 00:35:15,782
楽しめましたか？

489
00:35:15,883 --> 00:35:21,755
最後に私からこのセッションの
まとめをさせてもらいます

490
00:35:22,089 --> 00:35:25,526
まず皆さんに伝えたいのは

491
00:35:25,826 --> 00:35:28,996
Photosは
非常に重要だということです

492
00:35:29,096 --> 00:35:34,935
世界中の人たちが
毎日たくさんの写真を撮っています

493
00:35:35,602 --> 00:35:39,573
そしてPhotosに保存しています

494
00:35:41,074 --> 00:35:43,344
しかし これらの写真も

495
00:35:43,977 --> 00:35:49,049
共有や保存ができなければ
意味がありません

496
00:35:49,149 --> 00:35:49,850
ですから―

497
00:35:50,751 --> 00:35:54,688
人々は皆さんを頼りにしています

498
00:35:54,788 --> 00:36:00,094
見事なアプリケーションを作成する
デベロッパの皆さんです

499
00:35:54,788 --> 00:36:00,094
見事なアプリケーションを作成する
デベロッパの皆さんです

500
00:36:00,427 --> 00:36:04,832
２つのことを覚えておいてください

501
00:36:05,365 --> 00:36:07,267
まずFile Promiseの活用です

502
00:36:07,634 --> 00:36:12,606
Photosとの連携は
とても簡単ですから

503
00:36:13,607 --> 00:36:14,908
実践してみてください

504
00:36:15,008 --> 00:36:21,215
次にPhoto Project 
Extensionにある―

505
00:36:21,315 --> 00:36:24,685
すべてのAPIを検証することです

506
00:36:26,386 --> 00:36:30,424
冒頭で伝えたように
飛躍を続ける市場ですし

507
00:36:30,524 --> 00:36:33,126
そこには大きな機会があります

508
00:36:33,427 --> 00:36:37,764
一緒にすばらしいPhotosを
作り上げていきましょう

509
00:36:40,334 --> 00:36:45,339
ぜひ今日の午後は
ラボにお越しください

510
00:36:45,439 --> 00:36:50,444
エンジニアがPhotoKitなど
様々な質問にお答えします

511
00:36:50,544 --> 00:36:55,849
皆さんとお話できるのを
待ち望んでいます

512
00:36:56,216 --> 00:36:58,785
引き続きWWDCを楽しんでください

513
00:36:58,885 --> 00:36:59,520
ありがとう

514
00:36:59,620 --> 00:37:04,224
(拍手)