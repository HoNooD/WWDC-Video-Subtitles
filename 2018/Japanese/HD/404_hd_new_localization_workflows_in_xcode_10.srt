
1
00:00:07,140 --> 00:00:16,416
（音楽）

2
00:00:21,021 --> 00:00:25,826
（拍手）

3
00:00:25,926 --> 00:00:29,029
おはようございます
ようこそ

4
00:00:29,129 --> 00:00:33,100
ローカリゼーションチームの
サラ･ラディです

5
00:00:33,233 --> 00:00:36,937
同僚のヴィヴィアンと
クリスと共に

6
00:00:37,037 --> 00:00:39,873
Xcode 10の話をします

7
00:00:41,008 --> 00:00:45,312
まずXcode 10以前の
ローカリゼーションの―

8
00:00:45,412 --> 00:00:47,714
プロセスのおさらいです

9
00:00:48,749 --> 00:00:53,420
次に ローカリゼーションの
インポートやエクスポート用の

10
00:00:53,520 --> 00:00:57,958
新フォーマットである Xcode
Localization Catalogを紹介

11
00:00:58,325 --> 00:01:01,228
最後に クリスが
Siriのショートカットを

12
00:00:58,325 --> 00:01:01,228
最後に クリスが
Siriのショートカットを

13
00:01:01,328 --> 00:01:04,230
Intent定義ファイルで
ローカライズする方法を紹介します

14
00:01:04,331 --> 00:01:08,802
このファイルはXcode 10で
導入するフォーマットです

15
00:01:09,870 --> 00:01:12,773
それでは
簡単におさらいします

16
00:01:15,442 --> 00:01:16,977
Xcode 10以前は

17
00:01:17,077 --> 00:01:20,214
ローカリゼーションを含む
プロジェクトがあれば

18
00:01:20,447 --> 00:01:25,786
文字列ベースのローカライズが
可能なリソースを探しました

19
00:01:26,053 --> 00:01:28,655
文字列を定義するのは
ソースコード内や―

20
00:01:28,755 --> 00:01:29,790
Storyboardファイル

21
00:01:29,890 --> 00:01:32,392
文字列ファイルや
文字列辞書です

22
00:01:32,659 --> 00:01:35,162
リソースを探し出したら

23
00:01:35,395 --> 00:01:39,967
文字列を抽出して
XLIFFにエクスポートします

24
00:01:40,300 --> 00:01:45,205
XLIFFは業界標準であり
広く普及しています

25
00:01:45,472 --> 00:01:48,375
それを翻訳に回します

26
00:01:49,776 --> 00:01:53,847
XLIFFが翻訳されて
インポートされると

27
00:01:53,947 --> 00:01:57,417
Xcodeのローカライズ可能な
リソースに―

28
00:01:57,518 --> 00:02:01,154
XLIFFで提供される
新たな翻訳が追加されます

29
00:01:57,518 --> 00:02:01,154
XLIFFで提供される
新たな翻訳が追加されます

30
00:02:01,488 --> 00:02:03,857
かなり単純なプロセスです

31
00:02:06,226 --> 00:02:10,731
XLIFFフォーマットには
多くの利点があります

32
00:02:11,098 --> 00:02:15,035
ローカリゼーション作業を
コードから抽出できるので

33
00:02:15,135 --> 00:02:19,006
ソースコードの言語を
仮定する必要はありません

34
00:02:20,107 --> 00:02:23,310
XLIFFは開発言語中の

35
00:02:23,443 --> 00:02:26,780
ローカライズするコンテンツと
翻訳の両方を保持します

36
00:02:26,880 --> 00:02:32,186
提供したXLIFFファイルで
翻訳者は作業できます

37
00:02:33,420 --> 00:02:38,158
複数のファイル形式を
管理する必要はありません

38
00:02:38,258 --> 00:02:42,462
XLIFFは異なるリソースや
ファイル形式の文字列を

39
00:02:42,596 --> 00:02:46,700
１つのドキュメントに
統合します

40
00:02:48,368 --> 00:02:51,371
しかしXLIFFが
提供しないのが

41
00:02:51,471 --> 00:02:55,409
視覚的および機能的な
コンテキストです

42
00:02:56,143 --> 00:02:59,646
リソースデータは
提供しないのです

43
00:02:59,746 --> 00:03:04,318
翻訳者は
Storyboardファイルがあれば

44
00:02:59,746 --> 00:03:04,318
翻訳者は
Storyboardファイルがあれば

45
00:03:04,418 --> 00:03:08,088
翻訳時に 開発言語の
UIの表示を参照できます

46
00:03:09,756 --> 00:03:14,361
XLIFFは生成したカスタム
メタデータも提供しません

47
00:03:15,195 --> 00:03:20,868
それに現在のXLIFFは
大きさや長さを制限しません

48
00:03:21,034 --> 00:03:23,937
制限があれば 翻訳する際に

49
00:03:24,037 --> 00:03:27,808
WatchかiPhoneか
iPadの画面かで

50
00:03:27,908 --> 00:03:31,912
翻訳の長さを
決めることができます

51
00:03:33,480 --> 00:03:37,351
なぜコンテキストが
重要なのか

52
00:03:38,852 --> 00:03:42,589
旅行アプリケーションの
例を見ましょう

53
00:03:42,689 --> 00:03:45,626
のちほど実演でも
お見せします

54
00:03:46,059 --> 00:03:51,865
ナビゲーションバーの右角に
“Book”と表示されています

55
00:03:52,266 --> 00:03:57,971
これが旅行に関連することは
明らかでしょう

56
00:03:58,105 --> 00:04:02,509
なぜなら視覚的な
コンテキストで

57
00:03:58,105 --> 00:04:02,509
なぜなら視覚的な
コンテキストで

58
00:04:02,609 --> 00:04:05,979
日付や人数 値段が
書かれているからです

59
00:04:06,847 --> 00:04:09,983
しかし XLIFFファイルを
送っても

60
00:04:10,150 --> 00:04:13,320
翻訳者に見えるのは
“Book”だけ

61
00:04:13,420 --> 00:04:17,658
先ほどの視覚コンテキストは
ありません

62
00:04:19,026 --> 00:04:21,528
“Book”の意味は２つ

63
00:04:21,695 --> 00:04:25,132
“本”という
名詞かもしれないし

64
00:04:25,332 --> 00:04:28,468
“予約する”という
動詞かもしれません

65
00:04:28,569 --> 00:04:33,507
対象がホテルか飛行機
旅なのかも分かりません

66
00:04:33,607 --> 00:04:37,344
ロシア人翻訳者に
コンテキストを伝えず

67
00:04:37,444 --> 00:04:40,480
“Book”を
訳してもらいました

68
00:04:40,647 --> 00:04:43,450
これだけの可能性があります

69
00:04:43,550 --> 00:04:46,186
コンテキストの
限定がなければ

70
00:04:46,286 --> 00:04:48,622
ロシア人ユーザに対して

71
00:04:48,722 --> 00:04:52,459
どれを表示するか
決められません

72
00:04:53,260 --> 00:04:56,263
翻訳の長さを決めるためにも

73
00:04:56,363 --> 00:04:59,967
コンテキストは重要です

74
00:05:01,001 --> 00:05:03,203
この例を見てください

75
00:05:03,403 --> 00:05:06,039
“Booking confirmed”は

76
00:05:06,139 --> 00:05:09,543
Watchの画面に収まります

77
00:05:09,810 --> 00:05:12,913
でもフランス語では
文末が切れます

78
00:05:13,714 --> 00:05:17,684
これでは見てくれが
よくありません

79
00:05:17,784 --> 00:05:22,055
意味が変わってしまう
場合もあります

80
00:05:22,189 --> 00:05:24,591
ユーザを侮辱することも

81
00:05:24,691 --> 00:05:27,561
このように笑わせることも

82
00:05:27,661 --> 00:05:31,765
“予約を確認しました”の
文末が切れて

83
00:05:31,865 --> 00:05:34,935
“予約はバカだ”と読めます

84
00:05:35,636 --> 00:05:37,971
このようにコンテキストを

85
00:05:38,071 --> 00:05:43,343
顧客やローカライザーに
提供するのは重要です

86
00:05:43,443 --> 00:05:46,547
ローカリゼーションの質を
向上させます

87
00:05:47,247 --> 00:05:51,218
Xcode Localization
Catalogを紹介します

88
00:05:51,318 --> 00:05:54,254
ローカリゼーションを
Xcode 10に

89
00:05:54,354 --> 00:05:57,391
エクスポートしたり
インポートする―

90
00:05:57,491 --> 00:05:58,759
新しいフォーマットです

91
00:05:59,226 --> 00:06:01,662
Xcode Localization
Catalogとは何か

92
00:05:59,226 --> 00:06:01,662
Xcode Localization
Catalogとは何か

93
00:06:01,895 --> 00:06:05,232
ローカリゼーションの
新しいアーティファクトで

94
00:06:05,332 --> 00:06:07,868
拡張子は.xclocです

95
00:06:08,502 --> 00:06:13,040
Xcodeのローカリゼーション
エクスポートコマンドで作成

96
00:06:13,140 --> 00:06:16,243
XLIFFファイルを
エクスポートする―

97
00:06:16,343 --> 00:06:17,778
Xcode以前のコマンドと
同じです

98
00:06:17,878 --> 00:06:21,748
ローカリゼーションの
インポートコマンドで取り込み

99
00:06:22,516 --> 00:06:26,653
Localization Catalogは

100
00:06:26,753 --> 00:06:30,357
ローカライズ可能な
全アセットをサポート

101
00:06:30,457 --> 00:06:35,195
Xcodeでローカライズ可能と
判断されたものなら

102
00:06:35,295 --> 00:06:38,031
Localization Catalogが
サポート

103
00:06:38,131 --> 00:06:40,634
文字列ファイルを超えます

104
00:06:41,702 --> 00:06:46,106
（拍手）

105
00:06:46,206 --> 00:06:50,244
Localization Catalogは

106
00:06:50,344 --> 00:06:55,616
コンテキストの情報も
ローカライザーに提供します

107
00:06:57,017 --> 00:07:01,255
Localization Catalogは
XLIFF上に構築されました

108
00:06:57,017 --> 00:07:01,255
Localization Catalogは
XLIFF上に構築されました

109
00:07:01,788 --> 00:07:04,424
先ほどの例に戻ります

110
00:07:04,525 --> 00:07:07,861
すべてのローカライズ可能な
文字列リソースは

111
00:07:07,961 --> 00:07:10,531
XLIFFフォーマットに
抽出されます

112
00:07:10,764 --> 00:07:15,536
ローカライズ可能だと
指定した他のものもすべて―

113
00:07:15,636 --> 00:07:18,372
Localization Catalogで
サポートされ

114
00:07:18,472 --> 00:07:21,108
xclocに
エクスポートされます

115
00:07:21,542 --> 00:07:24,578
文字列を含む
XLIFFファイルもです

116
00:07:25,179 --> 00:07:29,783
Localization Catalogの
中身を見てみましょう

117
00:07:31,351 --> 00:07:35,622
xclocの中にcontents.json
ファイルがあります

118
00:07:36,056 --> 00:07:40,561
エクスポートされたLocalization
Catalogのメタデータを含みます

119
00:07:40,661 --> 00:07:45,899
含まれる情報は
アプリケーションの開発言語

120
00:07:46,600 --> 00:07:50,204
Localization Catalogの
ターゲット言語

121
00:07:50,504 --> 00:07:54,474
Localization Catalogを
生成したツール

122
00:07:54,575 --> 00:08:00,013
この場合はXcodeの
バージョン番号とビルド番号です

123
00:07:54,575 --> 00:08:00,013
この場合はXcodeの
バージョン番号とビルド番号です

124
00:08:00,347 --> 00:08:05,452
エクスポートされたLocalization
Catalogのバージョン番号

125
00:08:06,086 --> 00:08:09,256
次です
生成されたxclocの中に

126
00:08:09,723 --> 00:08:12,793
Localized Contents
ディレクトリがあります

127
00:08:12,893 --> 00:08:18,232
ここにはローカライズ可能な
リソースが含まれます

128
00:08:18,465 --> 00:08:23,403
ローカライザーが
主に使うディレクトリです

129
00:08:24,571 --> 00:08:30,511
Localized Contentsの中には
XLIFFドキュメントがあります

130
00:08:30,611 --> 00:08:33,847
ローカライズされた
すべての文字列と―

131
00:08:33,981 --> 00:08:37,083
文字列以外のアセットも
ここに含まれます

132
00:08:37,183 --> 00:08:40,520
ローカライズしたい
画像などですね

133
00:08:40,754 --> 00:08:45,125
それらが同じ
ファイルシステムの階層に

134
00:08:45,225 --> 00:08:48,762
Xcodeプロジェクトとして
組み込まれます

135
00:08:49,563 --> 00:08:54,168
Localized Contentsを
使って

136
00:08:54,268 --> 00:08:57,604
言語のリソースを
上書きできます

137
00:08:57,704 --> 00:09:00,474
Interface Builder
ファイルなどです

138
00:08:57,704 --> 00:09:00,474
Interface Builder
ファイルなどです

139
00:09:01,575 --> 00:09:02,442
次を

140
00:09:03,710 --> 00:09:08,315
Localization Catalog内には
主にコンテキスト用に

141
00:09:08,415 --> 00:09:11,552
Source Contentsの
ディレクトリも作られます

142
00:09:11,885 --> 00:09:14,755
Source Contentsに
含まれるアセットが

143
00:09:14,855 --> 00:09:17,491
Localized Contentsの
作成に使われます

144
00:09:17,591 --> 00:09:24,064
Storyboardでは開発言語での
UIの配置を確認できます

145
00:09:24,164 --> 00:09:28,469
それで翻訳の長さを
決定できます

146
00:09:29,102 --> 00:09:32,539
ローカライズされた文字列が
ソースコードからのものでも

147
00:09:32,639 --> 00:09:37,110
Source Contents内では
ソースコードを生成しません

148
00:09:37,744 --> 00:09:42,883
コンテキスト用のアセットも
Xcodeプロジェクトとして

149
00:09:42,983 --> 00:09:47,621
同じファイルシステムの
階層に組み込まれます

150
00:09:47,888 --> 00:09:52,659
コンテキストのために
提供されるものです

151
00:09:52,759 --> 00:09:57,364
ソースの内容を変えても
Xcodeは無視します

152
00:09:57,464 --> 00:10:02,202
これらのリソースを
インポートしません

153
00:09:57,464 --> 00:10:02,202
これらのリソースを
インポートしません

154
00:10:02,970 --> 00:10:04,138
最後に―

155
00:10:04,805 --> 00:10:08,942
Localization Catalogには
Notesディレクトリがあります

156
00:10:09,042 --> 00:10:13,013
これを用いることで
付加的なコンテキスト情報を

157
00:10:13,113 --> 00:10:16,383
ローカライザーに
提供できます

158
00:10:16,650 --> 00:10:22,422
たとえばUIアタッチメントの
スクリーンショットや―

159
00:10:23,390 --> 00:10:29,096
アプリケーションを説明する
ReadMeファイルや動画

160
00:10:29,496 --> 00:10:34,334
ローカライザーに有用な
ものは何でも含められます

161
00:10:34,434 --> 00:10:37,704
Localization Catalogの
構成は以上です

162
00:10:37,871 --> 00:10:42,876
さらにXcodeビルドの
コマンドラインも更新されました

163
00:10:42,976 --> 00:10:47,247
エクスポート時にはXcode
Localization Catalogが作られます

164
00:10:47,347 --> 00:10:51,318
インポートコマンドは
下位互換性があるため―

165
00:10:51,418 --> 00:10:56,690
古いXLIFFファイルの
インポートだけでなく―

166
00:10:56,790 --> 00:11:00,894
新たなLocalization Catalogも
インポート可能です

167
00:10:56,790 --> 00:11:00,894
新たなLocalization Catalogも
インポート可能です

168
00:11:01,028 --> 00:11:06,967
次はヴィヴィアンがLocalization
Catalogのデモを行います

169
00:11:07,067 --> 00:11:08,502
どうも ありがとう

170
00:11:08,635 --> 00:11:13,674
（拍手）

171
00:11:13,807 --> 00:11:15,108
ありがとう サラ

172
00:11:19,379 --> 00:11:22,549
私たちは旅行のアプリケーションを
作成しています

173
00:11:22,649 --> 00:11:28,689
宇宙旅行を計画するという
前代未聞のサービスです

174
00:11:28,789 --> 00:11:31,825
その名も“バケーション･
プラネット”

175
00:11:32,526 --> 00:11:36,930
画面にはアプリケーションの名前と
ロゴが出ています

176
00:11:37,531 --> 00:11:39,399
閲覧をクリック

177
00:11:40,067 --> 00:11:45,873
パックツアーだけではなく
様々な項目を選択できます

178
00:11:46,006 --> 00:11:47,374
火星を選びます

179
00:11:48,942 --> 00:11:51,378
火星のどこに行くかを選択

180
00:11:51,478 --> 00:11:54,915
NASAのキュリオシティで
チェックインです

181
00:11:55,015 --> 00:11:56,783
ゲール･クレーターに
行きます

182
00:11:57,885 --> 00:12:00,587
出発日は この会議のあと

183
00:11:57,885 --> 00:12:00,587
出発日は この会議のあと

184
00:12:02,222 --> 00:12:05,926
期間は１か月
高速の宇宙船です

185
00:12:06,460 --> 00:12:09,163
人数は３名
サラとクリスが同行します

186
00:12:09,663 --> 00:12:12,166
火星旅行としては激安です

187
00:12:12,866 --> 00:12:15,502
先ほどの“Book”ボタンが
出ます

188
00:12:15,869 --> 00:12:18,038
予約できました

189
00:12:18,839 --> 00:12:22,676
火星に行きたい人は
世界中にいますが

190
00:12:22,776 --> 00:12:26,213
英語でiOSを使えない人も
多いため

191
00:12:26,313 --> 00:12:28,649
ローカライズが必要です

192
00:12:28,749 --> 00:12:31,418
Xcodeを使いましょう

193
00:12:32,586 --> 00:12:33,554
よし

194
00:12:33,654 --> 00:12:36,256
プロジェクトを選択

195
00:12:36,423 --> 00:12:39,259
“Info”から
“Localizations”

196
00:12:39,359 --> 00:12:42,963
“Plus”を選択
まずはフランス語を加えます

197
00:12:44,798 --> 00:12:49,870
Storyboardは初期設定で
ローカライズ可能であり

198
00:12:49,970 --> 00:12:54,241
また Stringsdictも同様です

199
00:12:54,341 --> 00:12:56,310
あとは“Finish”をクリック

200
00:12:58,011 --> 00:13:02,382
Xcodeがプロジェクトに
fr.lprojを作りました

201
00:12:58,011 --> 00:13:02,382
Xcodeがプロジェクトに
fr.lprojを作りました

202
00:13:02,482 --> 00:13:08,989
Storyboardには英語を
複製したStringsファイル

203
00:13:09,656 --> 00:13:11,091
画像も複製します

204
00:13:11,758 --> 00:13:15,896
画像をローカライズする
選択がまだでした

205
00:13:16,296 --> 00:13:19,133
右側の“Localize...”を
クリック

206
00:13:19,233 --> 00:13:22,536
複数の言語で共有された
コンテンツはないため―

207
00:13:22,669 --> 00:13:23,804
英語で入力します

208
00:13:23,904 --> 00:13:25,839
開発に用いた言語です

209
00:13:26,206 --> 00:13:27,608
“Localize”をクリック

210
00:13:27,708 --> 00:13:30,978
フランス語を選び
複製を作ります

211
00:13:31,245 --> 00:13:32,813
出ました

212
00:13:33,347 --> 00:13:36,950
エクスポートして
ローカライズします

213
00:13:37,317 --> 00:13:39,119
プロジェクトを選択

214
00:13:39,720 --> 00:13:41,021
“Editor”から

215
00:13:41,555 --> 00:13:43,590
“Export for
Localization”を選択

216
00:13:44,224 --> 00:13:48,795
“vacationplanetloc”と
名前を付けます

217
00:13:49,029 --> 00:13:52,900
フランス語用に
エクスポートすることを再確認

218
00:13:53,333 --> 00:13:54,601
“Save”をクリック

219
00:13:55,002 --> 00:13:59,173
Localization Catalogを
Xcodeが生成したので―

220
00:13:59,273 --> 00:14:02,142
Finderで確認できます

221
00:13:59,273 --> 00:14:02,142
Finderで確認できます

222
00:14:03,143 --> 00:14:05,546
ほら ありました

223
00:14:05,746 --> 00:14:11,018
フランス語のカタログです
.xclocの拡張子が付いてます

224
00:14:11,451 --> 00:14:13,720
サラの説明通り 中には―

225
00:14:13,820 --> 00:14:18,692
contents.jsonと
カタログのメタデータ

226
00:14:19,259 --> 00:14:21,728
Localized Contentsがあり

227
00:14:22,095 --> 00:14:26,333
ここにはXcode 9と同様
XLIFFがあります

228
00:14:26,433 --> 00:14:28,302
ご覧のとおり―

229
00:14:29,203 --> 00:14:31,605
文字列がすべてあり―

230
00:14:32,105 --> 00:14:37,077
未翻訳の英語の複製が
赤色で強調表示されてます

231
00:14:38,011 --> 00:14:40,514
Localized Contentsでは

232
00:14:40,814 --> 00:14:45,452
ファイル階層が再現され
ロゴの画像もあります

233
00:14:46,453 --> 00:14:48,922
Source Contentsを
見てみましょう

234
00:14:49,022 --> 00:14:52,826
ここでもファイル階層が
再現されています

235
00:14:53,160 --> 00:14:56,430
そのため 下に
Storyboardがあり―

236
00:14:56,530 --> 00:14:59,500
英語版の
InfoPlist.stringsと―

237
00:14:59,600 --> 00:15:02,803
コードで定義された
文字列用のLocalizable.strings

238
00:14:59,600 --> 00:15:02,803
コードで定義された
文字列用のLocalizable.strings

239
00:15:02,903 --> 00:15:07,541
Localizable.stringsdictと
英語版の画像があります

240
00:15:08,375 --> 00:15:12,613
Localization Catalogの
最後はNotesのフォルダです

241
00:15:12,713 --> 00:15:15,482
Xcodeは
ここを空にしてます

242
00:15:15,582 --> 00:15:17,151
しかし 昨日―

243
00:15:17,251 --> 00:15:22,923
スクリーンショットを手軽に
作れるXCUIテストを実行

244
00:15:23,757 --> 00:15:28,495
スクリーンショットはすべて
テスト結果の―

245
00:15:28,595 --> 00:15:31,164
添付ファイルとして
保存されてます

246
00:15:31,465 --> 00:15:32,733
ファイルはここに

247
00:15:33,967 --> 00:15:38,906
スプラッシュ画面は
ここに添付されています

248
00:15:40,207 --> 00:15:41,141
出ました

249
00:15:41,241 --> 00:15:45,012
画像をFinderに
持っていき―

250
00:15:45,245 --> 00:15:47,514
Notesにコピーします

251
00:15:47,614 --> 00:15:49,416
“Show in Finder”を選択

252
00:15:49,950 --> 00:15:54,154
“Show Package Contents”
添付ファイルを確認

253
00:15:54,254 --> 00:15:55,589
ありました

254
00:15:56,690 --> 00:15:57,858
コピー

255
00:15:59,459 --> 00:16:01,562
そしてペースト

256
00:15:59,459 --> 00:16:01,562
そしてペースト

257
00:16:02,663 --> 00:16:05,799
この“Travel Details”は
特に重要です

258
00:16:05,899 --> 00:16:08,535
例の“Book”ボタンが
入っています

259
00:16:09,770 --> 00:16:14,942
Xcode Localization
Catalogの全体を―

260
00:16:15,042 --> 00:16:16,910
ローカライザーに送ります

261
00:16:18,111 --> 00:16:21,648
見事な早わざで
翻訳は完成済みです

262
00:16:21,748 --> 00:16:24,418
あとはインポートするだけ

263
00:16:25,419 --> 00:16:27,588
プロジェクトに戻ります

264
00:16:28,121 --> 00:16:30,190
選択されてることを確認

265
00:16:30,624 --> 00:16:32,426
エディタに行き―

266
00:16:32,726 --> 00:16:37,397
“Import
Localizations...”を選択

267
00:16:37,631 --> 00:16:42,536
“return”を選択
クリックで開く

268
00:16:43,737 --> 00:16:46,673
Xcode 9と同様の
比較ビューが出ます

269
00:16:46,773 --> 00:16:50,744
文字列に関する警告
エラー 変更が表示されます

270
00:16:50,844 --> 00:16:55,749
InfoPlist.stringsの翻訳が
ないので警告が出てます

271
00:16:55,849 --> 00:17:00,587
その翻訳は必要ないので
今は警告を無視します

272
00:16:55,849 --> 00:17:00,587
その翻訳は必要ないので
今は警告を無視します

273
00:17:01,688 --> 00:17:03,557
変更も確認できます

274
00:17:03,657 --> 00:17:07,694
Storyboardでは
フランス語訳が表示されます

275
00:17:07,794 --> 00:17:11,231
英語の複製を
置き換える文字列です

276
00:17:11,999 --> 00:17:14,367
“Import”をクリック

277
00:17:15,202 --> 00:17:20,073
文字列やそれ以外の
リソースの訳はすべて―

278
00:17:20,174 --> 00:17:22,476
正しい位置に収まりました

279
00:17:23,544 --> 00:17:29,016
（拍手）

280
00:17:29,149 --> 00:17:31,251
もう一度 確認しましょう

281
00:17:31,518 --> 00:17:33,554
ファイルを数か所 チェック

282
00:17:33,654 --> 00:17:34,655
問題なし

283
00:17:34,755 --> 00:17:38,692
Main.stringsも
フランス語になっています

284
00:17:39,393 --> 00:17:40,861
画像を確認

285
00:17:40,961 --> 00:17:43,530
これもフランス語に
なってます

286
00:17:43,764 --> 00:17:49,303
フランス語で操作し
問題ないことを確かめます

287
00:17:49,636 --> 00:17:53,073
まずはアクティブな
Schemeを選び―

288
00:17:53,574 --> 00:17:55,275
“Edit Scheme...”を選択

289
00:17:55,843 --> 00:17:59,646
アプリケーションの
言語設定をフランス語に

290
00:17:59,880 --> 00:18:02,516
地域もフランスに設定

291
00:17:59,880 --> 00:18:02,516
地域もフランスに設定

292
00:18:02,616 --> 00:18:04,484
準備が整いました

293
00:18:05,719 --> 00:18:07,488
英語版を停止します

294
00:18:08,522 --> 00:18:09,389
よし

295
00:18:09,957 --> 00:18:13,660
瞬時にフランス語に
切り替わります

296
00:18:15,062 --> 00:18:16,296
大丈夫そうです

297
00:18:16,396 --> 00:18:19,566
予約ボタンを
ざっとチェックします

298
00:18:20,033 --> 00:18:24,605
閲覧　火星を再訪
ゲール･クレーターは必見

299
00:18:24,771 --> 00:18:27,941
大丈夫です
ボタンは翻訳されてます

300
00:18:28,041 --> 00:18:31,712
スクリーンショットを入れたのが
よかったのでしょう

301
00:18:32,479 --> 00:18:38,852
日付に表示される月の名前を
訳す必要はなかったですね

302
00:18:38,952 --> 00:18:43,223
自動で形式を決める
日付選択欄を使えば―

303
00:18:43,323 --> 00:18:45,859
自動でローカライズされます

304
00:18:47,027 --> 00:18:49,763
値段のフォーマットも
自動化すると―

305
00:18:49,863 --> 00:18:53,700
数字の形式が直され
値段がユーロで出ます

306
00:18:54,334 --> 00:18:56,637
以上 すごく簡単に

307
00:18:56,737 --> 00:19:01,208
文字列とその他のリソースを
フランス語にしました

308
00:18:56,737 --> 00:19:01,208
文字列とその他のリソースを
フランス語にしました

309
00:19:01,308 --> 00:19:05,612
Xcode 9で文字列を
修正するのと同じ手軽さです

310
00:19:05,913 --> 00:19:07,981
ここでスライドに戻り―

311
00:19:08,081 --> 00:19:12,152
Xcode Localization
Catalogのまとめをします

312
00:19:12,920 --> 00:19:18,959
（拍手）

313
00:19:19,660 --> 00:19:23,931
今回紹介したXcode
Localization Catalogは

314
00:19:24,031 --> 00:19:27,134
ローカリゼーションの
エクスポートとインポートの

315
00:19:27,234 --> 00:19:29,236
新たな標準です

316
00:19:29,803 --> 00:19:32,339
翻訳者の柔軟性が高まり―

317
00:19:32,439 --> 00:19:36,743
視覚的 機能的なコンテキストを
提供することで―

318
00:19:36,844 --> 00:19:41,682
より水準の高い翻訳を
生み出すことができます

319
00:19:42,916 --> 00:19:46,186
サポートするファイル形式が
増え―

320
00:19:46,286 --> 00:19:49,223
文字列以外のリソースの
インポートやエクスポートも

321
00:19:49,323 --> 00:19:52,059
文字列の操作と同様に
簡単です

322
00:19:53,160 --> 00:19:55,429
Xcodeビルドも更新され―

323
00:19:55,529 --> 00:19:59,600
継続的な統合サポートに
Localization Catalogが使えます

324
00:20:00,033 --> 00:20:04,471
コンテンツのローカライズも
問題ありません

325
00:20:04,571 --> 00:20:08,609
XcodeとXcodeビルドは
下位互換性があり―

326
00:20:08,709 --> 00:20:11,712
戻ってきたXLIFFの
インポートが可能です

327
00:20:12,446 --> 00:20:16,016
次にクリスが Siri
ショートカット作成時の―

328
00:20:16,116 --> 00:20:21,855
Intent定義ファイルの
ローカライズを説明します

329
00:20:22,189 --> 00:20:28,161
（拍手）

330
00:20:28,262 --> 00:20:31,265
ヴィヴィアン ありがとう
素晴らしい

331
00:20:31,365 --> 00:20:33,801
火星への旅が楽しみです

332
00:20:35,235 --> 00:20:37,671
テーマはIntent定義で

333
00:20:37,771 --> 00:20:42,075
Siriショートカットを
ローカライズする方法です

334
00:20:42,176 --> 00:20:48,649
Intent定義はXcodeの中の
ファイルに作成され

335
00:20:48,749 --> 00:20:53,420
Siriショートカットのカスタム
Intentの元になります

336
00:20:53,520 --> 00:20:56,857
.intentdefinitionの
拡張子が付いたファイルで

337
00:20:56,957 --> 00:21:00,060
Xcodeに
カスタムエディタがあります

338
00:20:56,957 --> 00:21:00,060
Xcodeに
カスタムエディタがあります

339
00:21:00,160 --> 00:21:05,132
また ベースローカリゼーションを
活用しています

340
00:21:05,232 --> 00:21:07,501
Intentを翻訳する時

341
00:21:07,601 --> 00:21:12,206
言語ごとにファイルを
作る必要はなく

342
00:21:12,906 --> 00:21:17,010
Intent定義内の
.stringsファイルを使って

343
00:21:17,110 --> 00:21:18,912
ローカライズします

344
00:21:19,913 --> 00:21:24,418
.stringsdictファイルも
サポートされており―

345
00:21:24,518 --> 00:21:30,657
複数形規則や可変幅の
文字列などに対応しています

346
00:21:31,992 --> 00:21:35,362
これらについて
まだ未見の方は

347
00:21:35,462 --> 00:21:40,901
昨日のイントロダクションの
ストリーミングで ご確認を

348
00:21:42,569 --> 00:21:46,740
Intent定義エディタを
見ていきます

349
00:21:46,840 --> 00:21:51,311
バケーション･プラネットの
アプリケーションでは―

350
00:21:52,513 --> 00:21:55,883
旅行を予約する
Intentがあります

351
00:21:56,417 --> 00:21:59,820
最もローカライズしたいのは

352
00:21:59,920 --> 00:22:03,290
Intentの
タイトルと説明ですが

353
00:21:59,920 --> 00:22:03,290
Intentの
タイトルと説明ですが

354
00:22:04,591 --> 00:22:08,629
ローカライズが
多く必要になるのは―

355
00:22:08,729 --> 00:22:11,131
ショートカットタイプです

356
00:22:11,231 --> 00:22:15,936
Intentパラメータと
組み合わされて作成されます

357
00:22:16,803 --> 00:22:21,442
Intentが呼び出されると
レスポンスが生成されます

358
00:22:21,542 --> 00:22:26,647
Response Templatesで
これもカスタマイズできます

359
00:22:26,747 --> 00:22:29,082
これはショートカットと

360
00:22:29,182 --> 00:22:32,953
同じやり方で
ローカライズされます

361
00:22:33,887 --> 00:22:37,458
次に見るのは
Intentの構造と―

362
00:22:37,558 --> 00:22:39,526
何をローカライズできるのか

363
00:22:40,828 --> 00:22:45,499
Intentは様々な型の
パラメータの集合です

364
00:22:45,599 --> 00:22:52,105
整数型や文字列型
カスタムオブジェクトなど

365
00:22:52,206 --> 00:22:58,078
またIntent定義から
定義された列挙型もそうです

366
00:23:00,547 --> 00:23:05,686
パラメータが組み合わされて
様々なショートカットになり

367
00:23:05,786 --> 00:23:09,389
意味を成す
タイトルになります

368
00:23:11,225 --> 00:23:15,596
レスポンスは
プロパティの集合体です

369
00:23:15,696 --> 00:23:20,434
よく知られている
文字列型や整数型

370
00:23:20,534 --> 00:23:24,705
そして列挙型にもなり得ます

371
00:23:25,806 --> 00:23:31,378
Intent定義で
最もローカライズされるのは

372
00:23:31,478 --> 00:23:35,249
ショートカットと
レスポンステンプレートです

373
00:23:35,349 --> 00:23:40,821
話はショートカットの
ローカライズに集中しますが

374
00:23:40,921 --> 00:23:45,025
レスポンステンプレートでも
やり方は同様です

375
00:23:46,360 --> 00:23:50,230
“バケーション･
プラネット”の例です

376
00:23:50,330 --> 00:23:54,535
これは旅行を予約する際の
ショートカットです

377
00:23:54,635 --> 00:23:57,204
旅の種類を構成するのは

378
00:23:57,304 --> 00:24:00,741
列挙型の
プレースホルダです

379
00:23:57,304 --> 00:24:00,741
列挙型の
プレースホルダです

380
00:24:00,841 --> 00:24:05,245
フライトやクルーズ
パック旅行などを

381
00:24:05,345 --> 00:24:07,648
列挙して 予約させます

382
00:24:07,748 --> 00:24:12,319
Intent定義を
ローカライズするには

383
00:24:12,419 --> 00:24:15,656
先ほどのLocalize
ボタンを押します

384
00:24:15,756 --> 00:24:21,495
すると Xcodeは
その列挙の各項目に

385
00:24:21,595 --> 00:24:25,933
文字列を作成します

386
00:24:27,734 --> 00:24:32,806
また我々の使う言葉の特徴を
元にしています

387
00:24:34,608 --> 00:24:37,778
“Book a flight”
テンプレートには

388
00:24:37,878 --> 00:24:40,681
不定冠詞が使われています

389
00:24:41,615 --> 00:24:45,219
単数の不定冠詞
“a”です

390
00:24:45,319 --> 00:24:48,989
フライト クルーズ
パック旅行も同様で

391
00:24:49,089 --> 00:24:53,627
文法上 子音で始まる単語の
不定冠詞は“a”です

392
00:24:53,727 --> 00:24:57,731
でも もし新しい項目を
加えたら？

393
00:24:57,831 --> 00:25:01,568
火星への
遠征（expedition）です

394
00:24:57,831 --> 00:25:01,568
火星への
遠征（expedition）です

395
00:25:02,269 --> 00:25:07,141
Xcodeが.stringsファイルに
生成するのは―

396
00:25:07,875 --> 00:25:10,310
“Book a expedition”

397
00:25:10,410 --> 00:25:13,347
文法的には間違いですね

398
00:25:13,447 --> 00:25:20,187
このような.stringsファイルは
明確にIDで規定されているので

399
00:25:20,287 --> 00:25:23,757
.stringsファイルの内容を
変更すれば

400
00:25:23,857 --> 00:25:27,127
文法的な間違えは直ります

401
00:25:27,795 --> 00:25:33,066
このような文法の規則は
英語だけではなく

402
00:25:33,167 --> 00:25:36,170
他言語にも存在します

403
00:25:36,270 --> 00:25:40,174
フランス語を例にとって
みましょう

404
00:25:40,274 --> 00:25:46,847
冠詞の性別は 係る名詞の
性別によって決まります

405
00:25:48,382 --> 00:25:52,019
もっと複雑な例を
見てみましょう

406
00:25:52,753 --> 00:25:59,059
このショートカットにより
数名分の旅の予約をします

407
00:25:59,159 --> 00:26:03,096
Xcodeは.stringsファイルを
生成する時

408
00:25:59,159 --> 00:26:03,096
Xcodeは.stringsファイルを
生成する時

409
00:26:03,197 --> 00:26:09,036
テンプレートと列挙型の値を
組み合わせます

410
00:26:09,136 --> 00:26:12,339
しかし 可能な
すべての整数ごとに

411
00:26:12,439 --> 00:26:15,909
１つの文字列を
生成することはありません

412
00:26:16,543 --> 00:26:21,348
生成した文字列とともに
プレースホルダを残し

413
00:26:21,448 --> 00:26:25,652
ショートカットシステムが
実行時にそれを置き換えます

414
00:26:26,887 --> 00:26:30,457
これは合理性に見えますよね

415
00:26:30,557 --> 00:26:35,095
ご覧のように
“１回の旅やフライトを”

416
00:26:35,195 --> 00:26:36,563
“数名分予約する”

417
00:26:38,332 --> 00:26:42,202
.stringsファイル中には―

418
00:26:42,302 --> 00:26:46,473
生成されたIDと
文字列があり―

419
00:26:46,573 --> 00:26:49,710
プレースホルダは
そのまま残っています

420
00:26:49,843 --> 00:26:55,482
私がこの会の成功を祝い
１人でクルーズを予約したら

421
00:26:57,117 --> 00:27:00,187
ショートカットに
現れるのは―

422
00:26:57,117 --> 00:27:00,187
ショートカットに
現れるのは―

423
00:27:00,287 --> 00:27:03,657
“Book a cruise for 1 people”
でしょう

424
00:27:03,757 --> 00:27:05,893
文法的には誤りです

425
00:27:07,294 --> 00:27:11,198
そこで
.stringsdictファイルです

426
00:27:11,298 --> 00:27:16,003
すべての複数形を
正しく表記できるように

427
00:27:16,103 --> 00:27:18,972
システムが
対応してくれます

428
00:27:20,440 --> 00:27:22,743
.stringsdictファイルには

429
00:27:22,843 --> 00:27:27,448
辞書機能があり
.stringsファイルで

430
00:27:27,548 --> 00:27:31,485
お見せした文字列が
キーになっています

431
00:27:31,585 --> 00:27:35,422
キーとして
そちらかIDを使えます

432
00:27:36,957 --> 00:27:41,228
そして また別の文字列も
作成されます

433
00:27:41,328 --> 00:27:44,965
ユーザインターフェイスで
表示されるものです

434
00:27:46,333 --> 00:27:49,903
ここで新たな変数が
使われています

435
00:27:50,003 --> 00:27:55,309
英語の複数形規則に基づき
単数や それ以外の場合―

436
00:27:55,409 --> 00:27:58,312
別のものに置き換えられます

437
00:28:00,714 --> 00:28:03,884
.stringsdictファイルの
詳細については―

438
00:28:03,984 --> 00:28:07,721
Xcode9がテーマの
昨年のセッションを

439
00:28:07,821 --> 00:28:10,757
WWDCのアプリケーションで
見られます

440
00:28:12,926 --> 00:28:15,963
さて 私が
クルーズを予約すると―

441
00:28:16,330 --> 00:28:20,601
“Book a cruise for 1 person”と
システムは表示するはず

442
00:28:20,701 --> 00:28:23,737
では１人の場合で試します

443
00:28:23,837 --> 00:28:26,306
正しく表示されています

444
00:28:27,274 --> 00:28:30,811
同様に 全員分の
予約もしましょう

445
00:28:31,211 --> 00:28:34,348
講演者３人分です

446
00:28:36,517 --> 00:28:40,053
“Book a cruise for 3 people”と
システムは表示します

447
00:28:42,689 --> 00:28:47,795
コード内に作成された
Intentについてです

448
00:28:48,395 --> 00:28:52,800
システムに提供する
Intentを作成するのは

449
00:28:52,900 --> 00:28:58,038
ショートカットの
表示時点である必要はなく

450
00:28:58,138 --> 00:29:03,443
ユーザの操作に基づき
あとからでも表示できます

451
00:28:58,138 --> 00:29:03,443
ユーザの操作に基づき
あとからでも表示できます

452
00:29:04,278 --> 00:29:06,847
新しいAPIを使えば

453
00:29:06,947 --> 00:29:10,717
遅延型ローカライズに使える
文字列を作成できます

454
00:29:10,818 --> 00:29:15,856
ユーザに表示される際に
ローカライズされるのです

455
00:29:17,691 --> 00:29:23,063
システムにIntentを
提供するのは必要です

456
00:29:23,163 --> 00:29:26,967
ユーザが操作を
行った際―

457
00:29:27,367 --> 00:29:32,172
どこかの時点で
反応する必要があるからです

458
00:29:33,474 --> 00:29:37,611
このAPIの操作は
非常に簡単です

459
00:29:37,711 --> 00:29:40,581
NSStringの呼び出しを
１つ追加して

460
00:29:40,681 --> 00:29:42,983
コードに作成した
Intentに設定する―

461
00:29:43,083 --> 00:29:47,254
文字列を
ラップすればいいのです

462
00:29:50,023 --> 00:29:53,794
今までのところを
まとめてみましょう

463
00:29:54,061 --> 00:29:57,498
Xcodeは Intent
定義ファイルで定義した―

464
00:29:57,598 --> 00:30:01,902
列挙型と
ショートカットを組み合わせて

465
00:29:57,598 --> 00:30:01,902
列挙型と
ショートカットを組み合わせて

466
00:30:02,002 --> 00:30:04,271
.stringsファイルを作成

467
00:30:05,305 --> 00:30:07,641
ショートカットの
ローカライズには―

468
00:30:07,741 --> 00:30:11,979
.stringsと.stringsdictの
両方のファイルが使えます

469
00:30:12,880 --> 00:30:15,949
ユーザの操作をシステムに
通知するため

470
00:30:16,049 --> 00:30:20,954
システムに提供するIntentを
コード内で作成するには

471
00:30:21,588 --> 00:30:25,626
deferredLocalizedIntentsStringの
APIを使えます

472
00:30:25,726 --> 00:30:29,129
ユーザが表示する時点で
ローカライズされるように

473
00:30:29,229 --> 00:30:30,898
文字列をラップします

474
00:30:30,998 --> 00:30:33,834
アプリケーションでの
作成時ではなく―

475
00:30:33,934 --> 00:30:37,137
Intentの提供後
設定言語を変えても

476
00:30:37,237 --> 00:30:41,742
ショートカットを
表示する際には

477
00:30:41,842 --> 00:30:44,444
ユーザ設定が
有効になります

478
00:30:46,947 --> 00:30:51,218
.stringsdictファイルに
文字列を定義するほうが

479
00:30:51,318 --> 00:30:53,854
実行時には望ましいです

480
00:30:54,655 --> 00:30:59,726
複数形規則などを
気にする必要のない―

481
00:30:59,827 --> 00:31:03,530
大部分のローカライズが
.stringsファイルでできます

482
00:30:59,827 --> 00:31:03,530
大部分のローカライズが
.stringsファイルでできます

483
00:31:04,364 --> 00:31:08,936
.stringsや.stringsdict
ファイルの名前は

484
00:31:09,036 --> 00:31:13,907
Intent定義と同じにして
オーバーライドします

485
00:31:15,843 --> 00:31:19,213
.stringsdictファイルを
作成する時

486
00:31:19,313 --> 00:31:23,150
文字列自体か
.stringsファイルで

487
00:31:23,250 --> 00:31:27,287
Xcodeがキーに設定した
文字列IDを使えます

488
00:31:27,387 --> 00:31:29,890
これが
ローカライズ文字列キー

489
00:31:29,990 --> 00:31:33,026
Intent定義内で
変更が生じても

490
00:31:33,126 --> 00:31:35,996
ある程度の安定性が
得られます

491
00:31:38,031 --> 00:31:40,534
ではヴィヴィアンが
再登場して

492
00:31:40,634 --> 00:31:45,339
使い方やXcodeでの全行程を
お見せします

493
00:31:46,640 --> 00:31:51,645
（拍手）

494
00:31:51,778 --> 00:31:53,247
ありがとう クリス

495
00:32:03,824 --> 00:32:08,796
一度 火星へ行ったら
何度も行きたくなるのでは？

496
00:32:08,896 --> 00:32:12,232
予想以上に安価で行けますし

497
00:32:12,766 --> 00:32:18,071
アプリケーションが次の旅行や
よく行く旅先の情報の―

498
00:32:18,172 --> 00:32:21,275
ショートカットをくれたら？

499
00:32:21,375 --> 00:32:26,013
それを念頭に置き
Intent定義を加えます

500
00:32:27,314 --> 00:32:31,218
これが私たちの
Intent定義です

501
00:32:31,318 --> 00:32:34,955
カスタムIntentとして
“Book Item”が

502
00:32:35,055 --> 00:32:37,524
タイトルとその説明―

503
00:32:38,458 --> 00:32:41,929
下のほうには
実際の提案があります

504
00:32:42,029 --> 00:32:46,667
ここにあるのは
旅の種類 旅行者の人数

505
00:32:46,767 --> 00:32:49,837
複数のパラメータがあります

506
00:32:50,437 --> 00:32:53,674
旅行者は１つの整数で―

507
00:32:54,408 --> 00:32:58,378
種類はこの列挙型に
定義されています

508
00:32:58,479 --> 00:33:03,984
フライトやクルーズ
パック旅行や遠征などです

509
00:32:58,479 --> 00:33:03,984
フライトやクルーズ
パック旅行や遠征などです

510
00:33:05,085 --> 00:33:09,089
システムの提案通りにユーザが
別の旅を予約したら―

511
00:33:09,189 --> 00:33:13,827
それに対するレスポンスを
フィードバックする必要があります

512
00:33:13,927 --> 00:33:19,133
旅の予約の場合は 成功か
失敗のメッセージだけですね

513
00:33:19,233 --> 00:33:22,536
これもパラメータの
組み合わせの１つです

514
00:33:23,637 --> 00:33:26,206
ユーザ向けの
文字列があるので

515
00:33:26,907 --> 00:33:29,543
ローカライズします

516
00:33:29,643 --> 00:33:33,447
先ほど画面で示したとおり
ここで―

517
00:33:33,547 --> 00:33:34,948
“Localize...”をクリック

518
00:33:35,249 --> 00:33:39,319
Intent定義ファイルは
Interface Builder Fileと同様に

519
00:33:39,419 --> 00:33:43,891
定義は１つで すべての翻訳を
.stringsファイルにと

520
00:33:43,991 --> 00:33:45,926
これはベースに入れます

521
00:33:46,527 --> 00:33:49,229
“Localize”を押して

522
00:33:49,329 --> 00:33:52,099
フランス語をチェック

523
00:33:52,699 --> 00:33:56,103
この時点でXcodeは
フランス語訳用の―

524
00:33:56,203 --> 00:33:59,606
.stringsファイルを
作成しました

525
00:34:00,073 --> 00:34:01,442
出てきます

526
00:34:01,975 --> 00:34:04,611
このようになっています

527
00:34:05,379 --> 00:34:09,550
列挙型で定義された
パラメータの値と

528
00:34:09,650 --> 00:34:12,920
文字列の可能なすべての
組み合わせができています

529
00:34:13,152 --> 00:34:15,755
フランス語を解さない私にも

530
00:34:15,856 --> 00:34:20,494
名詞の性別に対して
正確な冠詞を付ける―

531
00:34:20,594 --> 00:34:23,563
必要性が分かります

532
00:34:25,299 --> 00:34:29,402
他にも修正が必要な
文法上の問題があります

533
00:34:29,503 --> 00:34:31,605
英語の場合の例で

534
00:34:31,705 --> 00:34:36,510
１人（one）の人間で
１回（an）の遠征の場合は？

535
00:34:36,610 --> 00:34:40,581
特に複数形の場合の
手直しが必要です

536
00:34:40,681 --> 00:34:45,918
Intent定義と同じ名前で
.stringsdictファイルを追加

537
00:34:46,286 --> 00:34:48,554
プロジェクトを選んで

538
00:34:48,655 --> 00:34:50,489
“New File...”を選択

539
00:34:51,125 --> 00:34:55,529
Xcode9で新搭載の
Stringsdictテンプレートを使用

540
00:34:56,663 --> 00:34:57,464
“Next”をクリック

541
00:34:58,499 --> 00:35:02,135
正確な名前の入力が重要です

542
00:34:58,499 --> 00:35:02,135
正確な名前の入力が重要です

543
00:35:03,303 --> 00:35:04,471
“Intents”

544
00:35:05,339 --> 00:35:06,106
それから

545
00:35:06,607 --> 00:35:07,574
“Create”

546
00:35:09,977 --> 00:35:15,516
フランス語の.stringsファイルで
IDを捜す必要はありません

547
00:35:17,017 --> 00:35:19,253
個々のファイルは一意なので

548
00:35:19,353 --> 00:35:21,622
他のファイルと混同しません

549
00:35:21,789 --> 00:35:25,092
ここから直接コピーできます

550
00:35:25,959 --> 00:35:27,594
では　コピー

551
00:35:29,196 --> 00:35:31,598
そして
Stringsdictに行き―

552
00:35:32,299 --> 00:35:34,468
ペーストします

553
00:35:35,168 --> 00:35:36,336
できました

554
00:35:36,904 --> 00:35:38,472
ご覧のとおり

555
00:35:38,772 --> 00:35:42,609
ペースト時にXcodeが
パラメータを設定してます

556
00:35:42,709 --> 00:35:46,447
このままSiriショートカットに
使えます

557
00:35:46,647 --> 00:35:50,651
ここで複数形の
規則を入力します

558
00:35:50,751 --> 00:35:55,656
英語を使うので
単数形と複数形だけで十分

559
00:35:56,123 --> 00:36:00,761
ファイルは完成済みなので
置き換えます

560
00:35:56,123 --> 00:36:00,761
ファイルは完成済みなので
置き換えます

561
00:36:03,096 --> 00:36:05,532
さて これは削除です

562
00:36:07,501 --> 00:36:09,770
完成ファイルを探します

563
00:36:16,877 --> 00:36:18,445
ありました

564
00:36:19,947 --> 00:36:22,549
Xcode複製を作ります

565
00:36:23,150 --> 00:36:24,084
できた

566
00:36:24,184 --> 00:36:25,652
よし 見てみます

567
00:36:28,555 --> 00:36:32,760
２つの問題を
１度に解決してる例です

568
00:36:33,727 --> 00:36:36,330
“Book a expedition”を
チェックします

569
00:36:36,530 --> 00:36:39,600
ここの文字列には
“Book a expedition”とあります

570
00:36:40,200 --> 00:36:45,205
しかし 複数形の規則には
１人の場合と―

571
00:36:45,305 --> 00:36:47,708
複数名の場合が
設定されています

572
00:36:48,442 --> 00:36:51,979
“a”と“an”の問題も
修正しています

573
00:36:52,079 --> 00:36:55,048
実際の文字列には
“an”が出ます

574
00:36:55,616 --> 00:36:56,617
それでは―

575
00:36:56,717 --> 00:37:00,320
アプリケーションの
完成版を操作します

576
00:36:56,717 --> 00:37:00,320
アプリケーションの
完成版を操作します

577
00:37:00,420 --> 00:37:03,757
作成したショートカットを
確認しましょう

578
00:37:06,460 --> 00:37:07,661
では―

579
00:37:08,028 --> 00:37:11,331
前と同じく
ゲール･クレーターに行きます

580
00:37:11,632 --> 00:37:15,469
閲覧　火星
ゲール･クレーター

581
00:37:15,669 --> 00:37:18,338
期間は１日ではなく…

582
00:37:19,606 --> 00:37:20,908
これで いいかも

583
00:37:21,008 --> 00:37:24,945
１人の場合の確認なので
今回は私だけ

584
00:37:25,379 --> 00:37:27,448
“Book”をタップすると

585
00:37:27,881 --> 00:37:31,118
ショートカットが作成されて
提供されます

586
00:37:31,218 --> 00:37:32,820
確認しましょう

587
00:37:33,086 --> 00:37:34,922
ショートカットがあるのは

588
00:37:35,255 --> 00:37:37,057
“Settings”内の―

589
00:37:37,558 --> 00:37:39,927
“Siri & Search”です

590
00:37:40,027 --> 00:37:43,764
“Book an expedition
for 1 person”

591
00:37:44,832 --> 00:37:50,470
（拍手）

592
00:37:51,371 --> 00:37:54,074
英語版の修正ができました

593
00:37:54,174 --> 00:37:57,411
次はフランス語に
ローカライズします

594
00:37:57,511 --> 00:38:00,814
最初のデモと同様
手順は簡単です

595
00:37:57,511 --> 00:38:00,814
最初のデモと同様
手順は簡単です

596
00:38:01,415 --> 00:38:02,950
Xcodeに戻ります

597
00:38:03,550 --> 00:38:04,585
いいですね

598
00:38:05,118 --> 00:38:08,288
Stringsdictの
ローカライズがまだです

599
00:38:08,388 --> 00:38:09,923
まずは英語

600
00:38:10,023 --> 00:38:11,391
フランス語をチェック

601
00:38:11,491 --> 00:38:13,260
エクスポートするのに
必要です

602
00:38:13,927 --> 00:38:17,131
再度 プロジェクトを
選択します

603
00:38:17,598 --> 00:38:18,899
“Editor”の―

604
00:38:19,133 --> 00:38:21,168
“Export For
Localization...”を選択

605
00:38:21,535 --> 00:38:26,773
２度目のローカリゼーションなので
名前に“Loc2”を付けます

606
00:38:27,374 --> 00:38:30,077
フランス語であることを確認

607
00:38:30,210 --> 00:38:31,511
“Save”をクリック

608
00:38:31,945 --> 00:38:35,549
Xcodeが別のLocalization
Catalogを作成します

609
00:38:37,918 --> 00:38:39,419
確認しましょう

610
00:38:42,456 --> 00:38:44,992
ローカライズされた
コンテンツをチェック

611
00:38:45,092 --> 00:38:47,227
XLIFFから分かるとおり―

612
00:38:47,427 --> 00:38:53,300
赤色はIntent定義で
作成した新しい文字列です

613
00:38:53,767 --> 00:38:57,404
最初にインポートした
翻訳もあります

614
00:38:57,504 --> 00:39:01,708
アプリケーション開発の際は
積み上げ式にローカライズできます

615
00:38:57,504 --> 00:39:01,708
アプリケーション開発の際は
積み上げ式にローカライズできます

616
00:39:01,809 --> 00:39:05,345
最初にローカライズしたあと
第２版で一部を変更

617
00:39:05,512 --> 00:39:08,448
再び ローカライズするため
エクスポート時も―

618
00:39:08,549 --> 00:39:10,617
元の情報は残ってます

619
00:39:12,085 --> 00:39:15,088
文字列以外の
リソースでも同じです

620
00:39:15,188 --> 00:39:18,959
フランス語版の画像が
保存されてます

621
00:39:19,793 --> 00:39:24,031
アプリケーションを開発し
ローカライズと作業を続けても―

622
00:39:24,131 --> 00:39:27,301
最初と変わらず
簡単なままです

623
00:39:27,935 --> 00:39:32,639
文字列や他のリソース
Intent定義にも対応可能

624
00:39:32,740 --> 00:39:35,676
追加の火星旅行を
提案できます

625
00:39:35,976 --> 00:39:41,481
最後にクリスと交代し
まとめてもらいましょう

626
00:39:41,782 --> 00:39:47,821
（拍手）

627
00:39:51,058 --> 00:39:52,526
ありがとう　ヴィヴィアン

628
00:39:53,026 --> 00:39:56,763
すごいですね
火星旅行が楽しみです

629
00:39:58,465 --> 00:40:00,067
ご覧になったとおり―

630
00:39:58,465 --> 00:40:00,067
ご覧になったとおり―

631
00:40:00,200 --> 00:40:05,539
Xcode Localization
CatalogはXcodeの新標準です

632
00:40:06,974 --> 00:40:12,613
文字列のリソースだけでなく
ローカライズ可能な―

633
00:40:12,713 --> 00:40:15,349
あらゆるリソースに
対応します

634
00:40:15,649 --> 00:40:21,488
ローカライザーへ柔軟に
コンテキストを提供できます

635
00:40:21,588 --> 00:40:24,258
テスト結果の
スクリーンショットを入れたり―

636
00:40:24,358 --> 00:40:28,395
使い方を示すReadMeファイルや
動画も入れられます

637
00:40:28,495 --> 00:40:31,598
ローカライザーに必要な
コンテキストを与え―

638
00:40:31,698 --> 00:40:36,170
１回で正確な訳が
得られるようにします

639
00:40:37,371 --> 00:40:41,408
Siriショートカットは
手軽にローカライズできます

640
00:40:41,508 --> 00:40:44,445
Intent定義ファイルを
ローカライズするだけです

641
00:40:45,345 --> 00:40:49,750
.stringsファイルによる基礎的な
ローカリゼーションに加えて―

642
00:40:49,850 --> 00:40:54,488
適宜 .stringsdictファイルを
用いることで―

643
00:40:54,588 --> 00:40:58,392
多様な言語の
複数形などに対応できます

644
00:40:59,727 --> 00:41:04,465
そしてコード内で
Intentを作成し提供する際―

645
00:40:59,727 --> 00:41:04,465
そしてコード内で
Intentを作成し提供する際―

646
00:41:04,565 --> 00:41:07,701
遅延型のローカライズ･
Intent文字列が使えます

647
00:41:07,801 --> 00:41:12,773
提供されたIntentから
作成されたショートカットが

648
00:41:12,873 --> 00:41:18,779
ユーザへの表示時に
ローカライズされるのです

649
00:41:19,980 --> 00:41:25,052
詳細はWWDCサイトの
当セッションのページにあります

650
00:41:26,687 --> 00:41:28,622
ご来場ありがとうございます

651
00:41:28,722 --> 00:41:31,925
引き続きWWDCを
お楽しみください

652
00:41:32,125 --> 00:41:38,499
（拍手）