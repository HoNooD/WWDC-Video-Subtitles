
1
00:00:07,140 --> 00:00:16,750
(音楽)

2
00:00:27,961 --> 00:00:29,563
(拍手)

3
00:00:29,663 --> 00:00:33,767
こんにちは　“Advanced Debugging
with Xcode and LLDB”へようこそ

4
00:00:33,867 --> 00:00:38,739
Xcodeチームの
クリス･マイルズです

5
00:00:38,839 --> 00:00:42,242
このセッションの後は
Bashですね

6
00:00:42,342 --> 00:00:44,745
時間どおりに終わらせます

7
00:00:44,845 --> 00:00:49,283
盛りだくさんなので
さっそく始めましょう

8
00:00:49,650 --> 00:00:53,187
まずは
Swiftデバッグの信頼性です

9
00:00:53,287 --> 00:00:55,923
いいお知らせがあります

10
00:00:56,023 --> 00:01:00,561
Xcode 10の信頼性を
大幅に向上させました

11
00:00:56,023 --> 00:01:00,561
Xcode 10の信頼性を
大幅に向上させました

12
00:01:02,129 --> 00:01:04,331
ええ　そうなんです

13
00:01:04,431 --> 00:01:08,402
(拍手)

14
00:01:08,502 --> 00:01:14,641
Swiftデバッグにおける
エッジケースを解消しました

15
00:01:14,741 --> 00:01:16,777
いくつかお話しします

16
00:01:17,511 --> 00:01:21,515
複雑なプロジェクトや
ビルド設定のケースです

17
00:01:21,615 --> 00:01:25,485
コンソールでpoの使用や
式の評価を試みると

18
00:01:25,586 --> 00:01:28,455
このようなエラーが
発生します

19
00:01:28,622 --> 00:01:31,191
この“AST context”とは

20
00:01:31,291 --> 00:01:37,564
コンパイラの状態の再構成のため
必要な式のコンテキストです

21
00:01:37,664 --> 00:01:40,367
モジュールの衝突などで―

22
00:01:40,467 --> 00:01:45,873
式のコンテキストが再構成できず
失敗するのです

23
00:01:46,373 --> 00:01:51,278
Xcode 10ではLLDBが
フォールバックを実装

24
00:01:51,378 --> 00:01:57,384
より簡単なコンテキストを
現在のフレームに作り

25
00:01:57,484 --> 00:01:59,920
式の評価に使用します

26
00:02:00,888 --> 00:02:03,290
また デバッグ中に
変数の型を―

27
00:02:03,390 --> 00:02:08,328
マテリアライズできないことも
あります

28
00:02:08,729 --> 00:02:11,832
Xcodeでは
このような表示です

29
00:02:11,965 --> 00:02:16,270
左側の変数ビューに
変数名が並んでいますが―

30
00:02:16,370 --> 00:02:19,006
型や値は
表示されていませんね

31
00:02:19,106 --> 00:02:23,644
このようなエラーでは
変数の値が出力できません

32
00:02:24,745 --> 00:02:29,283
デバッグ情報が
生成されなかった問題も―

33
00:02:29,383 --> 00:02:33,720
皆さんのレポートのおかげで
解決できました

34
00:02:33,820 --> 00:02:39,259
デバッグ中に遭遇したバグを
報告してくださり―

35
00:02:39,359 --> 00:02:40,928
感謝します

36
00:02:41,161 --> 00:02:45,299
Xcode 10の問題を
見つけた場合は―

37
00:02:45,399 --> 00:02:47,568
今後も報告してください

38
00:02:47,668 --> 00:02:51,738
WWDCにご参加中なら
ラボに お立ち寄りを

39
00:02:51,839 --> 00:02:57,010
明日の午前９～12時に
ラボを実施します

40
00:02:57,110 --> 00:03:02,783
皆さんのプロジェクトを
エンジニアに見せてください

41
00:02:57,110 --> 00:03:02,783
皆さんのプロジェクトを
エンジニアに見せてください

42
00:03:05,519 --> 00:03:10,357
それでは私が気に入っている
デバッグの秘訣を―

43
00:03:10,457 --> 00:03:13,293
皆さんにお教えしましょう

44
00:03:13,393 --> 00:03:17,164
話すだけでなく
デモをご覧に入れます

45
00:03:18,298 --> 00:03:22,569
(拍手)

46
00:03:26,373 --> 00:03:31,612
使うのは Solar Systemという
iOSのアプリケーションです

47
00:03:31,712 --> 00:03:35,716
WWDCでご覧になった方も
いるでしょう

48
00:03:35,883 --> 00:03:39,853
その中のMoon Jumperの
デバッグです

49
00:03:40,387 --> 00:03:44,124
まずスマホを持って
ジャンプします

50
00:03:44,424 --> 00:03:48,328
するとジャンプの力が
月の重力に変換され

51
00:03:48,529 --> 00:03:53,133
月ならどの高さまで跳べたか
可視化されます

52
00:03:53,433 --> 00:03:55,702
バーでリミットを選び

53
00:03:55,802 --> 00:04:00,407
バーの高さまで跳べるように
挑戦します

54
00:03:55,802 --> 00:04:00,407
バーの高さまで跳べるように
挑戦します

55
00:04:01,008 --> 00:04:04,144
Moon Jumperに
補正を加えました

56
00:04:04,344 --> 00:04:09,950
視覚的な補正や
ゲームプレイモードです

57
00:04:10,083 --> 00:04:11,185
テストを行い―

58
00:04:11,285 --> 00:04:14,521
バグのリストが
上がってきました

59
00:04:14,755 --> 00:04:18,291
まず私が
iOSのバグに対処した後に

60
00:04:18,392 --> 00:04:22,596
セバスチャンが
macOSのバグを担当します

61
00:04:22,696 --> 00:04:27,434
バグをすべて修正するまで
Bashに行けません

62
00:04:27,534 --> 00:04:31,738
2000人の前でやるなんて
ワクワクしますね

63
00:04:33,040 --> 00:04:35,576
まず１番目のバグは―

64
00:04:35,742 --> 00:04:40,480
“アニメーションが
仕様どおりに動かない”

65
00:04:40,714 --> 00:04:45,719
迅速にデバッグするため
シミュレータに切り替えます

66
00:04:45,819 --> 00:04:49,056
タップを検出する設定を
したので―

67
00:04:49,156 --> 00:04:52,025
バーの高さまで跳びます

68
00:04:52,392 --> 00:04:57,598
バーまで跳ばないという
バグを再現しましょう

69
00:04:57,865 --> 00:05:02,836
エディタのジャンプ関数へ
Jump Barから移動し―

70
00:04:57,865 --> 00:05:02,836
エディタのジャンプ関数へ
Jump Barから移動し―

71
00:05:02,970 --> 00:05:05,339
ブレークポイントを
設定します

72
00:05:05,506 --> 00:05:10,143
タップでジャンプさせて
デバッガで停止します

73
00:05:10,511 --> 00:05:13,580
まず上部のタブバーを
見てください

74
00:05:13,680 --> 00:05:17,484
Xcodeが“Debug”タブを
生成しました

75
00:05:17,584 --> 00:05:23,023
タブで作業したい方のために
この動作が定義可能です

76
00:05:23,123 --> 00:05:26,727
(拍手)

77
00:05:26,927 --> 00:05:29,930
Xcodeメニューから
環境設定を開き

78
00:05:30,030 --> 00:05:33,066
“Behaviors”タブで
動作を設定します

79
00:05:33,167 --> 00:05:35,602
多くの動作を
設定できますが―

80
00:05:35,702 --> 00:05:40,674
今は 実行セクションの
一時停止の動作を設定します

81
00:05:40,774 --> 00:05:45,546
Xcodeがデバッガで
停止した際の動作です

82
00:05:45,646 --> 00:05:48,582
Debugタブが生成され―

83
00:05:48,682 --> 00:05:52,119
実行が停止した時に
切り替わります

84
00:05:52,219 --> 00:05:55,422
タブ好きには
うれしい設定ですね

85
00:05:55,656 --> 00:06:00,561
didReachSelectedHeightという
条件が見えます

86
00:05:55,656 --> 00:06:00,561
didReachSelectedHeightという
条件が見えます

87
00:06:00,661 --> 00:06:03,463
このプロパティの値を
確認しましょう

88
00:06:03,564 --> 00:06:05,632
デバッグコンソールに
切り替え―

89
00:06:05,732 --> 00:06:10,437
poでプロパティ値を見ると
trueになっています

90
00:06:11,038 --> 00:06:15,742
タップ検出を設定すると
trueになりますが―

91
00:06:15,843 --> 00:06:18,545
falseに変え
バグを再現します

92
00:06:18,645 --> 00:06:22,950
コードを変えて
falseに設定できますが―

93
00:06:23,050 --> 00:06:27,955
デバッグのためだけに
コードを変えるのは避けたい

94
00:06:28,055 --> 00:06:31,491
そこでデバッガを使うのです

95
00:06:31,725 --> 00:06:35,262
expressionコマンドを
使います

96
00:06:35,362 --> 00:06:39,766
例えば
didReachSelectedHeight = false

97
00:06:39,867 --> 00:06:42,402
これの評価と実行が
行われると―

98
00:06:42,503 --> 00:06:46,373
プロパティが
falseに変わりました

99
00:06:46,473 --> 00:06:51,578
“Step Over”ボタンで
falseのブランチに進みます

100
00:06:51,678 --> 00:06:57,150
再開すると 飛行士は
バーに到達せず倒れます

101
00:06:57,251 --> 00:07:00,954
一時停止して
式を入力せずに―

102
00:06:57,251 --> 00:07:00,954
一時停止して
式を入力せずに―

103
00:07:01,054 --> 00:07:05,492
タップするたびに
これを再現したいのです

104
00:07:05,592 --> 00:07:08,962
そこでブレークポイントを
設定します

105
00:07:09,363 --> 00:07:12,900
右クリックで
“Edit Breakpoint”を選択

106
00:07:13,000 --> 00:07:14,935
ポップオーバーで―

107
00:07:15,035 --> 00:07:18,772
ブレークポイントの動作を
カスタマイズできます

108
00:07:18,872 --> 00:07:21,408
“Debugger Command”を選択

109
00:07:21,508 --> 00:07:27,214
先ほど使った
expressionコマンドを入力し―

110
00:07:27,981 --> 00:07:30,317
自動で再開するよう設定

111
00:07:30,417 --> 00:07:35,355
つまりブレークポイントが
式を実行させて

112
00:07:35,455 --> 00:07:39,760
プロパティの値を変え
自動的に再開させるのです

113
00:07:39,960 --> 00:07:44,965
飛行士をタップするたび
ジャンプに失敗し倒れます

114
00:07:45,165 --> 00:07:47,534
ここで修正すべきなのは？

115
00:07:47,634 --> 00:07:51,371
倒れた後に
立ち上がらねばなりません

116
00:07:51,471 --> 00:07:52,973
修正しましょう

117
00:07:53,607 --> 00:07:57,711
updateUIForJumpFailedという
関数に移動

118
00:07:57,811 --> 00:08:02,850
UIKit Dynamicsで失敗を
シミュレートしています

119
00:07:57,811 --> 00:08:02,850
UIKit Dynamicsで失敗を
シミュレートしています

120
00:08:02,950 --> 00:08:06,153
まずUIDynamicAnimatorを
作成し

121
00:08:06,253 --> 00:08:09,323
関数で動作を追加し
物理効果を作成

122
00:08:09,423 --> 00:08:12,926
dynamicAnimatorDidPause
デリゲートコールバックで

123
00:08:13,026 --> 00:08:17,064
飛行士は向きを変え
中央に戻るはずです

124
00:08:17,364 --> 00:08:19,666
下にスクロールすると―

125
00:08:19,766 --> 00:08:22,836
デリゲートコールバックが
実装されてます

126
00:08:22,970 --> 00:08:26,106
しかし ここは
デリゲートが未設定です

127
00:08:26,373 --> 00:08:31,512
ここにコードを追加すれば
問題を修正できるでしょう

128
00:08:31,612 --> 00:08:35,982
再コンパイルと再実行を行い
修正を検証しますが―

129
00:08:36,082 --> 00:08:38,652
このサイクルを
ショートカットしたい

130
00:08:38,751 --> 00:08:42,222
そこでブレークポイントで
変更を挿入し

131
00:08:42,322 --> 00:08:46,527
素早く便利に修正する方法を
お見せします

132
00:08:46,627 --> 00:08:50,964
ブレークポイントを作るため
ダブルクリックで―

133
00:08:51,098 --> 00:08:53,367
エディタウインドウを
開きます

134
00:08:53,467 --> 00:08:57,037
再びDebugger Commandで

135
00:08:57,137 --> 00:09:01,141
問題を修正するための
コード行を入力します

136
00:08:57,137 --> 00:09:01,141
問題を修正するための
コード行を入力します

137
00:09:01,275 --> 00:09:03,410
そして再開するよう設定

138
00:09:03,510 --> 00:09:07,114
コードを変更しても
再コンパイルは まだです

139
00:09:07,214 --> 00:09:10,818
カスタムブレークポイントで
変更を挿入すると―

140
00:09:10,918 --> 00:09:13,954
実行中のアプリケーションで
テストできます

141
00:09:14,421 --> 00:09:18,125
タップすると
ジャンプに失敗し倒れますが

142
00:09:18,225 --> 00:09:20,894
立ち上がるので
修正は成功です

143
00:09:20,994 --> 00:09:22,896
もう１回 やりましょう

144
00:09:22,996 --> 00:09:28,535
(拍手)

145
00:09:28,635 --> 00:09:31,071
再びメモを開きましょう

146
00:09:31,805 --> 00:09:36,410
１番目のバグは修正したので
チェックを入れます

147
00:09:36,677 --> 00:09:39,413
とてもいい気分ですね

148
00:09:39,513 --> 00:09:43,250
次の３つは
ゲームプレイモード関係です

149
00:09:43,350 --> 00:09:45,819
シミュレータで再生します

150
00:09:45,919 --> 00:09:49,289
バーより高く
10回 跳ぶという挑戦で

151
00:09:49,389 --> 00:09:52,159
バーの高さは
毎回 上がります

152
00:09:53,193 --> 00:09:56,396
上部に“Score”ラベルが
表示されます

153
00:09:56,497 --> 00:10:00,767
まだ飛行士は
ジャンプを失敗しますが―

154
00:09:56,497 --> 00:10:00,767
まだ飛行士は
ジャンプを失敗しますが―

155
00:10:00,868 --> 00:10:04,638
“Attempts”の回数が
増えません

156
00:10:04,738 --> 00:10:08,542
ラベルが変わらないという
２番目のバグです

157
00:10:08,642 --> 00:10:12,513
さらに ゲーム終了が
正常でないという問題と

158
00:10:12,613 --> 00:10:16,884
ラベルのレイアウトに
関する問題もあります

159
00:10:16,984 --> 00:10:20,220
２番目のバグに戻り
タップしましょう

160
00:10:20,320 --> 00:10:23,056
Attemptsラベルに ご注目を

161
00:10:23,190 --> 00:10:26,026
フラッシュしますが
変わりません

162
00:10:26,126 --> 00:10:31,064
アニメーションが遷移するので
値は設定されていますが―

163
00:10:31,398 --> 00:10:32,699
不正な値なのです

164
00:10:32,799 --> 00:10:36,236
ラベルを変更するコードを
見つけて―

165
00:10:36,336 --> 00:10:38,605
ロジックを確認しましょう

166
00:10:38,805 --> 00:10:41,775
UILabelで
テキストプロパティは変更

167
00:10:41,875 --> 00:10:44,344
ブレークポイント
ナビゲータに切り替えて

168
00:10:44,444 --> 00:10:49,750
下のプラスボタンから
ブレークポイントを選びます

169
00:10:49,850 --> 00:10:53,987
これらの選択肢の中から
私たちが使うのは―

170
00:10:54,087 --> 00:10:56,723
シンボリック
ブレークポイントです

171
00:10:57,224 --> 00:11:02,129
新しいブレークポイントの
エディタが開くので

172
00:10:57,224 --> 00:11:02,129
新しいブレークポイントの
エディタが開くので

173
00:11:02,429 --> 00:11:08,101
“-[UILabel setText:]”と
この場合は入力します

174
00:11:08,368 --> 00:11:13,373
UIKitでは
Objective-Cで記述します

175
00:11:13,540 --> 00:11:17,277
これを消すと
ブレークポイントの下に―

176
00:11:17,377 --> 00:11:19,279
行が追加されています

177
00:11:19,379 --> 00:11:23,717
UIKit Coreの１つの場所に
解決したという―

178
00:11:23,817 --> 00:11:25,986
フィードバックです

179
00:11:26,086 --> 00:11:29,456
複数の場所になる場合も
あります

180
00:11:29,556 --> 00:11:31,325
１つもなければ―

181
00:11:31,425 --> 00:11:36,063
ブレークポイントが
できなかったということです

182
00:11:36,363 --> 00:11:40,167
ここで もう一度
飛行士をタップすると―

183
00:11:40,400 --> 00:11:43,737
setTextでブレークポイントに
達します

184
00:11:43,837 --> 00:11:48,408
表示はソースコードでなく
アセンブリコードです

185
00:11:48,509 --> 00:11:54,314
システムフレームワークの
アセンブリコードでも―

186
00:11:54,414 --> 00:11:57,618
関数に渡された引数を
調べられます

187
00:11:57,718 --> 00:12:02,856
呼び出し規約が分かれば
レジスタを調べられるのです

188
00:11:57,718 --> 00:12:02,856
呼び出し規約が分かれば
レジスタを調べられるのです

189
00:12:02,956 --> 00:12:06,894
私もレジスタを
覚えていませんが―

190
00:12:06,994 --> 00:12:11,298
デバッガが疑似レジスタを
提供してくれます

191
00:12:11,398 --> 00:12:15,836
$arg1が 第１引数を
保持するレジスタに変換され

192
00:12:15,936 --> 00:12:21,575
Objective-Cのレシーバが
表示されます

193
00:12:22,042 --> 00:12:24,912
“17フィート”と
表示されていますね

194
00:12:25,012 --> 00:12:27,848
この高さラベルのことです

195
00:12:27,948 --> 00:12:31,818
私たちに必要ないので
他の引数を見ます

196
00:12:32,119 --> 00:12:37,391
ご存じの方もいるでしょうが
第２引数はセレクタです

197
00:12:37,591 --> 00:12:42,029
LLDBが暗黙的に認識しないため
表示されません

198
00:12:42,129 --> 00:12:46,466
型変換して セレクタを
表示させる場合もあります

199
00:12:46,700 --> 00:12:51,371
第３引数は メソッドに
渡されたパラメータです

200
00:12:51,471 --> 00:12:55,409
setTextに
渡された文字列なので

201
00:12:55,509 --> 00:13:00,214
アセンブリフレームで
引数を調べるのに好都合です

202
00:12:55,509 --> 00:13:00,214
アセンブリフレームで
引数を調べるのに好都合です

203
00:13:00,914 --> 00:13:05,152
でも目的のものでないので
continueを押すと―

204
00:13:05,252 --> 00:13:07,754
ブレークポイントに達します

205
00:13:07,855 --> 00:13:10,824
$arg1でレシーバを調べると

206
00:13:10,924 --> 00:13:14,261
高さラベルが
“０フィート”になってます

207
00:13:14,361 --> 00:13:16,430
問題が分かりました

208
00:13:17,097 --> 00:13:21,201
ジャンプすると同時に
高さラベルが更新され

209
00:13:21,301 --> 00:13:26,373
かなり頻繁に
ブレークポイントに達します

210
00:13:26,473 --> 00:13:32,246
setTextのブレークポイントに
達するのは非常に困難です

211
00:13:32,346 --> 00:13:36,350
そこでシンボリック
ブレークポイントを

212
00:13:36,450 --> 00:13:40,687
ジャンプ終了後だけに
設定してみましょう

213
00:13:41,121 --> 00:13:46,059
ナビゲータでインジケータを
ダブルクリックすると

214
00:13:46,159 --> 00:13:48,095
エディタが開きます

215
00:13:48,195 --> 00:13:52,733
“Condition”に
trueかfalseになる式を入れ

216
00:13:52,833 --> 00:13:56,103
trueの時だけ
ブレークポイントを起動します

217
00:13:56,203 --> 00:13:59,439
もしプロパティが
分かっていれば―

218
00:13:59,540 --> 00:14:03,744
式を編集して
テストすることができます

219
00:13:59,540 --> 00:14:03,744
式を編集して
テストすることができます

220
00:14:03,844 --> 00:14:07,047
プロパティがないので
別の方法を見せます

221
00:14:07,147 --> 00:14:09,416
シンボリック
ブレークポイントを消し

222
00:14:09,516 --> 00:14:14,588
jumpCompletedという関数で
ブレークポイントを設定

223
00:14:14,688 --> 00:14:18,158
アニメーション終了後に
関数が呼び出され

224
00:14:18,258 --> 00:14:20,894
UIとゲームの状態を更新します

225
00:14:21,094 --> 00:14:23,997
ここでやりたいのは―

226
00:14:24,097 --> 00:14:29,536
シンボリックブレークポイントの
setTextへの設定です

227
00:14:29,636 --> 00:14:32,339
Debugger Commandを加えて

228
00:14:32,439 --> 00:14:37,010
“breakpoint set”続いて
“one-shot true”と入力

229
00:14:37,110 --> 00:14:41,014
これは一時的な
ブレークポイントで

230
00:14:41,114 --> 00:14:43,684
起動後 自動的に削除されます

231
00:14:44,084 --> 00:14:48,155
UILabel setTextという
名前を与えて

232
00:14:48,255 --> 00:14:50,357
自動で再開するよう設定

233
00:14:50,457 --> 00:14:56,663
これで jumpCompletedという関数の
実行が開始されると

234
00:14:56,763 --> 00:15:01,535
一時的なブレークポイントが
設定され 再開します

235
00:14:56,763 --> 00:15:01,535
一時的なブレークポイントが
設定され 再開します

236
00:15:01,635 --> 00:15:06,106
ブレークポイントには
実行開始後に達するのです

237
00:15:06,206 --> 00:15:10,410
再開を押すと
シミュレータでジャンプし

238
00:15:10,911 --> 00:15:13,981
setTextで
ブレークポイントに達します

239
00:15:14,081 --> 00:15:19,219
それではpo $arg1で
レシーバを調べましょう

240
00:15:19,319 --> 00:15:23,423
別のUILabelインスタンスで
値は“０”です

241
00:15:23,524 --> 00:15:25,893
上部のラベルの
どちらかですね

242
00:15:25,993 --> 00:15:31,031
目的のオブジェクトなので
コードを確認しましょう

243
00:15:31,198 --> 00:15:35,302
スタックの次のフレームを
選択します

244
00:15:35,402 --> 00:15:38,038
ラベル値を
変更するコードです

245
00:15:38,138 --> 00:15:42,643
labelText変数を使い
現在は“０”ですね

246
00:15:42,743 --> 00:15:48,248
上部で ラベルのテキストは
現在の値に設定されています

247
00:15:48,348 --> 00:15:52,519
値のテキストは
新しい値を含む変数で―

248
00:15:52,619 --> 00:15:54,922
誤字のようなので修正します

249
00:15:55,556 --> 00:15:57,457
valueTextに変えます

250
00:16:00,260 --> 00:16:04,932
再コンパイルと再実行を行い
テストする代わりに

251
00:16:05,232 --> 00:16:10,904
実行中のアプリケーションで
変更をテストしましょう

252
00:16:11,004 --> 00:16:15,742
現在の行の下に
ブレークポイントを設定します

253
00:16:15,843 --> 00:16:17,744
ラベルを設定したままで―

254
00:16:17,845 --> 00:16:21,381
正しい値に設定する行を
追加します

255
00:16:21,482 --> 00:16:25,786
カスタムブレークポイントで
コードを挿入し

256
00:16:25,886 --> 00:16:29,089
自動で再開するよう
設定します

257
00:16:29,623 --> 00:16:33,827
再開を押すと
コードの実行が再開され

258
00:16:33,927 --> 00:16:38,665
Attemptsラベルが
更新されました

259
00:16:38,765 --> 00:16:39,867
ありがとう

260
00:16:39,967 --> 00:16:44,138
(拍手)

261
00:16:44,671 --> 00:16:48,809
Scoreラベルでも
確認してみます

262
00:16:48,909 --> 00:16:51,645
こちらに戻りましょう

263
00:16:51,745 --> 00:16:57,351
一時的なブレークポイントは
もう不要なので消します

264
00:16:57,451 --> 00:17:02,623
didReachSelectedHeightは
変更しません

265
00:16:57,451 --> 00:17:02,623
didReachSelectedHeightは
変更しません

266
00:17:02,723 --> 00:17:05,626
タップすると
うまくジャンプし

267
00:17:05,726 --> 00:17:09,762
どのラベルも更新されたので
修正成功です

268
00:17:11,265 --> 00:17:13,467
バグにチェックを入れます

269
00:17:14,101 --> 00:17:17,738
次のバグは
ゲーム終了に関してです

270
00:17:18,806 --> 00:17:22,075
10回の挑戦で
ゲームは終わります

271
00:17:22,175 --> 00:17:27,481
目的の状態を再現するため
タップして待つ方法では―

272
00:17:27,580 --> 00:17:33,387
時間がかかるうえに 何度も
繰り返す必要があります

273
00:17:33,487 --> 00:17:36,657
アニメーションを
スキップする方法を―

274
00:17:36,823 --> 00:17:38,225
お見せしましょう

275
00:17:38,826 --> 00:17:42,496
updateUIForJumpSucceededに
移動します

276
00:17:42,896 --> 00:17:46,166
この関数は
色を変更した後に―

277
00:17:46,266 --> 00:17:49,036
jumpAstronaut(animated: true)を
呼び出します

278
00:17:49,136 --> 00:17:52,072
これをfalseにしましょう

279
00:17:52,172 --> 00:17:57,878
今回も デバッグのために
コードを変えるのは避けたいので

280
00:17:57,978 --> 00:18:02,015
代わりにブレークポイントを
この行に設定します

281
00:17:57,978 --> 00:18:02,015
代わりにブレークポイントを
この行に設定します

282
00:18:02,115 --> 00:18:06,253
コンソールの入力を消し
タップすると

283
00:18:06,353 --> 00:18:08,021
この行で停止します

284
00:18:08,155 --> 00:18:13,594
falseに置き換えたいですが
コンパイル済みなので―

285
00:18:13,694 --> 00:18:15,863
コードを置換できません

286
00:18:15,963 --> 00:18:20,534
そこで この行を実行せず
スキップさせて

287
00:18:20,634 --> 00:18:25,005
expressionで
変更を挿入しましょう

288
00:18:25,105 --> 00:18:26,807
行をスキップさせます

289
00:18:26,907 --> 00:18:32,513
緑のラベルの“Thread 1”は
命令ポインタと呼ばれ

290
00:18:32,613 --> 00:18:36,350
次に実行する命令の行を
示しています

291
00:18:36,450 --> 00:18:42,656
このアイコンをクリックしながら
マウスを動かせば行を移動できます

292
00:18:42,756 --> 00:18:48,061
停止中は変更できるので
下の行に動かしましょう

293
00:18:48,161 --> 00:18:50,898
恐ろしげな警告が出ました

294
00:18:50,998 --> 00:18:55,169
大いなる力には
責任が伴います

295
00:18:55,269 --> 00:18:59,873
今日 ご紹介する中で
最もリスクが高い方法です

296
00:18:59,973 --> 00:19:03,610
アプリケーションへの
影響とは関係なく―

297
00:18:59,973 --> 00:19:03,610
アプリケーションへの
影響とは関係なく―

298
00:19:03,710 --> 00:19:07,080
ポインタを
どこにでも動かせるからです

299
00:19:07,181 --> 00:19:12,853
例えば 初期設定していない
オブジェクトを示せば―

300
00:19:12,953 --> 00:19:15,222
メモリ管理の問題が生じます

301
00:19:15,322 --> 00:19:18,692
しかし上級者用の
セッションなので

302
00:19:18,792 --> 00:19:20,327
続けましょう

303
00:19:21,662 --> 00:19:27,501
expressionコマンドを使い
falseを呼び出します

304
00:19:29,102 --> 00:19:31,572
再開を押して動かすと―

305
00:19:31,738 --> 00:19:36,276
アニメーションをスキップし
ゲームの状態を更新

306
00:19:37,277 --> 00:19:39,813
タップのたびに
実行されるように―

307
00:19:39,913 --> 00:19:43,116
ブレークポイントを
設定します

308
00:19:43,684 --> 00:19:47,588
まずは
行を１つスキップさせるので

309
00:19:47,688 --> 00:19:51,592
“thread jump”続いて“by 1”の
コマンドを入力

310
00:19:51,692 --> 00:19:56,697
これで現在のスレッドの
コードを１行 飛ばします

311
00:19:56,797 --> 00:19:59,566
次に式を呼び出すために―

312
00:19:59,666 --> 00:20:04,304
プラスボタンを押し
コマンドを追加します

313
00:19:59,666 --> 00:20:04,304
プラスボタンを押し
コマンドを追加します

314
00:20:04,805 --> 00:20:08,709
jumpAstronaut
(animated: false)です

315
00:20:08,876 --> 00:20:10,577
自動再開も設定

316
00:20:10,677 --> 00:20:15,549
そしてブレークポイントまで
実行されれば

317
00:20:15,649 --> 00:20:19,019
実行前に
ブレークポイントが起動

318
00:20:19,119 --> 00:20:21,822
コマンドが実行され
１行 スキップ

319
00:20:21,922 --> 00:20:27,227
そして代わりの関数を
expressionで呼び出します

320
00:20:27,327 --> 00:20:29,630
これで
飛行士をタップすると

321
00:20:29,730 --> 00:20:34,968
アニメーションをスキップし
簡単にバグが再現できます

322
00:20:35,369 --> 00:20:40,541
10回の挑戦で終わるはずが
かなり過ぎていますね

323
00:20:40,641 --> 00:20:43,844
ゲームの状態を
見てみましょう

324
00:20:44,177 --> 00:20:47,981
gamePlayというプロパティに
あります

325
00:20:48,081 --> 00:20:52,219
ブレークポイントを設定し
ジャンプすると

326
00:20:52,319 --> 00:20:55,389
プロパティの次の
リファレンスで停止

327
00:20:55,656 --> 00:20:59,092
poでオブジェクトの
現在の状態を出すと

328
00:20:59,193 --> 00:21:02,896
デバッグの記述が確認できます

329
00:20:59,193 --> 00:21:02,896
デバッグの記述が確認できます

330
00:21:03,030 --> 00:21:05,199
これはカスタム記述です

331
00:21:05,299 --> 00:21:09,937
poはプログラムの
デバッグの記述を要求します

332
00:21:10,037 --> 00:21:11,638
これはカスタマイズ可能です

333
00:21:11,738 --> 00:21:16,410
ソースコードに切り替え
下までスクロールします

334
00:21:16,510 --> 00:21:22,049
CustomDebugStringConvertibleに
GamePlayが拡張

335
00:21:22,149 --> 00:21:27,788
debugDescriptionを実装し
Stringを返しています

336
00:21:27,888 --> 00:21:33,894
デバッグのために
どんなStringでも返せます

337
00:21:34,061 --> 00:21:39,266
Objective-Cオブジェクトでも
同様です

338
00:21:39,800 --> 00:21:42,402
p gamePlayコマンドと
比較します

339
00:21:43,036 --> 00:21:46,974
pはLLDBの代替コマンドで

340
00:21:47,074 --> 00:21:50,811
組み込みフォーマッタを
使います

341
00:21:50,911 --> 00:21:53,480
２種類の表示が出ました

342
00:21:53,580 --> 00:21:56,750
デフォルトフォーマッタは
完全修飾型名と―

343
00:21:56,850 --> 00:22:00,220
メモリアドレスと
プロパティなどを表示

344
00:21:56,850 --> 00:22:00,220
メモリアドレスと
プロパティなどを表示

345
00:22:00,320 --> 00:22:04,191
最大の挑戦回数は10で
正しい設定なので

346
00:22:04,291 --> 00:22:06,927
論理エラーのようですね

347
00:22:07,027 --> 00:22:12,199
挑戦回数が最大を超えても
判断できないのです

348
00:22:12,299 --> 00:22:16,203
挑戦回数を変更するコードを
見つけましょう

349
00:22:16,370 --> 00:22:20,674
変数ビューを開いて
View Controllerを展開し

350
00:22:20,774 --> 00:22:25,612
下のフィルタに
gamePlayと入力します

351
00:22:25,712 --> 00:22:29,449
プロパティを展開し
attemptsを選択

352
00:22:29,550 --> 00:22:35,422
コンテキストメニューを開き
Watch “attempts”を選択

353
00:22:36,223 --> 00:22:39,526
ウォッチポイントが
生成されます

354
00:22:39,626 --> 00:22:42,296
ブレークポイント
ナビゲータの下部に

355
00:22:42,396 --> 00:22:46,733
Watchpointsという名の
グループとができます

356
00:22:46,833 --> 00:22:48,735
ウォッチポイントは―

357
00:22:48,836 --> 00:22:52,539
変数の値が変更された時に
停止します

358
00:22:52,639 --> 00:22:57,144
不要なブレークポイントを
消して 再開を押すと

359
00:22:57,244 --> 00:22:59,112
ウォッチポイントで停止

360
00:22:59,213 --> 00:23:02,216
これが挑戦回数を
変更するコードです

361
00:22:59,213 --> 00:23:02,216
これが挑戦回数を
変更するコードです

362
00:23:03,116 --> 00:23:05,519
ウォッチポイントは
無効にします

363
00:23:05,619 --> 00:23:10,591
これらは挑戦回数と
スコアを増やすコードです

364
00:23:10,691 --> 00:23:14,661
最大回数を超えた時
終了させるロジックは―

365
00:23:14,761 --> 00:23:17,030
見当たりません

366
00:23:17,130 --> 00:23:20,901
材料は そろいましたが
コードを変える前に―

367
00:23:21,001 --> 00:23:23,170
私の仮説を試します

368
00:23:23,270 --> 00:23:25,339
ブレークポイントを作成し

369
00:23:25,439 --> 00:23:30,377
問題を修正できるか
変更を挿入してみます

370
00:23:30,477 --> 00:23:35,115
Debugger Commandを加えて
expressionを使用

371
00:23:35,215 --> 00:23:40,521
最大回数を超えたら
ゲーム状態は終了するよう設定し

372
00:23:41,088 --> 00:23:42,856
自動再開も設定

373
00:23:42,956 --> 00:23:46,760
問題が修正されるか
再開してテストします

374
00:23:46,860 --> 00:23:52,733
ブレークポイント後も続行し
うまく修正されたようです

375
00:23:52,833 --> 00:23:54,868
最初から検証します

376
00:23:54,968 --> 00:23:59,873
“Play Again”をクリックして
挑戦を10回させ

377
00:23:59,973 --> 00:24:04,745
ゲーム終了となったので
修正は成功です

378
00:23:59,973 --> 00:24:04,745
ゲーム終了となったので
修正は成功です

379
00:24:05,212 --> 00:24:11,919
(拍手)

380
00:24:12,219 --> 00:24:14,188
コードに適用してください

381
00:24:14,288 --> 00:24:17,558
コピーして
ブレークポイントを消し

382
00:24:17,658 --> 00:24:20,027
ペーストで挿入します

383
00:24:20,360 --> 00:24:23,797
３番目をチェックして
残り１つは―

384
00:24:23,897 --> 00:24:26,633
ラベルのレイアウトです

385
00:24:26,733 --> 00:24:30,404
レイアウトを
任されたエンジニアたちは

386
00:24:30,504 --> 00:24:35,409
左右の上端が
効率的な場所だと考えました

387
00:24:35,509 --> 00:24:40,848
しかしチームの判断で
差し戻されたので

388
00:24:40,948 --> 00:24:44,618
新しいレイアウトを
試作しましょう

389
00:24:44,718 --> 00:24:47,321
グラフィック
アプリケーションではなく

390
00:24:47,421 --> 00:24:49,590
コードで試作します

391
00:24:49,690 --> 00:24:52,326
私は
デバッガエンジニアなので

392
00:24:52,426 --> 00:24:55,662
実行しながら
デバッガを使います

393
00:24:58,432 --> 00:25:03,070
ブレークポイントを
ジャンプ関数に設定します

394
00:24:58,432 --> 00:25:03,070
ブレークポイントを
ジャンプ関数に設定します

395
00:25:03,170 --> 00:25:07,574
ビューへのリファレンスを
まず見つけましょう

396
00:25:07,674 --> 00:25:10,144
入力をすべて消去し

397
00:25:10,244 --> 00:25:15,883
新たにジャンプさせて
ジャンプ関数で停止させます

398
00:25:15,983 --> 00:25:20,387
ビューのプロパティや
アウトレットがなければ

399
00:25:20,487 --> 00:25:22,756
メモリアドレスが必要です

400
00:25:22,856 --> 00:25:26,126
それを見つけて
ビューを操作する方法を―

401
00:25:26,226 --> 00:25:28,095
ご紹介します

402
00:25:28,195 --> 00:25:29,696
デバッグの記述には―

403
00:25:30,230 --> 00:25:32,866
カスタム記述が含まれます

404
00:25:32,966 --> 00:25:37,337
UIViewの
デフォルトデバッグの記述に

405
00:25:37,438 --> 00:25:40,107
クラスとメモリアドレスが
含まれます

406
00:25:40,207 --> 00:25:45,112
デバッグの記述を得るのが
１つの方法ですが

407
00:25:45,212 --> 00:25:48,649
プロパティがあるので
簡単です

408
00:25:48,749 --> 00:25:52,686
View Controllerビューの
下のビューは？

409
00:25:52,786 --> 00:25:56,957
ビュー階層を見るには
このボタンで―

410
00:25:57,057 --> 00:25:59,893
ビューデバッガを起動します

411
00:25:59,993 --> 00:26:03,130
階層のスナップショットが
3Dになり

412
00:25:59,993 --> 00:26:03,130
階層のスナップショットが
3Dになり

413
00:26:03,230 --> 00:26:05,532
ビューを調べられるのです

414
00:26:05,632 --> 00:26:07,601
後でセバスチャンが話します

415
00:26:07,701 --> 00:26:09,303
私が紹介するのは―

416
00:26:09,403 --> 00:26:14,374
デバッグコンソールで
単純な階層を見る方法です

417
00:26:14,741 --> 00:26:19,413
recursiveDescriptionという
デバッグ関数を使います

418
00:26:20,280 --> 00:26:24,251
po self.view.
recursiveDescriptionです

419
00:26:24,751 --> 00:26:27,321
うまくいかない場合は？

420
00:26:27,588 --> 00:26:30,390
この関数は
デバッグのために存在するので―

421
00:26:30,490 --> 00:26:35,195
パブリックAPIではなく
Swiftで使えません

422
00:26:35,529 --> 00:26:40,434
定義されていない関数は
Swiftで呼び出せないのです

423
00:26:40,534 --> 00:26:45,639
しかしObjective-Cは
ダイナミックな言語で

424
00:26:45,739 --> 00:26:49,076
このような関数も
呼び出せます

425
00:26:49,176 --> 00:26:53,213
ではデバッガに
Objective-Cの構文で―

426
00:26:53,313 --> 00:26:55,916
この式を評価させましょう

427
00:26:56,016 --> 00:27:00,420
“expression option -l objc”と
入力します

428
00:26:56,016 --> 00:27:00,420
“expression option -l objc”と
入力します

429
00:27:00,721 --> 00:27:05,592
フレームはSwiftでも
コードはObjective-Cです

430
00:27:06,827 --> 00:27:11,498
-Oを加え poと同様に
デバッグの記述を確認します

431
00:27:11,598 --> 00:27:14,635
ダッシュ２つで
オプションの終わりを示し

432
00:27:14,902 --> 00:27:17,404
あとはローインプットです

433
00:27:17,504 --> 00:27:22,810
Objective-Cフォーマットを
与えねばなりませんが―

434
00:27:22,910 --> 00:27:25,212
うまくいきません

435
00:27:25,312 --> 00:27:28,916
一時的な式のコンテキストが
作成され―

436
00:27:29,016 --> 00:27:32,486
フレームの変数を
継承しないからです

437
00:27:32,586 --> 00:27:34,188
でも回避できます

438
00:27:34,488 --> 00:27:38,325
self.viewを
バッククォートで囲むのです

439
00:27:38,425 --> 00:27:41,261
まず現フレームの
コンテンツを評価し

440
00:27:41,361 --> 00:27:45,833
結果を挿入すると
残りを評価してくれます

441
00:27:45,933 --> 00:27:51,972
(拍手)

442
00:27:52,072 --> 00:27:54,975
デバッグの記述が
すべて表示されます

443
00:27:55,075 --> 00:27:58,445
ラベルをホストする
ScoreboardViewの―

444
00:27:58,545 --> 00:28:00,547
メモリアドレスです

445
00:27:58,545 --> 00:28:00,547
メモリアドレスです

446
00:28:00,647 --> 00:28:06,386
ではpoとメモリアドレスを
使ってみましょう

447
00:28:06,487 --> 00:28:11,225
しかしSwiftは数字を
ポインタとして扱わず

448
00:28:11,325 --> 00:28:13,093
うまくいきません

449
00:28:13,193 --> 00:28:16,864
そこで再び
Objective-Cの登場です

450
00:28:16,964 --> 00:28:20,601
同じことを
繰り返せばいいですが―

451
00:28:20,701 --> 00:28:25,973
ショートカットして
簡単なコマンドにしましょう

452
00:28:26,340 --> 00:28:31,078
エイリアスコマンドで
pocコマンドを呼び出します

453
00:28:31,178 --> 00:28:36,417
pocでメモリアドレスから
デバッグの記述を確認します

454
00:28:36,850 --> 00:28:40,487
メモリアドレスから
確認する方法を―

455
00:28:40,587 --> 00:28:42,289
もう１つ 紹介します

456
00:28:42,389 --> 00:28:46,226
使うのは
unsafeBitCastという関数です

457
00:28:46,360 --> 00:28:48,028
メモリアドレスを与え

458
00:28:48,128 --> 00:28:53,600
ScoreboardView.selfに
変更します

459
00:28:54,067 --> 00:28:58,672
unsafeBitCastでも
記述を確認できました

460
00:28:59,172 --> 00:29:02,843
unsafeBitCastは
型を返すので―

461
00:28:59,172 --> 00:29:02,843
unsafeBitCastは
型を返すので―

462
00:29:02,943 --> 00:29:06,747
.frameなどが使えます

463
00:29:06,847 --> 00:29:10,884
今回は中央位置を調べて
修正しましょう

464
00:29:10,984 --> 00:29:12,753
300に修正します

465
00:29:12,853 --> 00:29:15,622
300に変更されましたね

466
00:29:15,722 --> 00:29:19,560
しかしシミュレータでは
変わっていません

467
00:29:19,660 --> 00:29:20,694
停止中なので―

468
00:29:20,794 --> 00:29:25,499
画面のフレームバッファに
変更が適用されないのです

469
00:29:25,632 --> 00:29:28,001
アニメーションを
変えるため―

470
00:29:28,101 --> 00:29:32,005
“expression
CATransaction.flush”と入力

471
00:29:33,140 --> 00:29:36,376
画面のフレームバッファが
更新されます

472
00:29:36,477 --> 00:29:41,982
(拍手)

473
00:29:42,115 --> 00:29:45,519
この２行で
新しい位置を修正して

474
00:29:45,619 --> 00:29:47,955
フラッシュを続けます

475
00:29:48,055 --> 00:29:53,160
とても便利なので
１つのコマンドにしました

476
00:29:53,260 --> 00:29:55,929
その方法をお見せします

477
00:29:56,263 --> 00:29:59,399
Pythonのファイルを開きます

478
00:29:59,933 --> 00:30:01,668
なぜPythonか？

479
00:29:59,933 --> 00:30:01,668
なぜPythonか？

480
00:30:01,768 --> 00:30:06,807
Pythonを使えばLLDB APIに
フルアクセスできるからです

481
00:30:06,907 --> 00:30:09,977
Pythonで
LLDBスクリプトを書き

482
00:30:10,077 --> 00:30:14,281
“nudge x-offset y-offset
[view]”を入力

483
00:30:14,381 --> 00:30:17,484
これで停止中にビューを
ナッジできます

484
00:30:17,584 --> 00:30:21,288
長いようですが
ほとんどは停止の引数です

485
00:30:21,388 --> 00:30:23,023
真ん中の重要な部分は

486
00:30:23,123 --> 00:30:26,693
手動でやるはずだった
呼び出しです

487
00:30:26,793 --> 00:30:29,429
時間がなく未完成ですが―

488
00:30:29,530 --> 00:30:35,335
ダウンロードして
お使いいただけるようにします

489
00:30:36,370 --> 00:30:40,574
スクリプトを
有効にする方法を見せます

490
00:30:40,674 --> 00:30:44,878
ホームディレクトリで
.lldbinitと編集し

491
00:30:44,978 --> 00:30:47,614
command script importという行を
加えます

492
00:30:47,714 --> 00:30:50,651
便利なエイリアスも追加

493
00:30:50,751 --> 00:30:53,086
先ほどのpoc aliasや―

494
00:30:53,187 --> 00:30:56,623
トランザクションを
フラッシュするエイリアスです

495
00:31:00,160 --> 00:31:03,330
command script importを
コピーして

496
00:31:03,430 --> 00:31:06,166
デバッグセッションで
ペーストし 再開させます

497
00:31:06,266 --> 00:31:08,101
ここでナッジコマンドです

498
00:31:08,202 --> 00:31:12,873
“nudge” 水平位置が“０”
垂直方向が“－５”

499
00:31:12,973 --> 00:31:15,008
ビューのメモリアドレスも
入力し

500
00:31:15,109 --> 00:31:18,479
シミュレータで
ナッジさせます

501
00:31:18,579 --> 00:31:26,687
(拍手)

502
00:31:26,787 --> 00:31:29,823
LLDBでは空白行で
改行すれば

503
00:31:29,923 --> 00:31:32,459
前の行を繰り返すので
ナッジに最適

504
00:31:32,860 --> 00:31:36,497
右方向にナッジして
位置を調整します

505
00:31:36,597 --> 00:31:40,033
もう１つのビューも調整して

506
00:31:40,901 --> 00:31:44,338
Attemptsの位置を下げます

507
00:31:44,438 --> 00:31:49,409
また ナッジで一度
ビューの式を入力すると

508
00:31:49,510 --> 00:31:54,615
記憶して 前に記述したのと
同じ式を適用します

509
00:31:54,715 --> 00:31:57,718
マシなレイアウトに
なりました

510
00:31:57,818 --> 00:32:01,889
ナッジから提供された情報が
あります

511
00:31:57,818 --> 00:32:01,889
ナッジから提供された情報が
あります

512
00:32:01,989 --> 00:32:07,327
元の中央位置やフレーム値に
適用したオフセットなどです

513
00:32:07,427 --> 00:32:11,365
そこからレイアウトの
コードなどを修正し

514
00:32:11,465 --> 00:32:14,601
新しいレイアウトが
簡単にできました

515
00:32:16,203 --> 00:32:17,604
では最後に…

516
00:32:17,704 --> 00:32:21,808
先にバグを
チェックしておきましょう

517
00:32:22,242 --> 00:32:26,213
再コンパイルと再実行を
行う前に―

518
00:32:26,313 --> 00:32:30,250
挿入した式を
消去せねばなりません

519
00:32:30,350 --> 00:32:32,920
２回 実行するのを避けるためです

520
00:32:33,020 --> 00:32:37,291
選択して
Deleteキーで消すと早いです

521
00:32:37,624 --> 00:32:42,996
以上が デバッグを迅速に
行うためのテクニックです

522
00:32:43,096 --> 00:32:45,833
再コンパイルや
再実行をせずに―

523
00:32:45,933 --> 00:32:51,171
私たちは４つのバグをすべて
診断できました

524
00:32:51,271 --> 00:32:55,142
複雑なプロジェクトでは特に
時間を節約でき

525
00:32:55,242 --> 00:32:59,680
再現が難しいバグの解決に
欠かせません

526
00:32:59,780 --> 00:33:05,052
このテクニックを
ぜひ皆さんもお使いください

527
00:32:59,780 --> 00:33:05,052
このテクニックを
ぜひ皆さんもお使いください

528
00:33:05,152 --> 00:33:15,095
(拍手)

529
00:33:15,796 --> 00:33:20,234
デバッグセッションで
取り上げた秘訣を

530
00:33:20,334 --> 00:33:22,503
振り返ってみましょう

531
00:33:22,770 --> 00:33:27,474
まず Xcodeの“ビヘイビア”から
デバッグタブを生成

532
00:33:27,574 --> 00:33:30,878
LLDBのexpressionで
プログラム状態を変更

533
00:33:30,978 --> 00:33:35,549
自動再開するブレークポイントで
実行中にコードを挿入

534
00:33:35,649 --> 00:33:40,254
“breakpoint set”続いて
“one-shot true”を使って―

535
00:33:40,354 --> 00:33:43,257
独立したブレークポイントを
作成

536
00:33:43,490 --> 00:33:44,992
アセンブリフレームで―

537
00:33:45,092 --> 00:33:50,230
$arg1や$arg2などを使い
関数の引数を確認

538
00:33:50,330 --> 00:33:56,003
命令ポインタかthread jumpで
コードの行をスキップ

539
00:33:56,336 --> 00:34:00,541
ウォッチポイントで
変数の変更時に停止

540
00:33:56,336 --> 00:34:00,541
ウォッチポイントで
変数の変更時に停止

541
00:34:01,241 --> 00:34:04,912
Swiftフレームで
Objective-Cを―

542
00:34:05,012 --> 00:34:07,481
expression -l objcで評価

543
00:34:08,348 --> 00:34:09,850
デバッグ停止時に―

544
00:34:09,949 --> 00:34:15,856
CATransaction.flushで
ビュー変更をフラッシュ

545
00:34:16,056 --> 00:34:19,025
カスタムLLDBコマンドの
追加については

546
00:34:19,126 --> 00:34:22,929
エイリアスコマンドで
ショートカットを作成するか

547
00:34:23,030 --> 00:34:28,735
Pythonでコマンドを
カスタマイズして作成

548
00:34:28,835 --> 00:34:32,606
ナッジスクリプトを
ウェブサイトに載せるので

549
00:34:32,706 --> 00:34:36,510
ご覧になって
活用してください

550
00:34:38,011 --> 00:34:43,384
もう１つ お話ししたいのが
LLDBのprintコマンドです

551
00:34:43,484 --> 00:34:46,420
おなじみのpoは
デモで使いました

552
00:34:46,520 --> 00:34:51,358
デバッグの記述を要求し
カスタマイズ可能でしたね

553
00:34:51,458 --> 00:34:56,196
poは“expression”
“object-description”や

554
00:34:56,929 --> 00:34:58,999
“expression -O”の
エイリアスです

555
00:34:59,433 --> 00:35:03,404
一方 pコマンドは
expressionのエイリアスです

556
00:34:59,433 --> 00:35:03,404
一方 pコマンドは
expressionのエイリアスです

557
00:35:03,504 --> 00:35:06,540
LLDBの
組み込みフォーマッタを使い

558
00:35:06,640 --> 00:35:09,343
オブジェクトを表します

559
00:35:10,144 --> 00:35:13,614
知っておきたい３つ目のコマンドは
frame variableです

560
00:35:13,714 --> 00:35:14,748
他の２つと違い―

561
00:35:14,848 --> 00:35:17,851
コンパイルや
式の評価をしません

562
00:35:17,951 --> 00:35:21,488
変数の値をメモリから
直接 読み取り

563
00:35:21,588 --> 00:35:24,091
LLDB組み込みフォーマッタを
使います

564
00:35:24,191 --> 00:35:29,530
コマンドの選択は
好みと目的の情報次第です

565
00:35:29,630 --> 00:35:32,733
でも覚えておいてください

566
00:35:32,833 --> 00:35:37,438
expressionコマンドも
poやpも使えない時―

567
00:35:37,538 --> 00:35:42,109
フレーム内の変数を
frame variableで調べられます

568
00:35:44,244 --> 00:35:46,747
この後はセバスチャンが

569
00:35:46,847 --> 00:35:50,417
ビューデバッグの
テクニックをご紹介します

570
00:35:50,517 --> 00:35:55,422
(拍手)

571
00:35:55,522 --> 00:35:56,690
ありがとう　クリス

572
00:35:58,825 --> 00:36:04,031
ビューデバッガを
活用する秘訣をお教えします

573
00:35:58,825 --> 00:36:04,031
ビューデバッガを
活用する秘訣をお教えします

574
00:36:04,131 --> 00:36:08,335
また ダークモードの
macOS Mojaveで

575
00:36:08,435 --> 00:36:14,575
優れたデバッグが体験できるよう
Xcode 10を改良しました

576
00:36:14,775 --> 00:36:17,177
デモでお見せしましょう

577
00:36:17,945 --> 00:36:19,980
デモ機に切り替えます

578
00:36:20,748 --> 00:36:23,784
クリスと同じ
プロジェクトです

579
00:36:23,884 --> 00:36:27,521
バグが２つ
残っていましたね

580
00:36:29,790 --> 00:36:34,294
私はMacの
アプリケーションを使います

581
00:36:34,628 --> 00:36:40,467
Mac版のSolar Systemが
ダークモードに映えますね

582
00:36:41,235 --> 00:36:43,103
バグを２つ 解決します

583
00:36:43,737 --> 00:36:47,808
１つ目は“惑星の画像が
水平方向の中央にない”

584
00:36:47,908 --> 00:36:53,647
この地球の画像は確かに
右側にずれているので

585
00:36:53,747 --> 00:36:55,883
問題に対処しましょう

586
00:36:55,983 --> 00:37:01,121
２つ目は“ダークモードで
ポップオーバーの字が読めない”

587
00:36:55,983 --> 00:37:01,121
２つ目は“ダークモードで
ポップオーバーの字が読めない”

588
00:37:01,221 --> 00:37:03,590
実際に ご覧ください

589
00:37:03,690 --> 00:37:09,096
このポップオーバーに
軌道の情報が表示されます

590
00:37:09,196 --> 00:37:12,232
上部のラベルは
読みやすいですが―

591
00:37:12,332 --> 00:37:16,336
下部は文字を選択しないと
読めません

592
00:37:16,703 --> 00:37:19,106
この２つに取り組みます

593
00:37:19,206 --> 00:37:21,942
さっそく始めましょう

594
00:37:22,276 --> 00:37:26,613
Xcodeで
ビュー階層を取り込みます

595
00:37:26,713 --> 00:37:32,252
問題と修正方法を見つけ
ビールを楽しみましょう

596
00:37:32,820 --> 00:37:37,824
ただ Xcodeに切り替えると
ポップオーバーが消えます

597
00:37:37,925 --> 00:37:40,427
バックグラウンドに
移るからです

598
00:37:40,527 --> 00:37:42,963
ビュー階層を取り込めません

599
00:37:43,230 --> 00:37:46,767
そこでアクティブ状態で
取り込む方法を―

600
00:37:46,867 --> 00:37:49,136
２つ ご紹介しましょう

601
00:37:49,870 --> 00:37:53,674
ご覧のとおり
ポップオーバーが消えます

602
00:37:54,508 --> 00:37:56,109
Touch Barを使うので

603
00:37:56,210 --> 00:38:00,714
Windowメニューから
シミュレータを出します

604
00:37:56,210 --> 00:38:00,714
Windowメニューから
シミュレータを出します

605
00:38:00,814 --> 00:38:04,451
再びポップオーバーを
開きましょう

606
00:38:04,551 --> 00:38:09,823
Touch Barの
スプレー缶アイコンをタップすると

607
00:38:09,923 --> 00:38:15,863
Xcodeが提供するデバッグの
オプションが表示されます

608
00:38:15,963 --> 00:38:19,333
Touch Barから
簡単にアクセス可能です

609
00:38:19,433 --> 00:38:22,669
Xcodeが
バックグラウンド状態なので

610
00:38:22,770 --> 00:38:27,074
フルスクリーンモードで
開発中でも使えます

611
00:38:27,474 --> 00:38:31,979
オプションの１つで
ビュー階層を取り込めますが

612
00:38:32,079 --> 00:38:36,984
Touch Barのない人には
別の方法があります

613
00:38:38,152 --> 00:38:42,322
シミュレータを閉じ
デバッグバーのボタンを

614
00:38:42,422 --> 00:38:45,759
Commandキーを押しながら
クリックします

615
00:38:46,493 --> 00:38:49,863
アプリケーションを
アクティブにせずに―

616
00:38:49,963 --> 00:38:53,333
マウスで
クリックできる方法です

617
00:38:53,867 --> 00:38:58,705
これで ビュー階層の
キャプチャを起動できます

618
00:38:58,805 --> 00:39:01,975
デバッガは
アクティブ状態で停止

619
00:38:58,805 --> 00:39:01,975
デバッガは
アクティブ状態で停止

620
00:39:02,075 --> 00:39:05,412
UIは描画を続け

621
00:39:05,512 --> 00:39:07,347
ポップオーバーも出てます

622
00:39:07,448 --> 00:39:09,483
待機カーソルになるのは―

623
00:39:09,583 --> 00:39:13,620
アプリケーションが停止し
マウスに反応しないからです

624
00:39:14,822 --> 00:39:19,960
ビューデバッガでは
ポップオーバーが見えません

625
00:39:20,394 --> 00:39:23,430
でも ちゃんと
取り込んでいるので

626
00:39:23,530 --> 00:39:25,966
後でお見せします

627
00:39:26,066 --> 00:39:29,503
まず 画像ビューの
レイアウトの問題です

628
00:39:29,803 --> 00:39:33,073
画像ビューを少し拡大します

629
00:39:33,173 --> 00:39:35,542
右側のインスペクタを見ると

630
00:39:35,642 --> 00:39:39,713
NSImageViewSimpleImageViewと
なっています

631
00:39:39,813 --> 00:39:42,716
アンダースコアのついた
プレフィックスなので―

632
00:39:42,816 --> 00:39:46,420
システムフレームワークの
インターナルクラスです

633
00:39:46,520 --> 00:39:51,759
コードなどで画像ビューを
設定する際には使いません

634
00:39:51,859 --> 00:39:54,561
ビュー階層で
オブジェクトを見ます

635
00:39:54,661 --> 00:39:58,899
Navigateメニューから
“Reveal in Debug Navigator”へ

636
00:39:58,999 --> 00:40:03,937
左側でスーパービューと
サブビューに関連づけられています

637
00:39:58,999 --> 00:40:03,937
左側でスーパービューと
サブビューに関連づけられています

638
00:40:04,571 --> 00:40:08,542
スーパービューは
NSImageViewです

639
00:40:08,642 --> 00:40:11,845
そのスーパービューは
PlanetGlobeViewで

640
00:40:11,945 --> 00:40:15,883
そのスーパービューは
NSVisualEffectViewです

641
00:40:16,984 --> 00:40:18,752
ImageViewを選べば―

642
00:40:19,219 --> 00:40:23,390
右側の画像ビューの
プロパティが確認できます

643
00:40:23,490 --> 00:40:25,659
レイアウトを調べましょう

644
00:40:25,759 --> 00:40:30,130
Auto Layoutを使ってるので
その制約を―

645
00:40:30,230 --> 00:40:32,866
このボタンで表示できます

646
00:40:33,734 --> 00:40:37,771
レイアウトに影響する制約を
すべて確認できます

647
00:40:38,539 --> 00:40:41,942
例えば
アスペクト比の制約などです

648
00:40:42,042 --> 00:40:46,246
また この縦の線は
そろえの制約です

649
00:40:46,480 --> 00:40:51,185
制約を選択すると右側に
プロパティが表示されます

650
00:40:51,285 --> 00:40:54,721
表示されている
ワイヤフレームは―

651
00:40:54,822 --> 00:40:59,993
レイアウトに関与しているビューの
コンテンツです

652
00:41:00,094 --> 00:41:02,996
コンテンツのないビューも
あるので―

653
00:41:03,096 --> 00:41:05,232
この表示なのです

654
00:41:05,799 --> 00:41:10,370
制約を選択したので
インスペクタを見ましょう

655
00:41:10,470 --> 00:41:14,575
画像ビューと惑星ビューの
それぞれが

656
00:41:14,675 --> 00:41:18,879
定数０で水平方向の中央で
そろえられています

657
00:41:18,979 --> 00:41:22,049
だからスーパービューで
そろうのです

658
00:41:22,583 --> 00:41:26,987
PlanetGlobeViewを
ナビゲータで選択します

659
00:41:27,087 --> 00:41:30,090
奇妙なことに
左側は大きいのに―

660
00:41:30,190 --> 00:41:32,426
右側はそろっています

661
00:41:32,526 --> 00:41:37,464
制約で水平方向で
そろえていたはずなのに―

662
00:41:37,798 --> 00:41:40,000
矛盾しています

663
00:41:40,100 --> 00:41:45,272
では惑星ビューの制約を見て
確認しましょう

664
00:41:45,639 --> 00:41:49,243
前辺の制約を選択し
インスペクタを見ます

665
00:41:49,343 --> 00:41:54,948
スーパービューで見た
NSVisualEffectViewの前辺と

666
00:41:55,048 --> 00:41:59,553
惑星ビューの前辺が
そろえられています

667
00:41:59,653 --> 00:42:03,257
定数30となっているので
納得できます

668
00:41:59,653 --> 00:42:03,257
定数30となっているので
納得できます

669
00:42:03,357 --> 00:42:05,392
次は後辺の制約です

670
00:42:06,493 --> 00:42:10,798
惑星ビューの後辺と
スーパービューの後辺が

671
00:42:10,898 --> 00:42:13,300
定数30でそろっています

672
00:42:13,400 --> 00:42:16,770
この制約は右側で
何も接しておらず

673
00:42:16,870 --> 00:42:20,207
全体像がよくつかめません

674
00:42:20,307 --> 00:42:24,011
現在 切り抜きされた
コンテンツがないか―

675
00:42:24,111 --> 00:42:25,913
確認しましょう

676
00:42:26,013 --> 00:42:29,850
このボタンで
切り抜きしたコンテンツを表示

677
00:42:30,184 --> 00:42:36,223
すると惑星ビューが右方向へ
境界を越えて広がりました

678
00:42:36,323 --> 00:42:41,461
スーパービューでは
中央でそろっているので―

679
00:42:41,562 --> 00:42:43,130
制約どおりです

680
00:42:43,230 --> 00:42:46,833
ただ ウインドウの境界を
越えています

681
00:42:46,934 --> 00:42:49,436
コードで制約を設定する時に

682
00:42:49,536 --> 00:42:53,407
うっかり２つを
入れ替えてしまいがちです

683
00:42:53,507 --> 00:42:56,910
定数を間違えることも
あります

684
00:42:57,010 --> 00:43:01,315
この場合はマイナス30を
30にしていました

685
00:42:57,010 --> 00:43:01,315
この場合はマイナス30を
30にしていました

686
00:43:01,415 --> 00:43:04,985
修正して
定数を入れますが―

687
00:43:05,085 --> 00:43:10,758
先ほどのクリスと同じく
LLDBでやりましょう

688
00:43:11,525 --> 00:43:14,194
こちらの制約を選択します

689
00:43:16,864 --> 00:43:20,167
そしてEditからコピーを選び

690
00:43:20,367 --> 00:43:23,704
下にコンソール領域を
開きましょう

691
00:43:23,971 --> 00:43:29,743
このコピーによって
ポインタがキャストされます

692
00:43:29,843 --> 00:43:34,114
Memory debuggerで
選択した場合も同様です

693
00:43:34,214 --> 00:43:37,818
コンソールで
非常に便利ですね

694
00:43:37,918 --> 00:43:41,989
(拍手)

695
00:43:42,089 --> 00:43:43,223
ありがとう

696
00:43:43,323 --> 00:43:48,128
デバッガ記述を出力し
定数がプラス30と確認します

697
00:43:48,228 --> 00:43:50,664
インスペクタで見ましたね

698
00:43:50,764 --> 00:43:53,167
マイナス30に設定しましょう

699
00:43:53,267 --> 00:43:58,772
expressionの省略である
“e”を入力します

700
00:43:58,872 --> 00:44:03,277
そしてsetConstantを
マイナス30に設定

701
00:43:58,872 --> 00:44:03,277
そしてsetConstantを
マイナス30に設定

702
00:44:03,710 --> 00:44:08,448
しかし先ほどと同様
停止中は更新されません

703
00:44:08,549 --> 00:44:13,620
そこで
CATransaction.flushを使い

704
00:44:13,720 --> 00:44:19,359
停止したインターフェイスを
更新しましょう

705
00:44:19,760 --> 00:44:22,462
クリスが加えたコマンドを使います

706
00:44:23,230 --> 00:44:26,033
コマンドを入れましょう

707
00:44:26,333 --> 00:44:29,870
惑星が水平方向の中央に
位置しました

708
00:44:29,970 --> 00:44:32,306
定数を入れて成功です

709
00:44:32,406 --> 00:44:36,710
この変更を
コードに適用しましょう

710
00:44:38,011 --> 00:44:42,883
制約を選択すると
右側にバックトレースが表示され

711
00:44:42,983 --> 00:44:47,854
どのフレームが
割り当てられたか分かります

712
00:44:47,955 --> 00:44:52,593
制約を作ったコードに
ジャンプできるのです

713
00:44:52,693 --> 00:44:57,898
Malloc Stack Loggingを
有効にします

714
00:44:57,998 --> 00:45:00,300
ご覧に入れましょう

715
00:44:57,998 --> 00:45:00,300
ご覧に入れましょう

716
00:45:00,400 --> 00:45:03,704
上部で“Edit Scheme”を
選択します

717
00:45:03,804 --> 00:45:08,475
“Diagnostics”タブの
“Logging”で―

718
00:45:08,575 --> 00:45:13,280
Malloc Stackを
Allocation and Free Historyに

719
00:45:13,614 --> 00:45:17,451
これでバックトレースが
生成されます

720
00:45:17,551 --> 00:45:21,054
Memory debuggerで
選択した場合も同様です

721
00:45:21,155 --> 00:45:24,224
スタックフレームに
カーソルを重ねると

722
00:45:24,324 --> 00:45:27,427
フレームのフルネームが
見えます

723
00:45:27,628 --> 00:45:32,966
setupPlanetGlobeViewLayoutと
なっています

724
00:45:33,567 --> 00:45:38,605
この矢印でコードの場所へ
ジャンプできます

725
00:45:39,073 --> 00:45:41,875
ShiftキーとReturnキーと
Optionキーを長押しすると

726
00:45:41,975 --> 00:45:47,614
このように別ウインドウに
ファイルが開きます

727
00:45:48,715 --> 00:45:52,786
制約のコード行が
ハイライトされました

728
00:45:52,886 --> 00:45:56,390
定数30を
マイナス30に変更します

729
00:45:56,523 --> 00:46:00,227
保存して閉じれば
最初のバグは終了です

730
00:45:56,523 --> 00:46:00,227
保存して閉じれば
最初のバグは終了です

731
00:46:01,295 --> 00:46:02,196
いいですね

732
00:46:02,296 --> 00:46:03,797
２つ目は―

733
00:46:03,897 --> 00:46:08,168
“ポップオーバーの字が
読めない”というバグです

734
00:46:08,268 --> 00:46:09,436
見てみましょう

735
00:46:10,470 --> 00:46:13,307
まず制約モードを
無効にして

736
00:46:13,707 --> 00:46:16,110
切り抜きを消しましょう

737
00:46:17,177 --> 00:46:19,446
コンソールの入力も消します

738
00:46:19,980 --> 00:46:25,519
最初に アクティブ状態で
取り込む方法を見せました

739
00:46:25,619 --> 00:46:29,389
でもポップオーバーは
見えません

740
00:46:29,490 --> 00:46:33,126
ウインドウを１つしか
表示できないからです

741
00:46:33,460 --> 00:46:36,096
他のウインドウも見ましょう

742
00:46:36,396 --> 00:46:40,367
ビュー階層を
上にスクロールすると

743
00:46:40,467 --> 00:46:44,972
現在 見ているウインドウが
確認できます

744
00:46:45,072 --> 00:46:48,275
ルートレベルを折りたたむと

745
00:46:48,375 --> 00:46:52,446
別のルートレベルが現れます

746
00:46:52,746 --> 00:46:53,981
ポップオーバーです

747
00:46:54,248 --> 00:46:58,252
macOSやiOSで
複数のウインドウがあれば

748
00:46:58,352 --> 00:47:02,623
左側にルートレベルとして
表示されます

749
00:46:58,352 --> 00:47:02,623
左側にルートレベルとして
表示されます

750
00:47:02,723 --> 00:47:07,528
取り込むべきウインドウが
複数あるなら―

751
00:47:07,628 --> 00:47:09,963
確認してください

752
00:47:10,430 --> 00:47:14,501
3D表示で
このように確認できます

753
00:47:14,601 --> 00:47:17,938
読みづらくなっていますね

754
00:47:18,038 --> 00:47:20,908
ラベルを調べてみましょう

755
00:47:21,008 --> 00:47:25,512
ビューデバッガでは
Commandキーを長押しすれば

756
00:47:25,612 --> 00:47:29,383
クリックスルーで
青のラベルを選択できます

757
00:47:29,483 --> 00:47:32,119
まずテキストの色です

758
00:47:32,219 --> 00:47:36,690
ダークモードに
映えるラベルを見つけて

759
00:47:36,790 --> 00:47:38,859
問題を解決しましょう

760
00:47:40,027 --> 00:47:44,798
テキスト色はRGBで
青になっています

761
00:47:44,965 --> 00:47:48,168
インスペクタには
色の名前も表示

762
00:47:48,268 --> 00:47:52,873
アセットカタログの
色ということです

763
00:47:52,973 --> 00:47:57,611
Xcode 10では１つの色から
バリエーションが生まれ

764
00:47:57,711 --> 00:48:00,748
明るい色や暗い色があります

765
00:47:57,711 --> 00:48:00,748
明るい色や暗い色があります

766
00:48:00,848 --> 00:48:05,919
ビューの外観によって
いずれかの色に決まり

767
00:48:06,020 --> 00:48:09,323
インスペクタに表示されます

768
00:48:09,423 --> 00:48:12,393
下の“View”セクションには

769
00:48:12,493 --> 00:48:15,362
“Appearance”と
“Effective Appearance”があり

770
00:48:15,462 --> 00:48:18,232
Appearanceは
明示されてません

771
00:48:18,332 --> 00:48:22,002
これは よくあることで
ほとんどのビューは―

772
00:48:22,102 --> 00:48:26,840
スーパービューなどから
外観を引き継ぎます

773
00:48:27,174 --> 00:48:31,245
しかしEffective Appearanceは
“VibrantDark”で

774
00:48:31,445 --> 00:48:35,916
アセットカタログの色から
選ばれた色です

775
00:48:36,750 --> 00:48:39,787
インスペクタの下部には―

776
00:48:39,887 --> 00:48:44,057
デバッグの記述である
記述プロパティもあります

777
00:48:44,157 --> 00:48:47,794
先ほどクリスが
お見せしましたね

778
00:48:47,895 --> 00:48:49,630
poを使うことで―

779
00:48:49,730 --> 00:48:54,401
コンソールのデバッグの記述を
提供するだけではなく

780
00:48:54,501 --> 00:48:58,338
ビューデバッガからも
出せるのです

781
00:48:59,540 --> 00:49:01,842
テキスト色に戻ります

782
00:48:59,540 --> 00:49:01,842
テキスト色に戻ります

783
00:49:01,942 --> 00:49:05,345
２番目のラベルも
よく見えますね

784
00:49:05,446 --> 00:49:10,184
システムが定めた
labelColorとなっており

785
00:49:10,284 --> 00:49:13,954
アセットカタログの色では
ありません

786
00:49:14,054 --> 00:49:17,858
システム色も
外観が変わると対応します

787
00:49:18,325 --> 00:49:21,361
次は問題のラベルです

788
00:49:21,461 --> 00:49:25,065
濃いダークグレーで
名前がありませんね

789
00:49:25,165 --> 00:49:30,604
つまりカスタム色で
外観の変化に対応しません

790
00:49:30,938 --> 00:49:36,810
それでは このテキスト色を
システム色に変えましょう

791
00:49:37,911 --> 00:49:40,848
このオブジェクトを
選択しながら

792
00:49:41,248 --> 00:49:44,151
eを入力して
ポインタをキャスト

793
00:49:44,251 --> 00:49:50,257
setTextColor:
[NSColor textColor]と入力

794
00:49:51,491 --> 00:49:53,794
トランザクションを
フラッシュ

795
00:49:53,994 --> 00:49:58,098
ポップオーバーのフォントが
更新されました

796
00:49:58,832 --> 00:50:02,369
Storyboardファイルに
適用します

797
00:49:58,832 --> 00:50:02,369
Storyboardファイルに
適用します

798
00:50:02,636 --> 00:50:05,506
ここで必ず全体を通して

799
00:50:05,606 --> 00:50:09,109
外観が整っていることを
確認しましょう

800
00:50:09,209 --> 00:50:14,014
複数のシステムの外観に
関わるからです

801
00:50:14,114 --> 00:50:17,151
その方法をお見せしましょう

802
00:50:18,452 --> 00:50:21,722
システム全体の外観を
明るくして―

803
00:50:21,822 --> 00:50:24,892
ラベルを
確かめる必要はありません

804
00:50:24,992 --> 00:50:29,429
Xcode 10では
目的の対象だけ変えられます

805
00:50:29,530 --> 00:50:33,467
デバッグバーのボタンで
“Light”を選択

806
00:50:33,934 --> 00:50:37,504
アプリケーションの外観が
明るくなりました

807
00:50:37,604 --> 00:50:40,507
ポップオーバーを出して

808
00:50:41,175 --> 00:50:43,377
読みやすさを確認

809
00:50:43,477 --> 00:50:45,646
修正に成功しました

810
00:50:45,746 --> 00:50:49,983
外観を変えて確認することは
よくあるため―

811
00:50:50,083 --> 00:50:54,388
Touch Barにオプションを
追加しました

812
00:50:54,488 --> 00:50:56,490
再びシミュレータで―

813
00:50:56,590 --> 00:51:01,228
ポップオーバーを開き
ここのオプションを選択

814
00:50:56,590 --> 00:51:01,228
ポップオーバーを開き
ここのオプションを選択

815
00:51:01,762 --> 00:51:04,565
修正オプションが出ました

816
00:51:04,665 --> 00:51:08,635
フルスクリーンモードでも
アクセスできます

817
00:51:08,735 --> 00:51:14,708
コントラストを上げると
アクセシビリティだけでなく

818
00:51:14,808 --> 00:51:17,644
外観を明るく修正できます

819
00:51:17,744 --> 00:51:22,216
アプリケーションの見た目も
向上します

820
00:51:22,316 --> 00:51:25,352
もちろん
システムの外観も同様です

821
00:51:25,786 --> 00:51:28,222
問題は解決しましたね

822
00:51:28,856 --> 00:51:32,226
バグのリストに
チェックを入れます

823
00:51:32,326 --> 00:51:35,996
デモを終了して
スライドに戻りましょう

824
00:51:36,330 --> 00:51:43,670
(拍手)

825
00:51:43,771 --> 00:51:45,806
では おさらいです

826
00:51:46,273 --> 00:51:48,809
“Reveal”を使って―

827
00:51:48,909 --> 00:51:53,380
ビュー階層で現在の選択を
明らかにしました

828
00:51:53,580 --> 00:51:56,150
さらに 切り抜きを確認

829
00:51:56,683 --> 00:52:00,988
Auto Layoutで
制約の問題を特定

830
00:51:56,683 --> 00:52:00,988
Auto Layoutで
制約の問題を特定

831
00:52:01,321 --> 00:52:05,092
選択されたオブジェクトを
コピーして―

832
00:52:05,192 --> 00:52:08,762
オブジェクトポインタを使用

833
00:52:08,896 --> 00:52:14,835
Malloc Stackを有効にして
バックトレースを生成し―

834
00:52:15,135 --> 00:52:19,740
制約に必要な変更を
コードに適用

835
00:52:19,840 --> 00:52:25,045
ビューデバッガのインスペクタで
デバッグを記述

836
00:52:25,479 --> 00:52:30,184
クリックスルーで
背後のビューを選択

837
00:52:31,051 --> 00:52:34,254
ダークモードの
デバッグでは―

838
00:52:34,354 --> 00:52:39,293
デバッグバーかTouch Barで
外観を修正

839
00:52:39,693 --> 00:52:42,329
アクティブ状態で取り込み

840
00:52:42,429 --> 00:52:45,666
最後に
名前と外観の情報を―

841
00:52:45,766 --> 00:52:48,869
ビューデバッガの
インスペクタで確認

842
00:52:49,303 --> 00:52:51,672
ダークモードの詳細は

843
00:52:51,772 --> 00:52:56,543
この２つのセッションの
ビデオをご覧ください

844
00:52:57,344 --> 00:52:59,780
これでセッションは終了です

845
00:52:59,880 --> 00:53:05,219
ナッジスクリプトや
その他の詳しい情報は

846
00:52:59,880 --> 00:53:05,219
ナッジスクリプトや
その他の詳しい情報は

847
00:53:05,319 --> 00:53:07,454
ウェブサイトをご覧ください

848
00:53:07,554 --> 00:53:11,925
今日の内容や
デバッグについての質問は

849
00:53:12,025 --> 00:53:17,998
明日９時からのラボで
クリスや私がお答えします

850
00:53:18,098 --> 00:53:20,567
メモリデバッグについては

851
00:53:20,667 --> 00:53:24,571
明日 iOSメモリの
セッションがあります

852
00:53:24,938 --> 00:53:29,743
それではBashと
WWDCをお楽しみください

853
00:53:29,843 --> 00:53:33,814
(拍手)