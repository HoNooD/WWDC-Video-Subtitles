
1
00:00:07,174 --> 00:00:16,383
(音楽)

2
00:00:25,559 --> 00:00:31,098
(拍手)

3
00:00:31,198 --> 00:00:34,101
こんにちは ジュリアンです

4
00:00:34,668 --> 00:00:39,840
サウンドデザイン担当の
ヒューゴも後で登場します

5
00:00:40,541 --> 00:00:46,547
なぜボタンの話をするか
最初に少し ご説明します

6
00:00:47,481 --> 00:00:49,883
私は未来のハードウェアの

7
00:00:50,784 --> 00:00:53,120
ユーザインターフェイスを
設計しています

8
00:00:53,887 --> 00:00:58,058
仕事の性質上
標準のUIKitを常には使えません

9
00:00:58,859 --> 00:01:03,230
スクロール ズーム
ページング ボタンなど

10
00:00:58,859 --> 00:01:03,230
スクロール ズーム
ページング ボタンなど

11
00:01:03,330 --> 00:01:07,434
ユーザインターフェイスの
基本エレメントを構築します

12
00:01:08,035 --> 00:01:11,605
コントロールに関わる
詳細について

13
00:01:12,005 --> 00:01:14,808
多くを学んできました

14
00:01:16,877 --> 00:01:21,014
今日はその一端を
皆さんにお伝えします

15
00:01:22,115 --> 00:01:25,786
単純に見えるボタンに
隠された―

16
00:01:26,687 --> 00:01:30,123
配慮と複雑さを
知ってほしいのです

17
00:01:31,291 --> 00:01:35,195
ボタンから学べることが
あると思います

18
00:01:36,063 --> 00:01:39,900
標準コントロールを
もっと考えて使い

19
00:01:41,001 --> 00:01:44,671
カスタムコントロールの
構築時期を検討してください

20
00:01:45,672 --> 00:01:51,445
カスタムにするなら
インタラクションが重要です

21
00:01:52,546 --> 00:01:53,780
では始めます

22
00:01:55,582 --> 00:02:00,954
我々はトーストApp帝国を
展開しようとしています

23
00:01:55,582 --> 00:02:00,954
我々はトーストApp帝国を
展開しようとしています

24
00:02:02,356 --> 00:02:06,093
今 構築中の
よりシンプルなAppは

25
00:02:06,994 --> 00:02:09,062
トースターと連動します

26
00:02:10,464 --> 00:02:13,734
朝の支度を考えてください

27
00:02:14,368 --> 00:02:18,972
朝食はタイミングよく
できていてほしいものです

28
00:02:20,107 --> 00:02:23,677
このアプリケーションを
起動してボタンを押せば

29
00:02:23,911 --> 00:02:27,314
キッチンでトーストが
焼き上がります

30
00:02:29,616 --> 00:02:33,820
接続したトースターが
稼働します

31
00:02:34,054 --> 00:02:39,960
トースターは準備 焼くという
段階をへて

32
00:02:40,360 --> 00:02:44,498
最終的にトーストが完成します

33
00:02:45,599 --> 00:02:49,603
しかしトースターが
この過程を進むのは

34
00:02:50,404 --> 00:02:52,406
アプリケーションを
使うからです

35
00:02:53,006 --> 00:02:57,010
パンを焼くリクエストを
出すことで

36
00:02:57,611 --> 00:02:59,112
トースターを動かします

37
00:03:00,647 --> 00:03:03,517
完成したら
当然食べるでしょうが

38
00:03:04,251 --> 00:03:07,588
キャンセルする場合も
あるでしょう

39
00:03:08,255 --> 00:03:12,292
トースターは常に
待機状態にしておきたいです

40
00:03:12,793 --> 00:03:16,430
詳細は明かしませんが
性能は確実です

41
00:03:18,398 --> 00:03:22,636
拡張現実トーストの構想も
描いています

42
00:03:22,736 --> 00:03:25,839
各家庭の複数のトースターで

43
00:03:25,939 --> 00:03:29,176
トースト･ソーシャル
ネットワークを作るのです

44
00:03:30,210 --> 00:03:32,379
いろいろと進行中ですよ

45
00:03:35,382 --> 00:03:40,921
今日はシングルスクリーンの
詳細を掘り下げます

46
00:03:41,355 --> 00:03:45,826
我々のアプリケーションも
単一画面にボタンが１つです

47
00:03:47,427 --> 00:03:52,866
重要なインタラクションの
詳細から全容が見えます

48
00:03:54,635 --> 00:03:56,336
再び我々のシステムです

49
00:03:57,371 --> 00:04:01,341
ここで最も重要な
インタラクションは

50
00:03:57,371 --> 00:04:01,341
ここで最も重要な
インタラクションは

51
00:04:01,441 --> 00:04:03,544
トーストをリクエストする時です

52
00:04:04,011 --> 00:04:09,216
もちろん他も重要ですが
これが第一に来ます

53
00:04:09,316 --> 00:04:13,720
トースターが動かなければ
元も子もありません

54
00:04:18,425 --> 00:04:23,030
最初にボタンとは何かという
話題に触れてから

55
00:04:24,565 --> 00:04:29,403
インタラクティブコントロールに
ついて考えましょう

56
00:04:31,038 --> 00:04:34,107
最後にヒューゴが
音について話します

57
00:04:38,045 --> 00:04:39,746
今日 取り上げるのは

58
00:04:41,381 --> 00:04:46,920
ユーザインターフェイスを
コントロールするボタンです

59
00:04:47,988 --> 00:04:51,458
アクションを間接的に
コントロールします

60
00:04:52,593 --> 00:04:58,665
つまりボタンとは別の場所で
アクションが起きます

61
00:04:59,466 --> 00:05:02,936
直接的なインタラクションは

62
00:04:59,466 --> 00:05:02,936
直接的なインタラクションは

63
00:05:04,204 --> 00:05:07,875
例えばレバーをつかんで
コントロールします

64
00:05:09,076 --> 00:05:15,048
直接的インタラクションは
体感できる面白さがあります

65
00:05:15,649 --> 00:05:19,520
しかし
間接的インタラクションは

66
00:05:19,620 --> 00:05:23,924
離れているからこそ
よりパワフルになり得ます

67
00:05:25,626 --> 00:05:28,729
画面上のボタンがまねる
本物のボタンも

68
00:05:28,829 --> 00:05:32,099
面白いことに
間接的に作用します

69
00:05:36,537 --> 00:05:41,642
離れた場所にあるボタンが
アクションを

70
00:05:42,209 --> 00:05:44,144
制御しているわけです

71
00:05:44,511 --> 00:05:49,383
アクション同様に
ボタンも設計が可能です

72
00:05:49,483 --> 00:05:52,986
切り離して考えることも
できます

73
00:05:55,222 --> 00:05:57,791
ボタンの設計において

74
00:05:58,158 --> 00:06:03,130
デザインフィードバックは
非常に重要です

75
00:05:58,158 --> 00:06:03,130
デザインフィードバックは
非常に重要です

76
00:06:04,665 --> 00:06:09,269
アプリケーションの動きを
ユーザに伝えるため

77
00:06:10,671 --> 00:06:15,008
皆さんもフィードバックを
活用していますね

78
00:06:15,108 --> 00:06:18,345
フィードバックには
さまざまな形があります

79
00:06:18,879 --> 00:06:23,951
しかし大きく分けると
２つに分類されます

80
00:06:25,352 --> 00:06:28,055
１つは言葉やアイコンです

81
00:06:28,789 --> 00:06:32,626
今 起きていることを
画面の上で

82
00:06:32,759 --> 00:06:35,362
文章やアイコンで説明します

83
00:06:37,030 --> 00:06:39,666
もう１つは
アクションの結果を

84
00:06:40,100 --> 00:06:44,738
実際に体験してもらう
フィードバックで

85
00:06:44,838 --> 00:06:46,406
よりリアルです

86
00:06:47,341 --> 00:06:52,246
視覚 聴覚 触覚の変化を通して
徐々に体験します

87
00:06:55,849 --> 00:07:01,722
インタラクションの３つの
フェーズでフィードバックを

88
00:06:55,849 --> 00:07:01,722
インタラクションの３つの
フェーズでフィードバックを

89
00:07:03,257 --> 00:07:05,058
考えてみましょう

90
00:07:05,792 --> 00:07:09,062
フェーズは
本物のボタンと同じです

91
00:07:11,398 --> 00:07:15,369
押す前は
ただ そこにあるだけです

92
00:07:17,905 --> 00:07:21,675
インタラクションの間は
押下され

93
00:07:24,111 --> 00:07:30,150
押した後は指が離れ
ボタンは元の状態に戻ります

94
00:07:34,021 --> 00:07:37,658
ボタンのインタラクションを
始める前に

95
00:07:38,058 --> 00:07:40,961
フィードバックを出す
理由を考えます

96
00:07:41,061 --> 00:07:43,897
なぜ それが重要なのでしょう

97
00:07:45,065 --> 00:07:47,935
iPhoneを
考えてみましょう

98
00:07:48,836 --> 00:07:52,339
iPhoneの画面は
１枚のガラスです

99
00:07:53,240 --> 00:07:56,643
ガラスの下に
光るピクセルがあります

100
00:07:56,977 --> 00:08:00,681
問題はピクセルの
意味の捉え方です

101
00:07:56,977 --> 00:08:00,681
問題はピクセルの
意味の捉え方です

102
00:08:01,782 --> 00:08:05,085
ガラスでなく画面上の何かが

103
00:08:06,086 --> 00:08:07,921
タップできると伝えます

104
00:08:09,122 --> 00:08:11,391
画面を移動したり

105
00:08:13,026 --> 00:08:14,328
ドラッグしたり

106
00:08:15,329 --> 00:08:18,699
タップしたりできることが
分かります

107
00:08:21,034 --> 00:08:26,540
学術用語で言うと
“知覚されたアフォーダンス”です

108
00:08:27,474 --> 00:08:33,647
“アフォーダンス”とは
人間とオブジェクトの関係性です

109
00:08:33,780 --> 00:08:38,585
本物のボタンなら
扱い方は分かるでしょう

110
00:08:38,952 --> 00:08:41,621
しかし知覚されたボタンは

111
00:08:41,722 --> 00:08:45,926
画面上のピクセルに
関する情報を示します

112
00:08:46,460 --> 00:08:49,830
ユーザのiPhone画面の
操作の知識は

113
00:08:49,930 --> 00:08:53,700
これまでのiOS体験に
基づきます

114
00:08:54,034 --> 00:08:58,138
目の前の携帯の
アプリケーションについては

115
00:08:58,238 --> 00:09:01,308
知らないかもしれません

116
00:08:58,238 --> 00:09:01,308
知らないかもしれません

117
00:09:03,043 --> 00:09:07,181
我々のトーストAppの場合は
どうでしょう

118
00:09:08,982 --> 00:09:11,852
タップすると
何が起きるのでしょう

119
00:09:11,952 --> 00:09:14,888
“OK”ボタンだけでは
ダメですよね

120
00:09:16,557 --> 00:09:20,961
我々はフィードバックとして
ラベルを表示します

121
00:09:21,061 --> 00:09:24,665
何が起きるかを
文字で示しています

122
00:09:26,033 --> 00:09:29,036
この場合のラベルは
“Toast”

123
00:09:29,136 --> 00:09:32,706
“パンを焼く”という
動詞の意味もありますが

124
00:09:32,806 --> 00:09:36,844
名詞としての“トースト”の
意味もあります

125
00:09:37,077 --> 00:09:40,714
“Toast Toast”
とすべきでしょうか

126
00:09:42,182 --> 00:09:46,153
こんなアイコンを
表示する手もあります

127
00:09:46,653 --> 00:09:49,656
しかし予備知識がない状況で

128
00:09:49,756 --> 00:09:53,527
これを見ても
意味がよく分かりません

129
00:09:53,794 --> 00:09:58,298
“Make Toast”と
してはどうでしょう

130
00:09:58,599 --> 00:10:03,737
我々のダイアグラムでは
トーストのリクエストですが

131
00:09:58,599 --> 00:10:03,737
我々のダイアグラムでは
トーストのリクエストですが

132
00:10:04,571 --> 00:10:07,774
ユーザは
どう捉えるでしょうか

133
00:10:08,308 --> 00:10:10,744
容易に理解できるでしょうか

134
00:10:14,148 --> 00:10:17,584
次に これがボタンだと
分かるでしょうか

135
00:10:17,784 --> 00:10:21,989
黒の背景に浮かぶ四角では
不十分でしょう

136
00:10:22,789 --> 00:10:25,859
iPhone画面など
コンテキストが加われば

137
00:10:26,627 --> 00:10:28,195
分かるかもしれません

138
00:10:28,295 --> 00:10:32,599
これまでに経験した
ボタンの形や表示方法も

139
00:10:34,034 --> 00:10:35,936
理解を助けるでしょう

140
00:10:36,870 --> 00:10:41,108
一貫しているなら
テキストの色でもいいでしょう

141
00:10:43,110 --> 00:10:47,514
我々のアプリケーションは
おなじみとは言えませんし

142
00:10:47,614 --> 00:10:50,651
起動は多くて１日１回でしょう

143
00:10:51,385 --> 00:10:56,924
だから新たに考えるのでなく
標準のiOSボタンに注目します

144
00:10:57,724 --> 00:10:59,760
画面で試してみます

145
00:11:04,398 --> 00:11:09,503
ボタンを使い始める前に
考えられるもう１つのことは

146
00:11:09,603 --> 00:11:12,439
ボタンの関係性を
どう認識するかです

147
00:11:13,173 --> 00:11:19,079
アプリケーションにおける
位置で変わるボタンの意味や

148
00:11:20,681 --> 00:11:24,151
他のコントロールとの
グループ化

149
00:11:25,586 --> 00:11:28,255
あるいは
他のオブジェクトとの距離です

150
00:11:30,157 --> 00:11:35,495
最後に示した例を
実際の画面で試してみます

151
00:11:35,963 --> 00:11:39,366
インターフェイスは
Keynoteで書きました

152
00:11:39,466 --> 00:11:44,505
朝の寝室で私は
この携帯を手にしています

153
00:11:44,605 --> 00:11:49,076
このボタンの機能を
知っているのでしょうか

154
00:11:52,913 --> 00:11:58,552
次にインタラクション中に
何が起きるかを考えます

155
00:11:58,952 --> 00:12:02,489
本物のボタンなら
押すでしょう

156
00:11:58,952 --> 00:12:02,489
本物のボタンなら
押すでしょう

157
00:12:07,728 --> 00:12:12,299
フィードバックという言葉が
意味するのは

158
00:12:12,633 --> 00:12:16,103
起きた結果について
伝えることです

159
00:12:16,703 --> 00:12:20,174
この場合 まだ
何もしていないので

160
00:12:20,374 --> 00:12:23,610
フィードフォワードという
言葉を使います

161
00:12:25,179 --> 00:12:30,250
フィードフォワードは
インタラクション中に

162
00:12:30,350 --> 00:12:34,421
起きることを理解するのに
役立ちます

163
00:12:36,156 --> 00:12:40,294
インタラクションを
滑らかにする要素です

164
00:12:40,427 --> 00:12:43,530
3D Touch ピンチ
スライドなどの動きの

165
00:12:43,630 --> 00:12:47,100
応答の意味を
示すことができます

166
00:12:49,870 --> 00:12:53,307
我々のボタンに当てはめる時

167
00:12:53,507 --> 00:12:57,044
今起きていることを考えます

168
00:12:57,144 --> 00:13:01,048
私の指は画面のボタンに
触れています

169
00:12:57,144 --> 00:13:01,048
私の指は画面のボタンに
触れています

170
00:13:02,349 --> 00:13:04,885
我々のトーストシステムでは

171
00:13:05,686 --> 00:13:09,490
トーストのリクエストを
している段階です

172
00:13:09,823 --> 00:13:13,694
トースターの準備が整い

173
00:13:13,794 --> 00:13:17,631
パンを焼くプロセスに進みます

174
00:13:18,999 --> 00:13:24,004
次の段階のヒントを与える方法も
考えるべきでしょう

175
00:13:28,242 --> 00:13:30,477
ボタンに触れ始めたことは

176
00:13:31,645 --> 00:13:34,148
どうしたら分かるでしょう

177
00:13:34,348 --> 00:13:35,649
非常に重要です

178
00:13:36,483 --> 00:13:40,287
ボタンのヒットエリアが
予想と違って

179
00:13:40,387 --> 00:13:44,558
実は触れてないのかも
しれません

180
00:13:45,559 --> 00:13:49,196
でもヒットエリアは
表示より大きいでしょう

181
00:13:49,296 --> 00:13:54,001
小さいレバーを使う場合
特に重要な点です

182
00:13:57,304 --> 00:14:00,140
ボタンに触れたと分かる方法は？

183
00:13:57,304 --> 00:14:00,140
ボタンに触れたと分かる方法は？

184
00:14:00,908 --> 00:14:06,180
ボタンを徐々に明るくしたり
拡大してもいいですが

185
00:14:06,947 --> 00:14:09,249
反応が遅くなるかもしれません

186
00:14:10,050 --> 00:14:13,253
押している間は
反応し続けるのなら

187
00:14:13,353 --> 00:14:16,290
3D Touchには適しています

188
00:14:16,690 --> 00:14:20,093
しかし画面に触れるのが
一瞬なら

189
00:14:20,194 --> 00:14:23,497
動きも速くする
必要があります

190
00:14:25,566 --> 00:14:31,271
だから聴覚 触覚 視覚の
変化で確認します

191
00:14:31,805 --> 00:14:34,575
この場合 即座に
ハイライトにすると

192
00:14:35,576 --> 00:14:37,044
速くなったと感じます

193
00:14:37,778 --> 00:14:41,715
ボタンが機能したことも
分かるでしょう

194
00:14:44,218 --> 00:14:49,156
ボタンとトースターの
フィードフォワードの連携で

195
00:14:49,323 --> 00:14:53,794
次のプロセスのヒントを
出すことができます

196
00:14:54,027 --> 00:14:59,700
ボタンに触れるとトーストが
現れ始めるようにします

197
00:15:00,400 --> 00:15:05,172
このボタンには大げさですが
やってみました

198
00:15:07,574 --> 00:15:12,846
気が変わったら何が起きるか
考える必要があります

199
00:15:13,247 --> 00:15:17,918
朝 まだトーストの
リクエストはしたくないのに

200
00:15:18,118 --> 00:15:20,087
ボタンに触れてしまったら？

201
00:15:20,921 --> 00:15:25,859
多くのボタンでは指を外側に
ドラッグすれば

202
00:15:25,959 --> 00:15:27,361
キャンセルできます

203
00:15:29,096 --> 00:15:33,167
インタラクションを
滑らかにするには

204
00:15:33,267 --> 00:15:37,571
猶予を与えることが
非常に重要です

205
00:15:37,771 --> 00:15:41,074
別の画面に移行する場合

206
00:15:41,174 --> 00:15:44,478
指を離すまで
どんな画面か分かりません

207
00:15:44,812 --> 00:15:47,147
ボタンも同じです

208
00:15:47,447 --> 00:15:50,417
指をボタンの上に戻し

209
00:15:50,517 --> 00:15:54,688
同じフィードフォワードで
ボタンの起動を表示します

210
00:15:57,791 --> 00:16:01,562
フィードフォワードの内容が
少し決まりました

211
00:15:57,791 --> 00:16:01,562
フィードフォワードの内容が
少し決まりました

212
00:16:01,662 --> 00:16:03,864
デバイスで試します

213
00:16:04,431 --> 00:16:07,734
ボタンはとてもシンプルですが

214
00:16:07,901 --> 00:16:10,938
スクロールやピンチ
ページングなど

215
00:16:11,238 --> 00:16:15,409
多くのインタラクションで
非常に重要です

216
00:16:19,680 --> 00:16:25,419
最後に指を離した後の
フィードバックを考えます

217
00:16:26,119 --> 00:16:28,956
本物のボタンなら元に戻ります

218
00:16:29,656 --> 00:16:35,229
我々のボタンの場合は
画面から指を離します

219
00:16:36,897 --> 00:16:42,803
皆さんになじみのある
古典的フィードバックです

220
00:16:43,637 --> 00:16:49,576
我々が検討できるのは
ボタンのフィードバックと

221
00:16:49,943 --> 00:16:53,247
アクションの
フィードバックです

222
00:16:53,680 --> 00:16:58,552
２つの連携で起きたことを
伝えることもできます

223
00:17:00,787 --> 00:17:04,290
我々のシステムにおいて
ここで注目すべきは

224
00:17:04,424 --> 00:17:07,560
トーストを作ることだけです

225
00:17:09,695 --> 00:17:12,398
ボタンから指を離すと―

226
00:17:13,767 --> 00:17:16,170
すぐに
ハイライトが消えますか？

227
00:17:16,537 --> 00:17:21,742
すばやいタップも分かるよう
わずかに遅れるでしょうか

228
00:17:22,576 --> 00:17:25,646
ボタンがダブルタップに
対応しているなら

229
00:17:25,746 --> 00:17:29,583
確認できるまで
少し待つ必要があります

230
00:17:32,019 --> 00:17:35,055
２種類の
フィードバックを使えば

231
00:17:36,523 --> 00:17:40,160
何が起きているか
伝えられます

232
00:17:40,861 --> 00:17:43,997
文字表示なら
分かりやすいですが

233
00:17:44,097 --> 00:17:47,034
読む作業が必要になります

234
00:17:48,502 --> 00:17:51,839
ボタンそのものの点滅も

235
00:17:52,439 --> 00:17:55,576
フィードバックに
なるかもしれません

236
00:17:57,277 --> 00:18:01,815
アクションを表すものでも
いいでしょう

237
00:17:57,277 --> 00:18:01,815
アクションを表すものでも
いいでしょう

238
00:18:02,249 --> 00:18:05,919
例えば
トースターのアイコンで

239
00:18:06,019 --> 00:18:08,522
作業開始を
示すことができます

240
00:18:10,691 --> 00:18:13,160
両方 示すこともできます

241
00:18:13,627 --> 00:18:17,197
文字もトースターも
同時に表示すれば

242
00:18:17,331 --> 00:18:22,369
動きがなくてもトースターの
状態が分かります

243
00:18:24,371 --> 00:18:28,809
ボタンの
インタラクションと同様に

244
00:18:29,610 --> 00:18:34,047
気が変わった場合も
考える必要があります

245
00:18:35,082 --> 00:18:39,753
リクエストを
キャンセルする場合に

246
00:18:39,853 --> 00:18:43,857
中止ボタンに
置き換えることもできます

247
00:18:43,957 --> 00:18:48,228
しかし前にここにあった
リクエストボタンと

248
00:18:49,029 --> 00:18:51,498
酷似していて
分かりにくいです

249
00:18:52,966 --> 00:18:55,369
新たに加えてもいいでしょう

250
00:18:56,503 --> 00:18:59,506
赤はやりすぎに思えます

251
00:18:59,673 --> 00:19:03,076
だから
リクエストボタンとは別に

252
00:18:59,673 --> 00:19:03,076
だから
リクエストボタンとは別に

253
00:19:04,478 --> 00:19:06,747
ボタンを作ってみます

254
00:19:07,381 --> 00:19:09,116
少し改善されました

255
00:19:10,250 --> 00:19:13,053
もう一度デバイスで試します

256
00:19:15,589 --> 00:19:19,560
ボタンそのものの
フィードバックと

257
00:19:19,660 --> 00:19:25,199
結果を示すトースターの
フィードバックの関係は？

258
00:19:28,268 --> 00:19:30,504
少し振り返ってみます

259
00:19:32,673 --> 00:19:37,311
フィードバックでは
アプリケーションの動きを

260
00:19:38,245 --> 00:19:43,183
文字によってユーザに
伝えることができます

261
00:19:43,851 --> 00:19:49,356
あるいは変化を体験して
もらうこともできます

262
00:19:50,991 --> 00:19:55,829
簡単なボタンでも
３つのフェーズすべてに

263
00:19:56,897 --> 00:19:58,232
フィードバックが使えます

264
00:19:59,933 --> 00:20:04,304
ここで意図したのは
過不足を見極めるために

265
00:19:59,933 --> 00:20:04,304
ここで意図したのは
過不足を見極めるために

266
00:20:04,404 --> 00:20:07,274
選択肢を試すことです

267
00:20:07,741 --> 00:20:11,745
動きが適切かは
試さなければ分かりません

268
00:20:16,049 --> 00:20:21,688
これで大きなシステムの
核の部分をデザインしました

269
00:20:22,823 --> 00:20:25,125
しかし これがうまくいけば

270
00:20:25,893 --> 00:20:29,296
残りのフローは
簡単に進められます

271
00:20:31,832 --> 00:20:35,836
我々のボタンのデザインは
完了しました

272
00:20:36,203 --> 00:20:40,674
次は音について考えます
ヒューゴの登場です

273
00:20:41,141 --> 00:20:46,847
(拍手)

274
00:20:46,947 --> 00:20:48,115
ありがとう ジュリアン

275
00:20:48,849 --> 00:20:49,716
こんにちは

276
00:20:53,020 --> 00:20:53,587
では―

277
00:20:54,454 --> 00:20:57,257
さっそく始めましょう

278
00:20:57,524 --> 00:21:00,194
ボタンにクリック音を
加えます

279
00:20:57,524 --> 00:21:00,194
ボタンにクリック音を
加えます

280
00:21:00,727 --> 00:21:01,295
(クリック音)

281
00:21:02,129 --> 00:21:05,365
どうでしょう　イマイチ？

282
00:21:06,600 --> 00:21:11,538
もう少し早く私が
登場すべきだったでしょうか

283
00:21:14,575 --> 00:21:19,513
サウンドデザイナーとして
少しお話しします

284
00:21:21,115 --> 00:21:26,453
テーマは着想の源泉や
サウンドのデザイン―

285
00:21:27,387 --> 00:21:30,791
デザインにおける
重要な構成要素です

286
00:21:32,659 --> 00:21:35,696
なぜ音について話すのでしょう

287
00:21:37,030 --> 00:21:43,003
携帯ユーザは しばしば
消音モードを使っています

288
00:21:43,537 --> 00:21:47,374
アプリケーションに音を
加える必要はあるでしょうか

289
00:21:48,942 --> 00:21:52,212
もちろん
人それぞれでしょうが

290
00:21:52,312 --> 00:21:56,750
ジョージ･ルーカスによれば
映画体験の50％は音です

291
00:21:57,251 --> 00:21:59,720
音楽やサウンドデザインです

292
00:22:00,454 --> 00:22:05,792
我々の周りにあふれる音は
生きていく上で有用です

293
00:22:07,427 --> 00:22:12,900
音はアプリケーション体験を
豊かにしてくれます

294
00:22:14,234 --> 00:22:20,207
アプリケーション体験と
ブランドを強く印象付けます

295
00:22:20,307 --> 00:22:23,944
強烈なインパクトがあります

296
00:22:25,812 --> 00:22:30,050
サウンドデザインの着想は
どこから得るのでしょう

297
00:22:30,417 --> 00:22:36,056
少し回り道をして
現実世界のボタンを考えます

298
00:22:37,024 --> 00:22:42,296
安い原料で作ったものは
こんな音がします

299
00:22:42,396 --> 00:22:43,063
(ボタンの音)

300
00:22:43,730 --> 00:22:47,668
高品質の原料のものは
こんな音がします

301
00:22:47,768 --> 00:22:48,669
(ボタンの音)

302
00:22:49,203 --> 00:22:53,507
実はiPhone Xの
音量ボタンの録音です

303
00:22:54,174 --> 00:22:55,943
もちろん増幅しています

304
00:22:58,846 --> 00:23:02,349
これらの音は
基本的に副産物です

305
00:22:58,846 --> 00:23:02,349
これらの音は
基本的に副産物です

306
00:23:02,449 --> 00:23:08,222
デザインされたのではなく
原料によって決まります

307
00:23:09,323 --> 00:23:12,459
しかしソフトウェアでは
とても自由です

308
00:23:13,026 --> 00:23:19,132
まったく音を加えないという
選択肢もあるでしょう

309
00:23:20,734 --> 00:23:22,669
しかしUIエレメントに

310
00:23:22,970 --> 00:23:27,374
音を加えるのが有効だと
判断した場合は？

311
00:23:27,808 --> 00:23:30,544
現実のアナログ音を
手掛かりに

312
00:23:31,245 --> 00:23:36,583
UIエレメントの音で
ユーザの理解を助けるのです

313
00:23:39,553 --> 00:23:43,357
アプリケーションに
音を加えるかどうかは

314
00:23:43,457 --> 00:23:45,926
カテゴリー次第と言えます

315
00:23:46,427 --> 00:23:50,497
ユーザは誰で何を求めるか
コンテキストは何か

316
00:23:51,432 --> 00:23:53,934
アプリケーションは
どこで使われるか

317
00:23:54,868 --> 00:24:00,040
我々のアプリケーションは
トースト好きが使います

318
00:23:54,868 --> 00:24:00,040
我々のアプリケーションは
トースト好きが使います

319
00:24:00,274 --> 00:24:02,676
これからは家のどこにいても

320
00:24:03,610 --> 00:24:06,447
パンを焼くことができます

321
00:24:07,848 --> 00:24:13,353
音は実際のトースターを
ヒントにすることができます

322
00:24:13,954 --> 00:24:19,226
だからこのアプリケーションには
音をつけるべきなのです

323
00:24:21,195 --> 00:24:25,299
トーストを作る過程を
参照しながら

324
00:24:26,133 --> 00:24:28,335
音を聞いてみましょう

325
00:24:30,604 --> 00:24:36,343
効果的か 採用すべきか
判断してください

326
00:24:36,443 --> 00:24:40,180
ジュリアンの
タイムラインを使って

327
00:24:41,181 --> 00:24:43,851
トースターの音を聞きます

328
00:24:45,085 --> 00:24:47,621
最初はレバーを下ろす音です

329
00:24:48,655 --> 00:24:49,590
(レバーを下ろす音)

330
00:24:49,923 --> 00:24:51,592
次に押す音

331
00:24:51,992 --> 00:24:52,693
(レバーを押す音)

332
00:24:53,560 --> 00:24:58,999
トースターが温まりコイルの
ブーンという音が聞こえます

333
00:24:59,333 --> 00:25:02,970
(ブーンという音)

334
00:24:59,333 --> 00:25:02,970
(ブーンという音)

335
00:25:03,070 --> 00:25:04,505
焼けるまで続きます

336
00:25:05,038 --> 00:25:05,672
(レバーが上がる音)

337
00:25:06,373 --> 00:25:08,642
トーストが飛び出します

338
00:25:09,843 --> 00:25:13,313
このプロセスを
１つずつ見ていきます

339
00:25:16,950 --> 00:25:19,786
最初にレバーを引きます

340
00:25:20,320 --> 00:25:23,957
スプリングの抵抗を感じます

341
00:25:24,057 --> 00:25:27,728
アプリケーションで
起きることと比べると

342
00:25:28,195 --> 00:25:33,600
音と触覚とアニメーションを
シンクロさせた感じです

343
00:25:33,901 --> 00:25:40,474
でも我々のアプリケーションでは
ここで音は必要ありません

344
00:25:41,508 --> 00:25:45,112
ボタンを押しトーストを
リクエストする時の音は

345
00:25:45,913 --> 00:25:49,950
ジュリアンに
デザインを頼まれました

346
00:25:50,050 --> 00:25:51,785
取り掛かりましょう

347
00:25:52,786 --> 00:25:55,222
録音することもできます

348
00:25:55,322 --> 00:25:59,827
電子楽器や
シンセサイザーを使って

349
00:25:59,927 --> 00:26:03,297
音を生成することもできます

350
00:25:59,927 --> 00:26:03,297
音を生成することもできます

351
00:26:03,697 --> 00:26:06,567
ソフトウェアで
調整してもいいでしょう

352
00:26:06,667 --> 00:26:09,303
今日は詳細まで触れませんが

353
00:26:09,870 --> 00:26:14,274
興味のある方は昨年の講演
“Designing Sound”をどうぞ

354
00:26:15,909 --> 00:26:19,179
最後に３つの選択肢が
残りました

355
00:26:20,047 --> 00:26:21,115
オプションＡ

356
00:26:21,548 --> 00:26:22,115
(オプションＡの音)

357
00:26:24,117 --> 00:26:25,185
オプションＢ

358
00:26:26,386 --> 00:26:27,020
(オプションＢの音)

359
00:26:27,721 --> 00:26:29,256
オプションＣ

360
00:26:30,357 --> 00:26:30,924
(オプションＣの音)

361
00:26:32,226 --> 00:26:35,929
オプションＡは
必要最低限の音です

362
00:26:36,897 --> 00:26:40,901
シンプルなUIに
とても合っています

363
00:26:41,902 --> 00:26:42,469
(オプションＡの音)

364
00:26:43,237 --> 00:26:46,607
でも物足りない感じがします

365
00:26:46,707 --> 00:26:52,713
クリック音を２回にすると
格段によくなりました

366
00:26:52,813 --> 00:26:55,916
押す時に１回と
指を離す時に１回です

367
00:26:57,518 --> 00:27:00,053
オプションＢはこうです

368
00:26:57,518 --> 00:27:00,053
オプションＢはこうです

369
00:27:01,021 --> 00:27:01,622
(オプションＢの音)

370
00:27:02,456 --> 00:27:05,526
よりリアルな音です

371
00:27:06,260 --> 00:27:10,464
本物の音ではありませんが
特徴が出ています

372
00:27:11,031 --> 00:27:15,802
しかし同じ理由で
耳障りで金属的な感じがします

373
00:27:18,272 --> 00:27:19,640
そしてオプションＣ

374
00:27:21,408 --> 00:27:22,075
(オプションＣの音)

375
00:27:22,309 --> 00:27:26,213
少し変わっていますが
特徴的です

376
00:27:26,513 --> 00:27:30,517
一度 聞けば
すぐ覚えられるでしょう

377
00:27:32,352 --> 00:27:36,990
音によって確認ができるのも
良い点です

378
00:27:37,090 --> 00:27:40,661
アクションの成功を
伝えています

379
00:27:40,761 --> 00:27:42,963
もう一度聞いてください

380
00:27:43,630 --> 00:27:44,198
(オプションＣの音)

381
00:27:46,200 --> 00:27:52,105
以上の理由から
私が勧めるのはＣの音です

382
00:27:53,474 --> 00:27:57,911
シンプルですが
親しみやすい感じがして

383
00:27:58,712 --> 00:28:03,884
他のアプリケーションにない
独自性もあります

384
00:27:58,712 --> 00:28:03,884
他のアプリケーションにない
独自性もあります

385
00:28:05,185 --> 00:28:07,120
少なくともクリック音は

386
00:28:07,988 --> 00:28:10,157
決まったようですね

387
00:28:11,258 --> 00:28:13,460
でも 焼く音はまだです

388
00:28:14,228 --> 00:28:19,199
サウンドを加える部分が
他にないか見てみましょう

389
00:28:19,533 --> 00:28:22,469
デザイナーとして
全体像を示したいのです

390
00:28:23,437 --> 00:28:25,706
ボタンを押すと

391
00:28:26,473 --> 00:28:30,010
トースターが温まり
ブーンという音が聞こえます

392
00:28:30,144 --> 00:28:32,880
(ブーンという音)

393
00:28:32,980 --> 00:28:36,483
この音は役に立つでしょうか

394
00:28:36,717 --> 00:28:40,254
トースターの今の状態は
分かります

395
00:28:40,621 --> 00:28:44,224
これに似た音を
使うこともできます

396
00:28:44,324 --> 00:28:47,795
このような継続的な音でも
いいですね

397
00:28:47,895 --> 00:28:52,032
(通知音)

398
00:28:52,132 --> 00:28:56,870
しかし数分の間に
この音を何度も流すのは

399
00:28:57,271 --> 00:28:59,673
望ましいとは思えません

400
00:29:00,641 --> 00:29:06,079
30秒ごとにフェードで
インアウトする音はどうでしょう

401
00:29:06,180 --> 00:29:08,982
(通知音)

402
00:29:09,082 --> 00:29:13,253
よさそうですが
本当に必要でしょうか

403
00:29:13,353 --> 00:29:17,524
我々が待っているのは
焼き上がりです

404
00:29:17,624 --> 00:29:22,095
ユーザに知らせたいのは
重要な瞬間です

405
00:29:22,629 --> 00:29:27,634
だから分かりやすく
シンプルな通知音がいいでしょう

406
00:29:27,734 --> 00:29:30,571
このように聞き逃さない音です

407
00:29:30,671 --> 00:29:31,839
(通知音)

408
00:29:32,840 --> 00:29:35,943
では すべてを
聞いてみましょう

409
00:29:36,710 --> 00:29:38,612
最初はボタンを押します

410
00:29:40,447 --> 00:29:41,014
(ボタンを押す音)

411
00:29:41,849 --> 00:29:44,785
次のステップである
アクション中は

412
00:29:44,885 --> 00:29:49,122
焼き上がりの通知音まで
音は不要です

413
00:29:49,223 --> 00:29:50,057
(通知音)

414
00:29:50,457 --> 00:29:53,527
これらの音を通して聞いて

415
00:29:54,261 --> 00:29:57,264
調和を確認することが重要です

416
00:29:57,664 --> 00:30:02,336
これがアプリケーションの声と
なるからです

417
00:29:57,664 --> 00:30:02,336
これがアプリケーションの声と
なるからです

418
00:30:05,839 --> 00:30:08,509
アプリケーションは順調です

419
00:30:09,176 --> 00:30:12,579
音をデザインする際に
用いる―

420
00:30:13,180 --> 00:30:16,316
欠かせない要素について
話します

421
00:30:16,417 --> 00:30:19,887
まず最初の要素は音色です

422
00:30:21,488 --> 00:30:24,091
これはすぐ分かりますね

423
00:30:24,191 --> 00:30:25,292
(ピアノの音)

424
00:30:26,527 --> 00:30:27,761
ピアノです

425
00:30:28,896 --> 00:30:31,231
なぜビブラホンでなく―

426
00:30:32,266 --> 00:30:35,169
ピアノと分かるのでしょう

427
00:30:35,569 --> 00:30:37,905
(ビブラホンの音)

428
00:30:39,039 --> 00:30:44,178
決め手となるのは
楽器が作られている素材や

429
00:30:44,812 --> 00:30:47,915
形状や演奏に使う道具です

430
00:30:48,348 --> 00:30:51,218
マレットやハンマー
弓や手

431
00:30:51,718 --> 00:30:56,223
音色は同じでも
聞こえ方は大きく違います

432
00:30:56,723 --> 00:31:00,894
我々の
アプリケーションにおいては

433
00:30:56,723 --> 00:31:00,894
我々の
アプリケーションにおいては

434
00:31:00,994 --> 00:31:04,398
親しみやすい音色を
選びました

435
00:31:06,767 --> 00:31:10,537
次の要素は
周波数あるいは音の高さです

436
00:31:11,138 --> 00:31:13,674
周波数の高い楽器もあれば

437
00:31:13,841 --> 00:31:14,608
(周波数の高い楽器音)

438
00:31:14,708 --> 00:31:17,277
低い楽器もあります

439
00:31:17,377 --> 00:31:18,345
(周波数の低い楽器音)

440
00:31:19,446 --> 00:31:21,982
音楽でない音の周波数も

441
00:31:22,683 --> 00:31:25,819
非常に高くも低くもできます

442
00:31:25,919 --> 00:31:29,123
周波数の高低差によって

443
00:31:29,323 --> 00:31:32,526
オブジェクトのサイズが
分かります

444
00:31:32,726 --> 00:31:38,499
実際にパンが飛び出す音を
例として挙げてみます

445
00:31:39,199 --> 00:31:43,170
高い周波数にすると
小さなトースターを表します

446
00:31:43,937 --> 00:31:44,771
(周波数の高い音)

447
00:31:46,140 --> 00:31:49,877
同じ音を低い周波数にすると

448
00:31:50,510 --> 00:31:53,113
巨大なトースターを表します

449
00:31:53,213 --> 00:31:54,148
(周波数の低い音)

450
00:31:54,248 --> 00:31:55,949
(笑い声)

451
00:31:57,684 --> 00:31:58,619
それでは―

452
00:32:00,087 --> 00:32:04,124
次は音の長さを
考えてみましょう

453
00:32:05,392 --> 00:32:07,261
非常に短くもできます

454
00:32:07,394 --> 00:32:08,161
(短い音)

455
00:32:08,495 --> 00:32:09,863
長くもできます

456
00:32:09,963 --> 00:32:13,000
(長い音)

457
00:32:13,100 --> 00:32:19,406
UIの音をデザインする際
連続で何度も押されるボタンの音は

458
00:32:20,007 --> 00:32:23,977
短く小さいことが重要です

459
00:32:25,245 --> 00:32:29,083
しかし たまに押すだけなら

460
00:32:29,183 --> 00:32:32,786
少し長く複雑でも
いいでしょう

461
00:32:33,787 --> 00:32:34,521
(通知音)

462
00:32:35,856 --> 00:32:40,094
このアプリケーションでも
毎回１度しか使いません

463
00:32:42,629 --> 00:32:46,667
次に考慮すべき要素は
音量です

464
00:32:48,101 --> 00:32:51,405
着信音や警告音の場合は

465
00:32:52,473 --> 00:32:55,142
聞き逃してはなりません

466
00:32:55,309 --> 00:32:58,912
電話を取り損ねたり
寝坊してはダメです

467
00:32:59,847 --> 00:33:03,684
(通知音)

468
00:32:59,847 --> 00:33:03,684
(通知音)

469
00:33:04,251 --> 00:33:06,820
オーディオエンジニアの
ミッチからです

470
00:33:07,755 --> 00:33:09,990
はっきり聞こえます

471
00:33:10,457 --> 00:33:15,329
しかしUIの音が
こんなに大きくては不快です

472
00:33:16,330 --> 00:33:20,567
インタラクションに
色を添える程度でいいのです

473
00:33:21,301 --> 00:33:22,936
ミッチに返信します

474
00:33:23,036 --> 00:33:30,878
(キーボードを打つ音)

475
00:33:30,978 --> 00:33:31,945
(メッセージの表示音)

476
00:33:32,045 --> 00:33:36,450
周りがうるさくて
キーボードの音を聞き逃しても

477
00:33:36,550 --> 00:33:38,185
大した支障はありません

478
00:33:38,852 --> 00:33:41,755
しかし着信音は違います

479
00:33:44,091 --> 00:33:47,828
音の構成要素４つを
おさらいしましょう

480
00:33:48,228 --> 00:33:53,200
音色 周波数 長さ 音量です

481
00:33:53,300 --> 00:33:58,205
アプリケーションの音を
デザインするなら

482
00:33:58,405 --> 00:34:00,374
覚えておいてください

483
00:33:58,405 --> 00:34:00,374
覚えておいてください

484
00:34:02,676 --> 00:34:05,279
以上が音に関する話です

485
00:34:06,046 --> 00:34:08,681
セッションを終える前に

486
00:34:09,716 --> 00:34:14,788
ジュリアンと私から
大事なことをお伝えします

487
00:34:17,157 --> 00:34:21,328
当たり前に見えても
詳細のデザインは重要です

488
00:34:21,962 --> 00:34:28,168
ボタンやクリック音のように
シンプルでもです

489
00:34:30,304 --> 00:34:34,641
着想は現実の世界からも
得られますが

490
00:34:35,509 --> 00:34:37,978
そっくりまねる必要は
ありません

491
00:34:39,179 --> 00:34:44,851
ソフトウェアのデザインの
自由度と柔軟性を生かし

492
00:34:45,252 --> 00:34:47,788
独自のものを作ってください

493
00:34:51,391 --> 00:34:55,963
目で楽しむ画面上の動きと
肌で感じる触覚

494
00:34:56,063 --> 00:34:58,932
そして耳にするサウンド

495
00:34:59,032 --> 00:35:03,203
これらが一体となって
経験となります

496
00:34:59,032 --> 00:35:03,203
これらが一体となって
経験となります

497
00:35:04,771 --> 00:35:08,442
最後に一番 強調したいのは

498
00:35:08,742 --> 00:35:11,178
試行錯誤から学ぶことです

499
00:35:12,246 --> 00:35:14,615
我々は今日
いろいろと試しました

500
00:35:15,249 --> 00:35:20,220
失敗もありましたが
成功もありました

501
00:35:20,587 --> 00:35:24,157
道を開く唯一の方法は
試してみることです

502
00:35:26,560 --> 00:35:29,096
刺激になったでしょうか

503
00:35:30,063 --> 00:35:34,802
当たり前だと思う細部に
時間をかけてください

504
00:35:36,203 --> 00:35:41,708
うまくいけば より良い
アプリケーションになります

505
00:35:43,277 --> 00:35:45,045
ありがとうございました

506
00:35:45,145 --> 00:35:51,118
(拍手)