
1
00:00:07,007 --> 00:00:14,781
(音楽)

2
00:00:21,154 --> 00:00:22,422
こんにちは

3
00:00:22,890 --> 00:00:28,462
(拍手）

4
00:00:28,562 --> 00:00:32,466
MapKit JSチームの
ヴィッキ･マーリーです

5
00:00:32,566 --> 00:00:36,136
こちらはセッション212
Introducing MapKit JS

6
00:00:37,237 --> 00:00:42,309
10年以上前に iPhoneが
登場して 物事が変わりました

7
00:00:42,409 --> 00:00:46,680
このアプリケーションの
エコシステムができたのです

8
00:00:47,247 --> 00:00:52,786
今ではアプリケーションが
生活必需品となりましたが

9
00:00:53,053 --> 00:00:56,557
以前はウェブサイトが主流でした

10
00:00:57,191 --> 00:01:02,296
iPhone以前に創業した会社は
ウェブサイトを作りました

11
00:00:57,191 --> 00:01:02,296
iPhone以前に創業した会社は
ウェブサイトを作りました

12
00:01:02,396 --> 00:01:04,498
現在も
アプリケーションを使いつつ

13
00:01:04,631 --> 00:01:09,870
ウェブサイトも併用して 
広範囲に発信する企業があります

14
00:01:10,404 --> 00:01:15,309
両方を扱うデベロッパも
多いことでしょう

15
00:01:15,409 --> 00:01:19,980
WWDCのウェブサイトが
いい例です

16
00:01:20,080 --> 00:01:22,816
ウェブサイトと
アプリケーションがあります

17
00:01:22,916 --> 00:01:26,420
おそらく 皆さんは
それを使って会場の場所を

18
00:01:26,520 --> 00:01:28,922
確認したのではないでしょうか

19
00:01:29,857 --> 00:01:34,061
Appleでは ありがたいことに
以前から―

20
00:01:34,161 --> 00:01:38,565
自社のウェブサイトで
Apple マップが使えます

21
00:01:38,732 --> 00:01:41,435
こちらは WWDCのページ

22
00:01:41,535 --> 00:01:45,172
他のイベントの場所が
示されています

23
00:01:46,173 --> 00:01:49,476
iCloudで
“iPhoneを探す”を使うと

24
00:01:49,576 --> 00:01:51,712
ウェブサイトに
Apple マップが表示されます

25
00:01:52,546 --> 00:01:55,148
小売店を検索する時も

26
00:01:55,249 --> 00:01:58,552
同じく ウェブサイトに
Apple マップが表示されます

27
00:01:59,486 --> 00:02:03,857
アプリケーションでは
おなじみのMapKitを

28
00:01:59,486 --> 00:02:03,857
アプリケーションでは
おなじみのMapKitを

29
00:02:04,157 --> 00:02:08,794
今日からはウェブサイト上でも
ご利用いただけます

30
00:02:10,030 --> 00:02:14,134
(拍手)

31
00:02:14,801 --> 00:02:19,506
WWDCでは今週
MapKit JSベータ版を公開します

32
00:02:19,606 --> 00:02:24,111
ライブラリは
私たちのサイト用と同じです

33
00:02:24,711 --> 00:02:30,384
すべてのウェブマップライブラリは
無料使用の段階があり

34
00:02:30,484 --> 00:02:33,187
一定回数のリクエストが可能です

35
00:02:33,287 --> 00:02:35,756
MapKit JSも同じです

36
00:02:36,190 --> 00:02:38,258
MapKit JSでは

37
00:02:38,358 --> 00:02:42,729
ユーザはマップを
25万回表示できます

38
00:02:43,697 --> 00:02:46,233
リクエストの上限は２万5000回

39
00:02:46,433 --> 00:02:48,902
含まれるのは
ジオコーディングや検索―

40
00:02:49,002 --> 00:02:51,572
検索オートコンプリートと経路です

41
00:02:51,772 --> 00:02:56,343
通常 この無料段階には
一定の期間が設けられ

42
00:02:56,443 --> 00:03:00,047
年単位 月単位 週単位など

43
00:02:56,443 --> 00:03:00,047
年単位 月単位 週単位など

44
00:03:00,147 --> 00:03:05,719
MapKit JSベータ版では
同じ上限が１日単位です

45
00:03:05,953 --> 00:03:11,258
(拍手)

46
00:03:11,592 --> 00:03:13,060
十分ですよね

47
00:03:13,393 --> 00:03:17,731
もし 特殊な事情で
それ以上必要な場合は

48
00:03:17,831 --> 00:03:20,133
オンラインフォームで
ご連絡ください

49
00:03:20,234 --> 00:03:23,837
記入して提出すると
我々に届きます

50
00:03:24,705 --> 00:03:27,674
MapKit JSにはキーが必要です

51
00:03:27,774 --> 00:03:30,644
デベロッパ用アカウントに
サインインして

52
00:03:30,744 --> 00:03:33,947
“証明書、ID、プロファイル”へ

53
00:03:34,114 --> 00:03:39,786
すると 他のサービス同様
キーを取得できます

54
00:03:40,821 --> 00:03:44,858
MapKit JSベータ版のキーは
数量限定なので

55
00:03:44,958 --> 00:03:48,128
なるべく早めに取得してください

56
00:03:50,697 --> 00:03:53,901
キーを取得して 使い始めたら

57
00:03:54,001 --> 00:03:56,403
きっと気に入ると思います

58
00:03:56,503 --> 00:03:59,806
魅力的な点がいろいろあるのです

59
00:04:00,207 --> 00:04:04,478
１つめは アプリケーションと
ウェブサイトで

60
00:04:04,578 --> 00:04:06,947
共通のマップを提供できること

61
00:04:07,181 --> 00:04:10,317
アプリケーション内で
ご利用かと思いますが

62
00:04:10,450 --> 00:04:13,353
今度はどこでも使えます

63
00:04:15,322 --> 00:04:17,190
The MapKit JS APIは 

64
00:04:17,291 --> 00:04:22,095
皆さんがネイティブで使っている
APIに基づいています

65
00:04:22,196 --> 00:04:25,232
ウェブサイトの
デベロッパにとっても

66
00:04:25,332 --> 00:04:27,534
なじみのあるものです

67
00:04:29,570 --> 00:04:32,206
ウェブサイト上での動作は

68
00:04:32,306 --> 00:04:36,677
従来のApple マップの動作と
変わりません

69
00:04:36,777 --> 00:04:40,814
32の言語に対応し
右から左へ書くことができ

70
00:04:40,914 --> 00:04:44,785
キーボードアクセスも
ボイスオーバーも可能

71
00:04:45,185 --> 00:04:49,590
Apple マップで人気の
美しい地図

72
00:04:49,690 --> 00:04:52,693
拡大や回転 スクロールなど

73
00:04:52,826 --> 00:04:57,631
ネイティブジェスチャも
サポートします

74
00:04:59,032 --> 00:05:02,436
適応レンダリングモードも
利用できます

75
00:04:59,032 --> 00:05:02,436
適応レンダリングモードも
利用できます

76
00:05:02,636 --> 00:05:07,407
これは マップのレンダリングが
数種類あるということです

77
00:05:07,741 --> 00:05:10,077
１つめは
Client-Side Rendering

78
00:05:10,177 --> 00:05:15,249
フルWebGLエンジンで
クライアント上に表示します

79
00:05:15,682 --> 00:05:20,220
ピンチズームや
２本指でのスクロールなどが

80
00:05:20,320 --> 00:05:24,291
スムーズに実行できるのは
このおかげです

81
00:05:24,424 --> 00:05:29,596
ネイティブ表示と同様
ズームレベルで文字が変わります

82
00:05:32,099 --> 00:05:36,637
この機能を使って
ラベル表示の管理もできます

83
00:05:36,737 --> 00:05:42,409
例えば ２本指で
マップを回転させる場合でも

84
00:05:42,543 --> 00:05:45,879
ラベルは水平のまま表示されます

85
00:05:47,347 --> 00:05:49,850
さらに CSRでは 

86
00:05:49,950 --> 00:05:54,521
iOSで見ていたのと同じ
マーカー型の注釈が出てきます

87
00:05:54,621 --> 00:05:58,158
この注釈はMy Marker

88
00:05:58,258 --> 00:06:01,094
この注釈を選ぶと
サブタイトルが出ますが

89
00:05:58,258 --> 00:06:01,094
この注釈を選ぶと
サブタイトルが出ますが

90
00:06:01,195 --> 00:06:04,398
下のラベルと重なることがあります

91
00:06:04,832 --> 00:06:08,702
その際 CSRと
ラベルの管理機能を使って

92
00:06:08,802 --> 00:06:11,438
ラベルを消しましょう

93
00:06:11,538 --> 00:06:16,577
そうすれば注釈の文字と
重なることはありません

94
00:06:18,078 --> 00:06:23,684
ズームインやアウトで
マップ上のラベルが変わっても

95
00:06:23,784 --> 00:06:27,654
ラベルは 注釈の文字に
重なりません

96
00:06:27,955 --> 00:06:33,760
動かせるタイプの注釈を
ユーザが移動させても

97
00:06:33,927 --> 00:06:38,632
注釈の文字が
ラベルと重なることはありません

98
00:06:39,566 --> 00:06:42,970
これがCSRの一例です

99
00:06:43,237 --> 00:06:47,908
しかし サイトやデバイスの状態は
個々に異なります

100
00:06:48,475 --> 00:06:51,612
例えば ユーザが
古いデバイスなど―

101
00:06:51,712 --> 00:06:56,283
低パフォーマンスの
環境にいるとしましょう

102
00:06:56,416 --> 00:07:00,053
その際は Labels-Only Client-Side
Renderingがあります

103
00:06:56,416 --> 00:07:00,053
その際は Labels-Only Client-Side
Renderingがあります

104
00:07:00,587 --> 00:07:05,659
これは基本となるマップの
グリッド画像タイルで

105
00:07:05,926 --> 00:07:10,531
WebGLラベルのレイヤを
重ねています

106
00:07:10,697 --> 00:07:14,201
これにより
回転やラベルの省略など―

107
00:07:14,301 --> 00:07:20,073
便利な機能を多くのユーザに
効率よく提供できます

108
00:07:21,875 --> 00:07:25,479
ユーザが
WebGLを使えない環境なら

109
00:07:25,579 --> 00:07:27,781
Server-Side Renderingを
使います

110
00:07:27,881 --> 00:07:31,351
こちらも
タイル状になっていますが

111
00:07:31,451 --> 00:07:34,688
ラベルは画像の一部になっています

112
00:07:36,123 --> 00:07:38,792
クライアントの環境に合わせて

113
00:07:38,892 --> 00:07:43,030
適切なモードを
提供できるのが魅力です

114
00:07:43,397 --> 00:07:46,733
モードは自動で切り替わるので

115
00:07:46,833 --> 00:07:52,472
どちらのモードがいいか
悩む必要もありません

116
00:07:52,739 --> 00:07:57,344
簡単なテストで
最適なモードを判定します

117
00:07:58,846 --> 00:08:04,818
今のところ CSRか
LO-CSRが大半を占めています

118
00:07:58,846 --> 00:08:04,818
今のところ CSRか
LO-CSRが大半を占めています

119
00:08:06,186 --> 00:08:08,522
簡単な紹介はここまで

120
00:08:08,622 --> 00:08:13,894
次はジュリアン･クイントが
APIの使用について解説します

121
00:08:14,928 --> 00:08:17,698
(拍手)

122
00:08:21,101 --> 00:08:22,436
ありがとう ヴィッキ

123
00:08:24,638 --> 00:08:28,709
ウェブサイトで使用する際の
技術的な説明をします

124
00:08:29,710 --> 00:08:31,545
まずは設定です

125
00:08:32,078 --> 00:08:36,450
独自データを表示する際の
注釈の動かし方や

126
00:08:37,384 --> 00:08:41,922
付加サービス提供の方法も
ご紹介します

127
00:08:43,789 --> 00:08:46,994
設定の手順は４段階です

128
00:08:47,661 --> 00:08:49,763
まず MapKit JSをインポート

129
00:08:50,097 --> 00:08:53,634
このscriptタグを
ページ内に加えます

130
00:08:53,867 --> 00:09:00,240
MapKit JS scriptのURLには
バージョン情報もあります

131
00:08:53,867 --> 00:09:00,240
MapKit JS scriptのURLには
バージョン情報もあります

132
00:09:00,974 --> 00:09:04,378
表示はセマンティック
バージョニングで

133
00:09:04,478 --> 00:09:10,384
大幅な変更があった場合は
１つめの数字が変わります

134
00:09:10,617 --> 00:09:13,954
２つめの数字はマイナーな変更

135
00:09:14,154 --> 00:09:17,558
バグの修正や 新機能の追加

136
00:09:17,658 --> 00:09:21,094
パフォーマンス向上の際に
変わります

137
00:09:21,195 --> 00:09:24,765
最後の数字は緊急パッチ用です

138
00:09:24,865 --> 00:09:30,337
マイナーとパッチについては
xを使うこともできます

139
00:09:30,537 --> 00:09:34,575
初回リリース時に
緊急バグ修正をしたので

140
00:09:34,675 --> 00:09:38,078
導入にあたっては
5.0.xを推奨します

141
00:09:40,113 --> 00:09:43,283
ウェブサイトに
マップを表示するには

142
00:09:43,383 --> 00:09:47,621
表示位置を
指定する必要があります

143
00:09:47,721 --> 00:09:49,189
そのために―

144
00:09:49,423 --> 00:09:55,295
HTML要素を使って
マップの表示場所を指定しましょう

145
00:09:55,395 --> 00:10:00,834
この場合は
div要素を使うといいでしょう

146
00:09:55,395 --> 00:10:00,834
この場合は
div要素を使うといいでしょう

147
00:10:01,235 --> 00:10:04,838
確認しやすいように
IDもつけています

148
00:10:04,938 --> 00:10:09,109
一番大事なのは
サイズを指定することです

149
00:10:09,243 --> 00:10:11,612
マップ自体にはサイズがないので

150
00:10:11,712 --> 00:10:15,849
表示場所の要素のサイズが
使われます

151
00:10:16,283 --> 00:10:21,188
ここにグレーで示したものが
div要素なら

152
00:10:21,288 --> 00:10:24,057
マップは
この要素内に表示されます

153
00:10:24,158 --> 00:10:27,995
要素に応じて
マップのサイズも変わります

154
00:10:29,463 --> 00:10:32,366
これで要素の設定は完了

155
00:10:32,533 --> 00:10:35,402
次はMapKit JSの初期化です

156
00:10:35,502 --> 00:10:39,673
MapKit JSの利用には
キーが必要です

157
00:10:39,806 --> 00:10:42,476
MapKitの初期化では 

158
00:10:43,410 --> 00:10:46,680
authorizationCallbackを
取得します

159
00:10:46,780 --> 00:10:52,319
すると MapKit JSの
サービスが始まり

160
00:10:52,419 --> 00:10:57,024
ウェブサイトにマップを
表示できるようになります

161
00:10:57,925 --> 00:11:00,627
そして
マップのオブジェクト作成には

162
00:10:57,925 --> 00:11:00,627
そして
マップのオブジェクト作成には

163
00:11:00,928 --> 00:11:03,931
MapKitの
マップコンストラクタを使います

164
00:11:04,031 --> 00:11:07,000
マップの表示位置を指定すると

165
00:11:07,100 --> 00:11:11,038
このように ウェブサイトで
マップが表示されます

166
00:11:12,406 --> 00:11:15,976
パラメータを指定していないので

167
00:11:16,076 --> 00:11:18,612
初期設定状態の表示です

168
00:11:18,712 --> 00:11:21,715
右下にコントロールも出ていますね

169
00:11:21,815 --> 00:11:25,719
回転のための方位磁石や
ズーム機能もあります

170
00:11:26,220 --> 00:11:29,122
画面上部で
マップの種類も選べます

171
00:11:30,824 --> 00:11:33,494
これは広大なエリアですが

172
00:11:33,594 --> 00:11:39,366
とても小さなマップを
表示したい時もありますよね

173
00:11:39,466 --> 00:11:42,503
省スペース化も可能です

174
00:11:42,636 --> 00:11:46,673
マップの縦横が
基準よりも小さい場合

175
00:11:46,773 --> 00:11:50,310
自動でこの機能が切り替わります

176
00:11:50,844 --> 00:11:54,014
タッチデバイスは
ウェブサイトと異なり

177
00:11:54,114 --> 00:11:58,151
ズームや方位磁石を
出す必要がありません

178
00:11:58,252 --> 00:12:01,188
ジェスチャを使って―

179
00:11:58,252 --> 00:12:01,188
ジェスチャを使って―

180
00:12:01,288 --> 00:12:05,025
回転やズームを行うからです

181
00:12:05,192 --> 00:12:11,331
なので スペース確保のために
最初から消しておきます

182
00:12:12,933 --> 00:12:15,936
ロゴと法律文は
常に表示されます

183
00:12:16,937 --> 00:12:22,476
コントロールの表示･非表示も
任意で設定できます

184
00:12:22,576 --> 00:12:26,613
方位磁石や拡大縮小は
適応制御なので

185
00:12:26,747 --> 00:12:31,251
プラットフォームにより
少し動きが異なります

186
00:12:31,351 --> 00:12:35,689
iOSの初期設定では
方位磁石は表示されませんが

187
00:12:35,789 --> 00:12:40,227
マップを回転させると
北を示す表示が出ます

188
00:12:40,427 --> 00:12:44,665
マップ上に
距離を示す目盛りがありますが

189
00:12:44,765 --> 00:12:48,735
これは 拡大縮小時のみ
表示されます

190
00:12:48,969 --> 00:12:53,874
そして 拡大縮小や回転をすると
右下に―

191
00:12:53,974 --> 00:12:57,377
方位磁石が
出たり消えたりします

192
00:12:57,477 --> 00:13:00,380
距離の目盛りは左上に出ます

193
00:12:57,477 --> 00:13:00,380
距離の目盛りは左上に出ます

194
00:13:00,547 --> 00:13:04,685
“常に表示” もしくは
“常に非表示” にもできます

195
00:13:06,119 --> 00:13:08,388
他のコントロールは

196
00:13:08,489 --> 00:13:14,394
ブールプロパティで
表示･非表示を設定します

197
00:13:16,029 --> 00:13:20,701
こちらは 初期設定では
非表示のもので

198
00:13:20,801 --> 00:13:26,273
例えば ユーザ位置コントロールは
右下に表示されます

199
00:13:26,473 --> 00:13:28,675
今 選択したので

200
00:13:28,775 --> 00:13:32,613
現在位置がマップの中央に
表示されています

201
00:13:33,180 --> 00:13:37,818
距離目盛りは
常に表示するよう設定しました

202
00:13:38,552 --> 00:13:41,088
他にもいろいろ設定が可能です

203
00:13:41,989 --> 00:13:47,728
ウェブサイトの色みに合わせて
マップの色を変えたり

204
00:13:47,828 --> 00:13:51,231
コントロールの色を
変えたりできます

205
00:13:51,331 --> 00:13:55,169
こちらのマップでは
ユーザコントロールを

206
00:13:55,269 --> 00:14:00,307
赤に設定したので
赤で強調されていますよね

207
00:13:55,269 --> 00:14:00,307
赤に設定したので
赤で強調されていますよね

208
00:14:00,407 --> 00:14:02,776
CSSなら どの色でも使えます

209
00:14:04,578 --> 00:14:08,682
言語設定は
ブラウザのものが使われるので

210
00:14:08,782 --> 00:14:14,788
ユーザにとっては
希望どおりの言語が出るはずです

211
00:14:14,888 --> 00:14:17,958
初期化コードで
言語を設定できますし

212
00:14:18,058 --> 00:14:20,994
プロパティでも
言語を変えられます

213
00:14:21,094 --> 00:14:25,732
今は
マップとコントロールの両方を

214
00:14:25,833 --> 00:14:27,868
日本語に設定しました

215
00:14:28,135 --> 00:14:32,339
方位磁石の北の表示が
置き換えられ―

216
00:14:32,506 --> 00:14:35,509
単位もメートル法になっています

217
00:14:35,609 --> 00:14:40,447
日本では 昔から
メートル法が主流なのです

218
00:14:42,082 --> 00:14:47,888
右から左に書くヘブライ語や
アラビア語などの場合

219
00:14:47,988 --> 00:14:52,192
コントロールも
それに合うように配置されます

220
00:14:53,727 --> 00:14:55,562
コントロールを使うと

221
00:14:55,662 --> 00:15:00,400
マップを操作できますが
直接動かすこともできます

222
00:14:55,662 --> 00:15:00,400
マップを操作できますが
直接動かすこともできます

223
00:15:00,501 --> 00:15:04,905
タッチデバイスでは
ジェスチャが有効で

224
00:15:05,005 --> 00:15:07,908
トラックパッドでも一部有効です

225
00:15:08,008 --> 00:15:11,044
マウスでマップの向きを変えたり

226
00:15:11,144 --> 00:15:14,381
ダブルタップで
拡大したりもできます

227
00:15:14,481 --> 00:15:17,951
拡大やスクロール
回転のプロパティを

228
00:15:18,051 --> 00:15:22,956
falseにすれば
これら直接の操作を無効にできます

229
00:15:23,056 --> 00:15:27,528
例えば 先ほどの
小さいマップの場合です

230
00:15:27,694 --> 00:15:31,398
ユーザが誤って
表示エリアを変えないよう

231
00:15:31,498 --> 00:15:33,600
固定したいですよね

232
00:15:33,700 --> 00:15:37,871
各設定をfalseにすれば
マップは動きません

233
00:15:40,140 --> 00:15:43,744
マップの設定方法が分かったので

234
00:15:43,844 --> 00:15:46,713
面白いコンテンツを出しましょう

235
00:15:47,581 --> 00:15:52,286
世界中を巡りながら
特定のエリアを出せますが

236
00:15:52,386 --> 00:15:58,292
表示中の地域に
注釈をつけることもできます

237
00:16:00,594 --> 00:16:03,030
地域の中心を設定する方法

238
00:16:03,130 --> 00:16:05,766
マップに注釈をつける方法

239
00:16:05,866 --> 00:16:08,969
オーバーレイの使い方を紹介します

240
00:16:09,236 --> 00:16:11,905
まずは中心と地域の設定です

241
00:16:13,207 --> 00:16:14,942
これは初期設定の状態

242
00:16:15,042 --> 00:16:18,011
最も縮小した状態で―

243
00:16:18,111 --> 00:16:22,382
初期設定の地域を
表示しています

244
00:16:22,516 --> 00:16:26,119
マップの中心は
緯度 経度共に０度です

245
00:16:26,653 --> 00:16:29,723
特定の地域を表示しましょう

246
00:16:29,823 --> 00:16:34,661
今回はブラジルの
リオデジャネイロです

247
00:16:35,095 --> 00:16:39,299
マップの中心を
リオデジャネイロに設定

248
00:16:39,399 --> 00:16:45,272
右のマップを見ると 中心が
リオデジャネイロになっています

249
00:16:45,772 --> 00:16:48,542
しかし 縮尺はそのままなので

250
00:16:48,642 --> 00:16:53,180
まだ 南アメリカ全体が
表示されています

251
00:16:53,280 --> 00:16:55,382
少し拡大しましょう

252
00:16:56,250 --> 00:16:59,186
まずは地域を設定します

253
00:16:59,286 --> 00:17:05,224
点で示されたマップの中心と
緯度と経度の幅で

254
00:16:59,286 --> 00:17:05,224
点で示されたマップの中心と
緯度と経度の幅で

255
00:17:05,492 --> 00:17:07,728
表示する地域を指定

256
00:17:07,828 --> 00:17:12,232
すると このように
点線で四角く囲まれます

257
00:17:12,833 --> 00:17:17,471
しかしマップに示された地域は
指定した範囲より

258
00:17:17,570 --> 00:17:20,240
広いかもしれません

259
00:17:20,339 --> 00:17:22,709
これは指定したエリア全体を

260
00:17:22,809 --> 00:17:25,945
設定した範囲に収めるためです

261
00:17:26,046 --> 00:17:30,517
この場合は
北と南に余白を作って

262
00:17:30,617 --> 00:17:34,588
指定した地域すべてが
収まるようにします

263
00:17:34,688 --> 00:17:39,960
MapKit JSのフレームワークを
設定する場合

264
00:17:40,060 --> 00:17:45,432
中心はmapkit.Coordinateで
緯度と経度

265
00:17:45,732 --> 00:17:49,102
CordinateRegionで
地域を設定

266
00:17:49,203 --> 00:17:51,939
２つのメンバーが含まれます

267
00:17:52,039 --> 00:17:54,141
中心もCoordinateで

268
00:17:54,241 --> 00:17:58,612
CoordinateSpanは
緯度と経度の差分です

269
00:18:01,682 --> 00:18:06,220
マップの範囲の座標は
どう確認すればいいでしょう

270
00:18:06,320 --> 00:18:12,025
各地域の緯度と経度の
調べ方は いろいろあります

271
00:18:12,125 --> 00:18:16,096
例えばウィキペディアで探せます

272
00:18:16,196 --> 00:18:21,735
地理情報のデータベースで
確認することもできるでしょう

273
00:18:21,869 --> 00:18:25,305
MapKitのサービスの―

274
00:18:25,405 --> 00:18:30,944
ジオコーディングや検索を
使うこともできます

275
00:18:31,044 --> 00:18:34,014
ジオコーディングで検索すると

276
00:18:34,314 --> 00:18:36,817
その地域の座標が得られます

277
00:18:36,917 --> 00:18:41,955
先ほどは MapKit JSの
ジオコーディングを使って

278
00:18:42,055 --> 00:18:46,126
リオデジャネイロの
座標を探して設定しました

279
00:18:46,527 --> 00:18:50,130
また 場所を
検索することもできます

280
00:18:50,230 --> 00:18:54,001
場所の座標を示すだけでなく

281
00:18:54,101 --> 00:18:59,439
すべての結果を含めるよう
周辺地域を示すこともできます

282
00:19:01,108 --> 00:19:06,680
簡単に地域を設定するには
showItemsも使えます

283
00:19:06,980 --> 00:19:10,517
では 注釈とオーバーレイを
追加しましょう

284
00:19:10,617 --> 00:19:15,489
showItemsを呼び出せば
当該地域のアイテムを

285
00:19:15,589 --> 00:19:17,958
ユーザに提示できます

286
00:19:19,626 --> 00:19:24,665
表示地域の変更には
アニメーションを使うことも

287
00:19:24,765 --> 00:19:27,301
瞬時の切り替えも可能です

288
00:19:29,102 --> 00:19:32,606
表示地域やマップの中心の変更は

289
00:19:32,706 --> 00:19:35,742
コードから行うことができます

290
00:19:35,843 --> 00:19:39,079
また ユーザとの
インタラクションに

291
00:19:39,179 --> 00:19:42,916
反応する形で行うこともできます

292
00:19:43,016 --> 00:19:44,751
マップのオブジェクトで

293
00:19:45,619 --> 00:19:49,022
ユーザの操作に対応できます

294
00:19:49,122 --> 00:19:53,961
例えば 地域の移動の
開始から終了といった動きです

295
00:19:54,061 --> 00:19:58,198
拡大縮小や回転といった操作にも
対応できます

296
00:19:58,365 --> 00:20:01,268
DOMイベントのモデルに従うので 

297
00:19:58,365 --> 00:20:01,268
DOMイベントのモデルに従うので 

298
00:20:01,368 --> 00:20:06,006
addEventListenerや
removeEventListenerが使えます

299
00:20:06,106 --> 00:20:10,878
また イベントオブジェクトと
パラメータも使えます

300
00:20:10,978 --> 00:20:14,481
例えば ユーザが
地域を変更するたび

301
00:20:14,615 --> 00:20:18,218
マップを再表示させたい場合は

302
00:20:18,318 --> 00:20:20,954
地域変更とイベントを待てば

303
00:20:21,054 --> 00:20:24,558
別の場所が指定されたことが
分かります

304
00:20:24,658 --> 00:20:28,128
地図のその地域を使って

305
00:20:28,228 --> 00:20:32,299
どんな情報を見せるか計算します

306
00:20:34,635 --> 00:20:39,506
マップの設定が分かったので
独自の情報を追加しましょう

307
00:20:39,606 --> 00:20:41,542
使うのは注釈とオーバーレイ

308
00:20:41,642 --> 00:20:45,412
MapKit JSでは
３種類の注釈が使えます

309
00:20:45,512 --> 00:20:49,516
１つは先ほど紹介した
マーカー注釈

310
00:20:50,284 --> 00:20:56,023
マーカー以外では
画像を使ったカスタマイズが可能で

311
00:20:56,123 --> 00:21:01,395
DOM要素を使えば 見た目を
完全にカスタマイズできます

312
00:20:56,123 --> 00:21:01,395
DOM要素を使えば 見た目を
完全にカスタマイズできます

313
00:21:02,696 --> 00:21:06,867
マーカー注釈は
MapKit JSの最も便利な注釈で

314
00:21:06,967 --> 00:21:12,172
豊富なインタラクションが
組み込まれています

315
00:21:12,706 --> 00:21:14,007
スタイルも豊富で

316
00:21:14,107 --> 00:21:18,345
iOSで見ているマーカー注釈に
似ています

317
00:21:18,946 --> 00:21:22,082
選択と非選択の
アニメーションがあり

318
00:21:22,316 --> 00:21:26,787
注釈に重なる文字は
自動的に消えます

319
00:21:26,887 --> 00:21:28,789
注釈を選択すると

320
00:21:28,889 --> 00:21:34,428
サブタイトルのために
駅の出口のラベルが消えましたね

321
00:21:36,463 --> 00:21:38,665
マーカー注釈は

322
00:21:39,066 --> 00:21:43,170
選択された
レンダリングモードに従い自動的に

323
00:21:43,270 --> 00:21:46,573
形が変わるようになっています

324
00:21:46,840 --> 00:21:51,845
先ほど ご紹介したように
CSRかLO-CSRなら

325
00:21:51,945 --> 00:21:57,251
ラベルを隠し 注釈のタイトルと
サブタイトルを表示できます

326
00:21:57,384 --> 00:22:00,053
その様子が左側の画像です

327
00:21:57,384 --> 00:22:00,053
その様子が左側の画像です

328
00:22:00,621 --> 00:22:02,789
Server-Side Renderingの場合

329
00:22:02,890 --> 00:22:05,893
ラベルは固定なので隠せません

330
00:22:05,993 --> 00:22:09,396
右のマップを見ると
ラベルが多いですよね

331
00:22:09,496 --> 00:22:11,598
何も隠していないからです

332
00:22:11,698 --> 00:22:15,636
ちゃんと見えるように
注釈を出したいので

333
00:22:15,736 --> 00:22:19,540
吹き出しのみで
ラベルは出していません

334
00:22:19,640 --> 00:22:23,377
注釈の吹き出しを選択すると

335
00:22:23,477 --> 00:22:27,548
タイトルとサブタイトルが
見られます

336
00:22:27,648 --> 00:22:33,687
カスタム注釈でも吹き出しで
タイトルとサブタイトルを出します

337
00:22:35,255 --> 00:22:39,226
マーカー注釈にも
いろいろな種類があります

338
00:22:39,493 --> 00:22:41,695
こちらは初期設定のもの

339
00:22:41,795 --> 00:22:46,800
座標とタイトルなどのプロパティで
注釈を作れます

340
00:22:46,900 --> 00:22:50,270
初期設定のレンダリングでは

341
00:22:50,437 --> 00:22:55,876
吹き出しの中にピンがあって
色は赤になっています

342
00:22:56,877 --> 00:23:00,114
CSSの色コードが使えるので

343
00:22:56,877 --> 00:23:00,114
CSSの色コードが使えるので

344
00:23:00,214 --> 00:23:03,584
吹き出しを緑にしてみました

345
00:23:03,684 --> 00:23:05,886
記号の色も変えられます

346
00:23:05,986 --> 00:23:07,921
記号は１色のみなので

347
00:23:08,021 --> 00:23:12,659
ここでは初期設定の白から
黄色に変更しました

348
00:23:13,794 --> 00:23:18,332
この記号をピンから
任意のラスタ画像に

349
00:23:18,432 --> 00:23:21,268
変更することも可能です

350
00:23:21,368 --> 00:23:23,403
今回は この画像にしました

351
00:23:23,504 --> 00:23:27,908
ピクセル比の違う複数の画像を
用意できます

352
00:23:29,343 --> 00:23:32,679
選択されると注釈が大きくなるので

353
00:23:32,779 --> 00:23:35,449
記号のスペースが増えます

354
00:23:35,549 --> 00:23:38,886
例えば 注釈が選択された場合に

355
00:23:38,986 --> 00:23:41,922
別の画像を出すことができます

356
00:23:43,223 --> 00:23:46,960
画像の代わりに
文字を出すこともできます

357
00:23:47,194 --> 00:23:52,966
文字を出す場合 ３文字以内の
短いものにするのが無難です

358
00:23:53,066 --> 00:23:55,669
今回は“Ｍ”という文字です

359
00:23:55,802 --> 00:24:00,941
文字と画像が指定された場合
文字が表示されます

360
00:23:55,802 --> 00:24:00,941
文字と画像が指定された場合
文字が表示されます

361
00:24:01,341 --> 00:24:04,478
マーカー注釈の出し方が
分かったので

362
00:24:04,578 --> 00:24:07,481
マップ上に
注釈をたくさん出せますね

363
00:24:07,648 --> 00:24:11,518
こちらはパリでの
カフェとバーの検索結果

364
00:24:11,618 --> 00:24:15,189
見分けがつくように
スタイルを変えました

365
00:24:15,455 --> 00:24:21,228
しかし このエリアでは
注釈が多すぎるのが問題です

366
00:24:21,895 --> 00:24:26,099
その問題を解消する方法が
２つあります

367
00:24:26,266 --> 00:24:30,237
１つは注釈の
表示優先順位の設定です

368
00:24:30,637 --> 00:24:33,173
２つの注釈が かち合った場合

369
00:24:33,273 --> 00:24:36,610
優先順位の高いプロパティを
数字で判断し

370
00:24:37,077 --> 00:24:41,748
順位の低い注釈を
引っ込めることができます

371
00:24:42,749 --> 00:24:45,919
かなりの数の注釈が
消えましたね

372
00:24:46,019 --> 00:24:48,789
この状態からマップを拡大すると

373
00:24:48,889 --> 00:24:53,160
消えていた注釈が
再び表示されます

374
00:24:53,327 --> 00:24:55,462
優先順位が同じ場合

375
00:24:55,562 --> 00:25:01,869
画面の下側に近い注釈が
優先的に表示されます

376
00:24:55,562 --> 00:25:01,869
画面の下側に近い注釈が
優先的に表示されます

377
00:25:03,036 --> 00:25:07,441
優先順位以外に
クラスタリングも使えます

378
00:25:07,641 --> 00:25:11,278
例えば マーカー注釈の
プロパティで

379
00:25:11,378 --> 00:25:15,649
クラスタがどちらも
単なる文字列だとします

380
00:25:15,749 --> 00:25:19,820
２つの注釈がかち合って
クラスタが同じ場合

381
00:25:19,920 --> 00:25:23,290
両方を示す注釈に
入れ替えられます

382
00:25:23,390 --> 00:25:26,994
３つ以上がかち合った場合も
同じです

383
00:25:27,161 --> 00:25:31,865
つまり 近くに他の注釈がなければ

384
00:25:31,965 --> 00:25:34,201
単独で表示されます

385
00:25:34,301 --> 00:25:36,670
しかし 密集した場所では

386
00:25:36,870 --> 00:25:40,240
複数の注釈が１つにまとめられます

387
00:25:40,440 --> 00:25:43,877
クラスタが作られたら
マーカー注釈で

388
00:25:44,011 --> 00:25:47,481
クラスタ内の注釈の数を示します

389
00:25:47,581 --> 00:25:52,853
また 新しいスタイルや種類の
注釈を指定することで

390
00:25:52,953 --> 00:25:57,257
クラスタの見栄えも
変更することができます

391
00:25:57,624 --> 00:26:01,995
注釈が使われている例を
お見せしましょう

392
00:25:57,624 --> 00:26:01,995
注釈が使われている例を
お見せしましょう

393
00:26:06,433 --> 00:26:07,801
このデモでは…

394
00:26:10,037 --> 00:26:11,271
よし出た

395
00:26:12,039 --> 00:26:13,807
このデモでは マップを使い

396
00:26:14,274 --> 00:26:16,677
データをお見せします

397
00:26:17,277 --> 00:26:20,581
ビッグフットの目撃情報です

398
00:26:20,681 --> 00:26:26,320
セッション終了後か
イベント後の週末にでも

399
00:26:26,420 --> 00:26:31,325
北カリフォルニアの森で
ビッグフットを探せますよ

400
00:26:33,760 --> 00:26:35,295
こちらのマップでは

401
00:26:35,996 --> 00:26:41,802
前のスライドで紹介した形で
マップを表示しています

402
00:26:43,070 --> 00:26:48,308
ここに集めたものは
ビッグフットの目撃情報です

403
00:26:48,408 --> 00:26:54,147
目撃された場所や年などの
さまざまな情報を集め

404
00:26:54,248 --> 00:26:57,117
リストにしたのです

405
00:26:57,284 --> 00:27:02,256
この情報をマーカー注釈を使って
マップに表示しましょう

406
00:26:57,284 --> 00:27:02,256
この情報をマーカー注釈を使って
マップに表示しましょう

407
00:27:02,356 --> 00:27:06,126
まず 場所や年などの目撃情報を

408
00:27:06,226 --> 00:27:10,797
マーカー注釈に
置き換える仕組みを作ります

409
00:27:12,032 --> 00:27:13,901
目撃情報を得たら

410
00:27:14,001 --> 00:27:18,005
その座標を注釈で
使えるようにします

411
00:27:18,405 --> 00:27:21,942
場所以外に
年などの情報もあるので 

412
00:27:22,042 --> 00:27:24,344
それはタイトルに表示します

413
00:27:24,478 --> 00:27:30,517
ビッグフット調査機関による
データベースを利用しています

414
00:27:30,617 --> 00:27:34,855
さらに詳細な目撃情報を
知りたい人のために

415
00:27:34,955 --> 00:27:39,726
データベースを見るための
IDも表示します

416
00:27:39,927 --> 00:27:45,566
これで 座標やその他の情報の
注釈を作る準備ができました

417
00:27:46,200 --> 00:27:51,472
目撃情報をマーカー注釈で
出す方法が分かったので

418
00:27:52,172 --> 00:27:54,975
用意した情報を表示しましょう

419
00:27:56,243 --> 00:27:58,612
この目撃情報のリストから

420
00:27:58,745 --> 00:28:01,381
それぞれの注釈を作ります

421
00:27:58,745 --> 00:28:01,381
それぞれの注釈を作ります

422
00:28:02,583 --> 00:28:03,684
そして―

423
00:28:04,384 --> 00:28:07,621
情報がマップに表示されるか
確認します

424
00:28:07,721 --> 00:28:11,225
注釈の表示も確認
さらに showItemsを使います

425
00:28:11,325 --> 00:28:17,464
表示だけでなく アイテムの
追加もできるので便利です

426
00:28:18,432 --> 00:28:20,100
ウェブサイトなので

427
00:28:20,200 --> 00:28:25,372
当該地域での目撃回数などの
補足情報も追加できます

428
00:28:26,507 --> 00:28:29,543
ここで しっかり保存して

429
00:28:30,510 --> 00:28:32,112
再読み込みしましょう

430
00:28:33,213 --> 00:28:36,417
60件の目撃情報が表示されました

431
00:28:36,583 --> 00:28:41,021
すべて目撃情報ですが
問題があります

432
00:28:41,121 --> 00:28:47,060
公園付近での目撃情報が多すぎて
注釈が重なっています

433
00:28:47,161 --> 00:28:50,497
拡大しても
ゴチャゴチャしているので

434
00:28:50,597 --> 00:28:54,334
displayPriorityで
スッキリさせましょう

435
00:28:54,434 --> 00:28:56,770
注釈のプロパティです

436
00:28:58,005 --> 00:29:02,843
優先順位を決めるために
とても重要なのは―

437
00:28:58,005 --> 00:29:02,843
優先順位を決めるために
とても重要なのは―

438
00:29:02,943 --> 00:29:05,546
目撃情報のプロパティです

439
00:29:05,746 --> 00:29:09,917
実際にビッグフットを目撃したのか

440
00:29:10,017 --> 00:29:13,887
音や足跡といった情報なのか

441
00:29:13,987 --> 00:29:18,058
このフラグで
優先順位を設定します

442
00:29:18,225 --> 00:29:22,095
displayPriorityは
任意の数字なので

443
00:29:22,196 --> 00:29:25,065
事前に定義した値を入れます

444
00:29:25,165 --> 00:29:28,969
例えば 常に表示するものもあれば

445
00:29:29,069 --> 00:29:31,638
優先順位の低いものもあります

446
00:29:31,738 --> 00:29:35,142
確かな目撃情報なら
優先順位は高く

447
00:29:35,242 --> 00:29:37,978
そうでない場合は
低く設定します

448
00:29:38,612 --> 00:29:42,750
ユーザにも
優先順位が分かるように

449
00:29:42,850 --> 00:29:47,554
最後に 注釈を色分けする
エンコードをします

450
00:29:47,688 --> 00:29:52,860
茶色なら確実な情報
緑なら不確かな情報です

451
00:29:53,160 --> 00:29:55,362
どうなったか見てみましょう

452
00:29:56,697 --> 00:29:59,399
重なった注釈が整理されたので

453
00:29:59,500 --> 00:30:02,436
マップがとてもスッキリしました

454
00:29:59,500 --> 00:30:02,436
マップがとてもスッキリしました

455
00:30:02,603 --> 00:30:06,340
茶色の注釈は 確実な目撃情報です

456
00:30:06,440 --> 00:30:10,944
まずは 茶色の地点から
訪れるべきでしょう

457
00:30:11,512 --> 00:30:17,551
マップを拡大していくと
隠れていた注釈が現れます

458
00:30:17,651 --> 00:30:20,988
つまり ユーザは
マップ上を巡りながら

459
00:30:21,088 --> 00:30:24,391
可能性のある場所を
確認できるのです

460
00:30:25,225 --> 00:30:28,228
このデモの最後に もう１つ―

461
00:30:28,929 --> 00:30:31,131
情報を追加しましょう

462
00:30:31,231 --> 00:30:32,766
注釈の記号を―

463
00:30:33,233 --> 00:30:38,205
ビッグフットのアイコンに
変更します

464
00:30:38,305 --> 00:30:40,073
このPNG画像を―

465
00:30:41,808 --> 00:30:44,144
確かな情報の注釈に使います

466
00:30:44,311 --> 00:30:48,081
不確かな目撃情報の注釈には

467
00:30:48,415 --> 00:30:53,554
分かりやすく
クエスチョンマークを使いましょう

468
00:30:55,055 --> 00:30:58,025
すると こうなります

469
00:30:58,559 --> 00:31:02,095
不確かな情報には
クエスチョンマーク

470
00:30:58,559 --> 00:31:02,095
不確かな情報には
クエスチョンマーク

471
00:31:02,229 --> 00:31:06,567
確かな情報には
ビッグフットのアイコンです

472
00:31:08,902 --> 00:31:11,438
１つめのデモはここまでです

473
00:31:11,839 --> 00:31:12,606
(拍手)

474
00:31:12,706 --> 00:31:13,407
どうも

475
00:31:13,507 --> 00:31:15,976
(拍手)

476
00:31:16,076 --> 00:31:18,779
今回のデモでは

477
00:31:18,879 --> 00:31:23,050
JavaScriptのオブジェクトから
注釈を作成

478
00:31:23,417 --> 00:31:27,721
優先順位をつけて
注釈を整理しました

479
00:31:28,155 --> 00:31:31,391
また 注釈に画像や文字を使い

480
00:31:31,492 --> 00:31:35,729
どんな情報かを
マップ上に示しました

481
00:31:37,264 --> 00:31:40,400
マーカー注釈は便利ですが

482
00:31:40,500 --> 00:31:43,837
マップ上で
使いにくい場合もあります

483
00:31:43,937 --> 00:31:48,509
例えば 複数の色の
会社のロゴを使いたくても

484
00:31:48,609 --> 00:31:53,080
記号で使える色は
１色に限定されています

485
00:31:53,313 --> 00:31:57,451
形だけで表現できないものも
ありますよね

486
00:31:57,551 --> 00:32:02,156
その場合 代わりに
注釈に画像を使います

487
00:31:57,551 --> 00:32:02,156
その場合 代わりに
注釈に画像を使います

488
00:32:02,256 --> 00:32:04,458
このマップでは 丸い画像で

489
00:32:04,691 --> 00:32:08,328
最近訪れた場所に
注釈をつけました

490
00:32:09,329 --> 00:32:12,099
使ったのはラスタ画像です

491
00:32:12,232 --> 00:32:17,604
先ほど同様 タイトルなどは
吹き出しの中に表示されます

492
00:32:17,805 --> 00:32:22,409
画像の場合も
マーカー注釈とほぼ同じですが

493
00:32:22,576 --> 00:32:27,014
画像のURLを
付け足す必要があります

494
00:32:27,181 --> 00:32:30,651
異なるピクセル比用の
２つのURLです

495
00:32:32,653 --> 00:32:37,958
注釈を出すもう１つの方法は
従来のピン型です

496
00:32:38,125 --> 00:32:41,428
ピンには さまざまな色が使えます

497
00:32:41,528 --> 00:32:47,401
問題はピンの色が増えれば
多くの画像が必要になることです

498
00:32:47,568 --> 00:32:50,571
これでは管理しきれないので

499
00:32:50,704 --> 00:32:52,906
カスタム注釈を使いましょう

500
00:32:53,006 --> 00:32:58,412
この場合 画像ではなく
DOM要素で注釈を表示します

501
00:33:00,080 --> 00:33:03,617
要素はオンデマンドで作られます

502
00:33:03,750 --> 00:33:04,852
例を見てみましょう

503
00:33:04,952 --> 00:33:10,991
マップ上のピンの色を
カスタマイズしたい場合―

504
00:33:11,592 --> 00:33:14,895
座標とオプションで注釈を作ります

505
00:33:14,995 --> 00:33:19,633
３つめのパラメータは
注釈のDOM要素です

506
00:33:19,833 --> 00:33:22,135
ここではキャンバス要素を作り

507
00:33:22,236 --> 00:33:24,638
コンテキストを取得

508
00:33:24,771 --> 00:33:26,807
キャンバスにピンを描き

509
00:33:27,207 --> 00:33:31,044
好みの色に変え
キャンバスに戻します

510
00:33:31,145 --> 00:33:35,015
マップ上のキャンバスは
こうなりました

511
00:33:37,551 --> 00:33:40,454
注釈は この３種類です

512
00:33:40,721 --> 00:33:44,558
しかし 時には
マップ上に複数の場所を

513
00:33:44,658 --> 00:33:47,060
示したい時もありますよね

514
00:33:47,161 --> 00:33:51,098
エリア全体の表示が
必要なこともあります

515
00:33:51,698 --> 00:33:56,370
そんな時は ３種類の
オーバーレイが使えます

516
00:33:56,603 --> 00:33:59,640
使い方の例をお見せしましょう

517
00:34:00,274 --> 00:34:05,212
円のオーバーレイを使うと
中心からの距離を示せます

518
00:34:05,312 --> 00:34:08,447
経路ならポリラインで示せます

519
00:34:08,681 --> 00:34:13,286
また ポリゴンの
オーバーレイを使えば

520
00:34:13,387 --> 00:34:18,025
国や市などの境界を表示できます

521
00:34:19,326 --> 00:34:22,062
こちらは円のオーバーレイです

522
00:34:22,329 --> 00:34:24,063
場所はブリュッセル

523
00:34:24,164 --> 00:34:27,234
小便小僧を中心にしました

524
00:34:27,801 --> 00:34:33,273
ここは市の中心で
散歩にも適した場所です

525
00:34:33,440 --> 00:34:37,177
この場所を中心に
同心円を描くことで

526
00:34:37,277 --> 00:34:41,215
ウォーキングの距離の
目安になります

527
00:34:41,380 --> 00:34:44,551
そこで座標を基に
オーバーレイを作り

528
00:34:44,650 --> 00:34:49,922
２つめのパラメータとして
メートル単位の範囲を指定

529
00:34:50,056 --> 00:34:54,027
ここでは400メートルごとに
表示したので

530
00:34:54,127 --> 00:34:57,197
400メートル 800メートル
という具合です

531
00:34:57,598 --> 00:35:01,869
右側を見ると
漫画博物館があります

532
00:34:57,598 --> 00:35:01,869
右側を見ると
漫画博物館があります

533
00:35:01,969 --> 00:35:04,171
面白そうですね

534
00:35:04,271 --> 00:35:08,842
1200メートルから
1600メートルの間なので

535
00:35:08,942 --> 00:35:10,944
徒歩15分弱でしょう

536
00:35:11,979 --> 00:35:15,449
オーバーレイで大切なのは
スタイルです

537
00:35:16,016 --> 00:35:19,453
このオーバーレイを出すために

538
00:35:19,553 --> 00:35:21,722
MapKitの
スタイルオブジェクトが使えます

539
00:35:21,989 --> 00:35:27,294
線の幅や長さ 色などの
プロパティがあり

540
00:35:27,394 --> 00:35:29,663
CSSの色を指定できます

541
00:35:29,797 --> 00:35:34,968
初期設定では
円のオーバーレイは青ですが

542
00:35:35,068 --> 00:35:39,707
透明にしたいので
塗りつぶしの色は nullにしました

543
00:35:41,375 --> 00:35:45,345
さて 漫画博物館に
行くことにしました

544
00:35:45,512 --> 00:35:49,917
MapKit JSを使うと
徒歩と車の場合の

545
00:35:50,050 --> 00:35:52,452
２地点の経路が分かります

546
00:35:52,653 --> 00:35:58,525
今回は小便小僧から目的地までの
経路を尋ねました

547
00:35:58,892 --> 00:36:03,530
結果は ポリラインの
オーバーレイで示されます

548
00:35:58,892 --> 00:36:03,530
結果は ポリラインの
オーバーレイで示されます

549
00:36:03,630 --> 00:36:09,169
この線は 座標の情報に基づき
点をつないだものです

550
00:36:09,269 --> 00:36:13,006
スタイルは
strokeOpacityで設定できます

551
00:36:13,106 --> 00:36:16,743
目立つように
線を太くすることも可能です

552
00:36:18,378 --> 00:36:20,514
最後の例は ポリゴンで

553
00:36:20,614 --> 00:36:23,317
データの可視化に有効です

554
00:36:23,417 --> 00:36:28,355
これはアメリカで
各州がオーバーレイになっています

555
00:36:28,455 --> 00:36:33,560
こちらも点を結んで
ポリゴンを定義していますが

556
00:36:33,660 --> 00:36:36,597
今回は中を塗りつぶしています

557
00:36:37,998 --> 00:36:42,369
もっと複雑なものも
点で指定できます

558
00:36:42,469 --> 00:36:48,242
実際 地理的によく存在する
飛び地などの情報です

559
00:36:48,809 --> 00:36:51,511
注釈もオーバーレイも

560
00:36:51,612 --> 00:36:56,149
データのプロパティに
情報を追加できます

561
00:36:56,383 --> 00:37:01,488
例えば アメリカの州ごとの人口を
表示しましょう

562
00:36:56,383 --> 00:37:01,488
例えば アメリカの州ごとの人口を
表示しましょう

563
00:37:01,588 --> 00:37:03,357
まず 色を見ると

564
00:37:03,991 --> 00:37:06,460
おおよその人口が分かります

565
00:37:06,560 --> 00:37:09,029
データの追加も可能です

566
00:37:09,129 --> 00:37:12,733
ユーザが
オーバーレイの中から

567
00:37:12,833 --> 00:37:14,635
テキサス州を選ぶと

568
00:37:14,835 --> 00:37:19,173
人口が2000万人以上だと
分かります

569
00:37:20,007 --> 00:37:22,810
注釈と同様
オーバーレイも選択できます

570
00:37:26,146 --> 00:37:31,285
先ほどのような
道順や州の情報を表示するには

571
00:37:31,385 --> 00:37:33,554
膨大なデータと点が必要です

572
00:37:33,654 --> 00:37:37,091
アメリカには 膨大な点があるので

573
00:37:37,791 --> 00:37:42,162
各種データは
GeoJSONから取り込みます

574
00:37:42,262 --> 00:37:47,034
データファイルを
MapKit JSに自動で取り込むと

575
00:37:47,167 --> 00:37:49,369
注釈やオーバーレイが作られます

576
00:37:49,469 --> 00:37:52,439
こちらは別のデータファイル

577
00:37:52,539 --> 00:37:55,976
UFOの目撃情報が入っています

578
00:37:56,176 --> 00:38:01,415
マップの詳細を見ると
目撃情報がたくさんありますね

579
00:37:56,176 --> 00:38:01,415
マップの詳細を見ると
目撃情報がたくさんありますね

580
00:38:02,316 --> 00:38:05,652
注釈とオーバーレイは
自動で作られますが

581
00:38:05,752 --> 00:38:09,623
デリゲートメソッドで
カスタマイズも可能です

582
00:38:11,458 --> 00:38:17,431
注釈とオーバーレイは
ユーザによって選択されるので

583
00:38:17,631 --> 00:38:21,535
ユーザからも
情報を得ることができます

584
00:38:21,769 --> 00:38:24,204
イベントの選択を確認し

585
00:38:24,304 --> 00:38:29,243
注釈がドラッグされるのも
確認できます

586
00:38:29,343 --> 00:38:32,446
使用するのは
addEventListener

587
00:38:32,546 --> 00:38:37,918
addEventListenerを使えば
注釈とオーバーレイが

588
00:38:38,018 --> 00:38:42,089
いつ選択されたのかが分かります

589
00:38:42,256 --> 00:38:44,458
そのデモをお見せしましょう

590
00:38:45,959 --> 00:38:49,596
次は質の高い
インタラクションの提供です

591
00:38:49,697 --> 00:38:52,666
ここからはメロディが担当します

592
00:38:53,200 --> 00:38:58,138
(拍手)

593
00:39:05,512 --> 00:39:08,949
MapKit JSでは
３つのサービスが利用できます

594
00:39:09,049 --> 00:39:11,819
ジオコーディング 検索 経路です

595
00:39:12,186 --> 00:39:16,990
１つずつ説明しますが
まず共通点を紹介しましょう

596
00:39:18,392 --> 00:39:22,029
どれも簡単な４ステップで使えます

597
00:39:22,396 --> 00:39:24,565
まず サービスオブジェクトを作り

598
00:39:24,965 --> 00:39:27,768
次にパラメータとオプションを指定

599
00:39:28,235 --> 00:39:29,603
そして リクエスト

600
00:39:30,037 --> 00:39:33,907
最後にコールバックで
非同期レスポンスを扱います

601
00:39:34,475 --> 00:39:36,810
まずは ジオコーダです

602
00:39:38,378 --> 00:39:42,249
ジオコーダを使う際の
２つの方法は

603
00:39:42,616 --> 00:39:44,251
ルックアップと逆ルックアップ

604
00:39:44,485 --> 00:39:48,822
住所などが分かっていて
座標を探す方法と

605
00:39:48,922 --> 00:39:52,292
その反対で
座標から住所を探す方法です

606
00:39:53,861 --> 00:39:56,196
まずはオブジェクトを作ります

607
00:39:57,564 --> 00:40:01,368
getsUserLocationの
パラメータで提供し

608
00:39:57,564 --> 00:40:01,368
getsUserLocationの
パラメータで提供し

609
00:40:01,568 --> 00:40:05,038
ジオコーダに
コンテキストを追加できます

610
00:40:05,239 --> 00:40:10,144
これは 同じ地名が
複数の地域にある場合に便利です

611
00:40:10,544 --> 00:40:13,213
ここで ブリスベンを検索すると

612
00:40:13,313 --> 00:40:18,385
カリフォルニア州の
ブリスベンが出るのがその例です

613
00:40:19,820 --> 00:40:21,655
次にリクエストを作ります

614
00:40:21,755 --> 00:40:23,657
使うのは この会場

615
00:40:25,058 --> 00:40:26,960
レスポンスを処理します

616
00:40:27,394 --> 00:40:32,566
ジオコーダを使うと
簡単に注釈を設定できるので

617
00:40:32,666 --> 00:40:35,269
マップに追加してみましょう

618
00:40:37,738 --> 00:40:40,641
逆ルックアップでは
座標から―

619
00:40:40,741 --> 00:40:44,044
その場所の住所を調べます

620
00:40:46,013 --> 00:40:47,614
これがジオコーダ

621
00:40:47,714 --> 00:40:50,951
次はサービスコンテキストです

622
00:40:51,118 --> 00:40:55,022
getsUserLocation
パラメータに加えて

623
00:40:55,122 --> 00:40:58,258
検索する座標と地域も提供

624
00:40:58,725 --> 00:41:02,296
これにより適切な結果が
表示されます

625
00:40:58,725 --> 00:41:02,296
これにより適切な結果が
表示されます

626
00:41:02,462 --> 00:41:07,834
複数の場所に
同じ地名がある場合に有効で

627
00:41:07,935 --> 00:41:10,938
ユーザに近い結果を提供できます

628
00:41:13,073 --> 00:41:16,009
検索サービスは 例えば―

629
00:41:16,510 --> 00:41:19,646
最寄りのカフェを探すなどです

630
00:41:20,714 --> 00:41:23,350
まず サービスオブジェクトを作成

631
00:41:24,885 --> 00:41:28,855
“コーヒー”などのクエリで
リクエストを構築します

632
00:41:28,956 --> 00:41:33,560
特定のカフェなどを
設定することもできます

633
00:41:35,896 --> 00:41:37,564
そして結果を処理

634
00:41:38,832 --> 00:41:44,338
複数の結果も 注釈を使って
簡単に表示できます

635
00:41:44,438 --> 00:41:49,209
そして座標とタイトルの情報を
注釈に入れられます

636
00:41:50,978 --> 00:41:56,383
最後にshowItemsで
注釈を追加し 表示できます

637
00:41:58,418 --> 00:42:02,456
リクエストへの全クエリがあれば
これは有用です

638
00:41:58,418 --> 00:42:02,456
リクエストへの全クエリがあれば
これは有用です

639
00:42:02,556 --> 00:42:05,959
また 検索バーに
入力させる場合は

640
00:42:06,060 --> 00:42:08,362
検索オートコンプリートが使えます

641
00:42:09,429 --> 00:42:13,400
検索オートコンプリートでは
クエリの一部を

642
00:42:13,500 --> 00:42:15,469
表示することができます

643
00:42:15,569 --> 00:42:18,372
入力に合わせて候補が出るので

644
00:42:18,472 --> 00:42:20,908
検索を効率化できます

645
00:42:23,277 --> 00:42:25,279
最後は 経路です

646
00:42:26,780 --> 00:42:31,084
他のサービスと同様
オブジェクトを作成

647
00:42:31,919 --> 00:42:37,558
言語を指定すると
その言語で道順を提示します

648
00:42:38,859 --> 00:42:44,131
言語を指定しない場合は
MapKitの設定言語が使われ

649
00:42:44,264 --> 00:42:48,202
それもない場合は
ブラウザの言語が使われます

650
00:42:49,870 --> 00:42:54,675
そして始点と目的地を入力して
道順をリクエストします

651
00:42:54,908 --> 00:42:58,312
座標 住所
または場所の名前です

652
00:43:00,047 --> 00:43:02,916
初期設定では交通手段は車です

653
00:43:03,016 --> 00:43:06,987
これを徒歩に変更することも
可能ですが

654
00:43:07,121 --> 00:43:09,656
遠すぎるので今回は使いません

655
00:43:10,057 --> 00:43:12,426
代替経路をリクエストすると―

656
00:43:12,559 --> 00:43:15,529
複数の選択肢を提示できます

657
00:43:15,629 --> 00:43:20,868
最適な経路の他にも
別の経路を表示できるのです

658
00:43:22,703 --> 00:43:26,273
そしてマップに結果を表示します

659
00:43:26,373 --> 00:43:29,343
ポリラインのオーバーレイが
見えますね

660
00:43:29,443 --> 00:43:34,014
他の経路の距離と所要時間も
表示されています

661
00:43:34,114 --> 00:43:38,552
概要が分かったところで
ジュリアンに交代します

662
00:43:40,087 --> 00:43:42,522
(拍手)

663
00:43:45,325 --> 00:43:46,593
ありがとう

664
00:43:46,760 --> 00:43:48,996
では 先ほどの続きで

665
00:43:49,296 --> 00:43:52,599
ビッグフット探査用マップを
作りましょう

666
00:43:53,667 --> 00:43:58,272
このマップには １つ
欠けているものがあります

667
00:43:58,372 --> 00:44:01,542
自分の現在地も分かるし

668
00:43:58,372 --> 00:44:01,542
自分の現在地も分かるし

669
00:44:02,042 --> 00:44:04,578
ビッグフットの場所も分かります

670
00:44:04,678 --> 00:44:06,747
でも 道順が分かりません

671
00:44:07,514 --> 00:44:09,850
そこで 経路を追加しましょう

672
00:44:10,317 --> 00:44:14,188
現在地のマッケナリー･
コンベンションセンターから

673
00:44:14,555 --> 00:44:17,391
ビッグフットの居場所までです

674
00:44:17,491 --> 00:44:21,128
MapKit JSの
経路サービスを使い―

675
00:44:21,228 --> 00:44:23,597
ポリラインのオーバーレイを
描きます

676
00:44:24,298 --> 00:44:29,136
しかし その前に
やるべきことがあります

677
00:44:29,236 --> 00:44:35,008
まず ユーザがどこに行きたいのか
確認が必要です

678
00:44:35,809 --> 00:44:40,314
さて ユーザが
行きたい場所を選択しました

679
00:44:40,414 --> 00:44:42,249
そこで こうします

680
00:44:42,349 --> 00:44:45,986
selectEventListenerを使い
ユーザが―

681
00:44:46,120 --> 00:44:49,556
どの注釈を選択したのか確認します

682
00:44:49,690 --> 00:44:51,859
注釈が選択されたら

683
00:44:51,959 --> 00:44:56,296
その場所への道順に
関心があるということです

684
00:44:56,396 --> 00:45:01,602
それで経路をリクエストし
道順が分かるように提示します

685
00:44:56,396 --> 00:45:01,602
それで経路をリクエストし
道順が分かるように提示します

686
00:45:01,702 --> 00:45:05,205
あとは ユーザに経路を
選んでもらいます

687
00:45:05,305 --> 00:45:09,576
経路サービスが返した選択肢を

688
00:45:09,710 --> 00:45:12,913
各ルートの詳細とともに提示します

689
00:45:13,247 --> 00:45:16,650
まずはeventListenerを
設定しましょう

690
00:45:17,618 --> 00:45:20,320
マップから選択情報を確認

691
00:45:20,554 --> 00:45:24,491
注釈やオーバーレイの選択を
把握します

692
00:45:24,758 --> 00:45:28,028
これが受け取ったイベントの
プロパティです

693
00:45:28,128 --> 00:45:32,466
ifに値があれば
注釈は選択されています

694
00:45:32,566 --> 00:45:37,337
MapKitで一度に選ばれる注釈は
１つだけなので

695
00:45:37,438 --> 00:45:39,039
曖昧さは ありません

696
00:45:39,139 --> 00:45:41,041
これが行きたい場所です

697
00:45:41,141 --> 00:45:43,977
注釈への経路を示しましょう

698
00:45:46,580 --> 00:45:49,316
マップ上に経路を描きます

699
00:45:49,449 --> 00:45:52,186
ポリラインのオーバーレイを使い

700
00:45:52,286 --> 00:45:54,621
マップに経路を描きます

701
00:45:54,888 --> 00:45:59,159
まず 全経路で使う
スタイルを定義します

702
00:45:59,326 --> 00:46:03,197
目立つように
不透過率や線の幅を設定

703
00:45:59,326 --> 00:46:03,197
目立つように
不透過率や線の幅を設定

704
00:46:03,297 --> 00:46:08,001
今回は初期設定の青を
そのまま使います

705
00:46:08,435 --> 00:46:13,874
オブジェクト用に
オンデマンドの注釈を作ったように

706
00:46:13,974 --> 00:46:16,610
経路用のオーバーレイを作ります

707
00:46:17,044 --> 00:46:22,216
MapKitの経路サービスが
提供する情報には

708
00:46:22,416 --> 00:46:25,886
さまざまなものが含まれます

709
00:46:26,020 --> 00:46:30,657
Ａ地点からＢ地点までの
道順のリストがあり

710
00:46:30,824 --> 00:46:34,495
それぞれに点のリストが
含まれています

711
00:46:35,396 --> 00:46:39,299
線のオーバーレイには
点のリストが必要でしたよね

712
00:46:39,399 --> 00:46:43,604
点のリストが複数あるので
１つに絞り

713
00:46:43,704 --> 00:46:47,474
経路を順番に１つずつ作ります

714
00:46:48,108 --> 00:46:51,678
このリストを使って線を描きます

715
00:46:51,779 --> 00:46:57,051
オーバーレイのスタイルは
先ほど定義したものです

716
00:46:57,518 --> 00:47:02,189
ユーザが選択すると
詳細な情報が表示されます

717
00:46:57,518 --> 00:47:02,189
ユーザが選択すると
詳細な情報が表示されます

718
00:47:02,289 --> 00:47:06,360
経路のオブジェクトを
データプロパティに入れ

719
00:47:06,460 --> 00:47:10,397
移動にかかる時間の予測を示します

720
00:47:11,732 --> 00:47:13,333
オーバーレイを描くため

721
00:47:13,434 --> 00:47:17,438
サービスからリクエストを
出す必要があります

722
00:47:17,905 --> 00:47:19,673
こんな感じです

723
00:47:21,341 --> 00:47:23,911
やや長めですが いいでしょう

724
00:47:24,077 --> 00:47:26,513
経路のオブジェクトを作成

725
00:47:26,613 --> 00:47:31,885
現在の言語で経路を示すので
初期設定のままにします

726
00:47:32,986 --> 00:47:36,723
では 特定の注釈までの道順を

727
00:47:36,823 --> 00:47:39,526
いくつか示すようリクエストします

728
00:47:39,760 --> 00:47:44,832
その前に 先ほど出した
経路を消しましょう

729
00:47:45,032 --> 00:47:48,502
オーバーレイのプロパティを見ると

730
00:47:48,602 --> 00:47:52,172
どのオーバーレイを
表示中か分かります

731
00:47:52,272 --> 00:47:55,108
それをremoveOverlaysで
削除します

732
00:47:55,208 --> 00:47:59,179
では 新しい経路を表示しましょう

733
00:47:59,747 --> 00:48:01,949
まず始点のリクエストです

734
00:47:59,747 --> 00:48:01,949
まず始点のリクエストです

735
00:48:02,049 --> 00:48:05,385
始点はマッケナリー･
コンベンションセンター

736
00:48:05,486 --> 00:48:09,022
座標での指定も可能ですが

737
00:48:09,123 --> 00:48:12,092
場所の名前の方が簡単ですね

738
00:48:12,493 --> 00:48:15,396
目的地については座標を入れます

739
00:48:15,496 --> 00:48:19,133
注釈の座標のパラメータです

740
00:48:19,800 --> 00:48:23,704
経路は すべては無理ですが
いくつか―

741
00:48:23,804 --> 00:48:27,041
可能な経路を表示しましょう

742
00:48:27,141 --> 00:48:31,145
requestAlternateRoutesを
trueにします

743
00:48:32,312 --> 00:48:34,381
リクエストを作れたので

744
00:48:35,015 --> 00:48:39,453
routeで経路サービスを
実行できます

745
00:48:42,623 --> 00:48:45,225
クエリで失敗も起きるので

746
00:48:45,325 --> 00:48:49,329
エラーが出た場合の
対策も必要です

747
00:48:49,429 --> 00:48:53,333
この場合 初期設定の経路の

748
00:48:53,434 --> 00:48:55,369
直線が出てしまいます

749
00:48:55,469 --> 00:48:57,871
直線が出てはいけません

750
00:48:59,840 --> 00:49:05,312
とりあえず うまくいった場合を
見てみましょう

751
00:48:59,840 --> 00:49:05,312
とりあえず うまくいった場合を
見てみましょう

752
00:49:05,412 --> 00:49:08,215
経路のリストに基づいて

753
00:49:08,315 --> 00:49:12,219
それぞれ
線のオーバーレイを出します

754
00:49:12,920 --> 00:49:17,491
マップに経路を表示するには
showItemsを使い

755
00:49:17,591 --> 00:49:21,428
経路全体が含まれるように
地域を設定します

756
00:49:21,829 --> 00:49:26,433
さらにいくつかの
オプションをご紹介しましょう

757
00:49:26,533 --> 00:49:27,901
１つはアニメーションです

758
00:49:28,035 --> 00:49:33,540
今 表示されているマップから
経路表示に変える際

759
00:49:33,640 --> 00:49:37,344
スムーズに移行したいですよね

760
00:49:38,479 --> 00:49:42,015
また 余計な場所まで
含めないように

761
00:49:42,115 --> 00:49:45,652
周辺に余白を加える場合もあります

762
00:49:46,854 --> 00:49:48,222
さて できました

763
00:49:49,590 --> 00:49:54,828
この会場から注釈までの
経路をリクエストするため

764
00:49:54,928 --> 00:49:56,730
これを選択しましょう

765
00:49:57,764 --> 00:50:02,202
注釈を選んだので
リクエストが行われました

766
00:49:57,764 --> 00:50:02,202
注釈を選んだので
リクエストが行われました

767
00:50:03,136 --> 00:50:05,205
示された経路は３つ

768
00:50:05,305 --> 00:50:08,942
途中までは同じですが
最後が違っています

769
00:50:09,209 --> 00:50:13,414
始点は
このコンベンションセンターです

770
00:50:13,514 --> 00:50:14,815
合っていますね

771
00:50:14,915 --> 00:50:16,450
大丈夫そうです

772
00:50:17,384 --> 00:50:19,620
経路が３つあります

773
00:50:19,853 --> 00:50:23,223
ここで知りたいのは
それぞれの経路の

774
00:50:23,323 --> 00:50:25,726
所要時間と距離の差です

775
00:50:25,826 --> 00:50:30,531
確認したいところですが
経路を選択しても

776
00:50:30,631 --> 00:50:35,402
一度に１つしか選択できないので
選択が解除されます

777
00:50:35,502 --> 00:50:38,672
問題は オーバーレイが
選択された時の―

778
00:50:39,073 --> 00:50:41,742
動作が決まっていないことです

779
00:50:42,109 --> 00:50:43,610
これを決めましょう

780
00:50:43,777 --> 00:50:48,816
注釈をハイライトし
サイドバーに情報を表示します

781
00:50:49,583 --> 00:50:52,152
オーバーレイを
ハイライトするために―

782
00:50:52,486 --> 00:50:58,058
ハイライト時のスタイルを作って
ここに入れましょう

783
00:50:58,625 --> 00:51:00,394
古いスタイルも入れます

784
00:50:58,625 --> 00:51:00,394
古いスタイルも入れます

785
00:51:00,494 --> 00:51:02,629
不透過率は同じままで

786
00:51:02,729 --> 00:51:08,001
他よりも目立つように
線の色を紫に設定します

787
00:51:09,937 --> 00:51:13,841
これを選択時のオーバーレイに
適用しますが

788
00:51:14,208 --> 00:51:19,313
すでに選択の
イベントハンドラがありますよね

789
00:51:20,848 --> 00:51:26,320
ここまでは注釈の
選択だけを確認してきました

790
00:51:26,420 --> 00:51:31,358
しかし 今度はこの関数を
追加することができます

791
00:51:36,630 --> 00:51:40,234
注釈が選択された場合は
同じですが

792
00:51:40,334 --> 00:51:46,206
オーバーレイが選択された時は
定義したスタイルに変更します

793
00:51:46,306 --> 00:51:48,976
つまりハイライトです

794
00:51:49,743 --> 00:51:51,411
見てみましょう

795
00:51:55,482 --> 00:51:57,551
他を選択します

796
00:51:58,052 --> 00:51:58,919
よかった

797
00:52:00,587 --> 00:52:04,558
リストから
経路が複数提示されるので―

798
00:52:05,526 --> 00:52:09,496
そこから経路を
選べることがわかります

799
00:52:09,596 --> 00:52:11,865
まだ表示はしていません

800
00:52:12,099 --> 00:52:14,368
別の経路を選んでみましょう

801
00:52:14,568 --> 00:52:19,139
初期設定では オーバーレイを
選んでも何も起こらず

802
00:52:19,239 --> 00:52:22,042
選択を解除しても
何も起きません

803
00:52:22,142 --> 00:52:25,612
この部分も動作指定が必要です

804
00:52:27,314 --> 00:52:28,615
では ここで―

805
00:52:28,982 --> 00:52:33,821
選択解除時の
イベントリスナを追加します

806
00:52:34,121 --> 00:52:36,223
選択が解除されたら

807
00:52:36,623 --> 00:52:39,526
初期設定のスタイルに戻します

808
00:52:41,328 --> 00:52:42,663
これで問題が―

809
00:52:43,564 --> 00:52:44,731
解消されます

810
00:52:45,699 --> 00:52:47,000
では もう一度

811
00:52:47,234 --> 00:52:49,136
ここに経路があります

812
00:52:49,336 --> 00:52:54,274
同じ場所を選ぶと
オーバーレイが重なっているので

813
00:52:54,375 --> 00:52:56,510
別のオーバーレイが選ばれます

814
00:52:56,810 --> 00:53:02,716
選択解除のハンドラが働き
前のハイライトが消えました

815
00:52:56,810 --> 00:53:02,716
選択解除のハンドラが働き
前のハイライトが消えました

816
00:53:02,816 --> 00:53:06,820
そして 新しい選択が
表示されています

817
00:53:06,987 --> 00:53:09,223
ちゃんと動きますね

818
00:53:10,023 --> 00:53:11,792
もう１つの例です

819
00:53:12,793 --> 00:53:15,262
今度は 詳細情報を求めて―

820
00:53:16,830 --> 00:53:18,465
こちらの経路を選びます

821
00:53:18,565 --> 00:53:21,869
知りたいのは
経路や所要時間―

822
00:53:21,969 --> 00:53:24,738
そして 経路の比較情報です

823
00:53:25,439 --> 00:53:28,809
これは とても簡単です

824
00:53:28,909 --> 00:53:32,513
知りたい情報がすべてあるからです

825
00:53:32,613 --> 00:53:36,517
オーバーレイに
データを格納しており

826
00:53:36,617 --> 00:53:39,520
選択･非選択時の
動作も決めています

827
00:53:39,620 --> 00:53:41,555
オーバーレイが選択されたら

828
00:53:41,655 --> 00:53:44,024
データを表示します

829
00:53:46,060 --> 00:53:47,494
場所はサイドバー

830
00:53:48,796 --> 00:53:50,264
基本の動きです

831
00:53:50,364 --> 00:53:53,834
HTMLのフォーマットにして―

832
00:53:53,934 --> 00:53:59,606
ウェブサイトに組み込む仕組みも
整っています

833
00:53:59,807 --> 00:54:04,211
データはオーバーレイと
連携していて

834
00:53:59,807 --> 00:54:04,211
データはオーバーレイと
連携していて

835
00:54:04,344 --> 00:54:06,980
選択すると表示されます

836
00:54:07,448 --> 00:54:09,950
注意すべきことが１つ

837
00:54:10,050 --> 00:54:13,554
複数の経路が表示されないように

838
00:54:13,654 --> 00:54:16,823
選択解除でデータを隠します

839
00:54:18,358 --> 00:54:19,660
やってみましょう

840
00:54:20,427 --> 00:54:22,796
先ほどの例に戻ります

841
00:54:23,730 --> 00:54:26,400
再び この経路を選びます

842
00:54:26,600 --> 00:54:30,604
経路が選択されたので
画面の右側に

843
00:54:30,704 --> 00:54:33,140
詳細情報が表示されました

844
00:54:33,240 --> 00:54:37,778
経路の名前は経由する
“Mount Hamilton Rd”

845
00:54:38,579 --> 00:54:41,481
距離は70キロで
運転に適した道です

846
00:54:41,582 --> 00:54:44,518
所要時間は１時間32分

847
00:54:44,618 --> 00:54:49,156
こちらに目的地までの
道順が示されています

848
00:54:49,790 --> 00:54:51,391
こちらの道を見ると

849
00:54:51,992 --> 00:54:56,730
距離は長くても
早く到着することが分かります

850
00:54:57,064 --> 00:54:57,965
さて―

851
00:54:59,032 --> 00:55:03,203
ビッグフット探索用マップが
できました

852
00:54:59,032 --> 00:55:03,203
ビッグフット探索用マップが
できました

853
00:55:03,303 --> 00:55:06,340
これで どの場所に―

854
00:55:06,440 --> 00:55:10,110
どう行けばいいか調べられます

855
00:55:10,811 --> 00:55:12,579
(拍手)

856
00:55:12,679 --> 00:55:13,647
どうも

857
00:55:13,747 --> 00:55:16,450
(拍手)

858
00:55:16,683 --> 00:55:17,818
おさらいです

859
00:55:17,918 --> 00:55:22,156
選択･非選択など
ユーザイベントへの反応を見ました

860
00:55:24,191 --> 00:55:27,161
MapKit JSから経路を取得し

861
00:55:27,261 --> 00:55:30,864
ポリラインのオーバーレイで
表示します

862
00:55:31,165 --> 00:55:35,002
初期設定の動作が
決まっていないので

863
00:55:35,102 --> 00:55:38,939
オーバーレイ選択時の
動作を設定します

864
00:55:40,541 --> 00:55:43,944
お話ししたいことは
山ほどありますが

865
00:55:44,044 --> 00:55:48,015
１時間しかないので
ここで終了します

866
00:55:49,516 --> 00:55:52,419
MapKit JSを使って

867
00:55:52,519 --> 00:55:57,124
最高のマップ体験を
提供できれば幸いです

868
00:55:58,225 --> 00:56:03,364
なじみがあり柔軟性もある
APIを使うので

869
00:55:58,225 --> 00:56:03,364
なじみがあり柔軟性もある
APIを使うので

870
00:56:03,464 --> 00:56:08,802
MapKit API利用者には
使いやすいと思います

871
00:56:08,902 --> 00:56:10,604
概念は同じです

872
00:56:10,704 --> 00:56:13,006
ウェブデベロッパが喜ぶのは

873
00:56:13,106 --> 00:56:17,177
JavaScriptにも対応する点です

874
00:56:18,979 --> 00:56:23,684
利用にはMapKit JSキーが
必要なので

875
00:56:24,051 --> 00:56:27,788
ポータルからキーを取得して
試してください

876
00:56:29,123 --> 00:56:35,696
ドキュメントとサンプルコードは
こちらのURLにあります

877
00:56:37,831 --> 00:56:42,703
このセッションの情報は
こちらのURLです

878
00:56:42,803 --> 00:56:45,139
MapKit JSキーの

879
00:56:45,239 --> 00:56:49,843
取得方法を解説した動画も
用意しています

880
00:56:51,044 --> 00:56:55,816
そして 水曜と金曜の朝に
ラボがあるので―

881
00:56:55,916 --> 00:57:01,755
MapKit JSのチームに
直接質問することもできます

882
00:56:55,916 --> 00:57:01,755
MapKit JSのチームに
直接質問することもできます

883
00:57:02,456 --> 00:57:03,257
どうも

884
00:57:03,357 --> 00:57:07,194
(拍手)