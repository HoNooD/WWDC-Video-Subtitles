
1
00:00:07,074 --> 00:00:16,717
(音楽)

2
00:00:20,821 --> 00:00:25,993
(拍手)

3
00:00:26,093 --> 00:00:27,628
こんにちは

4
00:00:27,728 --> 00:00:30,697
お集まりいただき―

5
00:00:30,831 --> 00:00:33,167
ありがとうございます

6
00:00:33,267 --> 00:00:36,970
今日は皆さんに
自然言語処理の―

7
00:00:37,070 --> 00:00:39,940
新たな機能をご紹介します

8
00:00:40,541 --> 00:00:44,945
私 ヴィヴェクと
同僚のダグがお話しします

9
00:00:45,045 --> 00:00:46,346
では始めます

10
00:00:47,581 --> 00:00:50,784
昨年 ご紹介したのは―

11
00:00:51,051 --> 00:00:54,221
自然言語処理の応用方法です

12
00:00:54,755 --> 00:00:57,591
アプリケーションが
より賢くなりました

13
00:00:58,192 --> 00:01:01,762
NSLinguisticTaggerを
使えば―

14
00:00:58,192 --> 00:01:01,762
NSLinguisticTaggerを
使えば―

15
00:01:01,862 --> 00:01:04,131
APIが利用可能です

16
00:01:05,032 --> 00:01:09,203
NSLinguisticTaggerが
提供するのは―

17
00:01:09,536 --> 00:01:14,441
自然言語処理に必要な
クラスと基本処理です

18
00:01:14,575 --> 00:01:17,177
言語の識別や構成理解

19
00:01:17,277 --> 00:01:19,680
品詞タグ付けなどを含みます

20
00:01:20,280 --> 00:01:24,051
従来の言語学と
機械学習を―

21
00:01:24,151 --> 00:01:26,620
有機的に結びつけました

22
00:01:26,920 --> 00:01:30,524
APIを活用することで―

23
00:01:30,624 --> 00:01:32,426
開発に集中できます

24
00:01:33,093 --> 00:01:36,597
今年の新技術を
ご紹介しましょう

25
00:01:37,297 --> 00:01:42,803
新たなフレームワーク
“Natural Language”です

26
00:01:43,170 --> 00:01:46,073
デバイスに依存せずに―

27
00:01:46,173 --> 00:01:50,811
自然言語処理を開発できる
フレームワークです

28
00:01:51,512 --> 00:01:55,682
Natural Languageの
優れた機能を紹介します

29
00:01:56,984 --> 00:02:00,654
APIを一から作り直しました

30
00:01:56,984 --> 00:02:00,654
APIを一から作り直しました

31
00:02:01,154 --> 00:02:05,526
NSLinguisticTaggerの
全機能をサポートします

32
00:02:05,759 --> 00:02:08,729
SwiftベースのAPIです

33
00:02:09,630 --> 00:02:13,867
さらに好きなモデルを
使うことも可能です

34
00:02:13,967 --> 00:02:16,770
モデルは
Create MLを使えば作成でき

35
00:02:16,870 --> 00:02:21,408
Core MLかNatural Languageで
展開できます

36
00:02:22,609 --> 00:02:26,413
Natural Languageの
全機能は―

37
00:02:26,513 --> 00:02:31,385
Appleのハードウェアに
最適化されています

38
00:02:32,319 --> 00:02:35,989
そして すべて
単独で動作します

39
00:02:36,089 --> 00:02:39,927
Natural Language内の
機械学習は―

40
00:02:40,027 --> 00:02:42,796
ユーザのプライバシーを守ります

41
00:02:42,896 --> 00:02:46,166
これは
Appleが提供している―

42
00:02:46,266 --> 00:02:49,837
機械学習の仕組みと同じです

43
00:02:50,437 --> 00:02:53,841
各APIの機能を
ご説明しましょう

44
00:02:53,941 --> 00:02:56,143
まずはSwift APIです

45
00:02:58,245 --> 00:03:00,247
Natural Languageは―

46
00:02:58,245 --> 00:03:00,247
Natural Languageは―

47
00:03:00,347 --> 00:03:03,350
NSLinguisticTaggerと
同じ機能を持ちます

48
00:03:03,450 --> 00:03:07,254
それでいて
より使いやすくなりました

49
00:03:07,955 --> 00:03:10,991
架空の
アプリケーションを使って―

50
00:03:11,091 --> 00:03:13,760
APIをご紹介しましょう

51
00:03:15,095 --> 00:03:18,699
皆さんがアプリケーションを
作ったとします

52
00:03:19,600 --> 00:03:24,371
メッセージング機能のある
アプリケーションです

53
00:03:25,405 --> 00:03:29,309
メッセージの内容に応じて―

54
00:03:29,409 --> 00:03:33,447
適切なステッカーが
表示されます

55
00:03:33,547 --> 00:03:38,218
これは“疲れた　おやすみ”
というメッセージです

56
00:03:38,318 --> 00:03:41,288
表示されたステッカーは―

57
00:03:41,388 --> 00:03:45,259
そのまま貼り付けて
送信できます

58
00:03:45,359 --> 00:03:49,329
高い評価を
受けている一方―

59
00:03:49,830 --> 00:03:53,200
“多言語化していない”
という声も

60
00:03:53,634 --> 00:03:58,939
最近では複数言語を
使うユーザも増えています

61
00:03:59,039 --> 00:04:03,343
でも中国語には
対応していませんでした

62
00:03:59,039 --> 00:04:03,343
でも中国語には
対応していませんでした

63
00:04:03,944 --> 00:04:07,147
Natural Languageの出番です

64
00:04:08,282 --> 00:04:11,985
２つのAPIで
簡単に解決できます

65
00:04:12,119 --> 00:04:14,288
１つは言語識別

66
00:04:15,022 --> 00:04:19,059
まずNatural Languageを
インポートします

67
00:04:19,760 --> 00:04:23,597
NLLanguageRecognizerの
インスタンスを作成し

68
00:04:24,364 --> 00:04:26,767
処理したい文字列を入力

69
00:04:27,167 --> 00:04:30,037
dominantLanguageを
呼び出します

70
00:04:30,370 --> 00:04:33,640
すると最も
可能性の高い言語が―

71
00:04:34,007 --> 00:04:36,076
判定されます

72
00:04:36,677 --> 00:04:39,746
簡体字と判定されました

73
00:04:40,447 --> 00:04:43,317
Natural Languageは
新しいAPIもサポート

74
00:04:43,417 --> 00:04:48,288
可能性の高い言語を
知りたい場合に―

75
00:04:48,488 --> 00:04:52,960
上位の候補を
割り出すことができます

76
00:04:53,060 --> 00:04:57,898
マルチリンガルな
アプリケーションで―

77
00:04:57,998 --> 00:05:01,668
さまざまな応用が可能です

78
00:04:57,998 --> 00:05:01,668
さまざまな応用が可能です

79
00:05:02,169 --> 00:05:06,006
languageHypothesesという
APIを使います

80
00:05:06,106 --> 00:05:08,675
出力する候補数を設定すると

81
00:05:08,775 --> 00:05:13,680
その候補と それぞれの
確率が出力されます

82
00:05:14,548 --> 00:05:19,520
次に この文字列を
トークン化してみましょう

83
00:05:19,987 --> 00:05:21,989
Natural Languageを
インポートし

84
00:05:22,289 --> 00:05:24,825
NLTokenizerの
インスタンスを作成

85
00:05:25,125 --> 00:05:28,328
いくつかの文字をつなげて―

86
00:05:28,428 --> 00:05:31,064
単語として識別します

87
00:05:32,733 --> 00:05:34,168
文字列を入力し

88
00:05:34,501 --> 00:05:38,372
オブジェクトの
“tokens”メソッドを呼び出します

89
00:05:39,039 --> 00:05:41,508
単語が現れました

90
00:05:41,909 --> 00:05:46,747
“おやすみ”という
単語も入っています

91
00:05:47,347 --> 00:05:50,717
これで多言語に対応しました

92
00:05:50,918 --> 00:05:55,923
言語識別のAPIと
トークン化のAPIを使うことで―

93
00:05:56,023 --> 00:05:58,192
実現できました

94
00:05:58,959 --> 00:06:00,961
別のAPIのお話を

95
00:05:58,959 --> 00:06:00,961
別のAPIのお話を

96
00:06:01,061 --> 00:06:04,064
言語識別と
トークン化以外にも―

97
00:06:04,164 --> 00:06:07,868
品詞タグ付けや
情報抽出も必要でしょう

98
00:06:07,968 --> 00:06:11,138
再び架空の
アプリケーションを使って

99
00:06:11,238 --> 00:06:13,240
説明していきます

100
00:06:14,241 --> 00:06:17,444
これはニュース
アプリケーションです

101
00:06:17,544 --> 00:06:21,915
ロイヤルウェディングについて―

102
00:06:22,015 --> 00:06:25,385
興味のある人がいるとします

103
00:06:25,652 --> 00:06:28,255
関連する記事を読み―

104
00:06:28,422 --> 00:06:31,925
“ハリー”で
検索をかけました

105
00:06:32,292 --> 00:06:35,529
ところが出てくるのは―

106
00:06:35,629 --> 00:06:39,466
まったく関係ないものばかり

107
00:06:39,566 --> 00:06:41,535
探したいのは―

108
00:06:42,002 --> 00:06:45,172
ハリー王子の結婚の記事です

109
00:06:45,272 --> 00:06:50,644
固有表現抽出のAPIを使えば
問題を解決できます

110
00:06:51,311 --> 00:06:54,381
やはり手順は似ています

111
00:06:54,481 --> 00:06:57,584
NSLinguisticTaggerより―

112
00:06:57,684 --> 00:07:01,989
はるかに
使いやすくなっています

113
00:06:57,684 --> 00:07:01,989
はるかに
使いやすくなっています

114
00:07:02,689 --> 00:07:04,391
Natural Languageを
インポートし

115
00:07:04,825 --> 00:07:07,261
NLTaggerの
インスタンスを作成

116
00:07:07,628 --> 00:07:10,364
“nameType”と指定します

117
00:07:10,831 --> 00:07:15,169
品詞タグ付けなら
“lexicalClass”とします

118
00:07:15,969 --> 00:07:18,839
処理したい文字列を
入力します

119
00:07:19,373 --> 00:07:22,776
ここでは言語を
英語にして―

120
00:07:22,910 --> 00:07:24,912
説明をします

121
00:07:25,279 --> 00:07:29,016
その言語を
知らなくても大丈夫

122
00:07:29,116 --> 00:07:32,186
Natural Languageが―

123
00:07:32,286 --> 00:07:35,222
自動で言語を認識します

124
00:07:36,156 --> 00:07:40,661
最後に“tags”メソッドを
呼び出し―

125
00:07:40,761 --> 00:07:44,364
引数に“word”と
“nameType”を指定

126
00:07:44,932 --> 00:07:48,202
“ハリー王子”と
“メーガン･マークル”

127
00:07:48,302 --> 00:07:51,638
“ウィンザー”も
抽出されました

128
00:07:51,738 --> 00:07:56,109
閲覧履歴の
文脈情報に基づいて―

129
00:07:56,210 --> 00:08:01,215
検索結果の質を
高めることができるのです

130
00:07:56,210 --> 00:08:01,215
検索結果の質を
高めることができるのです

131
00:08:03,750 --> 00:08:06,887
APIの活用法に関する情報は―

132
00:08:06,987 --> 00:08:10,090
ドキュメンテーションで
ご覧ください

133
00:08:10,324 --> 00:08:12,259
Natural Languageは―

134
00:08:12,359 --> 00:08:15,729
NSLinguisticTaggerの
機能を含みつつ

135
00:08:15,829 --> 00:08:18,332
未来的な機能を実現します

136
00:08:18,432 --> 00:08:22,236
このフレームワークに
移行して―

137
00:08:22,336 --> 00:08:26,406
新しい機能を
使ってみてください

138
00:08:27,274 --> 00:08:30,777
話は変わり
こんな状況があるとします

139
00:08:30,878 --> 00:08:33,212
作りたい
アプリケーションがある

140
00:08:33,580 --> 00:08:38,385
でもNatural Languageが
必要な機能を提供してない

141
00:08:39,520 --> 00:08:40,554
どうするか

142
00:08:41,621 --> 00:08:45,125
機能を実装するのも
手でしょう

143
00:08:45,225 --> 00:08:48,562
でも便利なツールがあれば？

144
00:08:50,964 --> 00:08:56,136
Create MLを使った
カスタムモデルの作り方

145
00:08:56,236 --> 00:09:01,241
そして それらのモデルの
使い方について―

146
00:08:56,236 --> 00:09:01,241
そして それらのモデルの
使い方について―

147
00:09:01,475 --> 00:09:03,343
ダグがお話しします

148
00:09:03,443 --> 00:09:07,948
(拍手)

149
00:09:09,750 --> 00:09:10,918
ありがとう ヴィヴェク

150
00:09:11,051 --> 00:09:15,556
新たなフレームワークに
興奮しています

151
00:09:15,656 --> 00:09:17,691
何より うれしいのは―

152
00:09:17,791 --> 00:09:22,930
カスタムモデルを
サポートできたことです

153
00:09:23,330 --> 00:09:26,867
ご自身のアプリケーションを
考えてください

154
00:09:27,134 --> 00:09:31,104
すでに作ったもの
これから作りたいもの

155
00:09:31,305 --> 00:09:34,908
もう少しテキストを
知っていれば―

156
00:09:35,008 --> 00:09:39,846
ユーザ体験を
高めることができるはずです

157
00:09:40,314 --> 00:09:44,785
テキストをどのように
分析していますか？

158
00:09:44,885 --> 00:09:50,257
おそらく例を見て
そこから学習するでしょう

159
00:09:50,591 --> 00:09:55,195
テキストに
さっと目を通すだけで―

160
00:09:55,295 --> 00:09:58,732
書かれている内容を
理解します

161
00:09:59,266 --> 00:10:03,070
機械も同じように
理解できるはず

162
00:09:59,266 --> 00:10:03,070
機械も同じように
理解できるはず

163
00:10:03,170 --> 00:10:04,771
機械学習モデルを―

164
00:10:05,539 --> 00:10:07,608
訓練するのです

165
00:10:07,708 --> 00:10:11,578
アプリケーションが
自動で分析を行い―

166
00:10:11,745 --> 00:10:15,616
機械学習のための
例を提供します

167
00:10:15,716 --> 00:10:19,453
分析するモデル自体も
作ります

168
00:10:19,887 --> 00:10:21,889
自然言語処理には―

169
00:10:21,989 --> 00:10:25,459
多くの機械学習モデルが
あります

170
00:10:25,559 --> 00:10:30,197
機械学習の
訓練方法も さまざまです

171
00:10:30,297 --> 00:10:34,468
でも私たちに
課された仕事は―

172
00:10:34,568 --> 00:10:37,938
機械学習を簡単にすること

173
00:10:38,372 --> 00:10:43,277
学習した結果をNatural Languageと
統合することです

174
00:10:43,443 --> 00:10:48,148
我々は２つのモデルを
サポートしています

175
00:10:48,282 --> 00:10:52,219
これらのモデルは
幅広い機能に対応し

176
00:10:52,386 --> 00:10:54,788
テキストの内容を―

177
00:10:54,888 --> 00:10:58,592
ラベル付けするのに
役立ちます

178
00:10:58,692 --> 00:11:02,696
１つはテキスト分類に
特化したモデルです

179
00:10:58,692 --> 00:11:02,696
１つはテキスト分類に
特化したモデルです

180
00:11:02,830 --> 00:11:07,401
この分類器は
文章や段落文書全体など―

181
00:11:07,501 --> 00:11:11,605
膨大な量のテキストに
ラベル付けします

182
00:11:11,705 --> 00:11:14,174
既存のAPIに対応し―

183
00:11:14,274 --> 00:11:17,611
言語やスクリプトの識別が
可能です

184
00:11:18,212 --> 00:11:21,482
もう１つは
単語へのタグ付けです

185
00:11:21,615 --> 00:11:26,753
文章は単語のつながりで
構成されています

186
00:11:26,854 --> 00:11:31,291
分類器は その１つ１つに
ラベルを付けます

187
00:11:31,391 --> 00:11:34,561
既存のAPIでの応用例は―

188
00:11:34,661 --> 00:11:37,431
品詞タグ付けや
固有表現抽出です

189
00:11:37,531 --> 00:11:40,367
しかし これらは―

190
00:11:40,801 --> 00:11:43,604
汎用的なモデルです

191
00:11:43,904 --> 00:11:45,873
独自のモデルなら

192
00:11:45,973 --> 00:11:48,809
より多くのことが可能になります

193
00:11:48,909 --> 00:11:51,612
例を挙げて説明しましょう

194
00:11:51,845 --> 00:11:56,216
レビューを認識する
アプリケーションの例です

195
00:11:56,316 --> 00:11:59,953
各レビューが
肯定的か否定的か―

196
00:12:00,053 --> 00:12:04,091
中立的なのかを
自動認識したい

197
00:12:04,191 --> 00:12:08,896
そのためには
テキスト分類器を訓練します

198
00:12:10,430 --> 00:12:15,302
記事の本文や要約
または見出しがあるとします

199
00:12:15,402 --> 00:12:18,939
それらが属するトピックを―

200
00:12:19,039 --> 00:12:22,442
独自な分類基準で
自動認識したい

201
00:12:22,643 --> 00:12:25,345
テキスト分類器を―

202
00:12:25,779 --> 00:12:28,549
訓練すれば可能です

203
00:12:29,983 --> 00:12:34,454
次は自動認識を使った
旅行の代理店業務です

204
00:12:34,555 --> 00:12:37,057
顧客から依頼を受けた時―

205
00:12:37,157 --> 00:12:40,594
まず知りたいのは
依頼の内容です

206
00:12:40,694 --> 00:12:44,631
ホテルか
レストランか航空券か

207
00:12:45,098 --> 00:12:49,770
テキスト分類器を訓練すれば
判別できます

208
00:12:50,871 --> 00:12:56,176
単語のタグ付けですが
我々が提供するのは―

209
00:12:56,276 --> 00:12:59,513
複数の言語に
対応するものです

210
00:12:59,613 --> 00:13:02,749
でもサポートされてない
言語の―

211
00:12:59,613 --> 00:13:02,749
でもサポートされてない
言語の―

212
00:13:02,850 --> 00:13:06,153
品詞タグ付けをしたければ？

213
00:13:06,320 --> 00:13:11,225
カスタムモデルで
単語のタグ付け器を訓練します

214
00:13:12,226 --> 00:13:14,495
固有表現抽出も同じです

215
00:13:14,661 --> 00:13:16,663
汎用モデルでも―

216
00:13:16,763 --> 00:13:20,834
人名や地名や
組織名を認識します

217
00:13:21,301 --> 00:13:26,306
でもサポートされてない
固有名詞を抽出するには？

218
00:13:26,406 --> 00:13:28,742
例えば商品名などです

219
00:13:28,909 --> 00:13:33,013
カスタムモデルを
訓練すれば―

220
00:13:33,247 --> 00:13:39,153
意図した固有名詞や用語を
認識できるようになります

221
00:13:40,587 --> 00:13:45,993
旅行代理業務の例では
利用者の要望が判明したら

222
00:13:46,093 --> 00:13:50,430
次に関連語を
認識する必要があります

223
00:13:50,531 --> 00:13:54,701
航空券が希望なら
出発地と目的地は？

224
00:13:55,435 --> 00:13:57,971
単語のタグ付け器が―

225
00:13:58,172 --> 00:14:01,208
文章内の用語を認識します

226
00:13:58,172 --> 00:14:01,208
文章内の用語を認識します

227
00:14:02,242 --> 00:14:04,344
もっと踏み込むと―

228
00:14:04,444 --> 00:14:07,514
文を句に
区切ることもできます

229
00:14:07,614 --> 00:14:10,818
名詞句 動詞句 前置詞句

230
00:14:10,918 --> 00:14:15,522
単語のタグ付け器を
訓練すれば可能です

231
00:14:15,689 --> 00:14:18,792
他にも
さまざまな種類のタスクを―

232
00:14:19,226 --> 00:14:21,929
ラベル付けできます

233
00:14:22,029 --> 00:14:26,500
テキストの一部や
大量のテキストにも―

234
00:14:26,600 --> 00:14:30,270
ラベル付けは実行可能です

235
00:14:33,607 --> 00:14:36,610
これらは
教師あり機械学習で―

236
00:14:36,710 --> 00:14:40,080
常に２つの段階が含まれます

237
00:14:40,180 --> 00:14:43,584
１つ目は訓練
２つ目は推論です

238
00:14:43,684 --> 00:14:47,988
訓練は開発のプロセスで
行われます

239
00:14:48,155 --> 00:14:51,492
ラベル付きの訓練データを―

240
00:14:51,892 --> 00:14:56,230
Create MLに入力し
モデルを作成します

241
00:14:57,164 --> 00:15:00,300
推論はアプリケーションに―

242
00:14:57,164 --> 00:15:00,300
推論はアプリケーションに―

243
00:15:00,400 --> 00:15:03,270
モデルを入れた時に行われます

244
00:15:03,370 --> 00:15:07,641
ユーザからの
データを受け取ると―

245
00:15:07,741 --> 00:15:11,778
データを分析し
ラベルを認識します

246
00:15:11,945 --> 00:15:14,181
詳しく説明しましょう

247
00:15:14,848 --> 00:15:19,219
訓練は常に
データから始まります

248
00:15:19,319 --> 00:15:21,021
訓練データを―

249
00:15:21,355 --> 00:15:25,159
Create MLに入力します

250
00:15:25,259 --> 00:15:29,596
Create MLのセッションで
説明されたように―

251
00:15:30,230 --> 00:15:32,432
スクリプトを使用します

252
00:15:32,566 --> 00:15:37,571
Natural Languageを通して
Create MLは訓練します

253
00:15:37,938 --> 00:15:41,575
Core MLモデルが
出力されます

254
00:15:41,675 --> 00:15:44,812
デバイスに
最適化されたものです

255
00:15:45,846 --> 00:15:48,649
データの例をお見せします

256
00:15:48,849 --> 00:15:53,120
Create MLは複数の
データ形式に対応しています

257
00:15:53,220 --> 00:15:58,959
JSONのコードが見やすいので
JSON形式を紹介します

258
00:15:59,092 --> 00:16:01,995
お見せしているのは―

259
00:15:59,092 --> 00:16:01,995
お見せしているのは―

260
00:16:02,329 --> 00:16:06,099
テキスト分類器を
訓練するデータです

261
00:16:06,200 --> 00:16:07,701
感情を識別させます

262
00:16:07,801 --> 00:16:10,370
それぞれのデータは―

263
00:16:11,071 --> 00:16:13,674
２つのパーツから成ります

264
00:16:13,774 --> 00:16:18,345
テキストのかたまりと
適切なラベルです

265
00:16:18,579 --> 00:16:22,482
この文は
肯定的とラベルされています

266
00:16:22,583 --> 00:16:25,085
ラベルは自由に設定できます

267
00:16:27,721 --> 00:16:30,757
Create MLを
使ってみましょう

268
00:16:30,858 --> 00:16:33,961
わずか数行のコードで―

269
00:16:34,061 --> 00:16:36,830
簡単にモデルを訓練できます

270
00:16:36,930 --> 00:16:38,332
１行目で―

271
00:16:38,599 --> 00:16:42,703
JSON形式の訓練データを
読み込みます

272
00:16:42,803 --> 00:16:46,406
JSONファイルのURLを入力し

273
00:16:46,507 --> 00:16:49,209
テーブルを作ります

274
00:16:49,910 --> 00:16:51,545
そして２行目で―

275
00:16:51,645 --> 00:16:55,616
テキスト分類器を作成し
訓練します

276
00:16:55,716 --> 00:17:00,053
訓練に使うテキストと
ラベルを指定し―

277
00:16:55,716 --> 00:17:00,053
訓練に使うテキストと
ラベルを指定し―

278
00:17:01,388 --> 00:17:05,459
完成したモデルの
保存先を指定します

279
00:17:07,194 --> 00:17:12,165
単語のタグ付け器の場合は
もう少し複雑です

280
00:17:12,266 --> 00:17:15,102
例が１つのテキストではなく

281
00:17:15,202 --> 00:17:17,971
連続するトークンだからです

282
00:17:18,704 --> 00:17:21,241
すべてのトークンに―

283
00:17:21,340 --> 00:17:24,744
ラベルが１つ付いています

284
00:17:24,845 --> 00:17:27,814
この訓練データは―

285
00:17:27,915 --> 00:17:32,152
固有名詞を
抽出するためのものです

286
00:17:32,352 --> 00:17:35,856
それぞれの単語に
ラベルがあります

287
00:17:35,956 --> 00:17:39,259
固有名詞でない場合は
“NONE”

288
00:17:39,359 --> 00:17:43,664
組織名には“ORG”
商品名には“PROD”

289
00:17:43,764 --> 00:17:48,035
他にもさまざまなラベルを
作れます

290
00:17:48,135 --> 00:17:50,370
各トークンにラベルがあり

291
00:17:50,671 --> 00:17:53,674
１つの文章はトークンと―

292
00:17:53,774 --> 00:17:57,110
ラベルで構成されています

293
00:17:58,512 --> 00:18:03,283
Create MLの使い方は
ほぼ同じです

294
00:17:58,512 --> 00:18:03,283
Create MLの使い方は
ほぼ同じです

295
00:18:03,917 --> 00:18:08,755
訓練データを読み込んで
テーブルを作成

296
00:18:10,157 --> 00:18:15,596
単語のタグ付け器を作成し
訓練をしたら―

297
00:18:15,863 --> 00:18:18,131
最後に保存します

298
00:18:18,232 --> 00:18:23,270
Create MLには他にも
機能やAPIがあります

299
00:18:23,370 --> 00:18:28,809
さらに詳しい情報については
Create MLの―

300
00:18:28,909 --> 00:18:32,579
ドキュメンテーションを
ご覧ください

301
00:18:32,980 --> 00:18:36,517
モデルが完成したら
次は推論です

302
00:18:36,617 --> 00:18:39,987
Xcodeのプロジェクトに
モデルを入れると

303
00:18:40,087 --> 00:18:44,324
モデルがリソースに
組み込まれます

304
00:18:44,424 --> 00:18:46,493
使い方は あなた次第

305
00:18:46,593 --> 00:18:51,265
汎用のCore MLモデルと
同様に使えます

306
00:18:51,365 --> 00:18:54,501
そして これらのモデルは―

307
00:18:54,601 --> 00:18:58,972
汎用モデルと
同じように扱えます

308
00:18:59,273 --> 00:19:03,977
つまりNatural Languageの
APIを―

309
00:18:59,273 --> 00:19:03,977
つまりNatural Languageの
APIを―

310
00:19:04,111 --> 00:19:05,612
利用できるのです

311
00:19:06,580 --> 00:19:10,684
推論では
入ってきたデータを―

312
00:19:11,218 --> 00:19:13,420
Natural Languageに渡します

313
00:19:14,021 --> 00:19:17,257
モデルを使って認識し―

314
00:19:17,357 --> 00:19:19,927
ラベルを抽出します

315
00:19:20,027 --> 00:19:23,730
結果は
文のラベルなら分類器に

316
00:19:23,831 --> 00:19:27,501
単語ラベルなら
タグ付け器に渡されます

317
00:19:30,304 --> 00:19:34,041
Natural Languageを使って
ご説明します

318
00:19:34,241 --> 00:19:37,211
まずはリソースの中の―

319
00:19:37,311 --> 00:19:39,880
モデルを選択します

320
00:19:39,980 --> 00:19:45,219
そしてNL Modelの
インスタンスを作成

321
00:19:45,953 --> 00:19:50,924
インスタンスに
テキストを入れるだけで―

322
00:19:51,024 --> 00:19:54,161
ラベルが抽出されます

323
00:19:54,628 --> 00:19:57,064
これらのモデルは―

324
00:19:57,197 --> 00:20:00,701
NLTaggerと連携可能です

325
00:19:57,197 --> 00:20:00,701
NLTaggerと連携可能です

326
00:20:01,502 --> 00:20:05,305
汎用モデルと
まったく同じように―

327
00:20:05,639 --> 00:20:07,941
使うことができます

328
00:20:08,075 --> 00:20:09,843
実際にやってみます

329
00:20:10,310 --> 00:20:13,113
タグのスキームは―

330
00:20:13,213 --> 00:20:16,283
品詞タグ付けに限りません

331
00:20:16,750 --> 00:20:20,287
自由に作ることができます

332
00:20:21,755 --> 00:20:26,960
タグ付け器のタグスキームは
数を調整できます

333
00:20:27,060 --> 00:20:30,898
カスタムタグや
汎用タグを選択します

334
00:20:32,232 --> 00:20:35,202
使うタグとモデルを―

335
00:20:35,302 --> 00:20:38,438
タグ付け器に教えます

336
00:20:39,807 --> 00:20:42,910
その他は すべて同じです

337
00:20:43,143 --> 00:20:46,580
タグ付け器に
文字列を入れると

338
00:20:46,680 --> 00:20:48,248
タグが得られます

339
00:20:48,782 --> 00:20:53,787
モデルに合わせて
テキストの長さを変えます

340
00:20:54,521 --> 00:20:58,759
タグ付け器は必要に応じ
モデルを呼び出します

341
00:20:58,859 --> 00:21:02,696
タグを抽出するために
必要なことは―

342
00:20:58,859 --> 00:21:02,696
タグを抽出するために
必要なことは―

343
00:21:02,796 --> 00:21:05,299
NLTaggerが自動で行います

344
00:21:05,399 --> 00:21:08,936
言語の識別や
トークン化などです

345
00:21:10,003 --> 00:21:14,341
例を使って
説明していきましょう

346
00:21:14,541 --> 00:21:19,246
これは架空の
アプリケーションです

347
00:21:19,847 --> 00:21:24,117
記事をブックマークに
保存して―

348
00:21:24,218 --> 00:21:26,587
後で読むことができます

349
00:21:27,221 --> 00:21:30,257
でも１つ課題があります

350
00:21:30,357 --> 00:21:35,262
ブックマークが
整理されていないのです

351
00:21:35,462 --> 00:21:39,833
これらの記事を
自動的に分類し―

352
00:21:40,167 --> 00:21:43,036
トピックごとに整理したい

353
00:21:43,537 --> 00:21:46,507
分類器を訓練しましょう

354
00:21:47,007 --> 00:21:51,712
記事は ひと続きの
長いテキストです

355
00:21:52,279 --> 00:21:56,650
興味のある部分を
ハイライトしたい

356
00:21:56,750 --> 00:21:58,552
例えば固有名詞です

357
00:21:58,719 --> 00:22:02,656
汎用の
固有名詞識別機能で―

358
00:21:58,719 --> 00:22:02,656
汎用の
固有名詞識別機能で―

359
00:22:02,756 --> 00:22:05,826
人名や地名
組織名を識別できます

360
00:22:06,326 --> 00:22:09,062
でも商品名を識別するには―

361
00:22:09,162 --> 00:22:13,734
単語のタグ付け器の
訓練が必要です

362
00:22:15,269 --> 00:22:17,504
デモをお見せしましょう

363
00:22:22,843 --> 00:22:25,312
このアプリケーションは―

364
00:22:25,412 --> 00:22:29,216
自然言語処理を
行う前の状態です

365
00:22:29,316 --> 00:22:33,153
左側に整理されてない
記事のリスト

366
00:22:33,253 --> 00:22:35,989
右側にテキストがあります

367
00:22:36,089 --> 00:22:37,824
改善しましょう

368
00:22:38,625 --> 00:22:39,560
では―

369
00:22:40,360 --> 00:22:41,695
始めます

370
00:22:42,129 --> 00:22:46,934
モデルを訓練するには
データが必要です

371
00:22:47,100 --> 00:22:50,571
ありがたいことに
同僚たちが―

372
00:22:50,671 --> 00:22:54,608
訓練データを
集めてくれました

373
00:22:54,708 --> 00:22:57,978
最初のモデルは
テキスト分類器を使って―

374
00:22:58,078 --> 00:23:00,647
トピックで記事を分類します

375
00:22:58,078 --> 00:23:00,647
トピックで記事を分類します

376
00:23:00,747 --> 00:23:03,484
こちらが訓練データです

377
00:23:03,650 --> 00:23:07,788
文章とラベルで
構成されており―

378
00:23:07,988 --> 00:23:12,826
ラベルは娯楽や政治
スポーツなどのトピックです

379
00:23:15,429 --> 00:23:20,868
こちらは単語のタグ付け器を
訓練するデータです

380
00:23:21,168 --> 00:23:26,006
文章に含まれている
商品名を認識します

381
00:23:26,173 --> 00:23:28,475
データはシンプルです

382
00:23:28,609 --> 00:23:32,012
文章で構成されていて―

383
00:23:32,112 --> 00:23:35,449
単語ごとに
ラベルが付いています

384
00:23:35,549 --> 00:23:39,386
固有名詞でなければ“NONE”

385
00:23:39,486 --> 00:23:41,622
商品名には“PROD”です

386
00:23:43,590 --> 00:23:46,760
では訓練をしてみましょう

387
00:23:47,060 --> 00:23:49,229
それでは まず―

388
00:23:49,596 --> 00:23:54,501
Create MLを使っている
Playgroundを開きます

389
00:23:54,902 --> 00:23:57,771
開いているところです

390
00:23:57,905 --> 00:24:01,542
これは商品名のタグ付け器です

391
00:23:57,905 --> 00:24:01,542
これは商品名のタグ付け器です

392
00:24:01,642 --> 00:24:05,679
データを読み込み
単語のタグ付け器を作成

393
00:24:05,779 --> 00:24:08,682
ディスクに書き出します

394
00:24:09,383 --> 00:24:12,553
データを読み込みました

395
00:24:13,020 --> 00:24:16,323
トークン化と特徴抽出が―

396
00:24:16,423 --> 00:24:19,293
裏で自動的に行われます

397
00:24:19,393 --> 00:24:21,995
このモデルは小さいので―

398
00:24:22,095 --> 00:24:24,932
あまり時間はかかりません

399
00:24:25,265 --> 00:24:30,137
モデルをデスクトップに
保存するよう―

400
00:24:30,237 --> 00:24:31,872
設定しました

401
00:24:31,972 --> 00:24:33,240
これですね

402
00:24:36,143 --> 00:24:37,945
今のが１つです

403
00:24:38,545 --> 00:24:42,983
次はテキスト分類器の
Playgroundを立ち上げます

404
00:24:43,083 --> 00:24:46,420
訓練データを読み込み―

405
00:24:47,321 --> 00:24:50,657
テキスト分類器を作り
保存します

406
00:24:51,592 --> 00:24:54,495
では やってみましょう

407
00:24:55,062 --> 00:24:57,297
データを読み込み

408
00:24:57,397 --> 00:25:01,068
トークン化と
特徴抽出を行います

409
00:24:57,397 --> 00:25:01,068
トークン化と
特徴抽出を行います

410
00:25:01,168 --> 00:25:04,338
大きいモデルなので
数分 必要です

411
00:25:04,438 --> 00:25:07,808
モデルが
できるまでの間に―

412
00:25:08,041 --> 00:25:12,346
これらのモデルを使う
コードを見ましょう

413
00:25:12,646 --> 00:25:16,950
とても小さなクラスを
２つ書きました

414
00:25:17,050 --> 00:25:19,553
１つはテキスト分類器です

415
00:25:19,953 --> 00:25:24,024
リソースから
モデルを見つけて―

416
00:25:24,124 --> 00:25:26,193
NLModelを作ります

417
00:25:26,760 --> 00:25:29,429
記事に対して―

418
00:25:30,430 --> 00:25:34,368
１つのラベルを
出力するようにさせます

419
00:25:34,568 --> 00:25:36,870
やることは以上です

420
00:25:38,405 --> 00:25:41,241
単語のタグ付け器の場合は―

421
00:25:41,341 --> 00:25:43,911
追加のコードが必要です

422
00:25:44,077 --> 00:25:47,448
先ほどと同じように―

423
00:25:47,881 --> 00:25:50,551
商品名抽出の例を使います

424
00:25:50,851 --> 00:25:54,555
知りたいのは
商品名だけなので

425
00:25:54,655 --> 00:25:57,090
専用のタグを作ります

426
00:25:58,258 --> 00:26:02,095
再びリソースから
モデルを見つけ―

427
00:25:58,258 --> 00:26:02,095
再びリソースから
モデルを見つけ―

428
00:26:02,696 --> 00:26:06,934
NLModelと
NLTaggerを作成します

429
00:26:07,034 --> 00:26:10,170
NLTaggerに
２つのスキームを設定

430
00:26:10,270 --> 00:26:15,609
１つは汎用モデルを使った
固有名詞の抽出

431
00:26:15,709 --> 00:26:18,345
１つは独自の商品名抽出

432
00:26:18,445 --> 00:26:20,848
設定の仕方は同じです

433
00:26:21,482 --> 00:26:25,252
独自のスキームのため
タグ付け器には―

434
00:26:25,352 --> 00:26:27,154
専用モデルを使います

435
00:26:27,654 --> 00:26:32,493
対応する言語の数だけ
モデルを使います

436
00:26:34,495 --> 00:26:37,798
それでは次に進みます

437
00:26:37,898 --> 00:26:40,500
記事の中から―

438
00:26:40,601 --> 00:26:44,371
抽出された固有名詞を
ハイライトします

439
00:26:44,471 --> 00:26:49,343
ハイライトするために
属性情報を追加します

440
00:26:49,977 --> 00:26:55,382
“string”を
タグ付け器に入力します

441
00:26:55,916 --> 00:26:59,486
タグに対して
次の処理を実行します

442
00:26:59,586 --> 00:27:03,123
１つ目は
汎用モデルを使って―

443
00:26:59,586 --> 00:27:03,123
１つ目は
汎用モデルを使って―

444
00:27:03,457 --> 00:27:07,127
人名や地名
組織名を抽出します

445
00:27:07,294 --> 00:27:12,332
抽出された中に
特定のものを見つけたら―

446
00:27:12,666 --> 00:27:16,069
ハイライトの属性を
追加します

447
00:27:16,170 --> 00:27:18,338
色の変更などです

448
00:27:20,207 --> 00:27:24,278
カスタムモデルでも
方法は同じです

449
00:27:24,778 --> 00:27:28,549
商品名抽出機能を使って
探し出します

450
00:27:29,550 --> 00:27:34,021
特定のものを見つけたら
ハイライトします

451
00:27:34,121 --> 00:27:38,025
同じように色を変えましょう

452
00:27:38,992 --> 00:27:43,597
Natural Languageの中では
汎用モデルと同等に―

453
00:27:43,697 --> 00:27:47,167
専用モデルも
使うことができます

454
00:27:47,468 --> 00:27:49,736
Playgroundに戻りましょう

455
00:27:49,837 --> 00:27:52,506
訓練が終わっています

456
00:27:52,606 --> 00:27:56,376
デスクトップに
２つのモデルが現れました

457
00:27:57,978 --> 00:28:01,482
Playgroundにドラッグします

458
00:27:57,978 --> 00:28:01,482
Playgroundにドラッグします

459
00:28:02,049 --> 00:28:03,717
まずは―

460
00:28:04,251 --> 00:28:06,487
これをドラッグします

461
00:28:08,288 --> 00:28:09,456
できました

462
00:28:11,892 --> 00:28:15,062
そして もう１つも―

463
00:28:15,929 --> 00:28:17,731
ドラッグします

464
00:28:18,565 --> 00:28:22,669
Xcodeがモデルを
自動でコンパイルします

465
00:28:22,770 --> 00:28:26,373
あとはビルドして
実行するだけ

466
00:28:31,311 --> 00:28:34,681
Playgroundは
閉じておきましょう

467
00:28:34,815 --> 00:28:38,952
さっきと違い
今度は記事のリストが―

468
00:28:39,052 --> 00:28:42,623
トピック別に
分類されています

469
00:28:45,826 --> 00:28:50,531
１つの記事を選んで
開いてみましょう

470
00:28:50,631 --> 00:28:54,001
固有名詞が
ハイライトされています

471
00:28:54,101 --> 00:28:56,937
汎用の抽出機能を使って―

472
00:28:57,037 --> 00:28:59,973
人名や地名が
抽出されています

473
00:29:00,107 --> 00:29:01,909
さらに見ていくと

474
00:29:02,342 --> 00:29:06,313
商品名抽出機能を使って―

475
00:29:06,513 --> 00:29:12,052
iPadやMacBookなどの
商品名が抽出されています

476
00:29:13,487 --> 00:29:18,525
Natural Languageでは
簡単に専用モデルが作れ

477
00:29:18,625 --> 00:29:22,729
簡単に使えることを
お見せしました

478
00:29:24,431 --> 00:29:30,804
(拍手)

479
00:29:30,904 --> 00:29:33,640
次はヴィヴェクが―

480
00:29:33,740 --> 00:29:37,911
訓練における
重要事項を説明します

481
00:29:40,480 --> 00:29:43,851
(拍手)

482
00:29:43,984 --> 00:29:46,820
ダグ　説明ありがとう

483
00:29:46,920 --> 00:29:50,290
Natural Languageと
機械学習が―

484
00:29:50,390 --> 00:29:53,427
強力に連携できています

485
00:29:53,794 --> 00:29:57,664
この新しいAPIを
ぜひ活用してください

486
00:29:58,799 --> 00:30:02,169
パフォーマンスについて
お話しします

487
00:29:58,799 --> 00:30:02,169
パフォーマンスについて
お話しします

488
00:30:03,036 --> 00:30:07,641
Natural Languageは
あらゆるデバイスで使えて

489
00:30:08,041 --> 00:30:12,412
標準化したテキスト処理を
提供します

490
00:30:13,080 --> 00:30:15,949
詳しく説明していきましょう

491
00:30:16,350 --> 00:30:21,255
従来の機械学習では
Create MLを使っていません

492
00:30:21,455 --> 00:30:24,525
訓練データから始めます

493
00:30:25,259 --> 00:30:29,329
データをトークン化し
特徴を抽出します

494
00:30:29,429 --> 00:30:34,535
中国語や日本語には
トークン化は特に重要です

495
00:30:35,335 --> 00:30:37,971
ツールキットに入れ―

496
00:30:38,372 --> 00:30:41,375
機械学習のモデルを作ります

497
00:30:41,942 --> 00:30:44,845
モデルをデバイスで
使うためには―

498
00:30:44,945 --> 00:30:47,414
Core MLモデルに変換します

499
00:30:47,881 --> 00:30:51,018
変換ツールで変換します

500
00:30:51,418 --> 00:30:54,288
これが学習したモデルを―

501
00:30:54,388 --> 00:30:58,358
デバイスで
使うための流れです

502
00:30:59,827 --> 00:31:02,696
推論の段階では―

503
00:30:59,827 --> 00:31:02,696
推論の段階では―

504
00:31:02,796 --> 00:31:06,567
アプリケーションに
モデルを組み込みます

505
00:31:07,134 --> 00:31:11,004
さらにモデルを
トークン化し―

506
00:31:11,104 --> 00:31:14,942
訓練と同じように
特徴を抽出します

507
00:31:16,510 --> 00:31:20,647
訓練と同じ環境で
使うことが大事です

508
00:31:20,747 --> 00:31:24,651
抽出した特徴を
トークン化する過程は―

509
00:31:24,751 --> 00:31:27,254
訓練と推論で統一すべきです

510
00:31:27,821 --> 00:31:31,492
Natural Languageを使えば
問題ありません

511
00:31:31,725 --> 00:31:36,196
訓練の時には
訓練データを入力します

512
00:31:37,197 --> 00:31:40,500
Create MLが処理します

513
00:31:41,068 --> 00:31:43,437
Natural Languageが呼び出され

514
00:31:43,537 --> 00:31:46,140
特徴を抽出しトークン化する

515
00:31:46,306 --> 00:31:49,009
機械学習ライブラリが選ばれ

516
00:31:49,143 --> 00:31:52,212
Core MLモデルを返します

517
00:31:53,046 --> 00:31:57,217
推論ではアプリケーションに
モデルを組み込みます

518
00:31:58,151 --> 00:32:01,522
特徴抽出と
トークン化については―

519
00:31:58,151 --> 00:32:01,522
特徴抽出と
トークン化については―

520
00:32:01,622 --> 00:32:04,458
コードを書く必要は
ありません

521
00:32:04,558 --> 00:32:07,161
Natural Languageが
処理します

522
00:32:07,261 --> 00:32:11,365
皆さんはモデルを
組み込むだけです

523
00:32:13,767 --> 00:32:16,703
Natural Languageの
他の特徴は―

524
00:32:16,803 --> 00:32:19,640
ハードウェアへの最適化です

525
00:32:19,907 --> 00:32:22,643
例を使って説明します

526
00:32:23,710 --> 00:32:28,448
ダグが説明した内容について
性能比較をします

527
00:32:28,549 --> 00:32:32,386
比較するモデルを
作成した環境は―

528
00:32:32,486 --> 00:32:35,522
CRFSuiteと
Natural Languageです

529
00:32:35,622 --> 00:32:40,661
同じ訓練データと
試験データを使っています

530
00:32:40,761 --> 00:32:45,365
同じ特徴が使われており
認識精度は同じです

531
00:32:45,666 --> 00:32:49,203
Natural Languageは
モデルサイズが小さく―

532
00:32:49,336 --> 00:32:52,639
固有表現抽出の
モデルサイズは1.4MB

533
00:32:52,740 --> 00:32:56,276
チャンク化のモデルサイズは
1.8MBです

534
00:32:56,443 --> 00:33:00,180
アプリケーションの
容量を節約できます

535
00:32:56,443 --> 00:33:00,180
アプリケーションの
容量を節約できます

536
00:33:02,883 --> 00:33:07,621
機械学習アルゴリズムを
２つサポートします

537
00:33:08,355 --> 00:33:12,726
テキスト分類器に
指定できるアルゴリズムは

538
00:33:12,893 --> 00:33:16,296
１つは最大エントロピーです

539
00:33:16,497 --> 00:33:20,801
多項ロジスティック回帰モデルに
基づいた―

540
00:33:20,901 --> 00:33:23,303
アルゴリズムです

541
00:33:23,804 --> 00:33:27,608
１つは条件付き確率場の
アルゴリズムです

542
00:33:28,575 --> 00:33:31,712
用途によって選んでください

543
00:33:31,812 --> 00:33:35,616
両方を試して
比較することを勧めます

544
00:33:37,117 --> 00:33:41,788
単語のタグ付けのデフォルトは
条件付き確率場です

545
00:33:41,889 --> 00:33:45,726
単語のタグ付け器を作ると―

546
00:33:46,026 --> 00:33:49,463
条件付き確率場が使われます

547
00:33:50,497 --> 00:33:53,934
どちらを選ぶかは
用途によります

548
00:33:54,268 --> 00:33:55,936
開発の合間に―

549
00:33:56,036 --> 00:34:00,107
プログラムを書けるほど
簡単なのです

550
00:33:56,036 --> 00:34:00,107
プログラムを書けるほど
簡単なのです

551
00:34:00,207 --> 00:34:04,178
アイデアが決まったら
アプリケーションを開発する

552
00:34:04,278 --> 00:34:08,415
機械学習も
同じ流れだと気づくでしょう

553
00:34:08,916 --> 00:34:11,585
最初にデータを必要とし

554
00:34:11,685 --> 00:34:15,121
データを得たら
疑問が生まれます

555
00:34:15,556 --> 00:34:18,324
訓練データが確かなものか

556
00:34:18,425 --> 00:34:21,661
偽物のデータや
汚染データがないか

557
00:34:22,262 --> 00:34:26,433
データの検証後は各クラスの
インスタンスを調べます

558
00:34:26,533 --> 00:34:29,303
感情認識を訓練するとします

559
00:34:29,402 --> 00:34:33,739
数千の肯定データに対し
５個の否定データだと―

560
00:34:33,841 --> 00:34:39,379
バランスが悪く
安定的なモデルが作れません

561
00:34:39,478 --> 00:34:44,016
クラス間でバランスのよい
サンプル数が必要です

562
00:34:44,818 --> 00:34:48,554
それができたら
次は訓練です

563
00:34:48,755 --> 00:34:53,159
訓練のオプションは
両方を試して―

564
00:34:53,659 --> 00:34:55,228
比較してください

565
00:34:55,429 --> 00:34:59,566
アプリケーションに
適合した方を―

566
00:34:59,666 --> 00:35:01,969
選ぶとよいでしょう

567
00:34:59,666 --> 00:35:01,969
選ぶとよいでしょう

568
00:35:02,069 --> 00:35:05,639
その次のステップは評価です

569
00:35:07,174 --> 00:35:12,412
機械学習の評価は
同じ訓練データを使い―

570
00:35:12,679 --> 00:35:17,618
訓練データを訓練用
検証用 テスト用に分けます

571
00:35:17,718 --> 00:35:22,956
検証用でアルゴリズムを調整
テスト用でテストします

572
00:35:23,056 --> 00:35:26,493
機械学習に使われている―

573
00:35:26,593 --> 00:35:29,129
この基準に従いましょう

574
00:35:29,897 --> 00:35:33,967
対象外のデータも
テストすべきです

575
00:35:34,067 --> 00:35:37,104
例えば
アプリケーションを開発中で

576
00:35:37,204 --> 00:35:41,809
機械学習モデルに
データを取り込むとします

577
00:35:42,209 --> 00:35:46,413
ホテルのレビューを
分類しようとしています

578
00:35:46,513 --> 00:35:50,718
学習したモデルに
レビューが入力されます

579
00:35:51,418 --> 00:35:54,822
対象外のデータを
受け取りました

580
00:35:54,922 --> 00:35:58,559
おそらく飲食店か
映画のレビューです

581
00:35:58,659 --> 00:36:01,094
モデルの安定性を―

582
00:35:58,659 --> 00:36:01,094
モデルの安定性を―

583
00:36:01,562 --> 00:36:03,697
評価しましょう

584
00:36:04,097 --> 00:36:07,801
従来 バグを修正する際―

585
00:36:07,901 --> 00:36:11,939
パッチを書いて
アップデートします

586
00:36:12,406 --> 00:36:14,208
では機械学習では？

587
00:36:15,943 --> 00:36:19,079
問題を修正するには―

588
00:36:19,179 --> 00:36:25,018
モデルの弱点を見つけて
適切なデータで補います

589
00:36:25,185 --> 00:36:29,656
データを追加し
モデルを再訓練するのです

590
00:36:29,757 --> 00:36:34,461
この修正の手順は
開発手順そのものです

591
00:36:34,561 --> 00:36:37,097
モデルは織物と同じ

592
00:36:37,197 --> 00:36:40,634
機械学習を
使うということは―

593
00:36:40,734 --> 00:36:43,871
言葉を紡いでいくことです

594
00:36:45,939 --> 00:36:49,109
最後はプライバシーです

595
00:36:49,443 --> 00:36:51,612
今日 紹介したものは―

596
00:36:52,246 --> 00:36:57,518
機械学習も自然言語処理も
デバイスで行われます

597
00:36:57,851 --> 00:37:00,154
プライバシーは大切です

598
00:36:57,851 --> 00:37:00,154
プライバシーは大切です

599
00:37:00,254 --> 00:37:03,724
機械学習を
デバイスで処理し―

600
00:37:03,824 --> 00:37:06,293
プライバシーを保護します

601
00:37:06,627 --> 00:37:10,264
つまり
Natural Languageは―

602
00:37:10,364 --> 00:37:14,535
プライバシーを保護した
機械学習といえます

603
00:37:16,169 --> 00:37:17,371
まとめです

604
00:37:18,438 --> 00:37:22,109
Natural Language
フレームワークは―

605
00:37:22,309 --> 00:37:25,446
Appleの機械学習と密に連携

606
00:37:25,546 --> 00:37:28,182
Create MLで
モデルを訓練し

607
00:37:28,682 --> 00:37:33,086
Core MLか
Natural Languageで認識する

608
00:37:34,321 --> 00:37:38,325
Natural Languageで作った
モデルは効率が高く―

609
00:37:38,425 --> 00:37:41,729
全デバイスに
最適化されています

610
00:37:42,196 --> 00:37:44,832
機械学習をデバイスで行い

611
00:37:44,932 --> 00:37:48,669
ユーザのプライバシーを
保護します

612
00:37:51,004 --> 00:37:54,341
さらに詳しい情報は
こちらまで

613
00:37:54,441 --> 00:37:57,544
明日のラボに
ぜひ お越しください

614
00:37:57,644 --> 00:38:02,950
アプリケーションの相談や
質問も歓迎します

615
00:37:57,644 --> 00:38:02,950
アプリケーションの相談や
質問も歓迎します

616
00:38:03,684 --> 00:38:05,452
他の機械学習や―

617
00:38:05,552 --> 00:38:09,823
Create MLなどの
紹介もします

618
00:38:09,923 --> 00:38:13,460
皆さんのお越しを
お待ちしています

619
00:38:13,694 --> 00:38:16,096
以上で終わります

620
00:38:16,196 --> 00:38:18,665
(拍手)