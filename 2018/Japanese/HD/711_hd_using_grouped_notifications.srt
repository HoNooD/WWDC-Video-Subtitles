
1
00:00:07,140 --> 00:00:16,416
(音楽)

2
00:00:18,619 --> 00:00:23,290
(拍手)

3
00:00:23,457 --> 00:00:26,026
こんにちは　ようこそ

4
00:00:26,226 --> 00:00:30,264
iOS User Notificationsチームの
ミケーレです

5
00:00:31,431 --> 00:00:36,837
先ほど同僚が
グループ通知をご紹介しました

6
00:00:36,937 --> 00:00:40,340
このセッションでは
少し詳しく

7
00:00:40,440 --> 00:00:43,010
この機能について説明します

8
00:00:43,110 --> 00:00:48,415
内容は 基本的な使い方や
通知の効率性を高める方法

9
00:00:48,515 --> 00:00:50,684
整理方法などです

10
00:00:52,653 --> 00:00:55,322
まずはこの機能の概要や

11
00:00:55,422 --> 00:00:59,293
インターフェイスについて
お話しします

12
00:00:59,626 --> 00:01:03,163
そして
Appグループ化

13
00:00:59,626 --> 00:01:03,163
そして
Appグループ化

14
00:01:03,297 --> 00:01:06,066
さらにカスタムグループ化

15
00:01:06,166 --> 00:01:11,405
Appのコンテンツに
適用するためのグループです

16
00:01:12,472 --> 00:01:17,511
最後に カスタムサマリを
ご紹介します

17
00:01:21,682 --> 00:01:24,852
まずは概要をご説明します

18
00:01:26,520 --> 00:01:27,821
通知グループとは

19
00:01:27,921 --> 00:01:34,094
様々な通知が１つに
まとめられたグループです

20
00:01:34,194 --> 00:01:37,564
これによりNotification Centerが
整理され

21
00:01:37,664 --> 00:01:40,734
ユーザ側の効率性が
高まります

22
00:01:40,834 --> 00:01:44,605
特定のアプリケーションからの
通知が

23
00:01:44,705 --> 00:01:48,909
画面を占領することも
なくなります

24
00:01:50,511 --> 00:01:56,450
最新の通知は通知グループの
一番上に表示されます

25
00:01:56,550 --> 00:01:59,152
これをトップ通知と呼びます

26
00:02:00,187 --> 00:02:03,857
その下には
サマリが表示され

27
00:02:03,957 --> 00:02:08,895
グループに含まれる通知の
内容を示します

28
00:02:08,996 --> 00:02:14,334
ここにはグループに含まれる
通知の件数が表示され

29
00:02:14,434 --> 00:02:19,406
通知内容の詳細が
表示されることもあります

30
00:02:22,543 --> 00:02:25,846
通知グループは
情報選別にも役立ちます

31
00:02:25,946 --> 00:02:29,716
例えば
グループ内のすべての通知を

32
00:02:29,816 --> 00:02:32,853
ワンスライドで消去できます

33
00:02:33,887 --> 00:02:39,359
グループを展開し
すべての通知を見るのも簡単です

34
00:02:39,459 --> 00:02:42,563
１つずつ読んで
１つずつ消去できます

35
00:02:42,663 --> 00:02:45,532
読み終えたら
トップのボタンで

36
00:02:45,632 --> 00:02:48,535
一括で消去することも
できます

37
00:02:52,072 --> 00:02:57,077
インターフェイスや専門用語に
慣れていただくために

38
00:02:57,511 --> 00:03:01,615
概要をごく簡単に
ご説明しました

39
00:02:57,511 --> 00:03:01,615
概要をごく簡単に
ご説明しました

40
00:03:01,915 --> 00:03:06,186
では グループの仕組みを
見ていきましょう

41
00:03:07,521 --> 00:03:09,923
デフォルトの
Appグループ化では

42
00:03:10,557 --> 00:03:13,894
アプリケーションごとに
グループが作られます

43
00:03:13,994 --> 00:03:16,830
すべての通知がそこに入ります

44
00:03:17,064 --> 00:03:21,935
初期設定のままで
新しいAPIを使わなければ

45
00:03:22,035 --> 00:03:25,706
通知はそこに送られ続けます

46
00:03:27,508 --> 00:03:32,179
多くの場合
このグループ化機能で十分です

47
00:03:32,279 --> 00:03:37,284
例えば Podcast Appの通知は
すべて同じグループに入ります

48
00:03:37,684 --> 00:03:41,788
Podcastの通知は
どれも似ており

49
00:03:41,889 --> 00:03:45,826
エピソードの到着を
知らせるものです

50
00:03:45,926 --> 00:03:49,463
興味深さや重要度は
どれも同程度なので

51
00:03:49,563 --> 00:03:53,000
区別して
表示されていないのです

52
00:03:54,902 --> 00:04:01,074
グループをタップすると
展開して詳細を確認できます

53
00:03:54,902 --> 00:04:01,074
グループをタップすると
展開して詳細を確認できます

54
00:04:06,380 --> 00:04:10,751
Appグルーピングによって
通知を整理でき

55
00:04:10,851 --> 00:04:14,087
Notification Centerを
見やすくできます

56
00:04:14,354 --> 00:04:18,325
しかし アプリケーションの
内容によっては

57
00:04:18,425 --> 00:04:23,897
より効率的な通知の方法が
必要でしょう

58
00:04:24,698 --> 00:04:27,501
そこでカスタムグループを
使います

59
00:04:27,868 --> 00:04:30,470
このセッションではまず

60
00:04:30,571 --> 00:04:34,474
カスタムグループを作るための
APIを見ます

61
00:04:34,775 --> 00:04:39,646
そして iOS 12での例を
いくつか紹介します

62
00:04:40,914 --> 00:04:43,784
その中で実際のパターンや

63
00:04:43,884 --> 00:04:49,590
どのように情報量を調整したか
詳しく見ていきます

64
00:04:49,690 --> 00:04:55,629
さらに どのように
整理されたかも見ましょう

65
00:04:57,631 --> 00:05:02,102
グループの作成方法を
ご説明します

66
00:04:57,631 --> 00:05:02,102
グループの作成方法を
ご説明します

67
00:05:02,269 --> 00:05:06,440
通知コンテンツ内に
スレッド識別子を設定するだけです

68
00:05:08,242 --> 00:05:13,580
この設定をすると
同じスレッド識別子で送った通知は

69
00:05:13,680 --> 00:05:17,150
Notification Centerで
グループ化されます

70
00:05:18,886 --> 00:05:21,121
スレッド識別子は
何でも大丈夫です

71
00:05:21,922 --> 00:05:26,360
ですが すべての通知が
グループ化されるので

72
00:05:26,760 --> 00:05:31,932
グループを特定する
一意の文字列が必要です

73
00:05:32,866 --> 00:05:36,737
これでグループが
作成されます

74
00:05:37,538 --> 00:05:41,141
しかし作成自体は簡単ですが

75
00:05:41,575 --> 00:05:44,945
どのように作るか
注意が必要です

76
00:05:46,246 --> 00:05:51,685
このAPIは
新しいものではありません

77
00:05:51,852 --> 00:05:55,122
以前のiOSで導入したもので

78
00:05:55,222 --> 00:05:58,659
現在のiOSにも存在します

79
00:05:58,859 --> 00:06:04,064
導入したのはリッチ通知と
プライベート通知のためです

80
00:05:58,859 --> 00:06:04,064
導入したのはリッチ通知と
プライベート通知のためです

81
00:06:04,164 --> 00:06:10,237
ですので この機能を使うために
APIを使用していたなら

82
00:06:10,337 --> 00:06:14,141
iOS 12で 通知は
グループ化されます

83
00:06:15,275 --> 00:06:18,011
ですが文脈が異なるので

84
00:06:18,111 --> 00:06:24,184
グループがどのように作られるか
見てみましょう

85
00:06:26,019 --> 00:06:31,658
スレッドの作成方法の例を
スライドでご覧ください

86
00:06:32,626 --> 00:06:36,830
もちろんプッシュ型に
設定できます

87
00:06:42,269 --> 00:06:47,174
では iOS 12の例を
少し見てみましょう

88
00:06:48,342 --> 00:06:54,481
ここで 最も重要なのは
通知のグループ化の目的です

89
00:06:54,948 --> 00:06:57,217
グループ化の目的は

90
00:06:57,317 --> 00:07:01,655
通知の効率性を
高めることです

91
00:06:57,317 --> 00:07:01,655
通知の効率性を
高めることです

92
00:07:01,755 --> 00:07:05,225
そしてNotification Centerを
整理することです

93
00:07:05,325 --> 00:07:10,464
誰かから大量のメッセージが
送られた場合などに

94
00:07:10,564 --> 00:07:16,336
アプリケーションから
大量の通知を受けることがあります

95
00:07:16,637 --> 00:07:21,508
これを解決するために
通知を少し整理して

96
00:07:21,608 --> 00:07:24,411
効率性を高めたいわけです

97
00:07:28,315 --> 00:07:30,551
最初の例はカレンダーです

98
00:07:33,187 --> 00:07:37,291
ライフスタイルや
勤務先によっては

99
00:07:37,524 --> 00:07:42,996
カレンダーから多くの通知が
送られてくるでしょう

100
00:07:43,931 --> 00:07:46,833
しかし
重要度はまちまちです

101
00:07:46,934 --> 00:07:51,538
一部の通知は
他の通知よりも重要でしょう

102
00:07:51,738 --> 00:07:56,076
例えばイベント作成時に
設定したアラートや

103
00:07:56,176 --> 00:08:00,347
出発時刻を知らせる
通知などです

104
00:07:56,176 --> 00:08:00,347
出発時刻を知らせる
通知などです

105
00:08:00,514 --> 00:08:05,652
すぐ行動する必要があるので
これらの通知は重要です

106
00:08:05,752 --> 00:08:08,889
“15分後に会議”と
言われたら

107
00:08:08,989 --> 00:08:11,692
歩き出さないといけません

108
00:08:12,459 --> 00:08:14,428
しかし多くの通知は

109
00:08:14,528 --> 00:08:18,665
すぐに対応する必要が
ないものです

110
00:08:18,765 --> 00:08:21,935
共有カレンダーの更新や

111
00:08:22,069 --> 00:08:27,407
後日のイベントの
時間変更かもしれないからです

112
00:08:28,342 --> 00:08:30,978
これらを区別できれば
便利です

113
00:08:31,612 --> 00:08:36,450
デフォルトでは
カレンダーからの通知はすべて

114
00:08:36,549 --> 00:08:40,087
１つのグループに
まとめられます

115
00:08:40,187 --> 00:08:45,626
スレッド識別子を設定しなければ
そうなるのです

116
00:08:45,926 --> 00:08:50,364
デフォルト値はnilで
デフォルトグループに入ります

117
00:08:51,431 --> 00:08:56,703
そこで カレンダーは
重要度が高い通知には

118
00:08:56,803 --> 00:09:00,374
特定のスレッド識別子を設定します

119
00:08:56,803 --> 00:09:00,374
特定のスレッド識別子を設定します

120
00:09:02,643 --> 00:09:04,878
結果はこうなります

121
00:09:06,113 --> 00:09:09,750
カレンダーからの
通知の大半は

122
00:09:10,117 --> 00:09:15,489
すぐに対応する必要のない
更新情報です

123
00:09:15,589 --> 00:09:18,826
後で参照する必要も
ありません

124
00:09:18,926 --> 00:09:23,130
このような通知が
グループ化されます

125
00:09:23,730 --> 00:09:27,434
一方 重要度や緊急度が
高い通知や

126
00:09:27,534 --> 00:09:31,705
後で参照したい通知も
あるでしょう

127
00:09:31,805 --> 00:09:34,007
これらは区別されます

128
00:09:36,877 --> 00:09:42,850
このグループを展開すると
他の通知も確認できます

129
00:09:44,284 --> 00:09:48,856
カレンダーで学んだことは
次のとおりです

130
00:09:49,089 --> 00:09:53,660
“対応を要する重要な通知を
更新情報と区別する”

131
00:09:58,665 --> 00:10:01,568
次の例はメッセージです

132
00:09:58,665 --> 00:10:01,568
次の例はメッセージです

133
00:10:02,703 --> 00:10:07,941
メッセージは
最も分かりやすい例かもしれません

134
00:10:08,375 --> 00:10:14,548
メッセージでは会話ごとに
１つの通知グループが作られます

135
00:10:16,083 --> 00:10:21,421
単純に見えますが
ここに大事な要素があります

136
00:10:21,788 --> 00:10:24,057
メッセージはなぜ

137
00:10:24,158 --> 00:10:28,929
会話ごとにグループを
作るのでしょうか？

138
00:10:29,630 --> 00:10:31,732
メッセージからの通知は

139
00:10:31,832 --> 00:10:36,003
通常 友人や家族から
送られるものです

140
00:10:36,103 --> 00:10:39,740
関心が高く
重要度も高いと言えます

141
00:10:39,873 --> 00:10:44,144
また これらの通知は
大抵短命です

142
00:10:44,244 --> 00:10:46,880
通常 すぐに返信するため

143
00:10:46,980 --> 00:10:49,883
Notification Centerから
すぐに消えます

144
00:10:51,818 --> 00:10:53,554
つまりメッセージは

145
00:10:53,654 --> 00:10:58,058
１対１の会話に対し
１つのスレッドを作成し

146
00:10:58,158 --> 00:11:03,297
グループ会話には
別の通知グループを作成します

147
00:10:58,158 --> 00:11:03,297
グループ会話には
別の通知グループを作成します

148
00:11:03,697 --> 00:11:08,202
スレッドに対して
グループIDが生成され

149
00:11:08,302 --> 00:11:09,837
グループ化されます

150
00:11:13,807 --> 00:11:17,311
展開すると
すべてを閲覧できます

151
00:11:18,545 --> 00:11:22,282
メッセージから学んだことは
何でしょうか？

152
00:11:22,549 --> 00:11:26,286
“意義ある連絡の
グループを作る”

153
00:11:26,487 --> 00:11:30,390
メッセージからの通知は
大抵重要で

154
00:11:30,490 --> 00:11:35,329
Notification Centerに
とどまるのは短時間です

155
00:11:35,429 --> 00:11:38,799
だから多くのグループを
作るのが適しています

156
00:11:43,070 --> 00:11:45,038
最後の例はメールです

157
00:11:46,406 --> 00:11:51,745
メールとメッセージには
いくつか共通点があります

158
00:11:52,079 --> 00:11:57,885
直接的なコミュニケーションに
使用され―

159
00:11:58,485 --> 00:12:04,825
スレッドのコンセプトにも似た
会話を有します

160
00:11:58,485 --> 00:12:04,825
スレッドのコンセプトにも似た
会話を有します

161
00:12:05,959 --> 00:12:10,164
しかしメールとメッセージには
違いもあります

162
00:12:10,497 --> 00:12:15,335
メールの方が
通知の数がずっと多く

163
00:12:15,602 --> 00:12:20,374
通知が保持される時間も
長くなりがちです

164
00:12:21,542 --> 00:12:26,079
通常 Eメールは
ゆっくり やりとりされ

165
00:12:26,180 --> 00:12:29,650
すぐに返信されるとは
限りません

166
00:12:30,517 --> 00:12:35,889
そのため 通知を
スレッドごとにまとめるのは

167
00:12:35,989 --> 00:12:37,991
理想的ではありません

168
00:12:38,091 --> 00:12:42,863
Notification Centerが
スレッドだらけになり

169
00:12:42,963 --> 00:12:46,066
とても非効率的です

170
00:12:46,166 --> 00:12:51,572
そこでメールには 特別な
インターフェイスを使用します

171
00:12:52,472 --> 00:12:55,943
具体的な整理方法を
紹介します

172
00:12:57,277 --> 00:12:59,746
メールにはすでに

173
00:12:59,980 --> 00:13:05,652
受信メールに優先順位を
つける機能が備わっています

174
00:12:59,980 --> 00:13:05,652
受信メールに優先順位を
つける機能が備わっています

175
00:13:06,954 --> 00:13:12,459
そして 複数の
メールアカウントを設定できます

176
00:13:12,993 --> 00:13:18,031
重要な連絡先を追加する
VIPの機能もあります

177
00:13:18,932 --> 00:13:21,935
お気に入りフォルダの作成や

178
00:13:22,236 --> 00:13:27,474
特定のスレッドに対して
通知をオンにすることもできます

179
00:13:28,775 --> 00:13:34,314
ユーザにとって どの通知が
重要なのかは明らかです

180
00:13:34,414 --> 00:13:37,751
重要度によって区別するのが

181
00:13:37,851 --> 00:13:39,520
メールの仕組みです

182
00:13:39,753 --> 00:13:41,955
メールはまず―

183
00:13:42,055 --> 00:13:46,126
アカウントごとに
通知をまとめます

184
00:13:46,326 --> 00:13:51,131
アカウントごとに
１つのグループを作成します

185
00:13:51,632 --> 00:13:55,269
複数のアカウントがあれば
それぞれ作成されます

186
00:13:56,537 --> 00:14:03,377
ですが VIPに登録されている
連絡先からのEメールは

187
00:13:56,537 --> 00:14:03,377
ですが VIPに登録されている
連絡先からのEメールは

188
00:14:03,777 --> 00:14:07,181
別のグループに分類されます

189
00:14:07,681 --> 00:14:11,518
なぜならVIPからの
Eメールは

190
00:14:11,885 --> 00:14:14,721
すぐに知りたい
情報だからです

191
00:14:15,989 --> 00:14:21,361
特定のスレッドに対し
スレッドの通知をオンにすると

192
00:14:21,695 --> 00:14:25,632
通知は別のグループに
分類されます

193
00:14:29,136 --> 00:14:34,007
メールとメッセージには
共通点もありますが

194
00:14:34,107 --> 00:14:39,713
グループ通知の方法は
少し異なっています

195
00:14:39,813 --> 00:14:44,952
アプリケーションの使い方や
中身が違うからです

196
00:14:46,386 --> 00:14:49,389
メールで学んだことは
何でしょうか？

197
00:14:49,690 --> 00:14:52,893
“ユーザの優先順位を
尊重する”

198
00:14:52,993 --> 00:14:58,098
メールには 優先順位を
つける機能があります

199
00:14:58,198 --> 00:15:02,703
それを利用して
通知を整理するのです

200
00:14:58,198 --> 00:15:02,703
それを利用して
通知を整理するのです

201
00:15:10,077 --> 00:15:15,215
ここまで 通知グループの
作成方法を見てきました

202
00:15:16,750 --> 00:15:20,821
次は グループの概要を
表示することで

203
00:15:20,921 --> 00:15:25,526
中身を分かりやすくする方法を
ご紹介します

204
00:15:25,626 --> 00:15:28,428
グループの内容の説明です

205
00:15:30,764 --> 00:15:35,135
私の先週の
Notification Centerを見ると

206
00:15:35,569 --> 00:15:41,275
それぞれのグループの下に
サマリがついています

207
00:15:41,542 --> 00:15:46,346
メールは 仕事用アカウントへの
着信を知らせています

208
00:15:47,314 --> 00:15:50,250
Podcast Appは

209
00:15:50,350 --> 00:15:54,454
エピソードの到着を
知らせています

210
00:15:56,423 --> 00:15:59,827
Newsには ナショナル
ジオグラフィックから

211
00:15:59,927 --> 00:16:01,695
９件通知が来ています

212
00:15:59,927 --> 00:16:01,695
９件通知が来ています

213
00:16:05,065 --> 00:16:07,501
詳しく見てみましょう

214
00:16:07,601 --> 00:16:10,971
サマリを
カスタマイズしない場合

215
00:16:11,071 --> 00:16:14,641
デフォルトメッセージが
送られます

216
00:16:15,075 --> 00:16:19,213
しかし もっとうまく
中身を説明できます

217
00:16:19,313 --> 00:16:22,583
例えば Appに
メッセージを送信させる場合

218
00:16:22,816 --> 00:16:27,821
９件のメッセージを送ると
通知させたいはずです

219
00:16:28,288 --> 00:16:29,623
その方法は？

220
00:16:30,958 --> 00:16:34,228
まず サマリの
フォーマットを選びます

221
00:16:34,328 --> 00:16:39,533
コンテンツの件数を示す
数字のプレースホルダがあり

222
00:16:39,633 --> 00:16:42,936
“％u more messages”と
なっています

223
00:16:44,104 --> 00:16:46,473
次にこのフォーマット文字列を

224
00:16:46,573 --> 00:16:51,411
通知を送るための
通知カテゴリに設定します

225
00:16:54,448 --> 00:16:57,584
お気付きかもしれませんが

226
00:16:57,684 --> 00:17:00,821
サマリのフォーマットは
カテゴリに設定されます

227
00:16:57,684 --> 00:17:00,821
サマリのフォーマットは
カテゴリに設定されます

228
00:17:00,988 --> 00:17:04,424
なぜなら カテゴリの用途は

229
00:17:05,224 --> 00:17:09,630
通知のタイプやグループに
似ているからです

230
00:17:09,863 --> 00:17:14,768
例えばメッセージでは
“１対１”や“グループ”に対して

231
00:17:14,867 --> 00:17:16,803
カテゴリが設定されます

232
00:17:16,904 --> 00:17:20,874
だから異なるサマリを
設定できるのです

233
00:17:20,973 --> 00:17:24,077
ここでも
カテゴリに設定します

234
00:17:27,614 --> 00:17:32,719
ここで通知グループの
通知カテゴリを設定しますが

235
00:17:32,886 --> 00:17:37,257
隠しプレビューの
プレースホルダも設定できます

236
00:17:37,791 --> 00:17:42,095
これはサマリの設定と
似ています

237
00:17:42,563 --> 00:17:47,034
大きな違いは
使われるコンテキストです

238
00:17:47,468 --> 00:17:53,173
隠しプレビューは
昨年iOS 11で導入された機能です

239
00:17:53,540 --> 00:17:56,610
通知を非表示にした際に

240
00:17:56,710 --> 00:18:02,316
代わりに表示されるテキストを
カスタマイズできる機能です

241
00:17:56,710 --> 00:18:02,316
代わりに表示されるテキストを
カスタマイズできる機能です

242
00:18:02,716 --> 00:18:07,988
通知を非表示にすると “９件の
メッセージ”と表示されます

243
00:18:08,188 --> 00:18:11,158
そしてロック解除すると

244
00:18:11,258 --> 00:18:17,231
展開された通知と“８通”という
サマリを確認できます

245
00:18:17,331 --> 00:18:21,835
サマリフォーマットは
多くのメッセージを表示し

246
00:18:21,935 --> 00:18:26,106
プレビュープレースホルダは
数のみを表示します

247
00:18:31,378 --> 00:18:36,483
サマリの基本の設定を
ご説明しましたが

248
00:18:36,750 --> 00:18:40,821
グループ会話の場合は
少し特殊です

249
00:18:40,921 --> 00:18:43,457
メッセージの
件数だけではなく

250
00:18:43,557 --> 00:18:49,997
スレッド内の差出人を
表示させることができるのです

251
00:18:51,098 --> 00:18:54,167
しかし先ほどの方法には

252
00:18:54,268 --> 00:18:56,803
数字のプレースホルダしか
ありません

253
00:18:57,504 --> 00:19:02,342
そこで異なる
サマリフォーマットを作成します

254
00:18:57,504 --> 00:19:02,342
そこで異なる
サマリフォーマットを作成します

255
00:19:02,443 --> 00:19:05,012
数字のプレースホルダと―

256
00:19:05,579 --> 00:19:10,217
文字列のプレースホルダを
含むフォーマットです

257
00:19:10,317 --> 00:19:13,420
“%u more messages from
%@”のように表示されます

258
00:19:13,654 --> 00:19:19,526
そして ２番目のプレースホルダを
名前のリストに置き換えます

259
00:19:21,028 --> 00:19:23,697
カテゴリで
サマリフォーマットを設定し

260
00:19:24,398 --> 00:19:27,000
リストの名前を取得します

261
00:19:28,535 --> 00:19:33,474
名前を送るには
再度名前を設定します

262
00:19:33,574 --> 00:19:38,178
送信者の名前は
様々だからです

263
00:19:40,414 --> 00:19:43,217
すべての名前を取得し

264
00:19:43,617 --> 00:19:48,789
文字列として構築し
サマリ内で置き換えます

265
00:19:48,889 --> 00:19:53,660
これはプッシュされた情報で
サマリの引数をサポートします

266
00:19:54,728 --> 00:20:01,301
名前を引数に入力すると
サマリはこのようになります

267
00:19:54,728 --> 00:20:01,301
名前を引数に入力すると
サマリはこのようになります

268
00:20:06,306 --> 00:20:12,179
名前は一意でなくてもよく
同じ名前で多くの通知を送れます

269
00:20:12,412 --> 00:20:16,383
そして 例えば
メールの場合は―

270
00:20:16,483 --> 00:20:19,987
すべての通知が
同じ名前になります

271
00:20:20,087 --> 00:20:22,256
重複が排除され

272
00:20:22,356 --> 00:20:26,760
名前ごとに
１つのインスタンスが表示されます

273
00:20:32,199 --> 00:20:35,068
次はPodcastの例です

274
00:20:35,269 --> 00:20:39,172
Podcastの通知には
特別な機能があります

275
00:20:40,207 --> 00:20:42,309
何が特別なのでしょうか？

276
00:20:42,843 --> 00:20:45,445
この例でPodcastは

277
00:20:45,546 --> 00:20:51,485
２話の新着エピソードがあると
トップ通知で言っています

278
00:20:53,453 --> 00:20:58,058
そして サマリによると
７話のエピソードがあります

279
00:20:58,692 --> 00:21:00,828
展開してみましょう

280
00:20:58,692 --> 00:21:00,828
展開してみましょう

281
00:21:03,464 --> 00:21:07,601
グループには
３つの通知しかありません

282
00:21:07,701 --> 00:21:10,204
７ではありません

283
00:21:10,304 --> 00:21:13,073
前例では
サマリで表示される数が

284
00:21:13,173 --> 00:21:17,211
グループ内の通知の数と
一致していました

285
00:21:18,212 --> 00:21:19,813
なぜでしょう？

286
00:21:21,148 --> 00:21:25,052
Podcastは
複数の通知をまとめて

287
00:21:25,152 --> 00:21:28,422
通知の数を制限しているのです

288
00:21:28,789 --> 00:21:32,326
複数エピソードが
同時にリリースされる場合

289
00:21:32,426 --> 00:21:37,464
“３つの新着エピソードが
あります”などと通知されます

290
00:21:38,465 --> 00:21:44,238
他の３つの通知にある
エピソード数を足すと

291
00:21:44,338 --> 00:21:48,175
サマリのとおり
７になります

292
00:21:49,543 --> 00:21:52,146
ではAPIを見てみましょう

293
00:21:53,380 --> 00:21:58,986
これはsummayArgumentCountという
プロパティです

294
00:21:59,953 --> 00:22:03,257
数字が意味するのは

295
00:21:59,953 --> 00:22:03,257
数字が意味するのは

296
00:22:03,357 --> 00:22:06,960
サマリに追加される
アイテムの数です

297
00:22:08,228 --> 00:22:11,665
先ほどと同様に
すべての名前を取得し

298
00:22:11,765 --> 00:22:16,370
すべての数を合計し
サマリを作成するのです

299
00:22:17,204 --> 00:22:18,572
ご覧のとおり―

300
00:22:19,172 --> 00:22:25,345
通知の数は３ １ ３なので
合計は７になります

301
00:22:25,646 --> 00:22:28,182
これがそのサマリです

302
00:22:30,284 --> 00:22:34,388
他と同様 プッシュ型の
情報の中に設定できます

303
00:22:38,158 --> 00:22:40,360
この設定は任意です

304
00:22:40,594 --> 00:22:43,864
通知をまとめたい場合以外は

305
00:22:43,964 --> 00:22:48,202
必ずしも設定する必要は
ありません

306
00:22:53,841 --> 00:22:59,146
次は 言葉を組み合わせて
文章にまとめてみましょう

307
00:22:59,246 --> 00:23:01,248
文章にまとめる際は

308
00:22:59,246 --> 00:23:01,248
文章にまとめる際は

309
00:23:01,348 --> 00:23:05,485
言語の違いを
把握する必要があります

310
00:23:05,586 --> 00:23:09,389
数字を扱うので
複数形に注意が必要です

311
00:23:12,025 --> 00:23:14,194
再びPodcastです

312
00:23:14,294 --> 00:23:17,698
例えば
“4 more episodes”とあります

313
00:23:17,798 --> 00:23:22,836
エピソードが１つの場合
単数形の文字列が必要ですが

314
00:23:23,170 --> 00:23:26,039
APIでは１つしか
設定できません

315
00:23:27,141 --> 00:23:31,245
しかし英語では
文字列が２つ必要です

316
00:23:31,678 --> 00:23:36,150
アプリケーションを
ローカライズする場合や

317
00:23:36,250 --> 00:23:40,654
使用言語が英語以外の場合
異なる言語を使うでしょう

318
00:23:40,954 --> 00:23:44,324
複数形規則は
言語によって異なり

319
00:23:44,424 --> 00:23:47,327
形が３つある場合もあります

320
00:23:47,728 --> 00:23:50,764
規則が異なることもあります

321
00:23:51,532 --> 00:23:55,035
iOSのFoundation
フレームワークは

322
00:23:55,135 --> 00:23:58,639
文字列のローカライズに
有効です

323
00:23:58,739 --> 00:24:04,978
すべての言語や規則を
把握する必要はありません

324
00:23:58,739 --> 00:24:04,978
すべての言語や規則を
把握する必要はありません

325
00:24:05,779 --> 00:24:10,884
とても簡単に それぞれの
言語の文字列を複数形に

326
00:24:10,984 --> 00:24:12,886
翻訳できます

327
00:24:18,592 --> 00:24:21,128
まず始めにすることは―

328
00:24:22,062 --> 00:24:27,568
サマリフォーマットに使う
リテラル文字列を

329
00:24:27,668 --> 00:24:32,840
ローカライズされた文字列に
置き換えます

330
00:24:33,874 --> 00:24:40,147
その際 特別な通知APIが
必要になるのでご注意ください

331
00:24:40,514 --> 00:24:45,886
他言語の文字列を
分けて格納するためです

332
00:24:46,153 --> 00:24:51,125
後で システム言語が
変更されると

333
00:24:51,225 --> 00:24:57,464
ローカライズされた文字列で
通知が送られます

334
00:24:59,900 --> 00:25:04,638
ここで設定したら
文字列をローカライズします

335
00:24:59,900 --> 00:25:04,638
ここで設定したら
文字列をローカライズします

336
00:25:05,472 --> 00:25:10,978
それには
.stringsdictファイルを使います

337
00:25:11,278 --> 00:25:16,984
.stringsdictファイルは
プロパティリストで―

338
00:25:17,084 --> 00:25:20,454
フォーマット文字列や
辞書を定義します

339
00:25:20,687 --> 00:25:23,323
ご覧のスライドの下の方に

340
00:25:23,423 --> 00:25:28,829
英語の単数形と複数形
２つの文字列があります

341
00:25:29,429 --> 00:25:34,701
しかし言語を変更するために
必要なのは

342
00:25:34,802 --> 00:25:37,704
.stringsdictファイルの
変更だけです

343
00:25:37,805 --> 00:25:40,307
ご覧のヘブライ語では

344
00:25:40,407 --> 00:25:44,311
複数形に関して
３つの形があります

345
00:25:44,545 --> 00:25:49,049
ロシア語にも
３つの形がありますが

346
00:25:49,149 --> 00:25:54,888
Foundation APIを使えば
詳しく知る必要はありません

347
00:25:56,990 --> 00:26:01,595
これは 簡単な
サマリフォーマットです

348
00:25:56,990 --> 00:26:01,595
これは 簡単な
サマリフォーマットです

349
00:26:01,995 --> 00:26:07,434
引数を使えば サマリを
設定することも可能です

350
00:26:08,068 --> 00:26:13,040
トップにフォーマット文字列を
定義しています

351
00:26:13,373 --> 00:26:17,845
キーごとに構成辞書を
マッチさせる必要があります

352
00:26:18,612 --> 00:26:23,016
下では ２つの形に対して
文字列を設定しています

353
00:26:23,383 --> 00:26:26,453
数字のプレースホルダと

354
00:26:26,553 --> 00:26:30,257
名前リストの
プレースホルダです

355
00:26:34,995 --> 00:26:38,665
アプリケーションと
システムの間で

356
00:26:38,766 --> 00:26:43,036
フォーマット文字列を
交換しています

357
00:26:43,136 --> 00:26:48,776
事実上APIの一部で
扱えるフォーマットの数は

358
00:26:48,876 --> 00:26:50,377
限られています

359
00:26:51,378 --> 00:26:56,450
例の中で紹介した
フォーマットがそうです

360
00:26:56,750 --> 00:27:01,788
１つ目のフォーマットは
数字のプレースホルダを使います

361
00:26:56,750 --> 00:27:01,788
１つ目のフォーマットは
数字のプレースホルダを使います

362
00:27:01,955 --> 00:27:07,795
これには引数が不要で
割り当てられた数字が必要です

363
00:27:09,062 --> 00:27:12,599
２つ目のフォーマットは

364
00:27:12,699 --> 00:27:16,403
２つのプレースホルダを
使います

365
00:27:16,770 --> 00:27:22,276
どの文字列を使うか検出し
正しいフォーマットにします

366
00:27:27,281 --> 00:27:32,286
通知のグループ化については
以上ですが

367
00:27:32,486 --> 00:27:38,492
通知のグループ化とAPIについて
あと何点か ご紹介します

368
00:27:38,592 --> 00:27:43,297
アプリケーションを
洗練させるコツです

369
00:27:45,632 --> 00:27:50,704
１つ目のコツは
異なるサマリの組み合わせです

370
00:27:52,439 --> 00:27:57,945
異なるサマリは
別々のカテゴリ内に設定でき

371
00:27:58,045 --> 00:28:02,316
スレッドグループは
通知コンテンツ内に定義できます

372
00:27:58,045 --> 00:28:02,316
スレッドグループは
通知コンテンツ内に定義できます

373
00:28:02,416 --> 00:28:08,455
つまり 同じグループ通知に
異なるサマリを設定できるのです

374
00:28:08,555 --> 00:28:10,457
何が起こるでしょうか？

375
00:28:11,125 --> 00:28:13,260
２つのケースがあります

376
00:28:13,594 --> 00:28:18,198
グループ内のどのサマリにも
引数がない場合

377
00:28:18,432 --> 00:28:23,570
すべてのサマリは
このように表示されます

378
00:28:24,438 --> 00:28:30,244
しかし 通知のサマリに
引数が設定されている場合

379
00:28:30,344 --> 00:28:35,082
デフォルトメッセージに
フォールバックします

380
00:28:40,487 --> 00:28:45,325
２つ目のコツは リッチ通知と
グループについてです

381
00:28:46,260 --> 00:28:50,797
少し前にiOSに導入された
リッチ通知は

382
00:28:51,098 --> 00:28:54,768
グループ通知でも
引き続き使えます

383
00:28:55,235 --> 00:29:00,541
コンテンツExtensionを持つ
リッチ通知を見るには

384
00:28:55,235 --> 00:29:00,541
コンテンツExtensionを持つ
リッチ通知を見るには

385
00:29:00,641 --> 00:29:03,577
ユーザはグループを
タップします

386
00:29:03,744 --> 00:29:08,549
すると通知が トップ通知と
ともに読み込まれ

387
00:29:08,649 --> 00:29:10,551
トップ通知は

388
00:29:10,651 --> 00:29:17,024
didReceive通知APIによって
受信されます

389
00:29:20,861 --> 00:29:25,332
読み込まれたら 他の通知を
読み込むことができます

390
00:29:25,432 --> 00:29:28,001
グループ内の通知や

391
00:29:28,368 --> 00:29:32,072
他のコンテンツも
読み込めます

392
00:29:35,475 --> 00:29:38,712
Extensionの起動中に

393
00:29:38,812 --> 00:29:44,284
追加の通知が届き
同じスレッド識別子だとします

394
00:29:44,384 --> 00:29:47,821
その場合 最初に
使用されたメソッドで

395
00:29:47,921 --> 00:29:52,526
コンテンツExtensionに
届けられます

396
00:29:56,497 --> 00:29:57,598
最後です

397
00:29:57,898 --> 00:30:02,202
APIなどから
通知を読み込むことで

398
00:29:57,898 --> 00:30:02,202
APIなどから
通知を読み込むことで

399
00:30:02,302 --> 00:30:08,675
すでに表示した追加の通知が
届くことがあります

400
00:30:08,776 --> 00:30:11,645
その場合は通知を取り除き

401
00:30:11,745 --> 00:30:17,384
Notification Centerを
整理してください

402
00:30:18,519 --> 00:30:21,555
内容を おさらいしましょう

403
00:30:22,256 --> 00:30:24,925
たくさんお話ししましたが

404
00:30:25,025 --> 00:30:28,796
覚えておいてほしいのは
２つだけです

405
00:30:29,263 --> 00:30:32,499
１つ目は
通知のグループ化の目的です

406
00:30:32,699 --> 00:30:37,271
目的は
Notification Centerを整理し

407
00:30:37,371 --> 00:30:42,342
より効率的に 通知を
使えるようにすることです

408
00:30:42,443 --> 00:30:44,111
情報を選別すれば

409
00:30:44,211 --> 00:30:49,650
重要な情報を早く受け取り
対応することができます

410
00:30:50,651 --> 00:30:56,223
２つ目に
覚えておいてほしいことは

411
00:30:56,323 --> 00:30:58,826
カスタムサマリの追加です

412
00:30:59,193 --> 00:31:03,363
Podcastなどの例を
思い出してください

413
00:30:59,193 --> 00:31:03,363
Podcastなどの例を
思い出してください

414
00:31:03,697 --> 00:31:07,835
通知グループの下の
サマリを見れば

415
00:31:07,935 --> 00:31:11,071
何が新しい情報か分かります

416
00:31:11,171 --> 00:31:16,743
通知グループを展開して
すべて見る必要はありません

417
00:31:16,844 --> 00:31:19,980
サマリで確認できるのです

418
00:31:21,115 --> 00:31:26,086
このセッションの後
すぐにラボを開きます

419
00:31:26,186 --> 00:31:31,091
明朝もラボがありますので
ぜひお越しください

420
00:31:31,592 --> 00:31:35,262
金曜の通知についての
セッションでは

421
00:31:35,362 --> 00:31:38,232
デザイン面からお話しします

422
00:31:38,332 --> 00:31:41,668
あらゆるデバイスや
システムで

423
00:31:41,768 --> 00:31:45,439
通知をどう使うか考えます

424
00:31:47,374 --> 00:31:50,077
ご清聴
ありがとうございました

425
00:31:50,177 --> 00:31:51,378
(拍手)