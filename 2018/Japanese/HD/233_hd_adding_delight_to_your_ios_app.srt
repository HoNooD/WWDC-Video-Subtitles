
1
00:00:07,007 --> 00:00:16,283
(音楽)

2
00:00:19,920 --> 00:00:21,054
どうも

3
00:00:21,288 --> 00:00:22,623
こんにちは

4
00:00:22,723 --> 00:00:26,793
(拍手)

5
00:00:27,694 --> 00:00:31,131
Adding Delight to Your iOS Appへ
ようこそ

6
00:00:31,565 --> 00:00:32,533
ベンです

7
00:00:32,633 --> 00:00:33,800
ピーターです

8
00:00:33,901 --> 00:00:37,538
魔法を生み出すプロのヒントを
６つ お教えします

9
00:00:37,905 --> 00:00:41,308
まずは
外付けディスプレイサポート

10
00:00:41,408 --> 00:00:44,111
アプリケーション体験を
大画面に

11
00:00:45,946 --> 00:00:49,950
次は最新の
プログラミングパターン

12
00:00:50,050 --> 00:00:51,785
レイアウト駆動型UIです

13
00:00:52,686 --> 00:00:57,858
次は顧客が楽しい体験を
可能な限り早く始められる―

14
00:00:57,958 --> 00:00:59,793
起動の高速化

15
00:01:00,194 --> 00:01:04,798
スムーズなスクロールに尽力し
快適さを保ちます

16
00:01:05,632 --> 00:01:08,769
連係はiOSの
最も魔法的な体験の１つ

17
00:01:08,869 --> 00:01:13,140
Handoffを簡単に
組み込む方法をお見せします

18
00:01:13,607 --> 00:01:19,580
最後に「マトリックス」レベルの
プロのデバッグ技をお教えします

19
00:01:20,447 --> 00:01:23,150
盛りだくさんです
始めましょう

20
00:01:28,422 --> 00:01:33,794
iOSデバイスの特徴は
驚異の統合ディスプレイです

21
00:01:35,529 --> 00:01:41,535
外付けディスプレイサポートで
アプリケーション体験が向上します

22
00:01:43,303 --> 00:01:46,273
解説用のデモを作りました

23
00:01:47,074 --> 00:01:50,143
iOSに組み込まれた
ディスプレイのミラー化は―

24
00:01:50,244 --> 00:01:55,349
外部接続ディスプレイに
システムUIを再現します

25
00:01:56,383 --> 00:02:00,120
デモはご覧のとおり
単純なフォトビューア

26
00:01:56,383 --> 00:02:00,120
デモはご覧のとおり
単純なフォトビューア

27
00:02:00,220 --> 00:02:04,858
サムネイルをタップすると
全画面表示されます

28
00:02:05,359 --> 00:02:09,863
この体験が外付けディスプレイに
再現されます

29
00:02:11,298 --> 00:02:17,304
iPhoneを回転させ 横長にして
そのサイズを十分に生かせます

30
00:02:19,039 --> 00:02:23,744
すばらしいことに労せずして
この体験を得られました

31
00:02:24,711 --> 00:02:27,648
しかし
これ以上のことができます

32
00:02:28,382 --> 00:02:33,420
iOSに組み込まれたAPIは
この外部接続ディスプレイに―

33
00:02:33,520 --> 00:02:37,624
完全にカスタムの
第２UIを生成できます

34
00:02:39,526 --> 00:02:43,096
実行したアプリケーションの
例を見ましょう

35
00:02:45,465 --> 00:02:47,668
好例はKeynoteです

36
00:02:48,135 --> 00:02:53,040
外付けディスプレイでは目の前の
最初のスライドに集中

37
00:02:53,640 --> 00:02:58,579
iPhoneの統合ディスプレイでは
講演者用メモも次のスライドも―

38
00:02:58,679 --> 00:03:01,315
不可欠なツールを
すべて見られます

39
00:02:58,679 --> 00:03:01,315
不可欠なツールを
すべて見られます

40
00:03:02,916 --> 00:03:04,418
あるいはゲーム

41
00:03:05,352 --> 00:03:08,255
通常は操作画面が
重なっていますが

42
00:03:08,889 --> 00:03:13,227
そこで完全にカスタムの
操作用UIを生成できます

43
00:03:13,327 --> 00:03:16,296
これをディスプレイに
載せれば―

44
00:03:16,797 --> 00:03:22,703
邪魔も入らず 没入的ゲーム体験が
外付けディスプレイで可能に

45
00:03:25,439 --> 00:03:29,209
外付けディスプレイ用に
アプリケーションを設計する際

46
00:03:29,409 --> 00:03:32,179
考慮すべき
重要な点があります

47
00:03:33,747 --> 00:03:39,052
明らかにサイズが違う上
iPhoneはパーソナルです

48
00:03:39,386 --> 00:03:44,057
画面に表示させる情報は
非公開と考えるべきです

49
00:03:45,392 --> 00:03:51,398
一方 外付けディスプレイは通常
大勢が見られる環境にあります

50
00:03:51,665 --> 00:03:56,270
例えば居間のテレビや会議場の
プロジェクションシステム

51
00:03:57,538 --> 00:04:01,942
その画面に表示される情報は
公開と仮定すべきです

52
00:03:57,538 --> 00:04:01,942
その画面に表示される情報は
公開と仮定すべきです

53
00:04:03,110 --> 00:04:08,081
さらにiPhoneとiPadの
ディスプレイは対話型ですが

54
00:04:08,182 --> 00:04:10,417
外付けディスプレイは
違います

55
00:04:10,651 --> 00:04:12,019
UIの要素や―

56
00:04:12,119 --> 00:04:16,589
対話可能なコントロールは
表示すべきではありません

57
00:04:17,991 --> 00:04:22,963
この考えをデモに当てはめて
何ができるか見てみましょう

58
00:04:24,131 --> 00:04:27,501
外付けディスプレイ用に
最適化してあります

59
00:04:28,468 --> 00:04:30,137
ご覧のとおり―

60
00:04:30,237 --> 00:04:34,775
外付けディスプレイには
選んだ写真を全画面表示

61
00:04:35,442 --> 00:04:38,745
統合ディスプレイは
サムネールのみ

62
00:04:38,846 --> 00:04:43,750
新しい選択インジケータが
全画面表示の写真を示します

63
00:04:45,285 --> 00:04:49,056
単純ですが このデザインの
有効な使い方です

64
00:04:50,791 --> 00:04:55,229
デモにどう組み込んだか
３つのテーマでお見せします

65
00:04:56,029 --> 00:05:00,100
接続 動作
そして接続遷移です

66
00:04:56,029 --> 00:05:00,100
接続 動作
そして接続遷移です

67
00:05:01,101 --> 00:05:02,836
まず最初は接続

68
00:05:03,370 --> 00:05:06,707
外付けディスプレイの
接続の有無を知るには？

69
00:05:08,008 --> 00:05:10,878
UIScreenのクラス変数
screensは―

70
00:05:10,978 --> 00:05:16,083
iPhoneを含む すべての
接続ディスプレイを収容します

71
00:05:16,817 --> 00:05:22,823
この配列に複数の要素があれば
外付けディスプレイと分かります

72
00:05:24,491 --> 00:05:30,230
加えて外付けディスプレイは
接続も切断も自由なので―

73
00:05:30,898 --> 00:05:34,902
接続時も切断時も
UIKitが通知します

74
00:05:35,502 --> 00:05:39,306
UIScreen.didConnect
Notificationか―

75
00:05:39,406 --> 00:05:42,209
UIScreen.didDisconnect
Notificationに応じ

76
00:05:42,309 --> 00:05:44,978
UIを生成か
破棄せねばなりません

77
00:05:46,079 --> 00:05:50,617
第２UIの設定がどれほど簡単か
やってみてくれる？

78
00:05:50,851 --> 00:05:56,790
喜んで　UIScreenの
接続コールバックに飛びましょう

79
00:05:57,658 --> 00:06:02,129
screens配列の最後に
ローカル変数を設定します

80
00:05:57,658 --> 00:06:02,129
screens配列の最後に
ローカル変数を設定します

81
00:06:02,429 --> 00:06:04,431
外付けと分かるのは―

82
00:06:04,531 --> 00:06:08,035
didConnectNotification
コールバック内だから

83
00:06:08,502 --> 00:06:12,973
次に このディスプレイに表示する
UIウインドウを生成し

84
00:06:13,173 --> 00:06:17,044
画面プロパティを
screenに割り当てます

85
00:06:17,144 --> 00:06:20,180
次は このウインドウを
設定したことを確認

86
00:06:20,314 --> 00:06:22,015
関数に組み込みましたが―

87
00:06:22,115 --> 00:06:26,453
ルートViewControllerを
ウインドウに貼り付けるだけ

88
00:06:26,553 --> 00:06:29,456
内蔵ディスプレイと
同じ方法です

89
00:06:29,790 --> 00:06:35,496
最後に このウインドウが
外付け画面に表示されるよう設定

90
00:06:36,129 --> 00:06:37,564
以上が接続です

91
00:06:37,664 --> 00:06:40,667
次は切断ですが
もっと簡単です

92
00:06:41,168 --> 00:06:45,939
これはUIScreen.didDisconnect
Notificationハンドラの中身

93
00:06:46,039 --> 00:06:48,742
ウインドウを
非表示にしてから―

94
00:06:48,842 --> 00:06:52,346
ローカル参照を削除し
リソースを解放するだけ

95
00:06:52,446 --> 00:06:56,850
以上がディスプレイの
接続と切断の実装です

96
00:06:57,050 --> 00:06:58,952
本当に簡単だったね

97
00:07:00,754 --> 00:07:02,556
次に考えるべきは―

98
00:07:02,656 --> 00:07:07,394
接続時のアプリケーションの
デフォルト動作の変更です

99
00:07:08,996 --> 00:07:12,266
コードの例を
デモで見てみましょう

100
00:07:13,033 --> 00:07:17,037
コレクションビューで
写真をタップした時のコード

101
00:07:18,138 --> 00:07:19,940
単一の
ディスプレイモードでは―

102
00:07:20,007 --> 00:07:24,678
photoViewControllerを
ナビゲーションスタックにプッシュ

103
00:07:25,445 --> 00:07:27,848
しかし
外付けディスプレイ接続時は―

104
00:07:27,948 --> 00:07:32,152
そのコントローラは第２UIに
既に表示されているので

105
00:07:32,386 --> 00:07:35,355
その写真の表示を命じるだけ

106
00:07:35,856 --> 00:07:36,790
実に簡単です

107
00:07:37,991 --> 00:07:42,029
外付けディスプレイ用の設計で
第３に考えるべきは―

108
00:07:42,996 --> 00:07:46,967
接続の切り替えを
滑らかに行うことです

109
00:07:48,735 --> 00:07:51,371
デモに戻って解説します

110
00:07:52,673 --> 00:07:56,777
現在は写真を
フルサイズで表示しています

111
00:07:56,944 --> 00:07:59,713
外付けディスプレイは未接続

112
00:08:00,614 --> 00:08:02,516
つなぐと どうなるか

113
00:08:06,220 --> 00:08:10,123
View Controllerを
サムネールビューに戻し―

114
00:08:10,224 --> 00:08:16,230
同時に写真を外付けディスプレイに
フルサイズ表示しました

115
00:08:17,831 --> 00:08:22,870
こうした滑らかな遷移で
コンテキストが保護でき―

116
00:08:22,970 --> 00:08:26,373
顧客は自分がフローの
どこにいるか分かります

117
00:08:28,075 --> 00:08:31,979
外付けディスプレイサポートの
設定は実に簡単

118
00:08:32,479 --> 00:08:36,517
ただ さまざまな
ディスプレイコンテキストを考慮し

119
00:08:36,616 --> 00:08:39,385
滑らかに切り替わるように
してください

120
00:08:40,053 --> 00:08:44,858
さらなる詳細はWWDC 2011の
この講演を参照してください

121
00:08:45,259 --> 00:08:46,059
以上です

122
00:08:46,593 --> 00:08:50,464
(拍手)

123
00:08:51,632 --> 00:08:55,836
レイアウト駆動型UIは
アプリケーションを書くのに有効で

124
00:08:55,936 --> 00:09:00,407
機能の追加やデバッグが
より簡単になります

125
00:08:55,936 --> 00:09:00,407
機能の追加やデバッグが
より簡単になります

126
00:09:01,375 --> 00:09:06,914
iOSアプリケーションの問題を
引き起こす 一番の原因―

127
00:09:07,014 --> 00:09:09,950
UIの複雑さへの対処に
役立ちます

128
00:09:10,751 --> 00:09:13,954
皆さん 経験があるでしょう
私もです

129
00:09:14,321 --> 00:09:16,957
ジェスチャコールバックで
コードを足す

130
00:09:17,057 --> 00:09:20,527
通知コールバックで
UI更新コードを追加する

131
00:09:20,627 --> 00:09:24,665
UIコントロールで
値のトリガを得て さらに追加

132
00:09:24,865 --> 00:09:29,536
すると突然 アプリケーションが
理解しがたい状態に

133
00:09:29,870 --> 00:09:34,208
そして奇妙な命令に従い
異常なバグを再現

134
00:09:34,575 --> 00:09:39,046
機能を追加すればするほど
問題が悪化します

135
00:09:40,080 --> 00:09:42,850
そうせずに
簡単なレシピに従い―

136
00:09:42,950 --> 00:09:46,920
UI更新をレイアウトに
プッシュすれば―

137
00:09:47,020 --> 00:09:50,724
バグを排除でき
機能の追加が簡単になります

138
00:09:51,258 --> 00:09:55,762
ではレイアウト駆動型UIを
追加するレシピです

139
00:09:57,431 --> 00:09:59,032
最初にすべきことは―

140
00:09:59,133 --> 00:10:04,071
UIに影響を与えるすべての状態の
特定と追跡です

141
00:09:59,133 --> 00:10:04,071
UIに影響を与えるすべての状態の
特定と追跡です

142
00:10:05,372 --> 00:10:08,041
次は その状態が
変わるたびに―

143
00:10:08,141 --> 00:10:11,678
setNeedsLayoutを呼び出し
レイアウトを無効にします

144
00:10:12,813 --> 00:10:18,318
最後にlayoutSubviewsで
UIを更新しましょう

145
00:10:19,186 --> 00:10:20,154
以上です

146
00:10:20,587 --> 00:10:24,291
このレシピは
簡単さがたまりません

147
00:10:25,425 --> 00:10:29,463
レイアウト駆動型UIを
全体に適用すると？

148
00:10:30,564 --> 00:10:33,934
iOSアプリケーションの
３つのコア構成要素は―

149
00:10:34,034 --> 00:10:37,137
レイアウト アニメーション
ジェスチャです

150
00:10:37,671 --> 00:10:40,874
この３つ 全部の実装が―

151
00:10:40,974 --> 00:10:44,845
実に見事に調和して
機能するのです

152
00:10:45,812 --> 00:10:47,781
まずはレイアウトから

153
00:10:49,650 --> 00:10:54,688
アプリケーションのコンテンツを
画面に配置するプロセスですが

154
00:10:55,422 --> 00:11:00,427
他のUI更新もすべて
レイアウトで行うのをお勧めします

155
00:10:55,422 --> 00:11:00,427
他のUI更新もすべて
レイアウトで行うのをお勧めします

156
00:11:00,661 --> 00:11:04,565
この点を強調すべく
単純なサンプルを書きました

157
00:11:04,932 --> 00:11:06,366
説明をお願いできる？

158
00:11:07,134 --> 00:11:08,101
いいとも

159
00:11:09,002 --> 00:11:12,372
本当に単純で
中央の“クールガイ”は―

160
00:11:12,773 --> 00:11:16,777
我々がクールな気分の時に現れ
そうでない時は隠れます

161
00:11:17,845 --> 00:11:20,881
今はとてもクールな気分だから
呼び戻そう

162
00:11:21,682 --> 00:11:24,818
すばらしい
これは単純な例ですが―

163
00:11:24,918 --> 00:11:29,623
仕組みが理解できるよう
段階を踏んで説明します

164
00:11:30,257 --> 00:11:34,027
このアプリケーションの概要を
学んで―

165
00:11:34,128 --> 00:11:37,497
ベンが見せてくれたレシピを
やってみましょう

166
00:11:38,065 --> 00:11:42,202
これはクールガイのビューを
管理する管理ビュー

167
00:11:42,302 --> 00:11:45,272
先に書いておいた
coolViewです

168
00:11:45,739 --> 00:11:48,175
ベン 最初のステップは？

169
00:11:48,442 --> 00:11:53,213
UIに影響を与える状態の
特定と追跡です

170
00:11:53,580 --> 00:11:55,182
思い出してください

171
00:11:55,282 --> 00:12:00,187
クールガイは我々が
クールな気分の時に現れます

172
00:11:55,282 --> 00:12:00,187
クールガイは我々が
クールな気分の時に現れます

173
00:12:00,621 --> 00:12:03,390
feelingCoolという
変数があるはず

174
00:12:03,790 --> 00:12:07,094
出ましたね
ベン 次のステップは？

175
00:12:07,394 --> 00:12:09,630
その状態が変わるたびに―

176
00:12:09,730 --> 00:12:13,133
setNeedsLayoutを呼び出し
レイアウトを無効に

177
00:12:13,534 --> 00:12:17,337
状態変化のたびに
必ずこうなるようにすること

178
00:12:17,437 --> 00:12:21,275
状態変化はアプリケーションの
あちこちで起こります

179
00:12:21,475 --> 00:12:25,712
レイアウトが必ず無効になるか
どう確認する？

180
00:12:25,946 --> 00:12:28,916
よくぞ聞いてくれた
名案がある

181
00:12:29,183 --> 00:12:32,586
Swiftのプロパティオブザーバと
いう機能で―

182
00:12:33,187 --> 00:12:37,357
プロパティ設定の前か後に
コードを実行できます

183
00:12:37,691 --> 00:12:42,262
didSetプロパティのオブザーバで
setNeedsLayoutを呼び出せる

184
00:12:42,462 --> 00:12:46,466
プロパティオブザーバの
優れた使い方です

185
00:12:47,134 --> 00:12:51,438
これで終わったも同然
ベン 最後のステップは？

186
00:12:51,872 --> 00:12:56,543
この状態を使い
layoutSubviewsでUIを更新する

187
00:12:57,211 --> 00:12:58,979
了解　簡単です

188
00:12:59,179 --> 00:13:01,582
layoutSubviewsを
オーバーライドし―

189
00:12:59,179 --> 00:13:01,582
layoutSubviewsを
オーバーライドし―

190
00:13:01,682 --> 00:13:06,753
feelingCoolの値を基盤に
isHiddenプロパティを更新します

191
00:13:06,987 --> 00:13:11,225
レイアウト駆動型UIの追加に
必要な作業は これだけ

192
00:13:11,625 --> 00:13:17,631
この簡単な例でも成功しますが
より複雑な先の例でも成功します

193
00:13:18,198 --> 00:13:21,535
昨夜 ベンと遅くまで
Apple Campusを席巻中の―

194
00:13:21,635 --> 00:13:26,006
macOSの「ザ･ギャザリング」で
遊んでいました

195
00:13:26,907 --> 00:13:28,842
週末の対戦に備えて―

196
00:13:28,942 --> 00:13:32,179
デッキビルダアプリケーションを
作りました

197
00:13:32,746 --> 00:13:37,518
カードをドラッグして
デッキエリアに放り込めます

198
00:13:37,618 --> 00:13:42,156
速くて楽しく 滑らかで
２枚を同時に選べます

199
00:13:42,322 --> 00:13:46,793
レイアウト駆動型UIの仕組みが
よく分かりますし―

200
00:13:46,927 --> 00:13:50,731
何より 次の週末に
ベンの同僚に勝てます

201
00:13:51,298 --> 00:13:55,302
レイアウト駆動型UIの
３大コア構成要素への適用法

202
00:13:55,402 --> 00:13:58,005
残り２つを順番に説明します

203
00:13:58,105 --> 00:14:00,274
まずはアニメーション

204
00:13:58,105 --> 00:14:00,274
まずはアニメーション

205
00:14:01,708 --> 00:14:05,779
アニメーションは
すばらしいiOS体験を保証します

206
00:14:06,413 --> 00:14:11,051
躍動感をもたらす
UIの生き生きとした動き

207
00:14:12,286 --> 00:14:17,524
UIKitにはアニメーションの生成に
役立つ優れたAPIがあります

208
00:14:18,792 --> 00:14:22,796
UIViewPropertyAnimatorは
実に強力なツールで

209
00:14:22,963 --> 00:14:26,200
昨年 新機能を
多数 搭載してパワーアップ

210
00:14:26,867 --> 00:14:28,368
いろいろな詳細は
WWDC 2017の―

211
00:14:28,469 --> 00:14:33,474
Advanced Animations with UIKitを
参照してください

212
00:14:34,641 --> 00:14:40,647
さらにUIViewのクロージャAPIも
実証済みの優れた方法です

213
00:14:42,482 --> 00:14:45,752
レイアウト駆動型UIベースの
アプリケーションで―

214
00:14:45,853 --> 00:14:48,288
UIViewのアニメーションが
使えます

215
00:14:48,922 --> 00:14:50,324
１つ覚えておくべきは―

216
00:14:50,424 --> 00:14:54,928
beginFromCurrentStateという
オプションを必ず使うこと

217
00:14:55,729 --> 00:15:00,200
これはUIkitに
アニメーション中でも―

218
00:14:55,729 --> 00:15:00,200
これはUIkitに
アニメーション中でも―

219
00:15:00,300 --> 00:15:03,770
ビューの現在の画面上の位置を
取るよう命じます

220
00:15:04,171 --> 00:15:09,343
これにより 割り込み可能な
対話型アニメーションができます

221
00:15:09,710 --> 00:15:13,914
デッキビルダの例を
見てみましょう

222
00:15:15,249 --> 00:15:19,520
デッキにどんなカードがあるか
追跡する変数があります

223
00:15:19,720 --> 00:15:23,156
Swiftの
プロパティオブザーバを使い―

224
00:15:23,257 --> 00:15:26,159
変化のたびに
setNeedsLayoutを呼び出し―

225
00:15:26,260 --> 00:15:28,095
レイアウトを無効に

226
00:15:29,830 --> 00:15:33,000
次に カードを
デッキに置きたい時は―

227
00:15:33,100 --> 00:15:38,238
レイアウトを無効にするこの配列に
そのカードを追加するだけ

228
00:15:38,338 --> 00:15:43,210
次に animationブロックの中で
beginFromCurrentStateを使い―

229
00:15:43,310 --> 00:15:45,546
layoutIfNeededを
呼び出します

230
00:15:46,013 --> 00:15:49,116
これがlayoutSubviews内の
コードを呼び出し―

231
00:15:49,216 --> 00:15:51,151
すべてのビューを
動かして―

232
00:15:51,251 --> 00:15:54,221
適切なアニメーションの
状態遷移を再生します

233
00:15:54,521 --> 00:15:57,891
そして私が強調したい
優れた点は―

234
00:15:57,991 --> 00:16:01,695
特別なケースを
追加しなくていいこと

235
00:15:57,991 --> 00:16:01,695
特別なケースを
追加しなくていいこと

236
00:16:02,062 --> 00:16:05,098
何もせずに
このレイアウトを得られました

237
00:16:05,199 --> 00:16:08,669
animationブロックの
レイアウトを実行しただけ

238
00:16:09,036 --> 00:16:10,637
すごいことです

239
00:16:11,371 --> 00:16:15,108
以上がアニメーションを
追加する方法です

240
00:16:16,276 --> 00:16:21,748
最後に ３つ目の
ジェスチャについてご説明します

241
00:16:22,015 --> 00:16:27,621
UIGestureRecognizerを語らずに
ジェスチャは語れません

242
00:16:27,721 --> 00:16:31,792
ジェスチャ操作を追加する
UIkitの優れたAPIです

243
00:16:33,427 --> 00:16:38,432
UIKitはUIgestureRecognizerの
具体的なサブクラスを提供します

244
00:16:38,732 --> 00:16:42,102
パン ピンチ スワイプ 回転など
何もかも

245
00:16:42,302 --> 00:16:45,606
これらを使い
お望みの操作が生成できます

246
00:16:45,706 --> 00:16:47,841
しかもカスタマイズ可能です

247
00:16:48,809 --> 00:16:51,145
クレイジーにしたいなら―

248
00:16:51,245 --> 00:16:54,214
UIGestureRecognizerの
サブクラスを作れます

249
00:16:56,016 --> 00:16:59,753
組み込みの
UIKitGestureRecognizerは―

250
00:16:59,853 --> 00:17:04,925
単発ジェスチャと連続ジェスチャの
違いを理解することが重要

251
00:16:59,853 --> 00:17:04,925
単発ジェスチャと連続ジェスチャの
違いを理解することが重要

252
00:17:05,826 --> 00:17:08,996
連続ジェスチャは
イベントの発生を知らせます

253
00:17:09,463 --> 00:17:11,165
Possibleの状態で開始し

254
00:17:11,397 --> 00:17:14,801
“Goを通過せず
200ドルも受け取らず”

255
00:17:14,902 --> 00:17:17,604
すぐに
Recognizedの状態に遷移

256
00:17:18,372 --> 00:17:22,509
アプリケーションの操作の
自動識別と追跡に便利ですが

257
00:17:22,608 --> 00:17:26,079
操作中の全段階で
知らせるわけではないです

258
00:17:27,448 --> 00:17:33,353
もう１つの連続ジェスチャは
はるかに高い忠実性を提供します

259
00:17:34,188 --> 00:17:37,291
単発ジェスチャと同様
Possibleの状態で開始

260
00:17:37,624 --> 00:17:41,328
しかし認識され始めると
Beganの状態に遷移

261
00:17:42,496 --> 00:17:45,465
追跡する時
Changedの状態に入ります

262
00:17:45,599 --> 00:17:50,270
ここでジェスチャが動き回り
一連の連続イベントを受信します

263
00:17:51,338 --> 00:17:55,709
ジェスチャが完了すると
Endedの状態に遷移します

264
00:17:57,478 --> 00:18:02,249
UIPanGestureRecognizerは
我々の好む連続ジェスチャの１つで

265
00:17:57,478 --> 00:18:02,249
UIPanGestureRecognizerは
我々の好む連続ジェスチャの１つで

266
00:18:02,649 --> 00:18:06,987
これを最大限に活用できる
優れた機能が２つあります

267
00:18:07,921 --> 00:18:13,126
translationInViewは
ジェスチャの移動位置を知らせ―

268
00:18:14,228 --> 00:18:17,998
velocityInViewは
ジェスチャの移動速度を知らせます

269
00:18:18,232 --> 00:18:22,069
ジェスチャと
続くアニメーションとの間で―

270
00:18:22,169 --> 00:18:23,904
速度を引き継げるのです

271
00:18:25,372 --> 00:18:29,610
こうしたジェスチャ操作の生成の
詳細はWWDC 2014の―

272
00:18:29,710 --> 00:18:35,082
Building Interruptible and
Responsive Interactionsで

273
00:18:36,150 --> 00:18:39,486
UIPanGestureRecognizerは
私も大好きで

274
00:18:39,586 --> 00:18:43,791
カードのドラッグ操作の
生成にも使いました

275
00:18:44,258 --> 00:18:47,261
ではレイアウト駆動型UIでの
やり方を

276
00:18:48,996 --> 00:18:52,032
やはりローカル変数が
このジェスチャを適用した―

277
00:18:52,633 --> 00:18:56,770
各カードのオフセットを
追跡します

278
00:18:57,271 --> 00:19:00,240
そして やはり
この変数が変わるたびに―

279
00:18:57,271 --> 00:19:00,240
そして やはり
この変数が変わるたびに―

280
00:19:00,340 --> 00:19:04,645
プロパティオブザーバで
setNeedsLayoutを呼び出します

281
00:19:06,146 --> 00:19:10,217
次はpanGestureRecognizer
コールバック関数内で―

282
00:19:10,517 --> 00:19:14,421
現在の変換とビューを
ジェスチャから取り出し―

283
00:19:14,655 --> 00:19:18,225
このジェスチャを
カードと関連づけます

284
00:19:18,792 --> 00:19:24,131
次に そのカードのオフセットを
この辞書内でインクリメントします

285
00:19:25,399 --> 00:19:28,101
最後にlayoutSubviewsで―

286
00:19:28,435 --> 00:19:32,072
カードのビューの位置を
更新するようにします

287
00:19:32,172 --> 00:19:35,075
この辞書のオフセットを基盤に

288
00:19:36,310 --> 00:19:39,980
特別なことは
何もしていないのです

289
00:19:40,080 --> 00:19:43,550
従来のレイアウト駆動型UIの
ケースだけ

290
00:19:44,084 --> 00:19:47,854
ジェスチャが駆動する
状態に対して―

291
00:19:47,955 --> 00:19:50,657
layoutSubviewsで
応答するだけ

292
00:19:51,525 --> 00:19:55,195
アプリケーション全体で
このパターンに従えば―

293
00:19:55,295 --> 00:19:59,466
こういう操作の組み込みが
とても簡単になります

294
00:20:00,400 --> 00:20:04,137
以上がレイアウト駆動型UIです
レシピのおさらいを

295
00:20:04,538 --> 00:20:07,975
UIに影響する
すべての状態の特定と追跡

296
00:20:08,075 --> 00:20:09,943
Swiftの
プロパティオブザーバで―

297
00:20:10,043 --> 00:20:13,781
状態が変わるたび
setNeedsLayoutを呼び出す

298
00:20:14,581 --> 00:20:17,751
最後に
layoutSubviewsの実装で―

299
00:20:17,851 --> 00:20:23,056
追跡した状態を基盤に
ビューの状態を更新します

300
00:20:23,190 --> 00:20:24,024
以上です

301
00:20:24,758 --> 00:20:28,829
(拍手)

302
00:20:29,029 --> 00:20:32,900
iOS体験とは
レスポンシブであることです

303
00:20:33,867 --> 00:20:39,740
また 顧客に楽しい経験を
可能な限り早く提供したい

304
00:20:40,908 --> 00:20:46,113
アイコンをタップして楽しむまでに
ステップが１つ 挟まります

305
00:20:46,847 --> 00:20:50,150
そのステップとは
起動時間です

306
00:20:52,519 --> 00:20:55,823
これを最適化するのに
役立つ―

307
00:20:55,923 --> 00:21:01,094
起動を構成する ５つの
高レベル構成要素をご説明します

308
00:20:55,923 --> 00:21:01,094
起動を構成する ５つの
高レベル構成要素をご説明します

309
00:21:02,596 --> 00:21:05,866
まずは１つ目の
プロセスのフォーク

310
00:21:06,900 --> 00:21:09,469
このフェーズでは
何ができる？

311
00:21:10,003 --> 00:21:13,507
プロセスのフォークは
本当に複雑です

312
00:21:13,607 --> 00:21:16,743
fork and execの
manページを読んで―

313
00:21:16,844 --> 00:21:19,847
POSIXの基本を
把握したくなります

314
00:21:19,947 --> 00:21:24,418
冗談です　プロセスのフォークは
iOSにお任せください

315
00:21:25,619 --> 00:21:28,555
１つ目はお任せを
２つ目に行きましょう

316
00:21:31,458 --> 00:21:32,693
ダイナミックリンク

317
00:21:34,228 --> 00:21:39,066
このフェーズではメモリを割り当て
アプリケーションを実行し

318
00:21:39,733 --> 00:21:42,102
ライブラリと
フレームワークをリンクし

319
00:21:42,503 --> 00:21:45,739
Swiftや Objective-Cや
Foundationを初期化

320
00:21:46,306 --> 00:21:48,942
静的オブジェクトも
初期化します

321
00:21:50,077 --> 00:21:55,949
通常は これで標準起動時間の
40～50％を取られかねません

322
00:21:57,151 --> 00:22:01,422
ここで重要なのは
コードを全く実行していないこと

323
00:21:57,151 --> 00:22:01,422
ここで重要なのは
コードを全く実行していないこと

324
00:22:02,422 --> 00:22:05,592
これを最適化する方法の理解が
不可欠です

325
00:22:06,093 --> 00:22:08,562
皆さんに何か
いいアドバイスは？

326
00:22:08,729 --> 00:22:10,330
よくぞ聞いてくれた

327
00:22:10,430 --> 00:22:13,667
起動時間のリンクフェーズを
最適化する時は―

328
00:22:13,767 --> 00:22:16,103
細心の注意を払うことが
重要です

329
00:22:16,203 --> 00:22:20,140
起動時間を
かなり取られるからです

330
00:22:21,375 --> 00:22:26,513
まず 可能な時は
コードの重複を避けることです

331
00:22:26,880 --> 00:22:31,018
関数やオブジェクト
構造体が重複していたら―

332
00:22:31,118 --> 00:22:34,087
削除して 重複させないこと

333
00:22:35,122 --> 00:22:39,359
次に 他社製のライブラリは
使用を制限しましょう

334
00:22:39,993 --> 00:22:42,796
Apple製ライブラリは
キャッシュされるので―

335
00:22:42,896 --> 00:22:47,601
アクティブメモリに
既にあるかもしれません

336
00:22:48,268 --> 00:22:50,971
他社製ライブラリは
キャッシュされず―

337
00:22:51,071 --> 00:22:54,908
他のアプリケーションが
同じライブラリを使っていても―

338
00:22:55,008 --> 00:22:58,412
フレームワークに
入れねばなりません

339
00:22:58,579 --> 00:23:03,150
他社製の使用は
できるだけ制限すべきです

340
00:22:58,579 --> 00:23:03,150
他社製の使用は
できるだけ制限すべきです

341
00:23:03,817 --> 00:23:07,988
最後に
静的イニシャライザと―

342
00:23:08,088 --> 00:23:13,126
+loadや+initializeといった
メソッドでの動作を避けます

343
00:23:13,227 --> 00:23:17,231
アプリケーションの作業より先に
実行するものなので

344
00:23:18,665 --> 00:23:21,568
以上に関して より詳しくは
WWDC 2017の―

345
00:23:21,668 --> 00:23:27,007
App Startup Time: Past, Present,
and Futureを参照してください

346
00:23:28,575 --> 00:23:32,212
次のフェーズはUIの構築です

347
00:23:32,813 --> 00:23:37,317
ここではUIを準備し
View Controllerを構築します

348
00:23:38,452 --> 00:23:42,456
システムが状態を復元し
環境設定を読み込みます

349
00:23:43,690 --> 00:23:47,895
皆さんは必要なデータを読み込み
レスポンシブに

350
00:23:49,563 --> 00:23:52,733
このフェーズでは
何ができる？

351
00:23:53,500 --> 00:23:58,505
最適化により UIの構築速度を
できるだけ速くします

352
00:23:59,206 --> 00:24:01,909
つまりできるだけ速く
UIの―

353
00:23:59,206 --> 00:24:01,909
つまりできるだけ速く
UIの―

354
00:24:02,009 --> 00:24:05,212
アプリケーション起動メソッドから
戻ること

355
00:24:05,412 --> 00:24:08,215
willFinishLaunching
didFinishLaunching そして

356
00:24:08,315 --> 00:24:09,917
DidBecomeActiveです

357
00:24:10,050 --> 00:24:13,020
アプリケーションが
アクティブになるのは―

358
00:24:13,120 --> 00:24:15,656
これらから戻った後なのです

359
00:24:16,957 --> 00:24:19,660
次に アプリケーションの
起動中は―

360
00:24:19,927 --> 00:24:23,030
ファイルシステムへの
書き込みを避けます

361
00:24:23,430 --> 00:24:26,133
システムコールを
要求されるからです

362
00:24:26,767 --> 00:24:32,406
これに合わせて 起動中の
大量の読み込みも避けます

363
00:24:32,873 --> 00:24:38,111
今すぐ必要なデータのみの
ストリーミングを考えてください

364
00:24:38,979 --> 00:24:44,618
最後に データベースがクリーンか
整理状況の確認をお勧めします

365
00:24:45,319 --> 00:24:47,888
CoreDataライブラリを
使う時は―

366
00:24:48,121 --> 00:24:52,426
スキーマのできるだけ早い最適化を
検討してください

367
00:24:52,759 --> 00:24:56,897
独自のソリューションを
SQLiteなどで展開するなら―

368
00:24:56,997 --> 00:25:00,467
データベースの定期的な掃除を
検討してください

369
00:24:56,997 --> 00:25:00,467
データベースの定期的な掃除を
検討してください

370
00:25:00,567 --> 00:25:03,270
例えばアプリケーションの
更新時ですね

371
00:25:04,104 --> 00:25:05,005
ありがとう

372
00:25:06,039 --> 00:25:09,843
次のフェーズは
最初のフレームを生成する時です

373
00:25:11,278 --> 00:25:16,016
ここではCore Animationが
必要なレンダリングを行い―

374
00:25:16,950 --> 00:25:18,352
テキストを描画し―

375
00:25:18,452 --> 00:25:22,823
UIに表示すべき画像を
読み込んで展開します

376
00:25:24,424 --> 00:25:27,995
ピーター
何か賢明なアドバイスはある？

377
00:25:28,595 --> 00:25:29,696
あるとも

378
00:25:29,797 --> 00:25:34,101
最初のフレームを用意する時
重要なのは―

379
00:25:34,201 --> 00:25:38,438
起動中に必要なUIのみ
準備するよう注意すること

380
00:25:38,739 --> 00:25:42,776
ユーザが特定のセクションに
移動していなければ―

381
00:25:43,043 --> 00:25:44,111
読み込まず―

382
00:25:44,211 --> 00:25:47,815
絶対 必要な時に
ゆっくり取り込むこと

383
00:25:48,615 --> 00:25:53,053
アプリケーションに移動した時
表示されるべきでない―

384
00:25:53,153 --> 00:25:55,155
ビューとレイヤーを
隠すだけにしない

385
00:25:55,889 --> 00:25:59,393
隠していても
負担はかかるので―

386
00:25:59,493 --> 00:26:03,931
最初のフレームに不可欠な
ビューとレイヤーのみにします

387
00:25:59,493 --> 00:26:03,931
最初のフレームに不可欠な
ビューとレイヤーのみにします

388
00:26:05,566 --> 00:26:10,804
最後のフェーズは
拡張起動アクションです

389
00:26:12,339 --> 00:26:16,443
皆さんは こういうタスクを
起動パスから延期し―

390
00:26:16,543 --> 00:26:18,579
反応を早くしているでしょう

391
00:26:19,513 --> 00:26:24,184
それでレスポンシブになっても
まだあまり使えないのでは

392
00:26:25,385 --> 00:26:28,889
このフェーズでは
次の作業の優先度を決めます

393
00:26:29,323 --> 00:26:31,892
今すぐ表示すべき
コンテンツのみにします

394
00:26:32,860 --> 00:26:36,163
コンテンツをリモートサーバから
読み込むなら―

395
00:26:36,263 --> 00:26:39,766
ネットワークの状態が
課題となることを お忘れなく

396
00:26:39,900 --> 00:26:44,004
必要ならプレースホルダUIを
準備してください

397
00:26:46,273 --> 00:26:51,011
以上が起動を構成する
５つの高レベル構成要素です

398
00:26:52,446 --> 00:26:54,248
今日は もう１つ

399
00:26:55,549 --> 00:26:57,151
ABMです

400
00:26:58,018 --> 00:27:01,388
“常に計測する”と
いうことです

401
00:26:58,018 --> 00:27:01,388
“常に計測する”と
いうことです

402
00:27:01,488 --> 00:27:03,724
アプリケーションは
高速起動でないと

403
00:27:04,291 --> 00:27:08,095
起動に要する時間の把握は
不可欠です

404
00:27:08,428 --> 00:27:11,298
Time Profilerで
定期的に計測すること

405
00:27:11,932 --> 00:27:16,970
起動パスのコードを
変えるたびに計測してください

406
00:27:17,171 --> 00:27:22,342
そして１つのプロファイルに頼らず
統計的平均を取ること

407
00:27:23,911 --> 00:27:27,414
高速起動にして
反応を早くしてください

408
00:27:27,514 --> 00:27:31,518
必要なものだけ使い
計測を繰り返すこと

409
00:27:31,985 --> 00:27:32,753
以上です

410
00:27:32,920 --> 00:27:39,026
(拍手)

411
00:27:39,126 --> 00:27:43,964
スクロールはiOSの
ユーザ体験の重要な要素で

412
00:27:44,064 --> 00:27:47,668
アプリケーション体験の
大きな部分を占めます

413
00:27:48,635 --> 00:27:52,272
iPhoneとiPadは
魔法のガラス板で

414
00:27:52,372 --> 00:27:56,009
アプリケーションの
望むとおりに変化します

415
00:27:56,910 --> 00:27:58,745
そこで重要になるのが―

416
00:27:58,846 --> 00:28:04,017
この魔法の板の上でコンテンツを
滑らかに動かし続けること

417
00:27:58,846 --> 00:28:04,017
この魔法の板の上でコンテンツを
滑らかに動かし続けること

418
00:28:04,952 --> 00:28:10,224
Appleで好んで使うフレーズが
“バターのように滑らかな感触”

419
00:28:11,358 --> 00:28:14,862
しかし時々 引っかかったり
つかえたりして―

420
00:28:14,962 --> 00:28:19,132
バターというより
ピーナツバターのような感触に

421
00:28:20,134 --> 00:28:23,604
アプリケーションが
ぎくしゃくするのです

422
00:28:24,605 --> 00:28:28,408
ベン こうやって
動作が遅くなる原因は？

423
00:28:29,009 --> 00:28:34,882
君が説明した動作の遅さは
フレームが落ちているから

424
00:28:35,215 --> 00:28:40,487
原因を把握する必要がありますが
発生しうる重要な領域が２つ

425
00:28:40,954 --> 00:28:43,891
１つ目は
計算が多すぎる可能性で

426
00:28:44,491 --> 00:28:49,062
２つ目はグラフィック描画が
複雑すぎる可能性です

427
00:28:50,430 --> 00:28:54,034
順番に見ていきましょう
まずは計算から

428
00:28:54,902 --> 00:28:57,471
計算が多すぎるか
確かめるには？

429
00:28:58,605 --> 00:29:03,177
InstrumentsのTime Profilerが
究極のツールです

430
00:28:58,605 --> 00:29:03,177
InstrumentsのTime Profilerが
究極のツールです

431
00:29:03,844 --> 00:29:09,583
コードの使用CPU時間を計測し
行ごとに知らせてくれます

432
00:29:10,017 --> 00:29:13,220
実に有効なツールなので
WWDC 2016の―

433
00:29:13,320 --> 00:29:17,825
Using the Time Profiler in
Instrumentsをご参照ください

434
00:29:18,759 --> 00:29:23,130
Time Profilerで
ホットスポットを特定したら―

435
00:29:23,230 --> 00:29:26,099
最適化する
すばらしいヒントがあります

436
00:29:27,100 --> 00:29:31,672
１つはUICollectionViewと
UITableViewを使ったプリフェッチ

437
00:29:32,139 --> 00:29:34,308
ユーザが
特定のセルに向かい―

438
00:29:34,408 --> 00:29:37,678
スクロールしている間に
知らせるAPIです

439
00:29:38,011 --> 00:29:40,948
そのデータを
先読みする機会を得られます

440
00:29:41,515 --> 00:29:45,419
これに関しては2016年の
２人のイケメンによる―

441
00:29:45,519 --> 00:29:47,855
セッションを
ぜひご覧ください

442
00:29:49,356 --> 00:29:51,492
次にお教えするヒントは―

443
00:29:51,592 --> 00:29:55,095
メインキューの作業を
できるだけ減らし―

444
00:29:55,195 --> 00:29:56,964
バックグラウンドキューへ

445
00:29:57,064 --> 00:30:01,768
メインキューを解放し UI更新と
ユーザ入力の処理をさせます

446
00:29:57,064 --> 00:30:01,768
メインキューを解放し UI更新と
ユーザ入力の処理をさせます

447
00:30:02,336 --> 00:30:05,405
ベン
どんな作業が減らせる？

448
00:30:06,039 --> 00:30:08,308
予想の範囲内では通常の作業

449
00:30:08,575 --> 00:30:11,278
ネットワークや
ファイルシステムへのアクセス

450
00:30:11,378 --> 00:30:13,347
メインスレッドで
実行すべきでない

451
00:30:14,047 --> 00:30:18,085
意外なところでは画像の描画や
テキストのサイズ設定

452
00:30:18,819 --> 00:30:23,924
UIGraphicsImageRendererと
その分散型文字列は安全に―

453
00:30:24,024 --> 00:30:25,893
バックグラウンドスレッドで
使えます

454
00:30:25,993 --> 00:30:31,732
複雑な計算を一部
メインキューから移動できます

455
00:30:33,233 --> 00:30:37,571
すばらしいヒントだ
思いもよらなかったよ

456
00:30:38,038 --> 00:30:40,974
“言われたとおり
Time Profilerを実行し―”

457
00:30:41,074 --> 00:30:46,914
“先読みをやり メインキューの
作業を減らしたのに―”

458
00:30:47,548 --> 00:30:49,550
“まだ動作が遅い”

459
00:30:49,850 --> 00:30:52,152
“問題は他にあるのでは？”

460
00:30:52,853 --> 00:30:55,756
まだ問題が
解決していないのかも

461
00:30:56,223 --> 00:30:58,859
可能性としては
計算を最適化しても―

462
00:30:59,359 --> 00:31:02,696
グラフィックシステムに
まだ問題が

463
00:30:59,359 --> 00:31:02,696
グラフィックシステムに
まだ問題が

464
00:31:05,065 --> 00:31:07,568
幸い もう１つ
優れたツールがあります

465
00:31:08,969 --> 00:31:14,908
Core Animation Instrumentは
フレームレートを表示します

466
00:31:15,142 --> 00:31:18,912
同時にGPUの使用状況も
調べます

467
00:31:19,880 --> 00:31:21,849
実に有効なツールです

468
00:31:21,949 --> 00:31:23,851
使い方の詳細は
WWDC 2014の―

469
00:31:23,951 --> 00:31:29,056
Advanced Graphics and Animations
for iOS Appsを参照してください

470
00:31:30,791 --> 00:31:33,961
グラフィックが原因だと
特定できたら―

471
00:31:34,061 --> 00:31:37,297
簡単に調査できる
すばらしいヒントがあります

472
00:31:38,265 --> 00:31:43,136
通常 高グラフィック負荷の
アプリケーションは視覚効果か―

473
00:31:43,537 --> 00:31:46,473
マスキングとクリッピングの
使いすぎです

474
00:31:47,074 --> 00:31:50,944
blurやvibrancyなどの視覚効果は
高負荷なので―

475
00:31:51,044 --> 00:31:54,181
上品に使うべきなのです

476
00:31:54,715 --> 00:31:59,453
それと視覚効果を
重ねるべきではありません

477
00:31:59,553 --> 00:32:04,024
GPUのオーバードライブ状態で
アプリケーションが遅くなる

478
00:31:59,553 --> 00:32:04,024
GPUのオーバードライブ状態で
アプリケーションが遅くなる

479
00:32:04,892 --> 00:32:09,329
マスキングとクリッピングも
可能な限り 避けます

480
00:32:09,830 --> 00:32:13,901
代わりに 同じ外観が
実現できるなら―

481
00:32:14,001 --> 00:32:19,173
不透明なコンテンツの配置を
お勧めします

482
00:32:19,373 --> 00:32:24,645
UIViewやCALayerのマスクされた
ビューやプロパティは使わない

483
00:32:25,345 --> 00:32:28,949
以上がスムーズな
スクロールのための最適化です

484
00:32:29,249 --> 00:32:34,021
Time ProfilerとCore Animationを
必ず使ってください

485
00:32:34,922 --> 00:32:39,226
プリフェッチし メインキューの
作業をできるだけ減らし

486
00:32:40,427 --> 00:32:45,265
視覚効果とマスキングと
クリッピングを控える

487
00:32:45,833 --> 00:32:48,469
プロファイリングの詳細は
WWDC 2015の―

488
00:32:48,569 --> 00:32:51,839
すばらしい講演を
参照してください

489
00:32:52,005 --> 00:32:52,873
以上です

490
00:32:53,807 --> 00:32:56,510
(拍手)

491
00:32:56,610 --> 00:33:01,381
連係はAppleのプラットフォームの
最も魔法的な体験の１つ

492
00:32:56,610 --> 00:33:01,381
連係はAppleのプラットフォームの
最も魔法的な体験の１つ

493
00:33:02,182 --> 00:33:06,787
そしてHandoffは
顧客を楽しませる優れた方法です

494
00:33:07,588 --> 00:33:13,360
タスクを１つのデバイスから
別のデバイスへ―

495
00:33:13,460 --> 00:33:17,798
シームレスに遷移できるのは
すばらしい体験です

496
00:33:19,266 --> 00:33:22,970
HandoffはiOS macOS
watchOS間で機能します

497
00:33:23,570 --> 00:33:27,441
P2P接続なので
インターネット接続は不要です

498
00:33:28,575 --> 00:33:32,246
皆さんにとって何よりなのは
設定が実に簡単です

499
00:33:34,181 --> 00:33:37,017
Handoffの使用を
どう考えるべきか

500
00:33:37,985 --> 00:33:42,556
Appleのアプリケーションで
例を検討していきましょう

501
00:33:43,891 --> 00:33:47,294
例えば あのイケメン講演者からの
メッセージに―

502
00:33:47,528 --> 00:33:51,231
iPhone Xの面白いアニ文字で
返信したい

503
00:33:52,099 --> 00:33:57,571
iOSのAppスイッチャーから
すぐに この会話に戻れます

504
00:33:58,705 --> 00:34:02,242
あるいはMacのPagesで
ドキュメントの編集中に―

505
00:33:58,705 --> 00:34:02,242
あるいはMacのPagesで
ドキュメントの編集中に―

506
00:34:02,776 --> 00:34:08,549
iPadに引き継ぎたい時は
Dockのアイコンをタップします

507
00:34:10,016 --> 00:34:13,487
あるいはWatchで
何となく写真を見ていて―

508
00:34:14,154 --> 00:34:18,992
前回のWWDCの写真を見つけて
アルバムごと見たくなったら―

509
00:34:19,626 --> 00:34:24,764
その１枚を検索せず iPhoneの
フォトライブラリに戻れます

510
00:34:26,065 --> 00:34:27,900
Handoffは実に有効です

511
00:34:28,001 --> 00:34:32,505
顧客はデバイスを移る時
時間を大幅に節約できます

512
00:34:34,241 --> 00:34:36,743
導入がどれだけ簡単か
お見せします

513
00:34:36,944 --> 00:34:40,581
NSUserActivity APIの上に
構築されます

514
00:34:41,949 --> 00:34:47,487
NSUserActivityは現在の
状態やアクティビティを示します

515
00:34:47,654 --> 00:34:49,822
ここではEメールを
作成しています

516
00:34:52,793 --> 00:34:54,828
このアクティビティが
生成されると―

517
00:34:54,928 --> 00:34:58,799
同じiCloudアカウントで
サインインされている―

518
00:34:59,133 --> 00:35:01,769
近くの全デバイスに
Handoff可能の表示が

519
00:34:59,133 --> 00:35:01,769
近くの全デバイスに
Handoff可能の表示が

520
00:35:02,502 --> 00:35:04,972
MacではDockに
アイコンがあります

521
00:35:06,607 --> 00:35:09,309
“メール”アイコンを
クリックすると―

522
00:35:09,443 --> 00:35:12,212
アクティビティが
Macへ移動し

523
00:35:13,146 --> 00:35:16,517
メールが起動
中断したところから続けられます

524
00:35:18,619 --> 00:35:21,521
設定に必要なコードを
見てみましょう

525
00:35:24,558 --> 00:35:29,730
元のデバイスでは任意のタイプの
NSUserActivityを生成

526
00:35:30,430 --> 00:35:34,568
このタイプはユーザの
現在のアクティビティを示します

527
00:35:36,036 --> 00:35:39,873
次にタイトルを設定し
isEligibleForHandoffをtrueに設定

528
00:35:40,841 --> 00:35:43,911
次にuserInfo辞書に
値を設定します

529
00:35:44,478 --> 00:35:49,917
アクティビティの継続に必要な
すべての情報を入れます

530
00:35:50,617 --> 00:35:56,256
ここではビデオの例なので
ビデオのIDと現在の再生時間です

531
00:35:58,125 --> 00:36:03,130
最後に View Controllerの
userActivityプロパティに設定

532
00:35:58,125 --> 00:36:03,130
最後に View Controllerの
userActivityプロパティに設定

533
00:36:03,897 --> 00:36:08,335
View Controllerの表示のたびに
現在のアクティビティになります

534
00:36:09,403 --> 00:36:11,772
元のデバイスの設定は
以上です

535
00:36:12,840 --> 00:36:14,441
引き継ぐデバイスでは―

536
00:36:14,541 --> 00:36:19,613
まず生成したアクティビティの
タイプのサポートを宣言し

537
00:36:20,047 --> 00:36:24,051
２つのUIApplicationDelegateの
コールバックを実装

538
00:36:24,585 --> 00:36:27,888
１つ目はapplication: will
ContinueUserActivityWithType:

539
00:36:27,988 --> 00:36:30,858
アイコンをクリックか
タップすると すぐに―

540
00:36:30,958 --> 00:36:33,427
これが呼び出され
引き継ぎが始まります

541
00:36:34,328 --> 00:36:37,898
NSUserActivityオブジェクトを
まだ用意してませんが

542
00:36:38,265 --> 00:36:41,168
継続するアクティビティの
種類は分かるので―

543
00:36:41,268 --> 00:36:43,570
UIの準備を始められます

544
00:36:44,771 --> 00:36:45,873
直後に受け取る―

545
00:36:45,973 --> 00:36:49,343
applicationContinueRestoration
ハンドラが―

546
00:36:49,743 --> 00:36:53,547
完全に復元された
NSUserActivityオブジェクトを収容

547
00:36:54,648 --> 00:36:59,853
その時点から 引き継ぐデバイスで
体験の継続ができます

548
00:37:00,854 --> 00:37:04,792
userInfo辞書に収まりきらない
情報があるなら―

549
00:37:04,892 --> 00:37:07,895
NSUserActivityの
優れた機能が使えます

550
00:37:07,995 --> 00:37:10,230
継続ストリームです

551
00:37:10,631 --> 00:37:15,669
supportsContinuationStreams
プロパティをtrueに設定するだけ

552
00:37:16,236 --> 00:37:18,972
次に 引き継ぐデバイスで
NSUserActivityの―

553
00:37:19,073 --> 00:37:24,211
getContinuationStreams
メソッドを呼び出します

554
00:37:24,411 --> 00:37:27,648
これが入力ストリームと
出力ストリームを提供

555
00:37:28,448 --> 00:37:32,452
元のデバイスでも
NSUserActivityのデリゲートが―

556
00:37:32,552 --> 00:37:37,191
これらのストリームを提供する
コールバックを受信します

557
00:37:37,791 --> 00:37:41,428
元のデバイスと
引き継ぐデバイスは―

558
00:37:41,528 --> 00:37:44,832
これらのチャンネルで
双方向通信ができます

559
00:37:45,232 --> 00:37:48,102
しかし これを
できるだけ早く完了したい

560
00:37:48,202 --> 00:37:51,238
ユーザがデバイス同士を
離すかもしれないので

561
00:37:52,372 --> 00:37:53,807
ストリームの詳細は―

562
00:37:53,907 --> 00:37:57,611
デベロッパWebサイトの
Stream Programming Guideを

563
00:37:58,845 --> 00:38:03,050
userInfo辞書に適さないものを
移すのに最適です

564
00:37:58,845 --> 00:38:03,050
userInfo辞書に適さないものを
移すのに最適です

565
00:38:03,150 --> 00:38:07,621
例えば画像や 先のEメールの例の
ビデオコンテンツです

566
00:38:08,188 --> 00:38:12,526
ドキュメントベースの
アプリケーションなら もっと簡単

567
00:38:13,026 --> 00:38:15,429
動作の多くを
何もせずに得られます

568
00:38:16,096 --> 00:38:20,567
NSUserActivityオブジェクトを
UIDocumentとNSDocumentが自動生成

569
00:38:20,667 --> 00:38:23,904
現在 編集中のドキュメントが
示されます

570
00:38:25,339 --> 00:38:28,509
これはiCloud内の
すべてのドキュメントに有効

571
00:38:29,943 --> 00:38:34,114
アプリケーションでは
Info.plistを適切に設定するだけ

572
00:38:36,183 --> 00:38:38,252
アプリケーション同士に
加え―

573
00:38:38,819 --> 00:38:42,022
ウェブブラウザへのHandoffも
サポートします

574
00:38:42,990 --> 00:38:47,961
ネイティブアプリケーションの
体験を引き継ぐデバイスに―

575
00:38:48,896 --> 00:38:52,065
ネイティブアプリケーションが
ない場合は―

576
00:38:52,633 --> 00:38:57,204
Safariに引き継いで
ウェブブラウザで継続できます

577
00:38:58,739 --> 00:39:02,810
ウェブブラウザからのHandoffも
サポートします

578
00:38:58,739 --> 00:39:02,810
ウェブブラウザからのHandoffも
サポートします

579
00:39:03,444 --> 00:39:07,481
承認済みアプリケーションIDの
リストをサーバ側で作成

580
00:39:07,581 --> 00:39:12,352
次にassociated-domains
エンタイトルメントを追加します

581
00:39:12,519 --> 00:39:16,457
これでユーザはウェブ体験を
アプリケーションへ―

582
00:39:16,557 --> 00:39:18,392
シームレスに引き継げます

583
00:39:18,759 --> 00:39:20,127
さらなる詳細は2014年の―

584
00:39:20,227 --> 00:39:23,931
Handoffの講演を
参照してください

585
00:39:25,732 --> 00:39:29,703
Handoffは以上です
ぜひ実装してください

586
00:39:29,803 --> 00:39:33,240
ユーザが楽しめますし
さらに付け加えると―

587
00:39:33,340 --> 00:39:37,044
NSUserActivity APIは
システム体験全体で使われます

588
00:39:37,144 --> 00:39:40,748
例えばSpotlight検索や
新機能のSiri Shortcuts

589
00:39:41,782 --> 00:39:45,886
詳細は以前のWWDCの講演を
参照してください

590
00:39:46,153 --> 00:39:46,920
以上です

591
00:39:47,321 --> 00:39:53,193
(拍手)

592
00:39:56,730 --> 00:40:00,033
すばらしいアプリケーションを
書いても―

593
00:39:56,730 --> 00:40:00,033
すばらしいアプリケーションを
書いても―

594
00:40:00,801 --> 00:40:04,972
調べねばならない問題が
時には生じます

595
00:40:05,372 --> 00:40:10,377
そこで 「マトリックス」レベルの
デバッグ技をお教えします

596
00:40:10,477 --> 00:40:13,180
しかし 先にひと言
忠告します

597
00:40:14,381 --> 00:40:18,986
“赤いピル”を飲ませ
“ウサギの穴の深さ”を教える前に

598
00:40:19,219 --> 00:40:22,956
このセクションでお見せする
手法は―

599
00:40:23,056 --> 00:40:27,394
デバッグに最適ですが
App Storeに提出してはいけません

600
00:40:27,861 --> 00:40:31,899
アプリケーションは却下され
嫌な思いをするでしょう

601
00:40:32,299 --> 00:40:34,735
この忠告を前提に 始めます

602
00:40:35,936 --> 00:40:38,705
まずは探偵の心構えから

603
00:40:38,805 --> 00:40:42,176
プログラムの問題には
そうやって対処します

604
00:40:42,876 --> 00:40:47,748
次はビューやView Controllerの
デバックのやり方

605
00:40:48,282 --> 00:40:53,587
そしてアプリケーションの
状態の問題をLLDBで特定する方法

606
00:40:54,188 --> 00:40:59,693
最後に 出くわすと気分が悪くなる
メモリの大問題に関する―

607
00:40:59,793 --> 00:41:01,895
テクニックを見ていきます

608
00:40:59,793 --> 00:41:01,895
テクニックを見ていきます

609
00:41:02,396 --> 00:41:05,232
まずは探偵の心構えです

610
00:41:05,833 --> 00:41:11,471
プログラムの問題では
自分の仮説を必ず検証しましょう

611
00:41:11,672 --> 00:41:16,543
プログラムが何をしているか
予想したら 確かめてください

612
00:41:16,977 --> 00:41:20,781
デバッグする時
これが大きな一歩になりえます

613
00:41:21,849 --> 00:41:25,586
どの仮説が反していたか
確認できたら―

614
00:41:25,919 --> 00:41:29,423
手掛かりを
探し始めることができます

615
00:41:29,957 --> 00:41:32,793
これからお見せする
ツールで―

616
00:41:32,893 --> 00:41:35,929
オブジェクトや構造体を
探ってください

617
00:41:36,563 --> 00:41:41,735
次にアプリケーションの状態を
変えることで勘を試し

618
00:41:41,835 --> 00:41:43,937
問題を見つけたか確かめます

619
00:41:44,605 --> 00:41:47,875
始めましょう
サンプルのバグは本物です

620
00:41:49,042 --> 00:41:53,947
Appleで働くことの特権の１つが
スクリーンショットエディタ

621
00:41:54,715 --> 00:41:59,787
先日 ペンツールが
消えてしまったのでデバッグを

622
00:41:59,887 --> 00:42:01,255
これはひどい

623
00:41:59,887 --> 00:42:01,255
これはひどい

624
00:42:03,023 --> 00:42:06,460
この問題の原因究明に
役立つツールはある？

625
00:42:07,061 --> 00:42:08,128
もちろん

626
00:42:08,529 --> 00:42:11,598
Xcodeに内蔵されている
ビューデバッガ

627
00:42:12,299 --> 00:42:15,736
下のツールバーの
このアイコンをクリック

628
00:42:16,403 --> 00:42:21,275
するとXcodeがビュー階層を
3Dで表示します

629
00:42:22,643 --> 00:42:26,146
鉛筆ツールは 見てのとおり
まだあるものの―

630
00:42:26,246 --> 00:42:29,683
全画面ビューに
前を塞がれている

631
00:42:30,551 --> 00:42:35,088
このUIの構築場所で順序付けに
何が起きているか 調べるべきだ

632
00:42:35,889 --> 00:42:36,690
すばらしい

633
00:42:36,790 --> 00:42:41,829
ビューデバッガはビューの
デバッグに最高のツールです

634
00:42:42,763 --> 00:42:46,100
これに関して
役立つツールは他にもあります

635
00:42:47,968 --> 00:42:50,304
UIViewの
recursiveDescription

636
00:42:50,504 --> 00:42:52,806
UIViewのparentDescription

637
00:42:52,940 --> 00:42:56,477
UIViewControllerクラスの
printHierarchyメソッド

638
00:42:56,643 --> 00:43:00,848
ビューやView Controllerの
問題のデバックに最適です

639
00:42:56,643 --> 00:43:00,848
ビューやView Controllerの
問題のデバックに最適です

640
00:43:01,815 --> 00:43:06,286
ただし これらも
App Storeに提出しないでください

641
00:43:07,287 --> 00:43:10,858
そして これらは
Objective-Cのセレクタです

642
00:43:10,991 --> 00:43:13,760
ですから これらを使う前に
デバッガを―

643
00:43:13,861 --> 00:43:17,464
このコマンドで
Objective-Cモードにします

644
00:43:18,265 --> 00:43:20,868
これらのデバッグメソッドを
１つ１つ―

645
00:43:20,968 --> 00:43:23,771
どう役立つのかお教えします

646
00:43:23,871 --> 00:43:26,773
まずはUIViewの
recursiveDescription

647
00:43:28,775 --> 00:43:31,812
UIViewの
recursiveDescriptionは―

648
00:43:31,912 --> 00:43:35,849
レシーバのサブビュー階層を
出力します

649
00:43:35,949 --> 00:43:40,621
レイアウト属性の理解に役立つ
関連プロパティがあります

650
00:43:41,622 --> 00:43:43,190
例を見てみましょう

651
00:43:43,524 --> 00:43:46,627
スクリーンショットのUIの
ビューが消えているバグ

652
00:43:47,494 --> 00:43:51,765
View Controllerのビューの
recursiveDescriptionを呼び出す

653
00:43:53,700 --> 00:43:57,504
デバッグテキストの壁に見えますね
そのとおりです

654
00:43:58,939 --> 00:44:03,377
スクリーンショットのビューが
ここにあると分かっています

655
00:43:58,939 --> 00:44:03,377
スクリーンショットのビューが
ここにあると分かっています

656
00:44:03,477 --> 00:44:06,847
調べると現在は
隠されていると分かるので―

657
00:44:08,248 --> 00:44:13,854
hiddenプロパティの設定場所を
すべて調べ 原因を把握します

658
00:44:16,090 --> 00:44:20,294
さらにUIViewには
parentDescriptionもあります

659
00:44:20,394 --> 00:44:24,398
これはビュー階層を
親ビューまで上っていき―

660
00:44:24,798 --> 00:44:29,737
同じ種類のデバッグ情報を出力する
nil parentに達します

661
00:44:32,039 --> 00:44:36,577
以上のどちらも
UIViewのデバッグに最適です

662
00:44:36,810 --> 00:44:40,214
しかし問題が
UIViewControllerにあることも

663
00:44:40,347 --> 00:44:44,451
そこで使えるのが
UIViewControllerの―

664
00:44:44,551 --> 00:44:45,919
printHierarchyです

665
00:44:46,887 --> 00:44:49,656
先日の
スクリーンショットエディタのバグ

666
00:44:49,757 --> 00:44:53,994
viewDidAppearのメッセージを
View Controllerが受信してない

667
00:44:54,094 --> 00:44:56,430
状態の設定が
不適切だったのです

668
00:44:57,197 --> 00:45:00,167
printHierarchyを
実行すると―

669
00:44:57,197 --> 00:45:00,167
printHierarchyを
実行すると―

670
00:45:00,500 --> 00:45:05,906
表示中のView Controllerと
表示されたView Controllerと―

671
00:45:06,473 --> 00:45:09,643
parentViewControllerと
childViewControllersと―

672
00:45:09,743 --> 00:45:12,112
presentationControllerの
出力が取得可能

673
00:45:12,212 --> 00:45:13,881
まさに controller祭り

674
00:45:14,281 --> 00:45:17,751
ではスクリーンショットUIの
printHierarchyを実行

675
00:45:19,319 --> 00:45:22,389
これは
View Controllerの階層です

676
00:45:22,523 --> 00:45:25,726
問題のある
View Controllerを調べると―

677
00:45:25,826 --> 00:45:30,964
出現状態で固まり
コールバックに失敗していた

678
00:45:31,064 --> 00:45:35,068
そこで このコールバックの
呼び出しをする所を調べ―

679
00:45:35,168 --> 00:45:36,703
問題を見つけます

680
00:45:37,337 --> 00:45:42,676
ビューやView Controllerの
問題をこれで特定できます

681
00:45:43,143 --> 00:45:46,413
しかし時には
もっと根本的な問題があります

682
00:45:46,980 --> 00:45:51,218
これには状態のデバッグに関する
すばらしいヒントを

683
00:45:51,852 --> 00:45:57,558
LLDBのexpressionコマンドで
任意のコードを実行できます

684
00:45:57,925 --> 00:46:01,495
ソースエディタ
デバッガに直接 書き込み―

685
00:45:57,925 --> 00:46:01,495
ソースエディタ
デバッガに直接 書き込み―

686
00:46:01,595 --> 00:46:05,966
プログラム実行中に
実行できるコードなのです

687
00:46:06,366 --> 00:46:08,702
デバッグにとても役立ちます

688
00:46:09,069 --> 00:46:11,205
構造体の関数を
呼び出せるし―

689
00:46:11,305 --> 00:46:13,240
オブジェクトのプロパティを
取得でき―

690
00:46:13,340 --> 00:46:16,376
プログラムが何をしているか
的確な診断ができる

691
00:46:17,077 --> 00:46:20,380
より詳しくは過去の講演を
参照してください

692
00:46:20,480 --> 00:46:23,550
2012年の
LLDBを使ったデバッグと―

693
00:46:23,750 --> 00:46:27,021
2014年の
Swiftでのデバッグです

694
00:46:27,721 --> 00:46:31,491
expressionコマンドで
実行できる―

695
00:46:31,592 --> 00:46:34,294
LLDBのすばらしい機能を
お教えします

696
00:46:34,395 --> 00:46:36,330
１つ目はダンプ

697
00:46:41,268 --> 00:46:44,805
Swiftのオブジェクトや
構造体 プロパティを―

698
00:46:44,905 --> 00:46:47,207
すべて出力します

699
00:46:48,075 --> 00:46:52,579
カスタムUIの
別のバグを調べてみましょう

700
00:46:53,480 --> 00:46:56,183
複数のサブビューを含む
ビューですが

701
00:46:56,283 --> 00:46:58,819
複数のラベルと
１つのimageViewがあり―

702
00:46:58,919 --> 00:47:01,321
そのラベルの１つが
消えています

703
00:46:58,919 --> 00:47:01,321
そのラベルの１つが
消えています

704
00:47:02,089 --> 00:47:06,693
親ビューでダンプを実行し
何が起きているか見てみます

705
00:47:07,728 --> 00:47:10,197
消えたラベルが
見つかりました

706
00:47:10,631 --> 00:47:15,202
しかし その並びの
imageViewを見てみると―

707
00:47:15,569 --> 00:47:21,175
この２つのフレームの起点が
同じだと分かります

708
00:47:21,942 --> 00:47:26,513
imageViewがラベルを
塞いでいるのでしょう

709
00:47:27,214 --> 00:47:29,483
レイアウトコードを
再度 調べるべきだ

710
00:47:31,418 --> 00:47:34,922
Swiftのオブジェクト用の
ダンプに加えて―

711
00:47:35,022 --> 00:47:38,125
Objective-Cのコードが
まだあるなら―

712
00:47:38,458 --> 00:47:41,862
ivarDescriptionメソッドも
NSObjectにはあります

713
00:47:42,696 --> 00:47:47,134
Objective-Cのオブジェクトの
インスタント変数を出力します

714
00:47:48,402 --> 00:47:51,138
スクリーンショットの
コードにもバグが

715
00:47:51,238 --> 00:47:53,841
クロップハンドルが
なぜか機能していない

716
00:47:55,309 --> 00:48:00,514
スクリーンショットのビューで
ivarDescriptionを呼び出すと―

717
00:47:55,309 --> 00:48:00,514
スクリーンショットのビューで
ivarDescriptionを呼び出すと―

718
00:48:00,614 --> 00:48:06,453
cropEnabledのivarの設定が
NOになっていると分かります

719
00:48:07,554 --> 00:48:10,724
ここからバグを調べると
いいでしょう

720
00:48:11,692 --> 00:48:12,926
すばらしい

721
00:48:13,126 --> 00:48:18,966
ダンプとivarDescriptionは
問題を診断するのに最適です

722
00:48:20,067 --> 00:48:24,972
もう１つのすばらしいヒントは
ブレークポイント

723
00:48:25,572 --> 00:48:29,910
これを使うと任意の実行状態で
プログラムを停止し―

724
00:48:30,110 --> 00:48:31,578
コマンドを実行できます

725
00:48:32,379 --> 00:48:36,850
LLDBのコマンドラインか
XcodeのUIで―

726
00:48:36,950 --> 00:48:40,487
ブレークポイント実行前に
条件の追加もできます

727
00:48:40,621 --> 00:48:43,791
ブレークポイントに達するたび
実行するコマンドも

728
00:48:44,525 --> 00:48:47,861
ブレークポイントは
デバッグの作業の流れの根幹で

729
00:48:47,961 --> 00:48:52,433
expressionコマンド
ダンプ ivarDescriptionは―

730
00:48:52,533 --> 00:48:54,735
ブレークポイントと
併用できます

731
00:48:54,902 --> 00:49:00,073
次のデバッグでは
ぜひブレークポイントの使用を

732
00:48:54,902 --> 00:49:00,073
次のデバッグでは
ぜひブレークポイントの使用を

733
00:49:01,441 --> 00:49:04,912
しかし時にはビューや
View Controllerや―

734
00:49:05,245 --> 00:49:07,448
状態の問題ではなく―

735
00:49:07,948 --> 00:49:11,285
メモリ管理の
問題だったりします

736
00:49:12,219 --> 00:49:14,521
これに使えるツールはある？

737
00:49:15,322 --> 00:49:17,357
よくぞ聞いてくれた
あるとも

738
00:49:17,458 --> 00:49:22,062
Xcode内蔵のすばらしいツール
メモリデバッガです

739
00:49:23,464 --> 00:49:28,102
アプリケーションの
メモリの使い方を可視化します

740
00:49:29,469 --> 00:49:33,240
リークしているView Controllerを
先日 デバッグしました

741
00:49:33,740 --> 00:49:36,810
ブロックが保持していたと
ここで分かりました

742
00:49:37,678 --> 00:49:39,646
Malloc stack loggingを
有効にして―

743
00:49:39,747 --> 00:49:44,318
ブロックがいつ割り当てられたか
バックトレースを確認できた

744
00:49:45,886 --> 00:49:50,591
このView Controllerが生成した
ブロックでした

745
00:49:51,225 --> 00:49:56,296
つまり このView Controllerも
このブロックを保持しています

746
00:49:57,064 --> 00:49:58,599
循環参照です

747
00:49:59,533 --> 00:50:00,467
すばらしい

748
00:49:59,533 --> 00:50:00,467
すばらしい

749
00:50:00,567 --> 00:50:06,540
Xcodeのメモリグラフデバッガは
こういう問題の診断に最適です

750
00:50:07,007 --> 00:50:10,310
より詳しくは2017年の
Debugging with Xcode 9を―

751
00:50:10,410 --> 00:50:11,879
参照してください

752
00:50:13,113 --> 00:50:16,550
以上がプロ並みに
デバッグできる方法です

753
00:50:18,685 --> 00:50:23,991
プログラムの問題に遭遇したら
必ず探偵の心構えを持ち―

754
00:50:25,025 --> 00:50:29,229
Xcodeのビューデバッガと
メモリグラフデバッガで―

755
00:50:29,329 --> 00:50:32,566
ビューやメモリ関連の問題を
掘り下げること

756
00:50:33,000 --> 00:50:38,372
LLDBのexpressionコマンドと
ダンプの併用など―

757
00:50:38,472 --> 00:50:41,742
ご説明したデバッグ技を
使ってください

758
00:50:44,478 --> 00:50:45,379
以上です

759
00:50:45,913 --> 00:50:52,019
(拍手)

760
00:50:52,119 --> 00:50:57,157
今回は６つの面白いテーマを
取り上げましたが

761
00:50:58,625 --> 00:51:00,728
ほんの少し かじっただけです

762
00:50:58,625 --> 00:51:00,728
ほんの少し かじっただけです

763
00:51:00,828 --> 00:51:04,798
随所でご紹介した講演を
ぜひ参照して―

764
00:51:04,898 --> 00:51:07,834
アプリケーションを
より楽しくしてください

765
00:51:08,402 --> 00:51:12,239
詳しくはデベロッパWebサイトを
参照してください

766
00:51:12,339 --> 00:51:14,741
ありがとうございました

767
00:51:14,842 --> 00:51:15,676
感謝します