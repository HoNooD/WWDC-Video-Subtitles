
1
00:00:07,074 --> 00:00:15,649
(音楽)

2
00:00:19,720 --> 00:00:22,189
どうも　おはようございます

3
00:00:22,789 --> 00:00:24,124
ようこそ

4
00:00:24,224 --> 00:00:26,393
(拍手)

5
00:00:26,493 --> 00:00:29,496
私の後に
優秀な仲間たちも登場します

6
00:00:29,596 --> 00:00:32,633
面白い内容を用意しています

7
00:00:34,334 --> 00:00:37,571
まず言わせてください

8
00:00:37,671 --> 00:00:40,607
クラッシュするコードを
書かない人には―

9
00:00:41,041 --> 00:00:43,110
このセッションは不要です

10
00:00:43,877 --> 00:00:48,348
これからする話は
ミスをする人たち向けです

11
00:00:49,449 --> 00:00:53,287
今日はユーザに影響する
クラッシュを―

12
00:00:53,387 --> 00:00:57,991
解決するためのツールや
技術の話をします

13
00:00:58,759 --> 00:01:01,995
まず私から
クラッシュの基本的な話を

14
00:00:58,759 --> 00:01:01,995
まず私から
クラッシュの基本的な話を

15
00:01:02,229 --> 00:01:04,831
原因や症状をお話しします

16
00:01:05,766 --> 00:01:11,438
それからクラッシュログを
実際に調べるツールを紹介します

17
00:01:12,472 --> 00:01:13,841
その後 グレッグから―

18
00:01:13,941 --> 00:01:18,345
クラッシュログの内容の
読み方を詳しく説明します

19
00:01:18,912 --> 00:01:24,351
そして厄介なメモリ問題の
読み方を掘り下げていきます

20
00:01:25,085 --> 00:01:28,255
その後 クバが
スレッド競合の話を

21
00:01:28,355 --> 00:01:32,226
これが原因のクラッシュは
再現が困難です

22
00:01:33,794 --> 00:01:36,196
まず定義しましょう

23
00:01:36,496 --> 00:01:37,731
クラッシュとは？

24
00:01:38,765 --> 00:01:42,336
許可されていない動作を
しようとして―

25
00:01:42,603 --> 00:01:45,339
突然 Appが停止することです

26
00:01:46,173 --> 00:01:47,508
許可されないこととは？

27
00:01:47,741 --> 00:01:53,480
例えば ゼロで割るなど
CPUが実行できないコードです

28
00:01:54,047 --> 00:01:57,851
あるいはOSのポリシーです

29
00:01:59,052 --> 00:02:04,658
Appの起動が遅すぎたり
メモリを使いすぎたりすると

30
00:01:59,052 --> 00:02:04,658
Appの起動が遅すぎたり
メモリを使いすぎたりすると

31
00:02:04,758 --> 00:02:06,326
Appを停止させます

32
00:02:08,095 --> 00:02:12,633
プログラミング言語が
エラーを避けようとして―

33
00:02:12,733 --> 00:02:14,334
クラッシュする場合もあります

34
00:02:14,434 --> 00:02:19,840
SwiftやNSArrayは配列の範囲から
外れるとプロセスを停止します

35
00:02:20,941 --> 00:02:24,678
エラーを避けようとした
デベロッパが原因の場合もあります

36
00:02:24,778 --> 00:02:28,916
パラメータが“nil”ではないと
アサートするAPIがあるとか

37
00:02:29,082 --> 00:02:30,484
それは悪くない

38
00:02:32,352 --> 00:02:34,621
これを見たことは？

39
00:02:34,922 --> 00:02:40,727
これはAppに接続した
Xcode内のデバッガの画像です

40
00:02:40,894 --> 00:02:44,264
Appが停止される直前の
状態です

41
00:02:45,299 --> 00:02:47,968
左のバックトレースを
詳しく見ましょう

42
00:02:48,936 --> 00:02:53,307
ここでOSによって
Appがスタートされています

43
00:02:54,141 --> 00:02:57,377
メイン関数が呼び出され―

44
00:02:57,477 --> 00:03:00,180
関数が他の関数を呼び出します

45
00:02:57,477 --> 00:03:00,180
関数が他の関数を呼び出します

46
00:03:00,547 --> 00:03:06,753
やがてクラッシュしか
選択肢がないところまで進みます

47
00:03:06,854 --> 00:03:08,455
何か問題があったようです

48
00:03:08,989 --> 00:03:13,227
デバッガがクラッシュ寸前という
信号を受け―

49
00:03:13,327 --> 00:03:14,628
Appが停止されます

50
00:03:16,330 --> 00:03:21,335
デバッガに接続されていない
場合もあるでしょう

51
00:03:21,935 --> 00:03:24,004
デバッガがない場合―

52
00:03:24,104 --> 00:03:28,175
OSがプレーンテキストで
バックトレースをキャプチャします

53
00:03:28,275 --> 00:03:31,445
そしてクラッシュログとして
ディスクに保存します

54
00:03:32,746 --> 00:03:36,016
Appのリリースビルドが
クラッシュした場合―

55
00:03:36,116 --> 00:03:38,318
ログはこんなに整ってません

56
00:03:38,418 --> 00:03:42,155
バイナリの名前とアドレスが
書き出されます

57
00:03:42,256 --> 00:03:45,025
これがシンボル化されてない
クラッシュログです

58
00:03:46,059 --> 00:03:50,330
Xcodeがクラッシュログを
シンボル化してくれるので―

59
00:03:50,430 --> 00:03:54,368
関数名やファイル名や
行番号が表示されます

60
00:03:56,904 --> 00:04:00,674
クラッシュログに
アクセスする方法は複数あります

61
00:03:56,904 --> 00:04:00,674
クラッシュログに
アクセスする方法は複数あります

62
00:04:00,941 --> 00:04:05,979
まずはTestFlightの
ベータ版テスターや―

63
00:04:06,079 --> 00:04:08,715
App Storeの
カスタマーを通じてです

64
00:04:08,815 --> 00:04:14,354
XcodeのCrashes Organizerを
使ってダウンロードできます

65
00:04:14,454 --> 00:04:15,622
こちらです

66
00:04:15,822 --> 00:04:17,357
きれいなダークモードですね

67
00:04:18,225 --> 00:04:20,194
UIのツアーをしましょう

68
00:04:20,928 --> 00:04:25,933
左側にTestFlightとApp Storeで
配信されているAppが見えます

69
00:04:26,133 --> 00:04:30,737
watchOSやApp Extensionなどの
プラットフォームをサポートします

70
00:04:31,939 --> 00:04:36,810
右には各クラッシュポイントで
影響を受けるデバイスが示されます

71
00:04:37,878 --> 00:04:42,149
そして似た問題で
クラッシュログを分類し―

72
00:04:42,249 --> 00:04:46,019
ソースリストで
デバイスごとにランク分けします

73
00:04:46,920 --> 00:04:50,691
そして各ログのサンプリングが
下で見られます

74
00:04:51,725 --> 00:04:53,527
このボタンを押すと―

75
00:04:53,794 --> 00:04:58,866
デバッグナビゲータで
クラッシュログが開けます

76
00:04:58,966 --> 00:05:02,269
後でお見せしましょう

77
00:04:58,966 --> 00:05:02,269
後でお見せしましょう

78
00:05:03,237 --> 00:05:07,307
詳細ビューでは
シンボル化されたバックトレースと

79
00:05:07,441 --> 00:05:08,942
クラッシュポイントが示されます

80
00:05:09,743 --> 00:05:12,613
では一度 見てみましょう

81
00:05:13,380 --> 00:05:15,816
Xcodeを開いています

82
00:05:16,517 --> 00:05:19,453
Organizerウインドウを開いて

83
00:05:20,821 --> 00:05:22,990
Crashesタブを選択します

84
00:05:23,090 --> 00:05:24,358
２番目のタブですね

85
00:05:24,458 --> 00:05:28,495
クバと作った
“ChocolateChip”Appを選択します

86
00:05:28,829 --> 00:05:32,132
このビルドを
TestFlightに上げました

87
00:05:32,232 --> 00:05:34,935
今 ビルド５を見ています

88
00:05:35,035 --> 00:05:38,438
テスターから
クラッシュの報告があり―

89
00:05:38,539 --> 00:05:41,408
いくつか対処しました

90
00:05:41,608 --> 00:05:44,845
未対応のものを解決しましょう

91
00:05:46,146 --> 00:05:48,916
242のデバイスに影響しています

92
00:05:49,016 --> 00:05:54,388
クラッシュ時のバックトレースと
クラッシュポイントが見られます

93
00:05:54,988 --> 00:05:56,590
まだ状況は分かりません

94
00:05:56,690 --> 00:06:02,162
でもクラッシュログを開けば
何が起きたか分かるでしょう

95
00:05:56,690 --> 00:06:02,162
でもクラッシュログを開けば
何が起きたか分かるでしょう

96
00:06:02,262 --> 00:06:04,765
“Open in Project...”ボタンを
クリック

97
00:06:05,032 --> 00:06:08,068
Appのビルド５に適合する
プロジェクトを選択

98
00:06:08,669 --> 00:06:11,205
これはクラッシュログを―

99
00:06:11,305 --> 00:06:16,143
デバッグナビゲータで
再現のように開いたものです

100
00:06:16,844 --> 00:06:19,546
このエラーで停止しています

101
00:06:20,480 --> 00:06:24,284
妥当なエラーかを考えます

102
00:06:24,384 --> 00:06:27,321
不要なクラッシュは避けたい

103
00:06:28,255 --> 00:06:30,858
これはIntにおける―

104
00:06:30,958 --> 00:06:34,595
enumのイニシャライザです

105
00:06:35,162 --> 00:06:37,764
enumが“０”か“１”以外なら―

106
00:06:37,865 --> 00:06:40,100
フェイタルエラーになります

107
00:06:40,200 --> 00:06:41,468
妥当でしょう

108
00:06:41,568 --> 00:06:45,472
プログラマの誤用でしか
クラッシュしません

109
00:06:45,772 --> 00:06:51,812
イニシャライザの呼び出し元を
コールスタックから見てみると

110
00:06:52,179 --> 00:06:54,781
Table Viewの
デリゲートメソッドです

111
00:06:54,882 --> 00:06:59,186
指定のセクション番号での
ヘッダのタイトルを求めてます

112
00:06:59,553 --> 00:07:02,322
セクション番号が
“０”か“１”ではないのでしょう

113
00:06:59,553 --> 00:07:02,322
セクション番号が
“０”か“１”ではないのでしょう

114
00:07:02,756 --> 00:07:05,225
かなり状況が分かりました

115
00:07:05,325 --> 00:07:09,062
Appで再現して
さらに詳しく見てみましょう

116
00:07:09,163 --> 00:07:10,531
“再生”を押します

117
00:07:11,732 --> 00:07:15,502
ChocolateChipはレシピのAppです

118
00:07:15,802 --> 00:07:18,872
ホイップクリームのレシピで
テストすると―

119
00:07:19,173 --> 00:07:20,174
問題ありません

120
00:07:20,274 --> 00:07:22,743
“材料”と“手順”が
示されています

121
00:07:22,843 --> 00:07:24,144
ここがレシピのセクションです

122
00:07:24,244 --> 00:07:28,182
セクションは材料が“０”で
ステップが“１”です

123
00:07:28,582 --> 00:07:30,818
他のレシピを選ぶと―

124
00:07:31,385 --> 00:07:32,686
クラッシュしました

125
00:07:32,786 --> 00:07:36,590
同じフェイタルエラーで止まり

126
00:07:36,690 --> 00:07:40,527
バックトレースも
先ほどのログとよく似ています

127
00:07:40,627 --> 00:07:43,297
同じ問題だと思われます

128
00:07:43,397 --> 00:07:46,366
クラッシュログを削除し―

129
00:07:46,633 --> 00:07:49,503
デバッグセッションを見ましょう

130
00:07:50,103 --> 00:07:55,943
このフェイタルエラーの
セクション番号は“８”とあります

131
00:07:56,043 --> 00:07:59,012
“０”か“１”以外だから
クラッシュした

132
00:07:59,546 --> 00:08:02,049
どうやら私が悪かったようです

133
00:07:59,546 --> 00:08:02,049
どうやら私が悪かったようです

134
00:08:02,583 --> 00:08:04,751
numberOfSectionsという―

135
00:08:04,885 --> 00:08:08,622
デリゲートメソッドを
クラスに実装していました

136
00:08:08,789 --> 00:08:12,826
それがヘッダの数を求めており

137
00:08:12,926 --> 00:08:15,562
私は“材料”の数を返しています

138
00:08:15,662 --> 00:08:17,798
その数が“８”なのです

139
00:08:18,398 --> 00:08:21,001
いい解決法があります

140
00:08:21,101 --> 00:08:25,873
“レシピ”セクションenumの
ケースの数を返せばいい

141
00:08:25,973 --> 00:08:28,041
Swift 4.2では―

142
00:08:28,141 --> 00:08:33,113
オープンソースコミュニティから
新しい機能が追加されました

143
00:08:33,212 --> 00:08:35,549
CaseIterableというプロトコルです

144
00:08:35,649 --> 00:08:39,453
“レシピ”セクションを
CaseIterableに準拠させると

145
00:08:40,287 --> 00:08:43,724
“レシピ”セクション
enumにある―

146
00:08:43,823 --> 00:08:47,427
ケースの数を返すことができます

147
00:08:47,528 --> 00:08:48,762
そうすれば―

148
00:08:49,496 --> 00:08:53,667
正確なセクションの数を返せます

149
00:08:53,767 --> 00:08:55,435
これでうまくいきます

150
00:08:56,970 --> 00:09:00,674
ではレシピを確認してみましょう

151
00:08:56,970 --> 00:09:00,674
ではレシピを確認してみましょう

152
00:09:00,774 --> 00:09:04,378
クラッシュせず
材料と手順が示されます

153
00:09:04,478 --> 00:09:07,514
よかった　これで私も満足です

154
00:09:08,182 --> 00:09:12,820
Organizerに戻って
この問題を解決済みとし―

155
00:09:12,920 --> 00:09:16,023
クッキーを焼く作業に戻れます

156
00:09:17,157 --> 00:09:22,296
(拍手)

157
00:09:23,096 --> 00:09:29,770
Crashes Organizerを使って
TestFlightからログをダウンロード

158
00:09:30,037 --> 00:09:33,440
ソースコードを開き
解決する方法でした

159
00:09:34,441 --> 00:09:36,443
次に進めるには何が必要か？

160
00:09:36,810 --> 00:09:38,812
とてもシンプルです

161
00:09:39,146 --> 00:09:42,850
カスタマーがサードパーティとの
シェアにオプトインすれば

162
00:09:42,950 --> 00:09:45,152
ログが自動的に
アップロードされます

163
00:09:46,253 --> 00:09:49,590
Apple IDで Xcodeに
サインインすればいいのです

164
00:09:51,124 --> 00:09:52,292
アップロードでは―

165
00:09:52,392 --> 00:09:56,830
ログがシンボル化されるように
シンボルも含むようにしましょう

166
00:09:58,165 --> 00:10:02,336
あとはOrganizerで
Crashesタブを開き対処します

167
00:09:58,165 --> 00:10:02,336
あとはOrganizerで
Crashesタブを開き対処します

168
00:10:05,005 --> 00:10:08,609
以上がOrganizerで
クラッシュを見る方法です

169
00:10:09,243 --> 00:10:12,713
TestFlightや
App Storeで配信しない場合

170
00:10:12,813 --> 00:10:14,715
他の選択肢があります

171
00:10:15,182 --> 00:10:17,584
Devicesウインドウです

172
00:10:18,452 --> 00:10:22,222
デバイスをつないでいれば
“View Device Logs”ボタンから

173
00:10:22,322 --> 00:10:25,092
デバイスのログが見られます

174
00:10:25,192 --> 00:10:29,263
Macの情報を使って
これらのログがシンボル化されます

175
00:10:31,064 --> 00:10:36,169
XcodeやXcode Serverや
ビルドでのテストでは

176
00:10:36,770 --> 00:10:43,911
テスト中に書き出されたAppの
クラッシュログの全結果が出ます

177
00:10:44,011 --> 00:10:47,681
これらのログも
シンボル化されています

178
00:10:49,349 --> 00:10:52,886
コンソールAppを使えば
Macやシミュレータから―

179
00:10:53,353 --> 00:10:54,822
クラッシュログを見られます

180
00:10:55,789 --> 00:10:58,425
デバイスでは“設定”から―

181
00:10:58,525 --> 00:11:00,727
“プライバシー”“解析”
“解析データ”と行けば―

182
00:10:58,525 --> 00:11:00,727
“プライバシー”“解析”
“解析データ”と行けば―

183
00:11:00,828 --> 00:11:03,030
すべてのログを見られます

184
00:11:03,130 --> 00:11:06,400
ユーザもログを共有できます

185
00:11:08,635 --> 00:11:12,706
シンボル化を
確実に機能させるための―

186
00:11:12,806 --> 00:11:15,309
ベストプラクティスが３つあります

187
00:11:16,043 --> 00:11:17,110
１つ目

188
00:11:17,911 --> 00:11:20,180
Crashes Organizerを
使う場合―

189
00:11:20,280 --> 00:11:21,982
Appでシンボルをアップロードする

190
00:11:22,082 --> 00:11:23,283
これがデフォルトです

191
00:11:23,383 --> 00:11:27,487
サーバ側で
シンボル化を保証するためです

192
00:11:28,655 --> 00:11:29,857
２つ目

193
00:11:29,957 --> 00:11:32,926
Appのアーカイブを保存する

194
00:11:33,026 --> 00:11:36,163
アーカイブにデバッグシンボルの
コピーが含まれます

195
00:11:36,263 --> 00:11:37,464
dSYMです

196
00:11:37,564 --> 00:11:43,770
XcodeはSpotlightで自動的に
dSYMを見つけシンボル化します

197
00:11:45,372 --> 00:11:48,942
BitcodeのあるAppを
アップロードするなら―

198
00:11:49,276 --> 00:11:51,078
Archives Organizerの―

199
00:11:51,178 --> 00:11:53,180
Download Debug Symbolsボタンを
使いましょう

200
00:11:53,280 --> 00:11:57,451
ストア側の
dSYMをダウンロードできます

201
00:11:58,785 --> 00:11:59,920
以上―

202
00:12:00,354 --> 00:12:04,925
実際にクラッシュログを
調べるツールを紹介しました

203
00:12:05,325 --> 00:12:09,229
続いて より深く
クラッシュログを読むガイドです

204
00:12:09,329 --> 00:12:12,466
グレッグ･パーカーを
拍手でお迎えください

205
00:12:12,566 --> 00:12:17,905
(拍手)

206
00:12:18,005 --> 00:12:19,139
ありがとう　クリス

207
00:12:19,239 --> 00:12:23,510
ここまでは
Xcodeでクラッシュを見つけて

208
00:12:23,610 --> 00:12:27,548
デバッガで調べる方法を
紹介しました

209
00:12:28,081 --> 00:12:29,917
でもクラッシュログには―

210
00:12:30,017 --> 00:12:35,022
スタックトレース以外に
多くの情報が含まれています

211
00:12:35,122 --> 00:12:40,661
問題を解決する上で
その情報が役立つことも多いのです

212
00:12:41,361 --> 00:12:44,731
ではログの全文をどう得るか？

213
00:12:44,965 --> 00:12:46,833
これはXcode Organizerです

214
00:12:46,934 --> 00:12:51,471
コンテキストメニューに
“Show in Finder”があります

215
00:12:51,872 --> 00:12:54,374
テキストファイルが出るので―

216
00:12:54,474 --> 00:12:58,545
コンソールAppか
好みのテキストエディタで開けます

217
00:12:58,645 --> 00:13:00,414
こんな感じです

218
00:12:58,645 --> 00:13:00,414
こんな感じです

219
00:13:00,914 --> 00:13:03,517
では中身を見てみましょう

220
00:13:03,784 --> 00:13:07,554
トップに概要があります

221
00:13:07,654 --> 00:13:13,427
Appの名前 バージョン
使われていたOSバージョン

222
00:13:13,527 --> 00:13:15,829
クラッシュの日時などです

223
00:13:16,630 --> 00:13:19,600
その下に
クラッシュの理由があります

224
00:13:19,700 --> 00:13:26,306
OSがプロセスを停止するため
送った具体的なシグナルです

225
00:13:27,341 --> 00:13:30,677
それからログ情報もあります

226
00:13:30,777 --> 00:13:33,914
App固有の情報セクションです

227
00:13:34,214 --> 00:13:37,851
ここにはコンソールログや―

228
00:13:37,951 --> 00:13:42,322
未処理の例外の
バックトレースが含まれます

229
00:13:42,856 --> 00:13:45,259
必ずあるものではなく―

230
00:13:45,359 --> 00:13:50,931
iOSデバイスではプライバシーの
都合上 隠されることが多い

231
00:13:51,098 --> 00:13:56,103
でもシミュレータでは
ここに役立つ情報も含まれます

232
00:13:57,571 --> 00:13:59,740
その下はスレッドスタックです

233
00:13:59,840 --> 00:14:04,278
クラッシュ時に動いていた
スレッドのバックトレースです

234
00:13:59,840 --> 00:14:04,278
クラッシュ時に動いていた
スレッドのバックトレースです

235
00:14:04,444 --> 00:14:07,114
１つがクラッシュスレッドで―

236
00:14:07,414 --> 00:14:12,486
その他に動いていたスレッドも
表示されます

237
00:14:13,820 --> 00:14:16,823
その下は低レベルの情報です

238
00:14:16,924 --> 00:14:20,861
クラッシュしたスレッドの
レジスタ状態と―

239
00:14:21,261 --> 00:14:24,865
ロードされた
バイナリイメージがあります

240
00:14:25,265 --> 00:14:29,903
これは実行可能なAppと
他のライブラリです

241
00:14:30,270 --> 00:14:33,474
Xcodeは
これをシンボル化に使います

242
00:14:33,574 --> 00:14:40,080
シンボルやファイルや
行番号の情報を得るためです

243
00:14:41,081 --> 00:14:43,383
これがクラッシュログ
ファイルの中身です

244
00:14:43,984 --> 00:14:47,654
では どうデバッグするか？
読み方は？

245
00:14:48,422 --> 00:14:51,058
まずはクラッシュの理由から

246
00:14:51,158 --> 00:14:52,860
例外タイプです

247
00:14:53,093 --> 00:14:57,931
この場合は
EXC BAD INSTRUCTIONですね

248
00:14:58,031 --> 00:15:02,836
SIGILLは不正命令のシグナルです

249
00:14:58,031 --> 00:15:02,836
SIGILLは不正命令のシグナルです

250
00:15:03,270 --> 00:15:10,043
つまりCPUが 存在しないか
無効な命令を実行しようとして

251
00:15:10,143 --> 00:15:12,312
プロセスが止まったわけです

252
00:15:14,047 --> 00:15:17,584
クラッシュしたスレッドも
見られます

253
00:15:17,684 --> 00:15:20,420
クラッシュ時のコードは何か？

254
00:15:20,754 --> 00:15:25,492
Swiftランタイムに
fatalErrorMessage関数があります

255
00:15:25,859 --> 00:15:30,164
fatalErrorMessage関数が
何をするかは分かりません

256
00:15:30,898 --> 00:15:36,203
この場合 エラーメッセージは
App固有情報に含まれています

257
00:15:36,436 --> 00:15:41,108
プロセスが終了する際に
何が表示されたかが分かります

258
00:15:45,279 --> 00:15:48,248
スタックトレースを
詳しく見てみましょう

259
00:15:48,382 --> 00:15:51,285
fatalErrorMessage関数は―

260
00:15:51,585 --> 00:15:55,088
コード内の関数に呼び出されました

261
00:15:55,389 --> 00:16:00,727
“レシピ”というクラスの
image関数が呼び出されます

262
00:15:55,389 --> 00:16:00,727
“レシピ”というクラスの
image関数が呼び出されます

263
00:16:00,961 --> 00:16:05,799
その関数のエラーでフェイタル
エラーメッセージが呼び出された

264
00:16:07,000 --> 00:16:11,205
これはシンボル化されて
全デバッグ情報があるため―

265
00:16:11,305 --> 00:16:15,976
コード内にクラッシュの
ファイルと行番号があります

266
00:16:16,777 --> 00:16:18,412
その行を見てみましょう

267
00:16:18,579 --> 00:16:20,180
プロジェクトを開きます

268
00:16:20,280 --> 00:16:22,749
これは RecipeImage.swift

269
00:16:22,983 --> 00:16:26,053
26行目がクラッシュ時に
マークされた行です

270
00:16:26,653 --> 00:16:29,089
Swiftに慣れた方なら―

271
00:16:29,189 --> 00:16:33,193
この行が クラッシュの原因だと
見当がつくでしょう

272
00:16:33,894 --> 00:16:37,197
強制アンラップ演算子があります

273
00:16:37,731 --> 00:16:41,435
それから関数
UIImageコンストラクタがあります

274
00:16:41,535 --> 00:16:43,070
オプション値を返します

275
00:16:43,504 --> 00:16:45,472
オプション値が“nil”なら―

276
00:16:45,572 --> 00:16:49,576
強制アンラップ演算子が
プロセスを停止し

277
00:16:49,676 --> 00:16:52,746
クラッシュログを生成して
終了させます

278
00:16:53,747 --> 00:16:57,050
そしてApp固有の情報には―

279
00:16:57,151 --> 00:17:03,023
Swiftランタイムが表示した
エラーメッセージが含まれています

280
00:16:57,151 --> 00:17:03,023
Swiftランタイムが表示した
エラーメッセージが含まれています

281
00:17:03,190 --> 00:17:07,861
オプション値がアンラップ中
“nil”となったとあります

282
00:17:08,694 --> 00:17:09,695
いいことです

283
00:17:09,797 --> 00:17:12,733
コードと一致しているからです

284
00:17:12,833 --> 00:17:16,002
26行目に強制アンラップ演算子

285
00:17:16,170 --> 00:17:18,271
クラッシュログに―

286
00:17:18,372 --> 00:17:21,875
オプション値をアンラップしていた
というエラーメッセージがある

287
00:17:21,974 --> 00:17:25,913
クラッシュの原因として
つじつまが合っています

288
00:17:28,982 --> 00:17:33,687
強制アンラップのエラーは
コード内の前提条件 または―

289
00:17:33,787 --> 00:17:35,923
アサーションの例です

290
00:17:36,323 --> 00:17:38,058
前提条件やアサーションは―

291
00:17:38,158 --> 00:17:42,596
エラーが起きた際 プロセスを
止めるエラーチェックです

292
00:17:43,831 --> 00:17:48,368
今見た オプション値の
強制アンラップがその例です

293
00:17:48,602 --> 00:17:52,673
Swiftランタイムが オプションは
“nil”ではないとアサートし―

294
00:17:53,273 --> 00:17:54,808
“nil”ならクラッシュします

295
00:17:55,642 --> 00:17:59,213
Swift.Arrayの範囲外アクセスも
例の１つです

296
00:17:59,580 --> 00:18:03,550
配列にアクセスして
インデックスが範囲を超えると

297
00:17:59,580 --> 00:18:03,550
配列にアクセスして
インデックスが範囲を超えると

298
00:18:03,650 --> 00:18:09,256
Swiftランタイムは
前提条件を満たせず停止します

299
00:18:09,990 --> 00:18:13,594
Swiftの算術オーバーフローも
アサーションを含みます

300
00:18:13,760 --> 00:18:18,432
２つの数を足す時 結果が
整数型変数として大きすぎると

301
00:18:18,532 --> 00:18:21,502
前提条件からプロセスを停止します

302
00:18:22,836 --> 00:18:28,408
捕捉されない例外も
前提条件により よく発生します

303
00:18:28,742 --> 00:18:33,947
多くのエラーチェックで
満たされない前提条件が例外を投げ

304
00:18:34,181 --> 00:18:39,987
それが捕捉されない場合
クラッシュログを発生させます

305
00:18:40,854 --> 00:18:45,092
自分のコードに
前提条件やアサーションを書けば

306
00:18:45,192 --> 00:18:50,731
エラーが起きた際
クラッシュログを生成させられます

307
00:18:52,900 --> 00:18:55,202
また別の例として―

308
00:18:55,302 --> 00:19:00,440
OSが外から
プロセスを停止する場合があります

309
00:18:55,302 --> 00:19:00,440
OSが外から
プロセスを停止する場合があります

310
00:19:01,508 --> 00:19:06,079
タイムアウトなどの
監視イベントがその例です

311
00:19:06,180 --> 00:19:11,785
Appが何かをするのに時間が
かかりすぎると OSが検知し

312
00:19:12,019 --> 00:19:16,156
プロセスを停止し
クラッシュログを生成します

313
00:19:17,157 --> 00:19:22,062
環境条件も OSがプロセスを
停止する原因になります

314
00:19:22,196 --> 00:19:28,001
デバイスが過熱状態になると CPUを
使いすぎるプロセスを停止します

315
00:19:28,101 --> 00:19:34,074
メモリが不足してくると メモリを
多く使うプロセスを停止します

316
00:19:34,875 --> 00:19:37,578
無効なコード署名も一例です

317
00:19:37,711 --> 00:19:41,415
OSはコードに署名を求めます

318
00:19:41,515 --> 00:19:46,920
署名が無効であるか存在しない場合
プロセスを停止して

319
00:19:47,020 --> 00:19:49,556
クラッシュログを生成します

320
00:19:50,991 --> 00:19:55,662
OSによる停止は Xcodeの
Devicesウインドウで確認できます

321
00:19:55,762 --> 00:19:58,031
macOSのコンソールにも出ます

322
00:19:58,131 --> 00:20:01,468
Xcode Organizerには
必ずしも表示されないので

323
00:19:58,131 --> 00:20:01,468
Xcode Organizerには
必ずしも表示されないので

324
00:20:01,568 --> 00:20:03,203
ご注意ください

325
00:20:05,205 --> 00:20:07,941
Appleの
デベロッパドキュメントでは―

326
00:20:08,041 --> 00:20:13,814
ログの様々なシグネチャや構造が
技術注記に書かれています

327
00:20:13,914 --> 00:20:18,719
これらの例のように
その見た目や見分け方など

328
00:20:18,852 --> 00:20:22,122
より詳しい情報があります

329
00:20:23,290 --> 00:20:25,058
例を１つ見ましょう

330
00:20:25,392 --> 00:20:27,661
クラッシュログのファイルです

331
00:20:27,761 --> 00:20:32,466
読み解くには
クラッシュの理由から見ていきます

332
00:20:32,833 --> 00:20:39,139
この場合は 例外タイプが
“EXC CRASH (SIGKILL)”です

333
00:20:39,773 --> 00:20:42,543
SIGKILLシグナルが
よく使われるのは―

334
00:20:42,643 --> 00:20:45,646
OSがプロセスを止める時です

335
00:20:45,979 --> 00:20:47,881
OSがSIGKILLシグナルを送り―

336
00:20:47,981 --> 00:20:52,653
そのシグナルが
プロセスによって捕捉されないため

337
00:20:52,753 --> 00:20:55,255
プロセスが停止するわけです

338
00:20:56,690 --> 00:21:01,228
OSがシグナルを送った理由も
ログで見られます

339
00:20:56,690 --> 00:21:01,228
OSがシグナルを送った理由も
ログで見られます

340
00:21:01,395 --> 00:21:06,366
“8badf00d”のコードと
停止の理由が書かれています

341
00:21:06,500 --> 00:21:09,703
先ほど言った技術注記に―

342
00:21:09,803 --> 00:21:12,906
“8badf00d”の意味があります

343
00:21:13,106 --> 00:21:15,542
そしてテキストで―

344
00:21:15,642 --> 00:21:20,714
19.95秒の猶予時間を
使い切ったと書かれています

345
00:21:21,181 --> 00:21:25,686
この情報と
技術注記を合わせて見れば

346
00:21:25,786 --> 00:21:29,189
起動に時間が
かかりすぎたと分かります

347
00:21:29,323 --> 00:21:32,960
20秒の間に起動できず―

348
00:21:33,327 --> 00:21:35,596
OSがプロセスを停止した

349
00:21:36,663 --> 00:21:41,101
下に停止時の
クラッシュログが出ています

350
00:21:41,201 --> 00:21:44,938
これらのコードが
長くかかった原因かもしれない

351
00:21:45,038 --> 00:21:47,174
無限ループになったか―

352
00:21:47,274 --> 00:21:51,979
それとも
ネットワークのI/Oが長かったか

353
00:21:52,279 --> 00:21:55,249
あるいは このコードは無実で―

354
00:21:55,482 --> 00:22:00,854
もっと前のプロセスが遅いために
停止した可能性もあります

355
00:21:55,482 --> 00:22:00,854
もっと前のプロセスが遅いために
停止した可能性もあります

356
00:22:04,057 --> 00:22:07,161
起動のタイムアウトを
どう防ぐか？

357
00:22:07,327 --> 00:22:08,662
ぜひ防いでください

358
00:22:08,762 --> 00:22:14,835
AppleのApp Reviewで
よく見られる却下の理由です

359
00:22:16,036 --> 00:22:17,538
どう防ぐか？

360
00:22:17,638 --> 00:22:19,406
Appをテストします

361
00:22:19,640 --> 00:22:21,542
ただ問題があります

362
00:22:22,376 --> 00:22:24,812
タイムアウトの監視は―

363
00:22:24,912 --> 00:22:29,149
シミュレータやデバッガでは
動作しません

364
00:22:29,383 --> 00:22:34,588
つまりシミュレータやデバッガで
テストすればタイムアウトはない

365
00:22:35,289 --> 00:22:40,127
だからデバッガなしで
Appをテストしてください

366
00:22:40,294 --> 00:22:43,664
macOSのAppなら
Finderで起動してください

367
00:22:43,764 --> 00:22:47,234
iOSなら
TestFlightで実行するか―

368
00:22:47,334 --> 00:22:50,938
iOS Appランチャーで
起動してください

369
00:22:51,038 --> 00:22:57,344
デバッガ外で起動され
タイムアウトが有効になります

370
00:22:58,412 --> 00:23:02,683
テストは
本物のデバイスで行いましょう

371
00:22:58,412 --> 00:23:02,683
テストは
本物のデバイスで行いましょう

372
00:23:02,950 --> 00:23:06,587
より古いハードで試しましょう

373
00:23:06,687 --> 00:23:10,858
サポートしたい
最も古いハードでテストします

374
00:23:10,958 --> 00:23:17,764
新しいハードなら十分早く
起動できても 古いものは―

375
00:23:17,898 --> 00:23:21,034
時間がかかるかもしれません

376
00:23:24,104 --> 00:23:26,707
別のエラークラスの話をしましょう

377
00:23:26,807 --> 00:23:31,445
クラッシュログに
メモリエラーがどう現れるのか？

378
00:23:32,412 --> 00:23:34,147
メモリエラーとは例えば

379
00:23:34,248 --> 00:23:39,853
二重解放されたオブジェクトの
参照カウントをした場合や

380
00:23:40,020 --> 00:23:43,590
解放後のオブジェクトを使った場合

381
00:23:43,690 --> 00:23:45,792
バッファのオーバーフローとか

382
00:23:45,893 --> 00:23:47,861
バイト配列や―

383
00:23:47,961 --> 00:23:52,366
Ｃ配列に対して 範囲外の
アクセスをした場合などです

384
00:23:53,634 --> 00:23:55,802
クラッシュログを見ましょう

385
00:23:55,969 --> 00:23:59,139
これはメモリエラーのものです

386
00:23:59,807 --> 00:24:03,010
また例外タイプから始めます

387
00:23:59,807 --> 00:24:03,010
また例外タイプから始めます

388
00:24:03,377 --> 00:24:09,883
“EXC BAD ACCESS (SIGSEGV)”です

389
00:24:10,184 --> 00:24:13,520
メモリエラーによくある形です

390
00:24:13,654 --> 00:24:16,290
EXC BAD ACCESSの意味は２つ

391
00:24:16,390 --> 00:24:20,594
読み取り専用のメモリに
書き込んだか

392
00:24:20,794 --> 00:24:24,198
存在しないメモリを
読み込んだかです

393
00:24:24,298 --> 00:24:28,936
この２つの場合
EXC BAD ACCESSで停止します

394
00:24:29,770 --> 00:24:34,942
これはクラッシュ時に
アクセスしていたアドレスです

395
00:24:36,577 --> 00:24:38,278
スタックトレースも見ましょう

396
00:24:38,378 --> 00:24:41,648
この関数が
アクセスエラーを起こしています

397
00:24:41,815 --> 00:24:44,518
これはobjc release関数で―

398
00:24:44,618 --> 00:24:50,757
Objective-CとSwiftオブジェクトの
参照カウントの実行の一部です

399
00:24:50,858 --> 00:24:56,029
これもやはり
メモリエラーを匂わせます

400
00:24:57,397 --> 00:25:00,801
では objc releaseは何が原因か？

401
00:24:57,397 --> 00:25:00,801
では objc releaseは何が原因か？

402
00:25:00,901 --> 00:25:03,003
スタックトレースを見ましょう

403
00:25:03,170 --> 00:25:06,206
オブジェクトの破棄関数があります

404
00:25:06,373 --> 00:25:11,812
Objective-Cランタイムの関数で
オブジェクトを解放するものです

405
00:25:12,479 --> 00:25:17,084
破棄関数が
LoginViewControllerクラスで

406
00:25:17,184 --> 00:25:21,388
ivar destroyerという関数を
呼び出しました

407
00:25:21,788 --> 00:25:25,826
ivar destroyer関数は
Swiftコードの一部です

408
00:25:25,926 --> 00:25:30,497
オブジェクトのプロパティや
ivarストレージを―

409
00:25:30,597 --> 00:25:33,200
解放時に処分します

410
00:25:34,034 --> 00:25:37,805
ここから クラッシュの
原因の一部が見えてきます

411
00:25:37,905 --> 00:25:42,876
LoginViewControllerクラスの
オブジェクトを解放していました

412
00:25:43,544 --> 00:25:49,449
そのdeinitコードのクラスが
プロパティとivarを処分しようとし

413
00:25:49,550 --> 00:25:53,520
いずれかが解放される間に
クラッシュしています

414
00:25:54,521 --> 00:25:57,090
問題の詳細が少し見えました

415
00:25:57,257 --> 00:26:02,196
クラッシュログに
もっと状況が分かる情報はないか？

416
00:25:57,257 --> 00:26:02,196
クラッシュログに
もっと状況が分かる情報はないか？

417
00:26:03,464 --> 00:26:06,900
無効なアドレスを見ましょう

418
00:26:07,234 --> 00:26:13,574
問題のあるアドレス値が
役に立つ情報を含む場合があります

419
00:26:13,874 --> 00:26:19,980
この問題のあるアドレスは
解放後の使用に見えます

420
00:26:20,480 --> 00:26:23,584
主に経験から そうと分かります

421
00:26:23,684 --> 00:26:29,156
クラッシュログを読んでると
少しずつパターンが分かってきます

422
00:26:29,790 --> 00:26:31,959
このアドレス値は―

423
00:26:32,593 --> 00:26:38,098
mallocメモリアロケータの
アドレス範囲とよく似ています

424
00:26:38,198 --> 00:26:41,235
クラッシュログにもありました

425
00:26:41,902 --> 00:26:45,505
これがそのアドレス範囲です

426
00:26:45,606 --> 00:26:51,044
無効なアドレスは
mallocの範囲内のようですが

427
00:26:51,378 --> 00:26:53,146
４ビット移っています

428
00:26:53,247 --> 00:26:55,649
４ビット回転しています

429
00:26:55,816 --> 00:27:00,053
有効なmallocアドレスが
回転したと思われます

430
00:26:55,816 --> 00:27:00,053
有効なmallocアドレスが
回転したと思われます

431
00:27:01,388 --> 00:27:05,058
以上が メモリアロケータからの
ヒントです

432
00:27:05,159 --> 00:27:07,127
理由を見せましょう

433
00:27:07,494 --> 00:27:11,064
こちらは
有効だったオブジェクトです

434
00:27:11,498 --> 00:27:17,171
isaフィールドから始まり
isaがクラスを指しています

435
00:27:17,271 --> 00:27:22,743
Obcjective-Cや
Swiftのオブジェクトも同じです

436
00:27:23,076 --> 00:27:25,913
objc release関数は何をするか？

437
00:27:26,146 --> 00:27:28,482
isaフィールドを読み―

438
00:27:28,582 --> 00:27:34,254
isaフィールドを間接参照し
クラスオブジェクトを獲得します

439
00:27:35,122 --> 00:27:38,826
通常なら これでうまくいきます

440
00:27:39,326 --> 00:27:42,896
でもオブジェクトが解放済みなら？

441
00:27:44,298 --> 00:27:47,401
free関数が
削除したオブジェクトは―

442
00:27:48,402 --> 00:27:53,006
他の削除済みオブジェクトの
リストに入り―

443
00:27:53,173 --> 00:27:58,145
次のオブジェクトに向け
free listポインタを書き込みます

444
00:27:58,278 --> 00:28:00,881
isaフィールドがあった場所にです

445
00:27:58,278 --> 00:28:00,881
isaフィールドがあった場所にです

446
00:28:01,315 --> 00:28:05,485
ただし
通常のポインタではなく―

447
00:28:05,586 --> 00:28:09,423
回転したポインタを書き込みます

448
00:28:09,523 --> 00:28:15,195
書かれた値を 無効な
メモリアドレスにするためです

449
00:28:15,295 --> 00:28:18,999
誤用するとクラッシュするように

450
00:28:20,200 --> 00:28:23,570
objc releaseが
isaフィールドを読むと

451
00:28:23,670 --> 00:28:27,274
回転したfree listポインタを獲得

452
00:28:27,374 --> 00:28:31,278
それを間接参照すると
クラッシュします

453
00:28:32,012 --> 00:28:33,447
メモリアロケータが

454
00:28:33,547 --> 00:28:39,086
ポインタを回転することで
使えなくしてくれたわけです

455
00:28:40,087 --> 00:28:43,457
それがクラッシュログで
見えるシグネチャです

456
00:28:43,557 --> 00:28:49,463
無効なアドレスは
mallocのポインタに似てますが

457
00:28:49,563 --> 00:28:53,967
free listポインタと
同じように回転しています

458
00:28:54,067 --> 00:28:56,637
つまり ここで起きたのは

459
00:28:56,937 --> 00:29:02,643
解放しようとしたオブジェクトは
すでに解放されていたという―

460
00:28:56,937 --> 00:29:02,643
解放しようとしたオブジェクトは
すでに解放されていたという―

461
00:29:02,743 --> 00:29:04,945
メモリエラーでした

462
00:29:06,113 --> 00:29:09,416
以上が詳しく見た内容です

463
00:29:09,516 --> 00:29:13,387
オブジェクトが解放され
ivarを処分しようとしたら―

464
00:29:13,487 --> 00:29:16,857
ivarの１つが解放済みでした

465
00:29:16,957 --> 00:29:19,026
そしてクラッシュ

466
00:29:19,459 --> 00:29:21,161
さらに何か？

467
00:29:21,562 --> 00:29:26,934
解放しようとしていた
オブジェクトは分かるのか？

468
00:29:27,601 --> 00:29:33,240
通常ならobjc releaseを
呼び出した関数がヒントになります

469
00:29:33,440 --> 00:29:36,410
ただivar destroyer関数は―

470
00:29:36,510 --> 00:29:39,713
コンパイラが生成した関数です

471
00:29:39,813 --> 00:29:42,449
我々が書いたものではない

472
00:29:42,549 --> 00:29:47,521
つまりクラッシュ関連の
ファイル名や行番号がなく―

473
00:29:47,621 --> 00:29:52,726
当時 どのプロパティが
解放されてたか分かりません

474
00:29:53,260 --> 00:29:54,394
これはクラスです

475
00:29:54,495 --> 00:29:56,396
プロパティが３つあります

476
00:29:56,497 --> 00:30:00,567
ユーザ名と
データベースとビューの配列です

477
00:29:56,497 --> 00:30:00,567
ユーザ名と
データベースとビューの配列です

478
00:30:00,734 --> 00:30:06,106
現時点では どれが
解放されていたか分かりません

479
00:30:06,206 --> 00:30:07,574
どれもあり得ます

480
00:30:08,408 --> 00:30:09,643
まだ何か？

481
00:30:09,743 --> 00:30:12,312
クラッシュログの情報から―

482
00:30:12,412 --> 00:30:16,717
解放されていた
オブジェクトは分かるのか？

483
00:30:16,817 --> 00:30:21,922
デバッガで再現できないなら
ログだけが頼りです

484
00:30:22,523 --> 00:30:25,092
この場合 まだ分かります

485
00:30:25,526 --> 00:30:31,498
ファイル名と行番号の箇所に
“+ 42”と書かれています

486
00:30:31,865 --> 00:30:34,868
この“+ 42”が手がかりです

487
00:30:34,968 --> 00:30:39,873
“+ 42”はその関数の
アセンブリコードのオフセットです

488
00:30:40,207 --> 00:30:44,678
ivar destroyer関数を
逆アセンブルし コードを見れば

489
00:30:44,778 --> 00:30:49,650
オフセット“42”でアクセスされた
プロパティが分かります

490
00:30:50,484 --> 00:30:51,785
どうやるか？

491
00:30:51,885 --> 00:30:55,422
デバッガコンソールを使います

492
00:30:55,722 --> 00:30:58,292
ターミナルでLLDBを実行します

493
00:30:58,392 --> 00:31:03,397
Xcodeのデバッグターミナルで
LLDBを実行します

494
00:30:58,392 --> 00:31:03,397
Xcodeのデバッグターミナルで
LLDBを実行します

495
00:31:04,665 --> 00:31:09,002
デバッガにはクラッシュログを
インポートするコマンドがあります

496
00:31:09,103 --> 00:31:14,408
デバッガの中で
クラッシュしたように見せます

497
00:31:14,575 --> 00:31:19,446
まずこのコマンドでクラッシュログ
翻訳コマンドをロードし

498
00:31:20,047 --> 00:31:24,852
別のコマンドで
クラッシュをインポートします

499
00:31:25,419 --> 00:31:27,921
必要なものは３つです

500
00:31:28,021 --> 00:31:31,425
まずクラッシュログのコピー

501
00:31:31,525 --> 00:31:34,595
それからAppのコピー

502
00:31:34,695 --> 00:31:38,999
それとdSYMファイルのコピーです

503
00:31:39,099 --> 00:31:43,737
クラッシュログと
同じバージョンのものが必要です

504
00:31:43,837 --> 00:31:48,108
だからAppのアーカイブを
保管しておいてほしいんです

505
00:31:48,242 --> 00:31:52,746
これらのファイルが
Macに用意できたら実行します

506
00:31:53,213 --> 00:31:54,948
LLDBは Spotlightを使って―

507
00:31:55,048 --> 00:32:00,187
実行ファイルやシンボルを見つけ
ロードします

508
00:31:55,048 --> 00:32:00,187
実行ファイルやシンボルを見つけ
ロードします

509
00:32:00,988 --> 00:32:03,757
クラッシュスレッドの
スタックトレースや―

510
00:32:03,857 --> 00:32:07,194
ファイルや行番号の情報があります

511
00:32:07,294 --> 00:32:08,962
これで準備できました

512
00:32:09,062 --> 00:32:14,501
ivar destroyer関数のアドレスを
見つけ 逆アセンブルしましょう

513
00:32:15,469 --> 00:32:19,039
これは関数のアセンブリコードです

514
00:32:20,040 --> 00:32:24,444
アセンブリコードの読み方ですが
幸い―

515
00:32:24,545 --> 00:32:30,517
アセンブリコードを完璧に
読めなくても問題ありません

516
00:32:30,617 --> 00:32:36,423
ざっと読んで おおまかな
流れをつかめれば十分です

517
00:32:36,523 --> 00:32:42,529
クラッシュログの作業では
全部 理解する必要はありません

518
00:32:44,064 --> 00:32:45,899
この関数を見ると

519
00:32:45,999 --> 00:32:50,737
呼び出し命令と
ジャンプ命令は分かりますね

520
00:32:50,838 --> 00:32:53,440
関数を呼び出すものです

521
00:32:53,640 --> 00:32:56,910
このコードは
３ブロックに分けられます

522
00:32:57,411 --> 00:33:00,247
一番上のセクションは―

523
00:32:57,411 --> 00:33:00,247
一番上のセクションは―

524
00:33:00,347 --> 00:33:05,586
参照カウント解放関数を
関数に呼び出させます

525
00:33:05,719 --> 00:33:08,989
これはユーザ名の
プロパティを解放しています

526
00:33:10,357 --> 00:33:13,861
次の領域は
データベースのプロパティを解放

527
00:33:14,128 --> 00:33:18,332
次は ビューのプロパティを
解放しています

528
00:33:18,866 --> 00:33:22,469
各命令の意味は分かりませんが

529
00:33:22,569 --> 00:33:26,173
各領域の
おおまかな働きは分かります

530
00:33:26,273 --> 00:33:30,944
コードに関連する行番号があるのと
少し似ていますね

531
00:33:32,012 --> 00:33:35,315
クラッシュログの情報に戻ります

532
00:33:35,449 --> 00:33:42,256
ivar destroyer関数 + 42が
objc releaseを呼び出している

533
00:33:43,657 --> 00:33:46,827
だから“+ 42”に命令があります

534
00:33:47,194 --> 00:33:49,329
ただ注意点がもう１つ

535
00:33:49,429 --> 00:33:51,999
スタックトレースの中では―

536
00:33:52,099 --> 00:33:57,137
大半のスタックフレームの
オフセットがリターンアドレスです

537
00:33:57,237 --> 00:34:00,707
関数呼び出し後の命令です

538
00:33:57,237 --> 00:34:00,707
関数呼び出し後の命令です

539
00:34:00,974 --> 00:34:04,845
呼び出されたobjc releaseの命令は
１つ前の命令

540
00:34:04,945 --> 00:34:06,447
この命令です

541
00:34:07,381 --> 00:34:11,784
読むと objc releaseなので
問題ありません

542
00:34:11,885 --> 00:34:15,755
スタックトレースで見たものと
つじつまが合う

543
00:34:15,856 --> 00:34:19,760
このオフセットでのobjc releaseの
呼び出しでした

544
00:34:20,094 --> 00:34:23,330
そして この解放関数は
データベースの―

545
00:34:23,429 --> 00:34:25,364
プロパティを解放しています

546
00:34:25,866 --> 00:34:29,570
クラッシュの詳細が見えてきました

547
00:34:29,670 --> 00:34:33,639
ユーザ名のプロパティの解放は
成功しました

548
00:34:33,739 --> 00:34:36,543
まだビューのプロパティには
行ってません

549
00:34:36,643 --> 00:34:39,746
無効か有効かは分かりません

550
00:34:39,847 --> 00:34:45,786
分かったのは データベースの
プロパティを解放しようとしたが

551
00:34:45,886 --> 00:34:51,458
そのオブジェクトが解放済みの
オブジェクトだったことです

552
00:34:52,226 --> 00:34:55,629
これでかなり分かってきました

553
00:34:56,096 --> 00:34:59,767
LoginViewController
オブジェクトを解放していたら

554
00:34:59,867 --> 00:35:02,469
データベースのプロパティが
無効でした

555
00:34:59,867 --> 00:35:02,469
データベースのプロパティが
無効でした

556
00:35:04,405 --> 00:35:07,141
まだバグは見つかっていません

557
00:35:07,241 --> 00:35:08,575
コードは正しく

558
00:35:08,675 --> 00:35:11,044
ivar destroyer関数も
間違っていません

559
00:35:11,145 --> 00:35:14,214
何か他のものがおかしい

560
00:35:14,381 --> 00:35:18,052
でもクラッシュログから
絞り込めました

561
00:35:18,152 --> 00:35:19,586
何をテストし―

562
00:35:19,687 --> 00:35:22,422
どこでバグを再現すべきか？

563
00:35:22,522 --> 00:35:24,925
このクラスを見るべきです

564
00:35:25,025 --> 00:35:27,227
データベースフィールドを見て

565
00:35:27,327 --> 00:35:32,866
データベースオブジェクトを
使うコードからバグを見つけます

566
00:35:35,102 --> 00:35:36,770
ここまで何をしたか？

567
00:35:37,004 --> 00:35:38,772
クラッシュログを読みました

568
00:35:38,872 --> 00:35:40,874
まずクラッシュの理由です

569
00:35:40,974 --> 00:35:45,145
例外タイプを読み
その意味を理解しました

570
00:35:45,979 --> 00:35:50,117
次にクラッシュしたスレッドの
スタックトレースを調べ

571
00:35:50,217 --> 00:35:55,489
何をしていて 何のエラーで
停止したかを理解しました

572
00:35:55,989 --> 00:35:59,159
他の手がかりも探しました

573
00:35:59,259 --> 00:36:02,830
今回はメモリエラーの
問題のあるアドレスです

574
00:35:59,259 --> 00:36:02,830
今回はメモリエラーの
問題のあるアドレスです

575
00:36:02,930 --> 00:36:06,467
そしてクラッシュした関数の
逆アセンブルをしました

576
00:36:08,635 --> 00:36:14,141
メモリエラーには
様々なクラッシュがあります

577
00:36:14,241 --> 00:36:19,313
メモリエラーが原因となる
ログのシグネチャは多様です

578
00:36:19,880 --> 00:36:22,516
いくつか例があります

579
00:36:22,750 --> 00:36:26,019
objc msgSend関数のクラッシュ

580
00:36:26,186 --> 00:36:28,222
SwiftやObjective-Cの―

581
00:36:28,322 --> 00:36:32,226
参照カウント装置や
解放装置のクラッシュ

582
00:36:32,326 --> 00:36:35,829
これらの多くは
メモリエラーが原因となります

583
00:36:37,064 --> 00:36:42,469
もう１つ よくあるエラー症状は
認識されないセレクタ例外です

584
00:36:43,203 --> 00:36:47,474
状況としては
何かのオブジェクトがあり

585
00:36:47,574 --> 00:36:50,277
コードがそれを使います

586
00:36:50,377 --> 00:36:53,847
解放された後 また使用されます

587
00:36:54,381 --> 00:36:59,853
しかし malloc空きページリスト
シグネチャを得ずに―

588
00:37:00,087 --> 00:37:06,493
新しいオブジェクトが 古いものと
同じアドレスに割り当てられました

589
00:37:06,827 --> 00:37:12,499
コードが前のオブジェクトを
使おうとしても―

590
00:37:12,599 --> 00:37:16,870
同じアドレスに別のタイプの
オブジェクトがあります

591
00:37:16,970 --> 00:37:22,509
そのため関数が認識できず
認識されないセレクタ例外に

592
00:37:24,978 --> 00:37:27,781
もう１つ
よくあるエラー症状は―

593
00:37:27,881 --> 00:37:31,618
メモリアロケータ内での停止です

594
00:37:31,719 --> 00:37:34,488
malloc/free関数内です

595
00:37:34,888 --> 00:37:38,292
これも前提条件の例の１つで―

596
00:37:38,392 --> 00:37:41,695
メモリアロケータ内の前提条件です

597
00:37:41,962 --> 00:37:45,165
代表的なケースとしては

598
00:37:45,466 --> 00:37:49,269
mallocメモリ自体の
ヒープデータ構造が―

599
00:37:49,369 --> 00:37:53,941
メモリエラーで壊れ
プロセスや反応が停止する場合です

600
00:37:54,041 --> 00:37:59,246
あるいはmalloc APIの
間違った使い方を探知した場合

601
00:37:59,346 --> 00:38:03,016
例えば オブジェクトを
２回連続で解放すると―

602
00:37:59,346 --> 00:38:03,016
例えば オブジェクトを
２回連続で解放すると―

603
00:38:03,116 --> 00:38:09,356
アロケータが二重解放として認識し
停止する場合があります

604
00:38:11,692 --> 00:38:15,996
最後にクラッシュログや
メモリエラーの分析に関して―

605
00:38:16,096 --> 00:38:18,699
いくつかコツをお教えします

606
00:38:20,701 --> 00:38:23,070
ここまでの話では―

607
00:38:23,170 --> 00:38:29,143
クラッシュした具体的なコードや
スレッドに注目してきました

608
00:38:29,243 --> 00:38:32,412
でもクラッシュに関係している―

609
00:38:32,512 --> 00:38:35,883
別のコードを見るのも大事です

610
00:38:36,083 --> 00:38:38,519
例えば このクラッシュでは―

611
00:38:38,619 --> 00:38:40,988
ivar destroyer関数は悪くない

612
00:38:41,088 --> 00:38:42,856
バグの場所ではありません

613
00:38:42,956 --> 00:38:47,828
バグは別にあり
どこか他のコードが間違っています

614
00:38:49,263 --> 00:38:55,068
クラッシュしたスレッド以外の
スタックトレースも見るべきです

615
00:38:55,536 --> 00:38:59,573
クラッシュログには
全スタックトレースが含まれ―

616
00:38:59,673 --> 00:39:05,812
その中には役立つ情報や
手がかりがあるかもしれません

617
00:38:59,673 --> 00:39:05,812
その中には役立つ情報や
手がかりがあるかもしれません

618
00:39:06,046 --> 00:39:11,785
他のスレッドにはAppのどこで
実行されていたかの詳細があるかも

619
00:39:11,885 --> 00:39:16,990
ネットワークコードを実行していて
別のスレッドで分かるかもしれない

620
00:39:17,091 --> 00:39:19,793
あるいは
マルチスレッドエラーがあり

621
00:39:19,893 --> 00:39:25,599
何のスレッド競合だったか 他の
スレッドから分かるかもしれません

622
00:39:27,434 --> 00:39:33,073
それから１つの原因につき
ログは複数 見るべきです

623
00:39:33,674 --> 00:39:34,875
Xcode Organizerは―

624
00:39:34,975 --> 00:39:39,880
クラッシュの箇所により
グループ分けしてくれます

625
00:39:40,380 --> 00:39:46,420
同じ箇所で複数のクラッシュが
起きることもありますが

626
00:39:46,520 --> 00:39:50,624
ログにより情報量も変わります

627
00:39:50,724 --> 00:39:54,661
先ほどのmalloc空きページリスト
シグネチャは―

628
00:39:54,761 --> 00:39:58,665
ログによって
見られないものもあります

629
00:39:58,765 --> 00:40:03,904
だから１つのクラッシュでも
複数のログを見て―

630
00:39:58,765 --> 00:40:03,904
だから１つのクラッシュでも
複数のログを見て―

631
00:40:04,004 --> 00:40:07,841
役立つ情報を探すといいでしょう

632
00:40:08,709 --> 00:40:13,313
Organizerは
異なる原因のクラッシュでも―

633
00:40:13,414 --> 00:40:19,286
場合によっては
同じグループに分けたりします

634
00:40:19,386 --> 00:40:25,626
クラッシュしたスレッドや
バックトレースを見れば―

635
00:40:25,726 --> 00:40:31,565
原因の異なるクラッシュが
複数あると分かることもあります

636
00:40:31,665 --> 00:40:34,501
同じグループにあってもです

637
00:40:34,802 --> 00:40:40,674
ログを１つ見ただけだと
２つ目のクラッシュを見逃し―

638
00:40:40,774 --> 00:40:46,313
そのまま気づかずに
出荷してしまうかもしれません

639
00:40:48,582 --> 00:40:50,551
クラッシュを分析し―

640
00:40:50,651 --> 00:40:57,357
起きた場所や使ったオブジェクトを
ある程度 絞り込むことができたら

641
00:40:57,458 --> 00:41:04,064
Address SanitizerやZombiesを
使ってクラッシュを再現してもいい

642
00:40:57,458 --> 00:41:04,064
Address SanitizerやZombiesを
使ってクラッシュを再現してもいい

643
00:41:04,298 --> 00:41:10,838
クラッシュログから何が起きたか
絞り込むことができたとしても

644
00:41:10,938 --> 00:41:16,143
エラーメッセージを伝えてくれる
デバッガやテスト内でのほうが

645
00:41:16,243 --> 00:41:19,813
デバッグするのは はるかに楽です

646
00:41:21,715 --> 00:41:25,052
マルチスレッドエラーの
診断には―

647
00:41:25,152 --> 00:41:29,923
複数のスタックトレースや
スレッドを見るよう言いました

648
00:41:30,023 --> 00:41:35,496
それについて詳しい話を
クバにしてもらいましょう

649
00:41:35,596 --> 00:41:41,168
(拍手)

650
00:41:41,268 --> 00:41:42,269
ありがとう

651
00:41:43,604 --> 00:41:44,671
どうも

652
00:41:45,239 --> 00:41:46,640
グレッグが言ったように―

653
00:41:46,740 --> 00:41:50,677
メモリ破損はマルチスレッドから
生じる場合もあります

654
00:41:51,111 --> 00:41:56,884
マルチスレッドのバグは
診断と再現が非常に難しいのです

655
00:41:57,217 --> 00:42:01,355
たまにしか起きないからです

656
00:41:57,217 --> 00:42:01,355
たまにしか起きないからです

657
00:42:01,455 --> 00:42:05,859
コードが99％は
うまくいっていたりするので

658
00:42:05,959 --> 00:42:09,229
長く気づかれないこともあります

659
00:42:11,265 --> 00:42:14,034
マルチスレッドバグは
メモリ破損を招きがちで

660
00:42:14,134 --> 00:42:17,871
クラッシュログも
メモリ破損のように見えます

661
00:42:17,971 --> 00:42:21,175
先ほど 例を紹介しました

662
00:42:21,275 --> 00:42:26,513
mallocやfree
リテインカウント内のクラッシュは

663
00:42:26,613 --> 00:42:29,650
メモリ破損の典型的症状です

664
00:42:30,517 --> 00:42:33,554
マルチスレッドバグの
特徴的な症状もあります

665
00:42:33,854 --> 00:42:36,657
よくクラッシュログに―

666
00:42:36,757 --> 00:42:42,296
関連するコードを実行する
複数のスレッドが含まれます

667
00:42:42,396 --> 00:42:47,501
特定のクラスやメソッドが
複数のスレッドのログにあれば―

668
00:42:47,601 --> 00:42:50,637
マルチスレッドバグの可能性がある

669
00:42:51,605 --> 00:42:56,510
マルチスレッドバグが原因の
メモリ破損の多くはランダムです

670
00:42:56,610 --> 00:43:02,683
だから よく似たコードや
アドレスでクラッシュが見られます

671
00:42:56,610 --> 00:43:02,683
だから よく似たコードや
アドレスでクラッシュが見られます

672
00:43:02,783 --> 00:43:07,588
そして同じバグでも
Xcodeではクラッシュポイントが

673
00:43:07,854 --> 00:43:11,158
別だと判断されることもあります

674
00:43:12,025 --> 00:43:15,496
クラッシュしたスレッドが
原因ではない場合もあります

675
00:43:15,596 --> 00:43:20,300
だからログで
他のスレッドも見ることが重要です

676
00:43:20,734 --> 00:43:24,271
ではバグの例を見てみましょう

677
00:43:24,371 --> 00:43:27,541
Xcodeに含まれるツール
Thread Sanitizerで

678
00:43:27,641 --> 00:43:30,778
診断する方法を紹介します

679
00:43:38,919 --> 00:43:41,421
クッキーレシピのAppで―

680
00:43:41,521 --> 00:43:46,326
ユーザから入手した
クラッシュログを見てみましょう

681
00:43:46,994 --> 00:43:50,864
この２つ目のクラッシュログに
注目しましょう

682
00:43:52,065 --> 00:43:57,604
これを見ると LazyImageView
クラスに何か問題があるようです

683
00:43:57,704 --> 00:43:59,506
私が書いたクラスです

684
00:43:59,606 --> 00:44:01,375
この後 お見せします

685
00:43:59,606 --> 00:44:01,375
この後 お見せします

686
00:44:01,475 --> 00:44:04,244
その前にログを読みましょう

687
00:44:05,312 --> 00:44:08,215
スレッドのスタック全体を見ます

688
00:44:08,315 --> 00:44:09,817
このボタンを押すと―

689
00:44:09,917 --> 00:44:12,286
他のスレッドが表示されます

690
00:44:12,986 --> 00:44:15,856
上のほうを見ると―

691
00:44:15,956 --> 00:44:20,627
free関数が停止を
呼び出していることが分かります

692
00:44:20,761 --> 00:44:23,664
ヒープの破損だという示唆です

693
00:44:25,265 --> 00:44:27,468
他のスレッドも見ましょう

694
00:44:27,568 --> 00:44:29,236
スレッド５を見ると

695
00:44:29,636 --> 00:44:33,740
LazyImageView内で
やはりコードを実行しています

696
00:44:35,108 --> 00:44:38,178
別のクラッシュも見ましょう

697
00:44:39,213 --> 00:44:42,182
どのログでも共通しています

698
00:44:42,316 --> 00:44:47,221
あるスレッドが
free関数の停止でヒープ破損し

699
00:44:47,321 --> 00:44:52,526
別のスレッドが
コードの似た箇所で処理しています

700
00:44:52,626 --> 00:44:55,729
やはりLazyImageView内です

701
00:44:55,929 --> 00:44:58,031
偶然ではないでしょう

702
00:44:58,132 --> 00:45:00,768
マルチスレッドバグだと思われます

703
00:44:58,132 --> 00:45:00,768
マルチスレッドバグだと思われます

704
00:45:01,969 --> 00:45:05,072
LazyImageViewクラスを見ましょう

705
00:45:05,172 --> 00:45:11,044
ボタンを押してコードに飛び
プロジェクトで開きます

706
00:45:11,812 --> 00:45:14,748
LazyImageViewのソースが出ます

707
00:45:15,282 --> 00:45:17,551
UIImageViewのサブクラスです

708
00:45:17,651 --> 00:45:22,656
イメージを遅延させ
非同期的にロードする機能がある

709
00:45:22,756 --> 00:45:25,692
イニシャライザに
ロジックがあります

710
00:45:25,792 --> 00:45:29,630
バックグラウンドのキューに
ジョブを割り当てて―

711
00:45:29,730 --> 00:45:32,699
バックグラウンドスレッドに
画像を作成します

712
00:45:32,800 --> 00:45:38,405
終わればメインキューに戻し
スクリーンに画像を表示します

713
00:45:39,406 --> 00:45:42,342
クラッシュログは
このコードを示しています

714
00:45:42,543 --> 00:45:45,579
画像キャッシュに
アクセスしている箇所です

715
00:45:45,679 --> 00:45:51,185
不必要に同じ画像を何度も
作成しないようにするためです

716
00:45:51,285 --> 00:45:54,655
ここにバグがあるのかもしれません

717
00:45:54,888 --> 00:45:56,123
確認しましょう

718
00:45:56,223 --> 00:46:00,761
シミュレータでAppを実行し
クラッシュを再現しましょう

719
00:45:56,223 --> 00:46:00,761
シミュレータでAppを実行し
クラッシュを再現しましょう

720
00:46:00,961 --> 00:46:03,497
クラッシュログを閉じます

721
00:46:04,798 --> 00:46:06,967
これがクッキーレシピのAppです

722
00:46:07,067 --> 00:46:12,406
新しいレシピを加えるため
このプラスボタンを押すと―

723
00:46:13,140 --> 00:46:17,077
新しいレシピの画像を選ぶよう
言われます

724
00:46:17,177 --> 00:46:20,114
今 スクリーン上にある
コントローラは―

725
00:46:20,214 --> 00:46:23,517
LazyImageViewで
画像を表示しています

726
00:46:23,851 --> 00:46:27,521
こうしてスクロールすることで―

727
00:46:27,621 --> 00:46:31,358
コードは実行されているはずです

728
00:46:31,458 --> 00:46:33,260
でもクラッシュは起きない

729
00:46:33,527 --> 00:46:36,497
残念ながら
マルチスレッドバグは―

730
00:46:36,964 --> 00:46:38,499
再現が難しいんです

731
00:46:38,599 --> 00:46:42,770
何度もバグのあるコードを
テストしても―

732
00:46:42,870 --> 00:46:44,838
クラッシュしないことも

733
00:46:45,439 --> 00:46:50,611
では何度かコントローラを
閉じたり開いたりしましょう

734
00:46:50,711 --> 00:46:55,949
そのうち運よく
クラッシュが起きるかもしれません

735
00:47:00,454 --> 00:47:01,822
起きましたね

736
00:47:01,922 --> 00:47:05,158
クラッシュしたので終了しました

737
00:47:05,259 --> 00:47:09,930
でもデバッガで再現できても
あまり意味がありません

738
00:47:10,264 --> 00:47:14,401
EXC BAD ACCESSだと
分かるだけです

739
00:47:14,501 --> 00:47:16,904
一体 原因は何でしょう

740
00:47:17,004 --> 00:47:19,640
なぜ起きたか教えてくれません

741
00:47:19,740 --> 00:47:23,210
でもXcodeに
うってつけのツールがあります

742
00:47:23,310 --> 00:47:26,447
Thread Sanitizerです
これを使います

743
00:47:26,613 --> 00:47:28,815
スキームエディタを開きましょう

744
00:47:28,916 --> 00:47:32,953
ここで このAppを選び
“Edit Scheme...”をクリック

745
00:47:33,720 --> 00:47:37,291
Diagnosticsタブに切り替えると

746
00:47:37,391 --> 00:47:41,061
いくつか診断ツールがあります

747
00:47:41,161 --> 00:47:44,932
Address Sanitizerはバッファ
オーバーフローの発見に便利です

748
00:47:45,432 --> 00:47:48,902
Thread Sanitizerを選択し
“Pause on issues”も選択します

749
00:47:49,002 --> 00:47:53,440
バグを検出すると
デバッガが止まるということです

750
00:47:54,575 --> 00:47:57,844
Thread Sanitizerを有効にして―

751
00:47:57,945 --> 00:48:01,481
もう一度 Appを操作しましょう

752
00:47:57,945 --> 00:48:01,481
もう一度 Appを操作しましょう

753
00:48:03,550 --> 00:48:05,385
プラスボタンを押すと…

754
00:48:05,886 --> 00:48:07,921
Appがすぐに止まりました

755
00:48:08,021 --> 00:48:09,490
バグ発見です

756
00:48:09,590 --> 00:48:12,459
しかも１回で済みました

757
00:48:12,559 --> 00:48:16,730
Thread Sanitizerは
高確率で再現してくれます

758
00:48:17,498 --> 00:48:19,566
バグの詳細を見ましょう

759
00:48:20,000 --> 00:48:22,770
Swift Access Raceだと分かります

760
00:48:23,470 --> 00:48:26,640
左のデバッグナビゲータを見ると

761
00:48:26,740 --> 00:48:29,443
さらに詳細が分かります

762
00:48:29,543 --> 00:48:33,480
２つのスレッドが
２つのアクセスをしています

763
00:48:33,580 --> 00:48:35,949
スレッド２と４が―

764
00:48:36,050 --> 00:48:39,987
同じメモリに同時に
アクセスしようとしていますが

765
00:48:40,087 --> 00:48:41,521
許可されていません

766
00:48:42,790 --> 00:48:47,161
競合している
この２つのコードを見ると―

767
00:48:47,261 --> 00:48:50,998
画像キャッシュに
アクセスしています

768
00:48:51,365 --> 00:48:56,336
このデータは複数のスレッドで
共有されたデータ構造なので―

769
00:48:56,470 --> 00:48:58,672
スレッドデータ構造で
なくてはなりません

770
00:48:58,839 --> 00:49:01,341
どう実行されるか見てましょう

771
00:48:58,839 --> 00:49:01,341
どう実行されるか見てましょう

772
00:49:01,575 --> 00:49:05,712
ストレージにジャンプして
スレッドセーフか確認します

773
00:49:06,346 --> 00:49:10,284
画像キャッシュのソースが
ファイルの一番上にあります

774
00:49:10,384 --> 00:49:12,553
すぐ問題が分かりますね

775
00:49:12,653 --> 00:49:16,290
これは単なる
Swiftの辞書なのでダメです

776
00:49:16,390 --> 00:49:19,459
Swiftの辞書は
スレッドセーフじゃありません

777
00:49:19,560 --> 00:49:24,231
複数のスレッドで
Swiftの辞書を共有するには―

778
00:49:24,431 --> 00:49:27,201
同期により守る必要があります

779
00:49:27,434 --> 00:49:31,572
複数のスレッドが同時に
アクセスしないようにします

780
00:49:31,772 --> 00:49:36,343
ではクラスを
スレッドセーフにしましょう

781
00:49:36,643 --> 00:49:37,978
ステップは２つ

782
00:49:38,078 --> 00:49:41,982
まずコードを少し
リファクタリングし―

783
00:49:42,082 --> 00:49:44,318
ストレージを制御します

784
00:49:44,418 --> 00:49:49,089
次にディスパッチキューで
クラスをスレッドセーフにします

785
00:49:50,390 --> 00:49:55,229
まず 問題はストレージが
パブリック変数であること

786
00:49:55,329 --> 00:49:59,399
どのコードも
アクセス可能だということです

787
00:49:59,500 --> 00:50:04,004
コードを完璧にするのは
かなり大変なので―

788
00:49:59,500 --> 00:50:04,004
コードを完璧にするのは
かなり大変なので―

789
00:50:04,304 --> 00:50:07,041
プライベートに変更します

790
00:50:07,174 --> 00:50:11,411
画像キャッシュへのアクセスも
変えましょう

791
00:50:11,545 --> 00:50:14,381
それにはsubscriptを使います

792
00:50:15,148 --> 00:50:20,554
ブラケットを使い キャッシュ
からのデータをロードできます

793
00:50:21,521 --> 00:50:24,958
subscriptにはゲッタが必要です

794
00:50:25,726 --> 00:50:27,528
セッタも必要です

795
00:50:28,395 --> 00:50:33,434
とりあえず 下層ストレージに
直接アクセスしましょう

796
00:50:34,535 --> 00:50:39,306
残りのファイルを作るには
ユーザをアップデートします

797
00:50:39,506 --> 00:50:41,909
ストレージプロパティに
アクセスせず―

798
00:50:42,009 --> 00:50:46,480
ブラケットやインデックスを
画像キャッシュに直接 使います

799
00:50:47,448 --> 00:50:52,219
ビルドを押せば
コードは正常にコンパイルします

800
00:50:52,319 --> 00:50:56,523
まだバグは直してませんが
進展はありました

801
00:50:56,623 --> 00:51:01,161
ストレージにアクセスするコードに
制限を設けられました

802
00:50:56,623 --> 00:51:01,161
ストレージにアクセスするコードに
制限を設けられました

803
00:51:01,261 --> 00:51:04,164
ゲッタかセッタのどちらかです

804
00:51:04,264 --> 00:51:06,500
他のコードはアクセスできない

805
00:51:06,600 --> 00:51:11,038
これでSwift Access Raceの修正に
近づきました

806
00:51:11,839 --> 00:51:13,974
ディスパッチキューで直します

807
00:51:14,074 --> 00:51:17,277
“queue”という
プライベート変数を作り

808
00:51:17,377 --> 00:51:20,647
ディスパッチキューを割り当てます

809
00:51:21,315 --> 00:51:23,550
ディスパッチキューはシリアルです

810
00:51:23,650 --> 00:51:24,885
これも同様

811
00:51:24,985 --> 00:51:31,125
つまり このqueueの中で一度に
１つのコードしか実行できません

812
00:51:31,725 --> 00:51:34,361
これが必要なことです

813
00:51:34,628 --> 00:51:37,631
ディスパッチキュー内で
コードをどう実行するか？

814
00:51:37,731 --> 00:51:39,800
queue.syncを使います

815
00:51:39,900 --> 00:51:43,303
queue.syncに移動したコードは―

816
00:51:44,838 --> 00:51:48,442
１つずつqueue内で実行されます

817
00:51:48,609 --> 00:51:52,880
ゲッタから何か返す必要があるので
値を返します

818
00:51:53,414 --> 00:51:56,150
セッタでも同様です

819
00:51:57,518 --> 00:52:00,788
コードをqueue.syncに移すと

820
00:51:57,518 --> 00:52:00,788
コードをqueue.syncに移すと

821
00:52:00,888 --> 00:52:04,024
ディスパッチキューの一部として
実行されます

822
00:52:04,324 --> 00:52:06,593
これでスレッドセーフです

823
00:52:06,693 --> 00:52:10,264
ストレージに
アクセスするコードは常に―

824
00:52:10,364 --> 00:52:13,400
シリアルディスパッチキュー内で
実行されます

825
00:52:13,500 --> 00:52:18,205
一度に１つずつ実行されるので
スレッドセーフです

826
00:52:18,305 --> 00:52:22,943
セッタのみに 同期を
使いたくなるかもしれません

827
00:52:23,043 --> 00:52:25,446
ストレージを修正し―

828
00:52:25,546 --> 00:52:28,115
こうしてゲッタでは避けます

829
00:52:28,515 --> 00:52:29,349
でもダメです

830
00:52:29,449 --> 00:52:32,453
これでもメモリ破損は起きます

831
00:52:32,553 --> 00:52:37,257
このバージョンを
シミュレータで試してみましょう

832
00:52:37,357 --> 00:52:41,428
Sanitizerは
バグを発見できるでしょうか

833
00:52:43,497 --> 00:52:45,132
やはりできますね

834
00:52:45,232 --> 00:52:49,870
ゲッタとセッタの両方を
同期で守らなくてはなりません

835
00:52:49,970 --> 00:52:53,307
最後にもう一度 Appを実行します

836
00:52:53,407 --> 00:52:56,910
レシピを追加してみましょう

837
00:52:57,077 --> 00:52:58,779
コントローラは正常にロード

838
00:52:58,879 --> 00:53:02,716
クラスはスレッドセーフなので
警告も出ません

839
00:52:58,879 --> 00:53:02,716
クラスはスレッドセーフなので
警告も出ません

840
00:53:02,816 --> 00:53:08,288
Organizerウインドウに戻って
解決したとマークしましょう

841
00:53:08,388 --> 00:53:11,725
このバグを発見し修正できました

842
00:53:12,793 --> 00:53:19,299
(拍手)

843
00:53:21,235 --> 00:53:24,371
今 お見せしたように

844
00:53:24,471 --> 00:53:29,276
マルチスレッドバグの症状が
クラッシュログに見られました

845
00:53:29,376 --> 00:53:34,915
そしてThread Sanitizerで
バグを発見し修正しました

846
00:53:35,549 --> 00:53:37,351
Thread Sanitizerは―

847
00:53:37,451 --> 00:53:42,055
マルチスレッドバグを
高確率で再現できます

848
00:53:42,222 --> 00:53:46,793
何度も操作を繰り返す必要は
ありませんでした

849
00:53:47,394 --> 00:53:50,497
macOSとシミュレータで動作します

850
00:53:51,031 --> 00:53:53,600
ただ他の診断ツール同様―

851
00:53:53,700 --> 00:53:58,372
コードを発動させないと
バグを見つけられません

852
00:53:58,472 --> 00:54:00,407
覚えておいてください

853
00:53:58,472 --> 00:54:00,407
覚えておいてください

854
00:54:00,507 --> 00:54:04,545
テストでは
Thread Sanitizerを使いましょう

855
00:54:04,645 --> 00:54:08,148
スレッドやGCDを使うコードは
特にです

856
00:54:09,016 --> 00:54:10,551
さらなる情報は―

857
00:54:10,651 --> 00:54:15,055
WWDC 2016での
私のセッションの動画をどうぞ

858
00:54:15,155 --> 00:54:17,658
“Thread Sanitizer and
Static Analysis”です

859
00:54:17,758 --> 00:54:22,896
このツールを紹介し
その効果を説明しました

860
00:54:23,831 --> 00:54:27,701
復習すると
スキームエディタのツールです

861
00:54:27,801 --> 00:54:30,037
“Product”から“Scheme”を選び

862
00:54:30,137 --> 00:54:32,873
“Edit Scheme...”で
立ち上がります

863
00:54:32,973 --> 00:54:35,542
Diagnosticsタブを開くと

864
00:54:35,642 --> 00:54:40,614
診断ツールの中に
Thread Sanitizerが並んでいます

865
00:54:41,782 --> 00:54:44,485
もう１つデバッグのコツを

866
00:54:44,585 --> 00:54:47,421
マルチスレッドバグに有効です

867
00:54:48,021 --> 00:54:53,594
ディスパッチキューを作成する際
イニシャライザでラベルを使えます

868
00:54:54,528 --> 00:54:57,898
オペレーションキューに
カスタム名をアサインでき

869
00:54:58,198 --> 00:55:02,436
スレッドにも
カスタム名を使うことができます

870
00:54:58,198 --> 00:55:02,436
スレッドにも
カスタム名を使うことができます

871
00:55:03,036 --> 00:55:08,776
名前とラベルはデバッガに
また一部のログにも表示されます

872
00:55:08,876 --> 00:55:13,447
マルチスレッドバグの原因を
絞り込むのに役立ちます

873
00:55:15,516 --> 00:55:20,120
クラッシュ対策で
覚えておくべきコツを３つだけ

874
00:55:20,487 --> 00:55:21,455
１つ目

875
00:55:21,555 --> 00:55:27,061
App Storeにアップロードする前に
実際のデバイスでテストすること

876
00:55:27,261 --> 00:55:30,998
App Reviewで
却下されにくくなります

877
00:55:31,765 --> 00:55:32,599
２つ目

878
00:55:32,699 --> 00:55:37,271
ユーザから報告されたクラッシュは
再現すること

879
00:55:37,438 --> 00:55:43,644
Appのどの部分を発動させれば
そのクラッシュが再現できるか

880
00:55:43,744 --> 00:55:46,647
クラッシュログを見て
考えるのです

881
00:55:46,914 --> 00:55:48,048
最後に―

882
00:55:48,148 --> 00:55:52,719
再現が難しいクラッシュには
ツールを使う

883
00:55:52,820 --> 00:55:55,656
Address Sanitizerや
Thread Sanitizerなどです

884
00:55:55,856 --> 00:56:00,260
メモリ破損や
マルチスレッドバグに役立ちます

885
00:55:55,856 --> 00:56:00,260
メモリ破損や
マルチスレッドバグに役立ちます

886
00:56:02,095 --> 00:56:04,998
今日のおさらいをしましょう

887
00:56:05,766 --> 00:56:10,304
クリスからは Xcodeの
Organizerウインドウを使って

888
00:56:10,404 --> 00:56:13,607
クラッシュログを
見る方法を学びました

889
00:56:14,274 --> 00:56:18,579
グレッグからは
ログの読み方と分析を学びました

890
00:56:18,679 --> 00:56:20,414
多くの場合 再現が可能です

891
00:56:20,514 --> 00:56:23,217
Appの起動タイムアウトなど

892
00:56:24,651 --> 00:56:30,324
それからメモリ破損など
再現が難しいクラッシュと―

893
00:56:30,424 --> 00:56:34,495
そのログの症状について話しました

894
00:56:34,728 --> 00:56:38,398
最後に
Sanitizerなどを活用した―

895
00:56:38,499 --> 00:56:42,870
メモリ破損やスレッドのバグの
再現法を紹介しました

896
00:56:42,970 --> 00:56:45,639
ぜひ使うことをお勧めします

897
00:56:46,406 --> 00:56:49,343
さらに詳しい情報は
セッションのページへ

898
00:56:49,443 --> 00:56:52,379
技術注記へのリンクや―

899
00:56:52,479 --> 00:56:57,384
クラッシュの際 デバッグに
役立つドキュメントもあります

900
00:56:57,551 --> 00:57:02,156
この後 12時から
Technology Lab 8で―

901
00:56:57,551 --> 00:57:02,156
この後 12時から
Technology Lab 8で―

902
00:57:02,256 --> 00:57:03,824
ラボがあります

903
00:57:03,924 --> 00:57:07,461
質問がある方は ぜひどうぞ

904
00:57:07,561 --> 00:57:09,730
残りのWWDCをお楽しみください

905
00:57:09,830 --> 00:57:10,430
どうも

906
00:57:10,531 --> 00:57:12,599
(拍手)