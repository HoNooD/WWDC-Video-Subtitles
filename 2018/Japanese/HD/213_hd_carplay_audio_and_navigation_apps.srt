
1
00:00:07,107 --> 00:00:16,517
(音楽)

2
00:00:22,489 --> 00:00:28,762
(拍手)

3
00:00:29,062 --> 00:00:32,665
CarPlayのオーディオと
ナビのアプリケーションです

4
00:00:32,766 --> 00:00:36,537
開発担当のジョナサンと
申します

5
00:00:36,637 --> 00:00:39,773
CarPlayアプリケーションの
構築に関する―

6
00:00:39,873 --> 00:00:42,743
最新情報をお伝えします

7
00:00:44,044 --> 00:00:47,080
CarPlayオーディオ
アプリケーションを復習し

8
00:00:47,181 --> 00:00:51,818
ナビ用のCarPlay
フレームワークを紹介します

9
00:00:51,919 --> 00:00:55,622
これを使えば
ナビのアプリケーションが

10
00:00:55,722 --> 00:00:58,592
簡単に構築できるのです

11
00:00:58,759 --> 00:01:01,328
ではCarPlayの
復習をしましょう

12
00:00:58,759 --> 00:01:01,328
ではCarPlayの
復習をしましょう

13
00:01:03,230 --> 00:01:07,534
CarPlayは 
より優れた安全な方法で

14
00:01:07,668 --> 00:01:13,407
車載スクリーン上での
iPhone操作を実現します

15
00:01:13,740 --> 00:01:16,777
通話やメッセージの送受信

16
00:01:16,877 --> 00:01:19,746
音楽 Podcast ラジオ

17
00:01:19,847 --> 00:01:23,150
ナビアプリケーションを
使った走行など

18
00:01:23,250 --> 00:01:25,519
すべて運転中に可能です

19
00:01:26,119 --> 00:01:30,891
iPhoneの
外部ディスプレーと言えます

20
00:01:31,258 --> 00:01:35,162
車載スクリーンは
各社 車種によって

21
00:01:35,262 --> 00:01:38,999
UIや外観の仕様が異なります

22
00:01:39,766 --> 00:01:44,438
しかしCarPlayは
その点も考慮しています

23
00:01:46,306 --> 00:01:49,610
CarPlay搭載車の
入力方法は様々です

24
00:01:49,710 --> 00:01:51,612
タッチスクリーン

25
00:01:51,712 --> 00:01:56,383
回転つまみで
調整や動作を選ぶ方式

26
00:01:56,483 --> 00:01:59,620
指の動きを感知して
入力する―

27
00:01:59,720 --> 00:02:02,956
タッチパッドもあります

28
00:01:59,720 --> 00:02:02,956
タッチパッドもあります

29
00:02:04,057 --> 00:02:06,126
右ハンドル車の場合は

30
00:02:06,293 --> 00:02:12,766
CarPlayの表示は自動的に
運転席側に変更されます

31
00:02:13,767 --> 00:02:19,773
夜間やライト点灯時の
ダークモードへの変更を

32
00:02:19,873 --> 00:02:23,644
iOSに通知する
車種もあります

33
00:02:24,611 --> 00:02:27,481
そのタイミングで
地図表示を変更する―

34
00:02:27,581 --> 00:02:29,883
仕様にもできます

35
00:02:31,418 --> 00:02:32,986
CarPlay搭載車は

36
00:02:33,086 --> 00:02:36,757
様々な仕様の
スクリーンに対応

37
00:02:37,090 --> 00:02:40,027
すべてiOSが管理します

38
00:02:40,127 --> 00:02:42,563
アプリケーションを
作ってしまえば

39
00:02:42,663 --> 00:02:46,366
あとはCarPlayに任せるだけ

40
00:02:46,633 --> 00:02:48,735
アプリケーションの種類には

41
00:02:49,036 --> 00:02:52,239
５つのカテゴリーがあります

42
00:02:52,339 --> 00:02:54,341
車は特別な場所です

43
00:02:54,441 --> 00:02:57,044
これらのアプリケーションを
お持ちなら

44
00:02:57,144 --> 00:03:00,914
CarPlayへの連携を
ご検討ください

45
00:02:57,144 --> 00:03:00,914
CarPlayへの連携を
ご検討ください

46
00:03:02,082 --> 00:03:06,553
このカテゴリーに該当するか
ご不明であれば

47
00:03:06,653 --> 00:03:10,657
後ほど
ご質問をお受けいたします

48
00:03:10,991 --> 00:03:14,962
こちらのURLからも
確認できます

49
00:03:15,462 --> 00:03:18,465
アプリケーションの一例を
紹介します

50
00:03:19,833 --> 00:03:23,170
自動車メーカーの
アプリケーションは

51
00:03:23,270 --> 00:03:28,509
そのメーカーの車種用に
構築されたものです

52
00:03:29,076 --> 00:03:31,512
各社 独自のUIを持ち

53
00:03:31,612 --> 00:03:37,384
温度調節や座席制御など
車内の設定をつかさどります

54
00:03:37,751 --> 00:03:43,190
SiriKitを使えば
音声による操作が可能です

55
00:03:45,225 --> 00:03:49,363
昨年導入したのが
メッセージとVoIPです

56
00:03:49,463 --> 00:03:52,399
SiriKitとも連携します

57
00:03:52,499 --> 00:03:56,003
CarPlayに接続すれば
運転したまま

58
00:03:56,103 --> 00:03:59,806
メッセージのやり取りが
できます

59
00:04:00,374 --> 00:04:06,013
SiriKitの詳細については
昨年の発表をご覧ください

60
00:04:08,248 --> 00:04:13,187
こちらはCarPlay対応の
オーディオアプリケーション

61
00:04:13,287 --> 00:04:16,523
車載スクリーンに
表示するデータには

62
00:04:16,623 --> 00:04:20,194
専用のテンプレートを
使用しています

63
00:04:20,494 --> 00:04:22,763
今回さらに性能をアップし

64
00:04:22,863 --> 00:04:26,466
最適化を実現したので
紹介します

65
00:04:27,968 --> 00:04:31,705
ナビアプリケーション用の

66
00:04:31,805 --> 00:04:35,742
CarPlayフレームワークにも
ご期待ください

67
00:04:37,444 --> 00:04:41,515
(拍手)

68
00:04:42,449 --> 00:04:48,255
ナビアプリケーションが
車載スクリーン上で使えます

69
00:04:48,388 --> 00:04:54,061
入力方法や画面の仕様を
心配する必要はありません

70
00:04:54,161 --> 00:04:58,365
ナビが随時更新されれば
いいのです

71
00:04:59,299 --> 00:05:05,272
CarPlayフレームワークは
各種テンプレートも提供

72
00:04:59,299 --> 00:05:05,272
CarPlayフレームワークは
各種テンプレートも提供

73
00:05:05,672 --> 00:05:08,775
ユーザ操作に対する
レスポンスを

74
00:05:08,876 --> 00:05:13,580
各種テンプレートを使って
自由に構築できます

75
00:05:13,680 --> 00:05:16,617
後ほど詳しく紹介します

76
00:05:18,118 --> 00:05:20,154
この５つの中から

77
00:05:20,254 --> 00:05:22,890
２つのカテゴリーに
着目します

78
00:05:22,990 --> 00:05:24,791
オーディオとナビです

79
00:05:24,892 --> 00:05:26,226
オーディオの説明は

80
00:05:26,326 --> 00:05:27,094
アルバートから

81
00:05:28,128 --> 00:05:32,499
(拍手)

82
00:05:33,433 --> 00:05:34,434
ありがとう

83
00:05:35,169 --> 00:05:39,373
この情報を早く
お知らせしたかったんです

84
00:05:39,640 --> 00:05:43,877
お伝えするのは
CarPlayへの設定方法と

85
00:05:44,044 --> 00:05:48,182
最新のiOS 12用に
最適化された情報です

86
00:05:48,348 --> 00:05:49,950
また
アプリケーション開発の

87
00:05:50,050 --> 00:05:54,488
最適な手順や
よくあるケースも紹介します

88
00:05:55,722 --> 00:05:58,625
ドライブと言えば音楽です

89
00:05:58,725 --> 00:06:03,096
運転中は好きな音楽を
聞きたいですね

90
00:05:58,725 --> 00:06:03,096
運転中は好きな音楽を
聞きたいですね

91
00:06:03,197 --> 00:06:06,967
クラシック音楽や
Podcast―

92
00:06:07,067 --> 00:06:10,037
ラジオのニュースも聴きます

93
00:06:10,671 --> 00:06:13,207
皆さんのアプリケーションで

94
00:06:13,307 --> 00:06:16,610
最高のドライブを
提供しましょう

95
00:06:17,177 --> 00:06:21,682
その一例に 
私の作品を紹介します

96
00:06:21,782 --> 00:06:24,818
たぶんヒットするはず

97
00:06:25,853 --> 00:06:27,020
名前はSrirocka

98
00:06:28,622 --> 00:06:31,792
由来は私の大好物である―

99
00:06:31,892 --> 00:06:34,294
チリソースと音楽です

100
00:06:34,394 --> 00:06:40,300
大人気のアプリケーションに
なるでしょう

101
00:06:41,201 --> 00:06:44,371
Srirockaは
十分機能していますが

102
00:06:44,471 --> 00:06:46,440
CarPlayと連携させます

103
00:06:46,540 --> 00:06:48,842
その過程をお見せします

104
00:06:50,711 --> 00:06:53,480
ジョナサンが
お伝えしたとおり

105
00:06:53,580 --> 00:06:57,017
CarPlayでは
わずらわしい側面を排除

106
00:06:57,117 --> 00:07:00,354
入力方法や
画面の仕様などです

107
00:06:57,117 --> 00:07:00,354
入力方法や
画面の仕様などです

108
00:07:00,454 --> 00:07:04,224
そのためアプリケーションに
求められるのは

109
00:07:04,324 --> 00:07:07,327
情報の表示と
楽曲の提供だけです

110
00:07:07,461 --> 00:07:12,900
通常はテーブルビューや
タブで表示しますね

111
00:07:13,734 --> 00:07:17,037
そこで重要なのが
適切なコンテンツです

112
00:07:17,137 --> 00:07:22,576
開発者の方なら
既存のAPIはご存知でしょう

113
00:07:22,743 --> 00:07:24,645
詳しく見ていきます

114
00:07:26,246 --> 00:07:30,984
CarPlayで知っておくべき
３つのAPIです

115
00:07:31,485 --> 00:07:37,057
各APIの詳細は
昨年の発表時に触れましたが

116
00:07:37,157 --> 00:07:39,927
簡単に説明しましょう

117
00:07:40,661 --> 00:07:45,365
コンテンツを見るには
MPPlayableContentを使用

118
00:07:45,465 --> 00:07:48,435
これはデータソースと
デリゲートを保有し

119
00:07:48,535 --> 00:07:53,273
アプリケーションの情報を
CarPlayに追加します

120
00:07:53,373 --> 00:07:58,445
またCarPlay上での選曲も
コールバックされます

121
00:07:59,379 --> 00:08:03,383
“Now Playing”を
ロック画面で表示できるなら

122
00:07:59,379 --> 00:08:03,383
“Now Playing”を
ロック画面で表示できるなら

123
00:08:03,483 --> 00:08:08,989
次の２つのAPIは
すでにご存知だと思います

124
00:08:10,023 --> 00:08:14,628
MPNowPlayingInfoCenterは
メタデータを追加

125
00:08:14,728 --> 00:08:18,265
曲のタイトルや
アートワークが

126
00:08:18,365 --> 00:08:20,234
CarPlayの
“Now Playing”と連動

127
00:08:20,334 --> 00:08:23,504
ロック画面でも同じです

128
00:08:24,404 --> 00:08:28,375
MPRemoteCommandCenterは
遠隔操作に対応

129
00:08:28,475 --> 00:08:31,345
“Play”や
“Next Track”などです

130
00:08:32,044 --> 00:08:35,616
CarPlayでも連続再生を
実現します

131
00:08:35,716 --> 00:08:37,851
コードを見ましょう

132
00:08:38,952 --> 00:08:42,389
Srirockaを例に挙げて
説明します

133
00:08:42,489 --> 00:08:45,826
アプリケーションに
最低限必要なのはこちら

134
00:08:45,926 --> 00:08:50,564
まずは
MPPlayableContentManager

135
00:08:50,664 --> 00:08:54,067
Srirockaが情報を
CarPlayに提供し

136
00:08:54,168 --> 00:08:56,403
必要に応じて表示します

137
00:08:57,337 --> 00:09:01,108
次に使うのは
NowPlayingInfoCenter

138
00:08:57,337 --> 00:09:01,108
次に使うのは
NowPlayingInfoCenter

139
00:09:01,208 --> 00:09:04,945
メタデータに情報を提供し

140
00:09:05,045 --> 00:09:06,813
“Now Playing”を
表示します

141
00:09:07,748 --> 00:09:10,751
最後が
MPRemoteCommandCenter

142
00:09:10,851 --> 00:09:12,986
特に“Play”の時に

143
00:09:13,086 --> 00:09:17,858
Srirockaが
“Now Playing”を表示

144
00:09:18,859 --> 00:09:24,698
CarPlayに必要なAPIは
MPPlayableContentです

145
00:09:24,798 --> 00:09:28,802
iOS 12では
この最適化に着目し

146
00:09:28,902 --> 00:09:32,940
MPPlayableContentを
リマスターしました

147
00:09:34,408 --> 00:09:38,479
(拍手)

148
00:09:39,079 --> 00:09:41,648
MPPlayableContentを
見直し

149
00:09:41,748 --> 00:09:46,587
データソースやデリゲートの
要求のパフォーマンスを向上

150
00:09:46,954 --> 00:09:50,457
既存のアプリケーションを
変更せずに

151
00:09:50,557 --> 00:09:56,663
素早く起動し 様々な動作に
スムーズに対応します

152
00:09:57,231 --> 00:10:00,267
アプリケーションとの
互換性も向上し

153
00:09:57,231 --> 00:10:00,267
アプリケーションとの
互換性も向上し

154
00:10:00,367 --> 00:10:04,872
ユーザの操作を予測し
CarPlayに表示します

155
00:10:05,639 --> 00:10:09,576
これでアプリケーションが
進化しますね

156
00:10:09,676 --> 00:10:13,180
私たちが検討したのは
reloadDataの実装

157
00:10:13,280 --> 00:10:18,652
データをリロードして
最適化してくれるのです

158
00:10:19,119 --> 00:10:24,291
実際 reloadDataを使うのは
限られた時だけでした

159
00:10:24,658 --> 00:10:29,630
reloadDataはCarPlayの
階層を脱構築し

160
00:10:29,730 --> 00:10:32,733
すべてを構築し直します

161
00:10:32,833 --> 00:10:36,570
これは費用のかかる
オペレーションです

162
00:10:37,704 --> 00:10:40,607
コンテンツの更新だけなら

163
00:10:40,707 --> 00:10:44,578
beginUpdatesとendUpdatesが
使えます

164
00:10:44,678 --> 00:10:47,347
問題なく処理できます

165
00:10:48,282 --> 00:10:51,585
beginUpdatesとendUpdatesは

166
00:10:51,685 --> 00:10:55,255
データとの
非同期動作を行います

167
00:10:55,355 --> 00:11:01,261
内部データは別の場所に
格納しておいてください

168
00:10:55,355 --> 00:11:01,261
内部データは別の場所に
格納しておいてください

169
00:11:01,361 --> 00:11:05,299
必要な時だけ
情報を共有できれば

170
00:11:05,399 --> 00:11:07,835
連携がうまくいきます

171
00:11:08,802 --> 00:11:13,540
次はCarPlayでの動作の
最適化についてです

172
00:11:14,308 --> 00:11:18,378
Srirockaは一部で
実装されています

173
00:11:18,479 --> 00:11:22,516
ユーザは
このプレイリストを選択

174
00:11:22,616 --> 00:11:25,719
大人気のプレイリストです

175
00:11:26,186 --> 00:11:30,524
なぜかロードに
手間取っていますね

176
00:11:30,624 --> 00:11:34,728
一定時間を過ぎると
タイムアウトします

177
00:11:34,828 --> 00:11:38,799
原因は完了ハンドラか
情報の読み込みです

178
00:11:39,566 --> 00:11:41,468
電話の状態は？

179
00:11:42,169 --> 00:11:45,239
運転時に考えられるのは

180
00:11:45,339 --> 00:11:48,942
通信の遅さや
画面のロックです

181
00:11:49,042 --> 00:11:54,281
多くのユーザは運転中に
パスコードをかけています

182
00:11:55,349 --> 00:11:59,953
ロック時に
データにアクセスできないと

183
00:12:00,053 --> 00:12:04,458
情報が得られず
CarPlayは機能しません

184
00:12:04,558 --> 00:12:08,061
ロック時でも
アクセスできるように

185
00:12:08,161 --> 00:12:10,998
利用規約を見直しましょう

186
00:12:12,933 --> 00:12:14,968
もう１つの問題は―

187
00:12:16,069 --> 00:12:21,742
携帯の電波が入らない場所で
運転している時です

188
00:12:22,342 --> 00:12:27,214
運転場所は田舎から都会まで
様々ですね

189
00:12:27,314 --> 00:12:29,516
走行場所が違えば

190
00:12:29,917 --> 00:12:33,554
CarPlayやデータサービスも
異なります

191
00:12:33,654 --> 00:12:37,758
Wi-Fiがない状況にも
備えねばなりません

192
00:12:38,992 --> 00:12:41,695
Srirockaも同じですが

193
00:12:41,795 --> 00:12:46,466
話題の曲を選ぶには
高度な技術が必要です

194
00:12:46,567 --> 00:12:50,804
しかもデバイス上で
行わねばなりません

195
00:12:50,904 --> 00:12:53,073
処理にも時間が必要です

196
00:12:53,173 --> 00:12:54,975
では その解決策は？

197
00:12:55,976 --> 00:13:01,482
beginLoadingChildItemsを
使えばいいのです

198
00:12:55,976 --> 00:13:01,482
beginLoadingChildItemsを
使えばいいのです

199
00:13:01,815 --> 00:13:06,820
CarPlayでIndexPathが
閲覧できれば呼び出せます

200
00:13:06,920 --> 00:13:11,258
テーブルのスクロールや
タブで選ぶと

201
00:13:11,492 --> 00:13:15,462
beginLoadingChildItemsが
呼び出されます

202
00:13:17,030 --> 00:13:21,969
コンテンツを選ぶ前に
ロードが可能になります

203
00:13:22,336 --> 00:13:24,705
これはSrirockaのコードです

204
00:13:24,805 --> 00:13:30,410
先ほどのプレイリストが
CarPlayに表示されると

205
00:13:30,511 --> 00:13:32,546
処理が始まります

206
00:13:32,646 --> 00:13:37,151
ネットワークリクエストを
経由して

207
00:13:37,251 --> 00:13:40,354
コンテンツの提供が可能です

208
00:13:41,388 --> 00:13:45,559
CarPlay用の
アプリケーション開発で

209
00:13:45,659 --> 00:13:47,861
想定される事態とは？

210
00:13:48,662 --> 00:13:53,267
Srirockaは満足度の高い
サービスです

211
00:13:53,367 --> 00:13:57,538
ご覧のとおり
デザインもすばらしく

212
00:13:57,638 --> 00:14:00,841
リピート率も高いでしょう

213
00:13:57,638 --> 00:14:00,841
リピート率も高いでしょう

214
00:14:01,441 --> 00:14:03,177
では CarPlayでは？

215
00:14:04,411 --> 00:14:07,748
ログアウト時は
接続不可能です

216
00:14:07,848 --> 00:14:10,184
これでは楽しくありません

217
00:14:10,284 --> 00:14:15,589
アプリケーションに
接続できないのです

218
00:14:16,590 --> 00:14:19,693
ログアウト中でも
操作を可能にし

219
00:14:19,793 --> 00:14:23,997
楽しい体験が
できるようにしましょう

220
00:14:24,097 --> 00:14:27,434
そうすれば
満足度は上がります

221
00:14:28,469 --> 00:14:32,906
オーディオに関しては
利点が多いです

222
00:14:33,607 --> 00:14:37,744
MPPlayableContentの
テンプレートを使えば

223
00:14:37,845 --> 00:14:42,282
CarPlayでも最高の体験を
提供できます

224
00:14:42,883 --> 00:14:47,454
ログアウトや
ロック画面の時を想定して

225
00:14:47,554 --> 00:14:50,858
スムーズに機能させましょう

226
00:14:51,692 --> 00:14:55,863
iOS 12のおかげで
アプリケーションの開発でも

227
00:14:55,963 --> 00:14:57,965
最適化や性能アップが
期待されます

228
00:14:58,065 --> 00:15:03,570
皆さんのアプリケーションも
改良してみてください

229
00:14:58,065 --> 00:15:03,570
皆さんのアプリケーションも
改良してみてください

230
00:15:04,271 --> 00:15:06,840
正しい方向に進むために

231
00:15:06,940 --> 00:15:10,978
CarPlayフレームワークを
紹介します

232
00:15:11,078 --> 00:15:11,678
では

233
00:15:11,778 --> 00:15:16,483
(拍手)

234
00:15:17,017 --> 00:15:18,519
ありがとう

235
00:15:19,286 --> 00:15:24,558
ナビのアプリケーションに
関する発表です

236
00:15:24,858 --> 00:15:29,196
CarPlayにおける
ナビの役割は大きく

237
00:15:29,296 --> 00:15:34,001
なじみのアプリケーションが
使えたら最高です

238
00:15:34,835 --> 00:15:37,070
お伝えしたとおり

239
00:15:37,171 --> 00:15:41,141
テンプレートを基にして
それを実現しました

240
00:15:42,276 --> 00:15:46,647
アプリケーションの
データやメタデータは

241
00:15:46,747 --> 00:15:49,550
車載スクリーンに
表示されます

242
00:15:49,783 --> 00:15:52,119
動作状況も順調です

243
00:15:52,452 --> 00:15:56,390
でもナビアプリケーションは
勝手が違います

244
00:15:56,723 --> 00:15:59,993
皆さんの地図は美しい

245
00:16:00,093 --> 00:16:03,163
そんな見事な地図なら

246
00:16:03,263 --> 00:16:06,633
当然 車内でも使いたいはず

247
00:16:07,100 --> 00:16:11,471
iOS 12ではCarPlay
フレームワークを発表

248
00:16:11,772 --> 00:16:14,074
CarPlayフレームワークは

249
00:16:14,174 --> 00:16:18,312
ナビアプリケーションを
構築する最高のツールです

250
00:16:18,445 --> 00:16:22,716
テンプレートオブジェクトを
使えば

251
00:16:22,816 --> 00:16:27,154
iOSがアプリケーションの
UIに変換します

252
00:16:27,588 --> 00:16:33,560
これさえあれば 簡単に
CarPlayでの動作を実現

253
00:16:34,261 --> 00:16:36,497
詳しく説明します

254
00:16:36,830 --> 00:16:40,334
我々が開発した
CountryRoadsは

255
00:16:40,434 --> 00:16:43,871
景色を優先して
道案内してくれます

256
00:16:44,071 --> 00:16:46,173
CarPlay版がこちら

257
00:16:47,474 --> 00:16:53,480
ホーム画面にCountryRoadsの
アイコンが出ています

258
00:16:53,881 --> 00:16:58,685
起動すると
タイル画像が表示されました

259
00:16:59,119 --> 00:17:04,191
CarPlayに接続すると
ウインドウが表れます

260
00:16:59,119 --> 00:17:04,191
CarPlayに接続すると
ウインドウが表れます

261
00:17:04,324 --> 00:17:07,361
ここに表示されるのは

262
00:17:07,461 --> 00:17:11,698
非対話型のナビに関連した
コンテンツです

263
00:17:12,199 --> 00:17:14,233
テンプレートのおかげで

264
00:17:14,334 --> 00:17:19,406
iOSがアプリケーションの
UIに変更します

265
00:17:20,339 --> 00:17:24,645
CarPlay接続時の
コードがこちら

266
00:17:25,646 --> 00:17:28,715
アプリケーションの
デリゲートと

267
00:17:28,816 --> 00:17:32,286
CarPlayのプロトコルを
一致させます

268
00:17:32,386 --> 00:17:34,188
CPApplicationDelegate
です

269
00:17:35,022 --> 00:17:40,527
これは
didConnectCarInterfaceController

270
00:17:41,061 --> 00:17:44,565
重要なオブジェクトを
２つ提供します

271
00:17:44,665 --> 00:17:48,202
１つは
CPInterfaceController

272
00:17:48,702 --> 00:17:52,039
アプリケーションと
テンプレートをつなぎ

273
00:17:52,139 --> 00:17:55,542
車載スクリーンへの
表示を可能にします

274
00:17:55,976 --> 00:18:00,881
そして先ほどのウインドウも
表示させます

275
00:17:55,976 --> 00:18:00,881
そして先ほどのウインドウも
表示させます

276
00:18:01,815 --> 00:18:06,453
２つのリファレンスは
覚えておいてください

277
00:18:07,221 --> 00:18:11,191
そしてView Controllerを
作り出し

278
00:18:11,291 --> 00:18:13,093
Review Controllerに
割り当てます

279
00:18:13,193 --> 00:18:15,329
ルートテンプレートを
作ったら

280
00:18:15,429 --> 00:18:19,433
InterfaceControllerで
設定します

281
00:18:20,200 --> 00:18:24,071
いくつかテンプレートを
紹介しましょう

282
00:18:24,171 --> 00:18:27,007
１つは おなじみのもので

283
00:18:27,107 --> 00:18:30,144
ユーザにも
関連するものです

284
00:18:30,244 --> 00:18:32,312
それは MapTemplate

285
00:18:32,913 --> 00:18:38,285
他のテンプレートと違い
透過的になっています

286
00:18:38,452 --> 00:18:41,255
ウインドウ上のコンテンツは

287
00:18:41,355 --> 00:18:44,725
MapTemplateの下に
表示されます

288
00:18:45,425 --> 00:18:48,428
テンプレートの構成は様々で

289
00:18:48,529 --> 00:18:50,831
ボタンの追加も可能

290
00:18:50,998 --> 00:18:55,969
左右に２つずつ
設定することができます

291
00:18:56,170 --> 00:18:59,339
これらはCPBarButtonです

292
00:18:59,439 --> 00:19:02,176
テキストや画像で作成し

293
00:18:59,439 --> 00:19:02,176
テキストや画像で作成し

294
00:19:02,276 --> 00:19:05,646
サイズや仕様を
自動で合わせます

295
00:19:06,013 --> 00:19:10,150
ボタン操作は
定義されていないので

296
00:19:10,250 --> 00:19:13,787
独自のアクションハンドラが
必要です

297
00:19:13,887 --> 00:19:17,090
車載スクリーン上で
ボタンを押すと

298
00:19:17,191 --> 00:19:19,793
アクションハンドラが
呼ばれます

299
00:19:20,727 --> 00:19:24,898
地図のウインドウ上部に
専用のボタンを

300
00:19:24,998 --> 00:19:26,667
４つまで配置できます

301
00:19:26,767 --> 00:19:32,105
通常のバーボタンと異なり
カスタマイズが可能です

302
00:19:32,940 --> 00:19:38,278
MapTemplateには
多くの機能があります

303
00:19:38,378 --> 00:19:40,514
地図をパンする機能や

304
00:19:41,048 --> 00:19:45,519
重要な情報を通知する
アラート機能などです

305
00:19:45,619 --> 00:19:48,255
もちろん
ルート案内もそうです

306
00:19:48,689 --> 00:19:50,624
ルート案内の説明の前に

307
00:19:50,724 --> 00:19:54,595
パンとアラートについて
お話します

308
00:19:54,862 --> 00:19:57,264
パン機能を付けるなら

309
00:19:57,364 --> 00:20:00,567
パンモード用の
ボタンが必要です

310
00:19:57,364 --> 00:20:00,567
パンモード用の
ボタンが必要です

311
00:20:00,667 --> 00:20:06,006
ナビゲーションバーか
地図ウインドウに配置します

312
00:20:06,306 --> 00:20:11,578
パンモードでは４方向に
ボタンが表示されます

313
00:20:11,712 --> 00:20:16,917
アプリケーションは
APIを介し方向を認識します

314
00:20:17,417 --> 00:20:21,388
車載システムの
複雑さを軽減する―

315
00:20:21,488 --> 00:20:23,557
一例を紹介します

316
00:20:23,891 --> 00:20:26,460
タッチ操作において

317
00:20:26,560 --> 00:20:29,463
スクリーンのレイテンシは
問いません

318
00:20:29,663 --> 00:20:33,467
回転つまみや
タッチパッドも使えます

319
00:20:33,700 --> 00:20:37,037
回転つまみについて
補足します

320
00:20:37,137 --> 00:20:39,873
方向の変換ができれば

321
00:20:39,973 --> 00:20:42,709
APIで連携が可能です

322
00:20:42,809 --> 00:20:45,946
システム間の連携は
心配無用です

323
00:20:46,813 --> 00:20:50,284
運転中に
知りたい情報と言えば

324
00:20:50,384 --> 00:20:55,089
道路情報や
より最適なルートでしょう

325
00:20:55,189 --> 00:20:57,891
そこで使うのが
ナビゲーションアラート機能

326
00:20:58,091 --> 00:21:00,828
MapTemplateの
ナビゲーションアラートには

327
00:20:58,091 --> 00:21:00,828
MapTemplateの
ナビゲーションアラートには

328
00:21:00,928 --> 00:21:06,900
タイトル サブタイトル 画像
アクションの設定が可能です

329
00:21:07,000 --> 00:21:11,905
アラートを消すタイミングも
設定できます

330
00:21:13,140 --> 00:21:16,510
テンプレートの構成を
見ながら

331
00:21:16,610 --> 00:21:20,814
CountryRoadsに
ボタンを追加してみます

332
00:21:22,416 --> 00:21:24,551
これは以前の
テンプレートなので

333
00:21:24,651 --> 00:21:28,722
まずCPMapTemplateの
インスタンスを生成します

334
00:21:29,523 --> 00:21:32,626
次に
追加するボタンを作ります

335
00:21:33,494 --> 00:21:35,362
CountryRoadsの特色は

336
00:21:35,462 --> 00:21:38,131
よく使う項目から
検索できること

337
00:21:38,699 --> 00:21:40,033
このボタンを作ります

338
00:21:40,134 --> 00:21:42,703
CPBarButtonのType Imageに

339
00:21:42,803 --> 00:21:48,242
よく使う項目を表示する
アクションを指定します

340
00:21:48,642 --> 00:21:51,712
画像を
ボタンに割り当てます

341
00:21:51,845 --> 00:21:55,749
すでにあるボタンの横に
配置するので

342
00:21:55,849 --> 00:22:00,254
ナビゲーションバーに
２つのボタンを割り当てます

343
00:21:55,849 --> 00:22:00,254
ナビゲーションバーに
２つのボタンを割り当てます

344
00:22:00,554 --> 00:22:02,156
これで完了です

345
00:22:03,056 --> 00:22:05,392
新たなボタンができました

346
00:22:05,492 --> 00:22:08,829
次は
ユーザへの表示方法です

347
00:22:08,929 --> 00:22:11,432
ここで最適なテンプレートが

348
00:22:11,532 --> 00:22:13,267
GridTemplateです

349
00:22:13,467 --> 00:22:18,839
グリッド上に最大８つの
ボタンが配置できます

350
00:22:19,506 --> 00:22:24,812
ボタンには画像とタイトルを
設定できます

351
00:22:25,679 --> 00:22:31,051
ナビゲーションバーにも
適用可能で

352
00:22:31,151 --> 00:22:35,722
タイトルのみでも
GridTemplateを利用できます

353
00:22:36,423 --> 00:22:39,693
早速 GridTemplateを
使ってみます

354
00:22:41,662 --> 00:22:44,998
まずは
“Parks”ボタンの画像を

355
00:22:45,399 --> 00:22:47,034
リトリーブします

356
00:22:48,569 --> 00:22:52,272
“Parks”と
リトリーブした画像で

357
00:22:52,372 --> 00:22:54,074
インスタンスを生成

358
00:22:55,509 --> 00:22:58,278
次に配置を指定します

359
00:22:58,378 --> 00:23:01,048
同じく
CPGridTemplateで

360
00:22:58,378 --> 00:23:01,048
同じく
CPGridTemplateで

361
00:23:01,148 --> 00:23:04,151
よく使う項目の
“Favorites”を作成し

362
00:23:04,251 --> 00:23:07,321
コードで作成した
ボタンと並べます

363
00:23:07,988 --> 00:23:11,859
ここで使うのが
InterfaceControllerです

364
00:23:12,025 --> 00:23:15,028
車載スクリーンの表示に

365
00:23:15,162 --> 00:23:20,534
GridTemplateを
追加することができます

366
00:23:22,069 --> 00:23:26,273
よく使う項目の
検索が可能になりました

367
00:23:26,373 --> 00:23:31,612
検索結果の表示には
ListTemplateを使います

368
00:23:32,513 --> 00:23:35,682
リスト表示用の
テンプレートです

369
00:23:35,782 --> 00:23:41,088
アイテムには文字 画像
記号などを設定できます

370
00:23:41,321 --> 00:23:42,789
複数セクションに対応し

371
00:23:42,890 --> 00:23:47,761
ナビゲーションバーも
同じように表示できます

372
00:23:48,161 --> 00:23:51,031
CarPlayフレームワークは

373
00:23:51,165 --> 00:23:54,768
必要に応じ
スクロールバーを表示します

374
00:23:54,868 --> 00:23:57,037
簡単に結果が確認できます

375
00:23:57,938 --> 00:23:59,740
ListTemplateを
構成しましょう

376
00:24:00,941 --> 00:24:03,310
まず 検索結果の配列を

377
00:24:03,410 --> 00:24:09,149
CPListItemの配列に
変換する必要があります

378
00:24:09,416 --> 00:24:12,886
検索結果のプロパティを
使います

379
00:24:14,488 --> 00:24:20,494
CPListTemplateを
セクションとともに初期化し

380
00:24:20,794 --> 00:24:25,666
タイトルとユーザ操作の
デリゲートを割り当てます

381
00:24:26,133 --> 00:24:30,537
テンプレートの追加方法は
先ほどと同じです

382
00:24:31,405 --> 00:24:34,208
ユーザが
検索結果を確認します

383
00:24:35,475 --> 00:24:40,480
この時 テンプレートに
完了ハンドラが呼ばれます

384
00:24:41,682 --> 00:24:46,053
CarPlayフレームワークには
他にもアイテムがあります

385
00:24:47,054 --> 00:24:50,724
CarPlayフレームワークの
優れた点の１つが

386
00:24:50,824 --> 00:24:55,028
車載システムの複雑さを
軽減してくれること

387
00:24:55,629 --> 00:24:59,766
こちらは
SearchTemplateにある―

388
00:24:59,867 --> 00:25:02,202
タッチスクリーン用
キーボードです

389
00:24:59,867 --> 00:25:02,202
タッチスクリーン用
キーボードです

390
00:25:02,469 --> 00:25:06,373
タッチスクリーン搭載車は
限られます

391
00:25:06,607 --> 00:25:10,477
回転つまみを使う
車も多いでしょう

392
00:25:10,878 --> 00:25:16,049
その場合は
文字列で表示します

393
00:25:16,550 --> 00:25:22,189
同じ検索APIを介し
文字認識ができれば

394
00:25:22,289 --> 00:25:26,093
タッチパッドでも
問題ありません

395
00:25:27,161 --> 00:25:32,199
重要な情報をユーザに
表示したい時は

396
00:25:32,332 --> 00:25:36,203
ActionSheetStyleの
CPAlertを使います

397
00:25:36,303 --> 00:25:41,408
特に重要な情報は
全画面表示が可能です

398
00:25:42,543 --> 00:25:46,880
また 音声も重要な要素です

399
00:25:47,181 --> 00:25:50,884
音声コントロールの
テンプレートもあります

400
00:25:51,485 --> 00:25:55,489
ここで再び
ジョナサンに代わります

401
00:25:55,589 --> 00:25:56,356
ジョナサン

402
00:25:56,490 --> 00:26:00,761
(拍手)

403
00:25:56,490 --> 00:26:00,761
(拍手)

404
00:26:01,795 --> 00:26:02,763
ありがとう

405
00:26:03,197 --> 00:26:05,966
CountryRoadsを例に
デモを行います

406
00:26:11,738 --> 00:26:14,908
Xcodeの
CarPlayシミュレータです

407
00:26:15,475 --> 00:26:17,544
まずはホーム画面です

408
00:26:17,644 --> 00:26:21,014
CarPlay仕様の
CountryRoadsを

409
00:26:21,115 --> 00:26:23,250
起動してみます

410
00:26:24,952 --> 00:26:27,755
最初に地図が表示されます

411
00:26:27,855 --> 00:26:31,258
透過性のオーバーレイ方式で

412
00:26:31,358 --> 00:26:34,895
タイル画像が
美しい地図になりました

413
00:26:35,028 --> 00:26:37,197
すばらしいですよね

414
00:26:38,098 --> 00:26:40,334
地図の拡大と縮小には

415
00:26:40,701 --> 00:26:43,937
CPMapButtonを利用します

416
00:26:45,973 --> 00:26:49,610
パンモードへの
切り替えもできます

417
00:26:52,546 --> 00:26:56,316
これらのボタンは
簡単に設定できます

418
00:26:56,417 --> 00:27:00,053
ユーザが
ボタンを操作すると

419
00:26:56,417 --> 00:27:00,053
ユーザが
ボタンを操作すると

420
00:27:00,154 --> 00:27:04,925
アプリケーションに
指令が伝わり実行されます

421
00:27:05,759 --> 00:27:07,795
先ほど追加したボタンが

422
00:27:07,895 --> 00:27:11,064
ナビゲーションバーに
ありますね

423
00:27:11,365 --> 00:27:16,570
ボタンをタップすると
GridTemplateと連動し

424
00:27:16,670 --> 00:27:20,073
よく使う目的地の項目が
表示されます

425
00:27:20,407 --> 00:27:25,979
“Parks”を選ぶと
ListTemplateと連動し

426
00:27:26,213 --> 00:27:29,683
近くの公園が
リストで表示されました

427
00:27:29,883 --> 00:27:31,618
続きはまた後ほど

428
00:27:31,718 --> 00:27:33,287
マイクに代わります

429
00:27:35,823 --> 00:27:38,125
(拍手)

430
00:27:40,727 --> 00:27:42,129
ありがとう

431
00:27:43,797 --> 00:27:48,802
ユーザにとって
最も重要な機能の１つ

432
00:27:48,902 --> 00:27:51,705
それはルート案内です

433
00:27:52,005 --> 00:27:56,210
ルート案内開始までの
典型的な流れを

434
00:27:56,310 --> 00:27:58,445
ユーザ視点で
見ていきます

435
00:27:59,413 --> 00:28:02,049
まずは目的地を選びます

436
00:27:59,413 --> 00:28:02,049
まずは目的地を選びます

437
00:28:02,382 --> 00:28:06,286
ナビ上から選ぶ場合もあれば

438
00:28:06,687 --> 00:28:10,224
すでに
決まっている場合もあります

439
00:28:11,058 --> 00:28:14,261
次はルートと
関連情報を確認

440
00:28:14,361 --> 00:28:18,966
例えば
所要時間や到着予定時刻です

441
00:28:19,533 --> 00:28:22,703
ルート候補が複数あれば

442
00:28:22,803 --> 00:28:27,207
プレビューを見て
最適なルートを選ぶでしょう

443
00:28:28,408 --> 00:28:31,111
そして
ナビをスタートさせます

444
00:28:31,278 --> 00:28:35,949
ここからアプリケーションの
ルート案内が始まり

445
00:28:36,617 --> 00:28:40,554
到着 あるいは
案内の停止まで続きます

446
00:28:41,288 --> 00:28:45,993
CarPlayフレームワークで
同じ流れを見ていきます

447
00:28:46,994 --> 00:28:49,463
まずは
ルートのプレビューから

448
00:28:49,897 --> 00:28:54,802
目的地までのルートを
視覚化したデータを

449
00:28:54,968 --> 00:28:58,872
画面上に表示し
ユーザに提供します

450
00:28:59,039 --> 00:29:01,975
目的地の名称はもちろん

451
00:28:59,039 --> 00:29:01,975
目的地の名称はもちろん

452
00:29:02,075 --> 00:29:05,546
注意喚起なども含まれます

453
00:29:05,879 --> 00:29:08,949
到着予定時刻も提供します

454
00:29:09,583 --> 00:29:11,518
複数の候補があれば

455
00:29:11,618 --> 00:29:15,155
それを知らせるボタンを
表示します

456
00:29:15,689 --> 00:29:21,228
ユーザがルートを
切り替えるためのボタンです

457
00:29:22,396 --> 00:29:25,666
クラスとメソッドを見ながら

458
00:29:25,766 --> 00:29:28,702
ルートプレビューを
構成します

459
00:29:30,070 --> 00:29:31,905
まずはCPTripです

460
00:29:32,005 --> 00:29:35,943
これはルート表示用の
クラスです

461
00:29:36,143 --> 00:29:38,712
起点や目的地の他

462
00:29:38,912 --> 00:29:43,283
ルートを予測する
CPRouteChoiceも含まれます

463
00:29:44,084 --> 00:29:46,954
CPTravelEstimatesは

464
00:29:47,054 --> 00:29:49,957
距離と所要時間を算出します

465
00:29:50,657 --> 00:29:55,095
ルートプレビュー表示の
準備が整ったら

466
00:29:55,195 --> 00:29:59,900
showTripPreviewsを
呼び出します

467
00:30:00,634 --> 00:30:02,970
表示内容の更新は

468
00:30:03,070 --> 00:30:07,074
ユーザがルートを
切り替えた時です

469
00:30:07,541 --> 00:30:11,245
インスタンスメソッドが
呼び出され

470
00:30:11,345 --> 00:30:13,213
表示内容が更新されます

471
00:30:14,148 --> 00:30:16,884
この機会にお伝えしたいのが

472
00:30:16,984 --> 00:30:20,587
MapTemplateの
コンテンツの表示方法です

473
00:30:21,255 --> 00:30:25,492
コンテンツをユーザに
確実に見てもらうには

474
00:30:25,993 --> 00:30:30,898
safeAreaのAPIが
有効ですよね

475
00:30:31,265 --> 00:30:34,201
MapTemplateで
コンテンツ変更が生じると

476
00:30:34,301 --> 00:30:39,373
safeAreaInsetsが更新され
最適な領域を教えます

477
00:30:39,473 --> 00:30:42,176
safeAreaInsetsDidChangeを
実装すれば

478
00:30:42,276 --> 00:30:46,480
コンテンツを
範囲内に収めてくれます

479
00:30:47,648 --> 00:30:49,750
次はルート案内です

480
00:30:50,350 --> 00:30:54,822
CarPlayフレームワークへ
情報を与えると

481
00:30:54,922 --> 00:30:57,558
案内カードが作られます

482
00:30:57,658 --> 00:31:03,497
ここで追加される情報は
走行ルートに残りの距離―

483
00:30:57,658 --> 00:31:03,497
ここで追加される情報は
走行ルートに残りの距離―

484
00:31:04,198 --> 00:31:09,002
さらに右折 左折
直進などの指示も含まれます

485
00:31:11,104 --> 00:31:16,777
CarPlayのルート案内では
次のことを覚えてください

486
00:31:19,246 --> 00:31:21,682
CPMapTemplateDelegateと
MapTemplate

487
00:31:21,782 --> 00:31:23,450
この２つは必須です

488
00:31:23,550 --> 00:31:26,286
プレビューのボタンが
押されると

489
00:31:26,587 --> 00:31:30,991
インスタンスメソッドが
呼び出されます

490
00:31:31,125 --> 00:31:33,827
これで指令が実行され

491
00:31:33,927 --> 00:31:37,297
目的地への
ルート案内が始まります

492
00:31:38,165 --> 00:31:40,934
アプリケーションが
案内を開始すると

493
00:31:41,034 --> 00:31:44,505
フレームワークへの
データ更新も始まります

494
00:31:45,172 --> 00:31:49,443
次に必要な
startNavigationSessionは

495
00:31:49,543 --> 00:31:53,213
CPNavigationSessionの
インスタンスを提供します

496
00:31:53,313 --> 00:31:56,316
この先のルート案内を
管理するものです

497
00:31:58,118 --> 00:32:02,656
CPNavigationSessionと
CPManeuverで

498
00:31:58,118 --> 00:32:02,656
CPNavigationSessionと
CPManeuverで

499
00:32:02,756 --> 00:32:05,659
自動的に運転指示を案内し

500
00:32:05,759 --> 00:32:10,430
次の指示があることも
表示します

501
00:32:11,398 --> 00:32:17,171
継続的に運転操作を
予測し更新しているので

502
00:32:17,271 --> 00:32:20,741
リアルタイムの
案内が提供できます

503
00:32:21,208 --> 00:32:25,512
音声案内を行うケースも
多いでしょう

504
00:32:25,946 --> 00:32:30,651
オーディオセッションの
設定には確認が必要です

505
00:32:31,084 --> 00:32:36,557
車内では音楽などを
楽しむことが多いですよね

506
00:32:36,657 --> 00:32:40,494
iOSにカーオーディオと
音源は様々です

507
00:32:40,928 --> 00:32:45,065
オーディオセッションに
適した変数を使えば

508
00:32:45,165 --> 00:32:49,203
音源を
気にする必要がありません

509
00:32:49,303 --> 00:32:51,605
音声は適切に作動します

510
00:32:51,705 --> 00:32:55,275
オーディオセッションの
設定には

511
00:32:55,375 --> 00:32:57,978
duckOthersなども
利用できます

512
00:32:58,078 --> 00:33:02,483
iOS音源との相性が
良くなります

513
00:32:58,078 --> 00:33:02,483
iOS音源との相性が
良くなります

514
00:33:03,217 --> 00:33:04,785
次に必要なのは？

515
00:33:04,885 --> 00:33:07,521
運転は続いています

516
00:33:07,955 --> 00:33:11,158
運転操作と到着予定時刻を
更新し

517
00:33:11,258 --> 00:33:14,228
引き続き
ルート案内を行います

518
00:33:15,762 --> 00:33:17,297
ルートを外れたら？

519
00:33:17,397 --> 00:33:20,868
新しいルートの
算出が必要です

520
00:33:20,968 --> 00:33:24,771
その間は
再検索中と表示できます

521
00:33:25,772 --> 00:33:29,176
道路状況が
変わることもあるでしょう

522
00:33:29,276 --> 00:33:34,047
その時は地図上に
アラートを表示します

523
00:33:34,948 --> 00:33:38,786
ナビのおかげで
無事 目的地に到着です

524
00:33:39,586 --> 00:33:44,224
ここまでは
スクリーン前面での話です

525
00:33:44,525 --> 00:33:49,596
たいてい スクリーン前面は
地図かオーディオです

526
00:33:49,696 --> 00:33:51,732
Srirockaのようなね

527
00:33:52,466 --> 00:33:56,904
バックグラウンド処理中に
情報を表示したい場合

528
00:33:57,504 --> 00:34:00,707
その時はスクリーン前面に

529
00:33:57,504 --> 00:34:00,707
その時はスクリーン前面に

530
00:34:01,008 --> 00:34:03,544
バナー通知を表示します

531
00:34:03,877 --> 00:34:08,748
アラートだけでなく
ルート案内にも使えます

532
00:34:09,882 --> 00:34:13,687
MapTemplateの
メソッドを３つ紹介します

533
00:34:13,987 --> 00:34:17,391
まずは
ShouldShowNotificationForManeuver

534
00:34:17,491 --> 00:34:21,161
バックグラウンドから
運転指示を出す時

535
00:34:21,261 --> 00:34:24,031
このメソッドを呼び
Trueを返します

536
00:34:24,130 --> 00:34:28,502
これで案内が
バナー通知に変換されます

537
00:34:29,268 --> 00:34:34,107
指示を通知したら
到着予定時刻も更新されます

538
00:34:34,208 --> 00:34:38,712
到着予定時刻を通知する
メソッドが呼び出され

539
00:34:38,812 --> 00:34:41,782
バナーのコンテンツが
更新されます

540
00:34:41,882 --> 00:34:44,217
新たな通知の作成ではなく

541
00:34:44,318 --> 00:34:47,087
コンテンツが
更新されるだけです

542
00:34:47,754 --> 00:34:51,992
アラートも
同じように表示可能です

543
00:34:52,092 --> 00:34:55,795
アラート用のメソッドも
用意しています

544
00:34:56,362 --> 00:34:59,867
ここで再び
ジョナサンのデモです

545
00:34:59,967 --> 00:35:05,305
ルートプレビューと
ルート案内をお見せします

546
00:34:59,967 --> 00:35:05,305
ルートプレビューと
ルート案内をお見せします

547
00:35:05,406 --> 00:35:06,240
ジョナサン

548
00:35:06,440 --> 00:35:09,510
(拍手)

549
00:35:10,778 --> 00:35:11,678
ありがとう

550
00:35:12,512 --> 00:35:17,317
再びCountryRoadsを例に
ルート案内のデモを行います

551
00:35:17,417 --> 00:35:19,386
まずはコードから
見ていきます

552
00:35:20,654 --> 00:35:25,893
目的地が選択されたら
現在地と目的地の位置から

553
00:35:25,993 --> 00:35:30,597
ナビゲーションエンジンが
ルートを算出します

554
00:35:31,231 --> 00:35:34,001
デモでは
ルートは１つですが

555
00:35:34,101 --> 00:35:39,173
ルート候補が
複数となる場合もあります

556
00:35:39,273 --> 00:35:44,411
そこでルート選択を助ける
追加情報を入れます

557
00:35:44,745 --> 00:35:48,382
CPTripを作成し
showTripPreviewsを呼び出し

558
00:35:48,482 --> 00:35:51,585
ルート案内の開始を
知らせます

559
00:35:51,785 --> 00:35:56,857
そして 到着予定時刻を
更新します

560
00:35:56,990 --> 00:36:01,328
CarPlayと連動する様子を
見てみます

561
00:35:56,990 --> 00:36:01,328
CarPlayと連動する様子を
見てみます

562
00:36:03,697 --> 00:36:07,101
ユーザが
ナビをスタートさせたら

563
00:36:07,201 --> 00:36:10,571
不要なルート候補を隠します

564
00:36:11,338 --> 00:36:14,241
次にセッションの開始を
MapTemplateに指示

565
00:36:14,341 --> 00:36:18,312
ローディング状態に入り
運転操作を算出し

566
00:36:18,545 --> 00:36:22,950
CPManeuverの
オブジェクトを構成します

567
00:36:23,050 --> 00:36:27,754
こうして
最初の案内が始まります

568
00:36:27,854 --> 00:36:29,389
準備ができたら

569
00:36:29,490 --> 00:36:30,758
ドライブを始めます

570
00:36:38,499 --> 00:36:43,136
“Favorites”から
“Parks”を検索します

571
00:36:44,505 --> 00:36:48,775
候補地をタップすると
地図の画面に戻り

572
00:36:49,076 --> 00:36:51,145
ルート案内が
表示されます

573
00:36:51,478 --> 00:36:55,048
“Go”ボタンをタップすると

574
00:36:55,148 --> 00:36:57,684
ナビゲーションモードに
入ります

575
00:36:57,985 --> 00:37:03,056
ナビゲーションバーの
ボタン表示は更新可能で

576
00:36:57,985 --> 00:37:03,056
ナビゲーションバーの
ボタン表示は更新可能で

577
00:37:03,156 --> 00:37:06,193
キャンセルボタンなどを
表示できます

578
00:37:06,293 --> 00:37:08,228
楽しいドライブのようです

579
00:37:09,196 --> 00:37:13,634
目的地に到着すると
地図モードに戻ります

580
00:37:15,669 --> 00:37:17,971
以上でデモは終了です

581
00:37:18,238 --> 00:37:21,542
本日のおさらいをしましょう

582
00:37:22,109 --> 00:37:25,446
劇的に進化したCarPlayに

583
00:37:25,546 --> 00:37:28,916
より良いユーザ体験への
最適化

584
00:37:29,183 --> 00:37:35,155
アプリケーションのための
最新CarPlayフレームワーク

585
00:37:35,422 --> 00:37:39,326
Stringやデバイスは
問いません

586
00:37:39,426 --> 00:37:43,096
ナビ開発者の皆さんに
注力して欲しいのは

587
00:37:43,197 --> 00:37:46,133
美しい地図を描くことです

588
00:37:46,266 --> 00:37:47,935
あとは
我々にお任せを

589
00:37:48,302 --> 00:37:51,205
CPMapTemplateで
地図を描き

590
00:37:51,305 --> 00:37:54,174
CPNavigationSessionで
ナビを管理

591
00:37:54,274 --> 00:37:57,411
情報の表示や
ユーザ操作のための

592
00:37:57,511 --> 00:37:59,379
テンプレートもありました

593
00:38:00,514 --> 00:38:02,249
ご質問のある方は

594
00:38:02,349 --> 00:38:07,688
本日午後２時に
ラボ11までお越しください

595
00:38:07,854 --> 00:38:12,259
詳細はこちらのURLでも
ご確認いただけます

596
00:38:12,392 --> 00:38:16,163
CarPlayアプリケーションの
構築準備ができましたね

597
00:38:16,263 --> 00:38:18,999
皆さんに期待しています

598
00:38:19,099 --> 00:38:20,267
ありがとう

599
00:38:20,434 --> 00:38:24,204
(拍手)