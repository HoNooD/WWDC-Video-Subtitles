
1
00:00:07,040 --> 00:00:15,582
(音楽)

2
00:00:17,885 --> 00:00:22,656
AutoFill Credential Provider
Extensionの実装方法を説明します

3
00:00:23,724 --> 00:00:29,730
まずパスワードの自動入力と
iOS 12での改善点を説明します

4
00:00:30,163 --> 00:00:35,402
次にiOSの新APIを使用して
パスワード管理Appと自動入力が

5
00:00:35,502 --> 00:00:37,804
どう統合できるかを
お話しします

6
00:00:38,672 --> 00:00:43,510
新APIを使用する際の
ベストプラクティスについても

7
00:00:45,712 --> 00:00:48,382
まずは
パスワードの自動入力です

8
00:00:50,851 --> 00:00:54,354
iOS 11では
２点 改善されていました

9
00:00:54,688 --> 00:00:58,492
関連性の高いクレデンシャルが
QuickTypeバーに表示され

10
00:00:58,592 --> 00:01:00,594
ワンタップでアクセス可能に

11
00:00:58,592 --> 00:01:00,594
ワンタップでアクセス可能に

12
00:01:00,694 --> 00:01:04,298
２つ目が
パスワード自動入力の導入です

13
00:01:04,431 --> 00:01:07,868
これでshiny Appと同様に
ウェブやアプリケーションで

14
00:01:07,968 --> 00:01:12,406
iCloudキーチェーンから
クレデンシャルを楽に使えます

15
00:01:14,174 --> 00:01:16,710
iOS 12やtvOS 12では―

16
00:01:16,810 --> 00:01:19,580
デバイスで
クレデンシャルを選べば

17
00:01:19,680 --> 00:01:22,749
Apple TVで
自動入力機能を使えます

18
00:01:23,317 --> 00:01:25,586
キーチェーンユーザには
朗報ですが

19
00:01:25,686 --> 00:01:29,590
他の管理Appを
使うユーザもいます

20
00:01:30,858 --> 00:01:34,461
彼らも楽にクレデンシャルに
アクセスできるよう―

21
00:01:34,561 --> 00:01:40,567
iOS 12では他の管理Appも
同じ自動入力に加えられます

22
00:01:41,902 --> 00:01:45,739
自動入力設定用の
新しいUIがあり

23
00:01:45,839 --> 00:01:49,877
クレデンシャルを
提供するAppを選択できます

24
00:01:49,977 --> 00:01:52,846
iCloudキーチェーンとの
併用も可能です

25
00:01:54,515 --> 00:01:56,216
QuickTypeバーを使えば―

26
00:01:56,817 --> 00:02:00,654
パスワード管理Appに保存された
クレデンシャルを呼び出せます

27
00:01:56,817 --> 00:02:00,654
パスワード管理Appに保存された
クレデンシャルを呼び出せます

28
00:02:00,754 --> 00:02:05,259
その管理Appにバンドルされた
ExtensionがUIを提供します

29
00:02:05,359 --> 00:02:08,895
クレデンシャルが選択されると
このExtensionが自動入力に返し

30
00:02:09,696 --> 00:02:12,299
ユーザ名とパスワードが
入力されます

31
00:02:13,800 --> 00:02:17,070
QuickTypeバーも
同様に機能します

32
00:02:17,171 --> 00:02:20,374
自動入力で最適な
クレデンシャルが呼び出され

33
00:02:20,474 --> 00:02:22,809
ワンタップで
アクセスできます

34
00:02:24,211 --> 00:02:28,849
クレデンシャルを入力する前に
オプションで表示される専用UIで

35
00:02:28,949 --> 00:02:30,717
ユーザ認証もできます

36
00:02:33,320 --> 00:02:37,724
パスワード管理Appのユーザは
より楽にログインでき

37
00:02:37,824 --> 00:02:41,094
クレデンシャルの煩雑な
コピーは不要になります

38
00:02:41,795 --> 00:02:44,665
他のアプリケーションでも
自動入力できます

39
00:02:44,765 --> 00:02:47,334
キーチェーンでの
自動入力が可能なら―

40
00:02:47,434 --> 00:02:50,704
パスワード管理Appと
スムーズに併用できます

41
00:02:53,140 --> 00:02:58,412
では パスワード管理Appに
これらの機能を実装してみましょう

42
00:02:58,512 --> 00:03:00,614
ステップは４つです

43
00:02:58,512 --> 00:03:00,614
ステップは４つです

44
00:03:02,549 --> 00:03:06,987
まず新しいAPIを使って
プロジェクトを構成します

45
00:03:07,087 --> 00:03:09,056
Appには機能を―

46
00:03:09,156 --> 00:03:11,358
プロジェクトには
Extensionを追加

47
00:03:11,458 --> 00:03:16,363
自動入力はこのExtensionを使って
Appに問い合わせます

48
00:03:17,931 --> 00:03:22,436
次にQuickTypeバーから
Extensionを開くと ユーザに対して

49
00:03:22,536 --> 00:03:25,038
選べるクレデンシャルが
表示されます

50
00:03:26,907 --> 00:03:30,844
自動入力を使用してバーに
クレデンシャルを表示する場合

51
00:03:30,944 --> 00:03:34,915
表示したいクレデンシャルを
システムに指示し―

52
00:03:35,015 --> 00:03:37,050
Extensionに
別のAPIを実装して

53
00:03:37,150 --> 00:03:39,720
クレデンシャルを
選ぶユーザに応答します

54
00:03:40,754 --> 00:03:45,792
最後に設定でパスワード管理Appを
有効にする場合は―

55
00:03:45,893 --> 00:03:48,862
ExtensionのUIを
表示可能にするAPIを使います

56
00:03:48,962 --> 00:03:51,131
各ステップを
詳しく見ましょう

57
00:03:53,233 --> 00:03:56,236
まずプロジェクトを
変更します

58
00:03:56,336 --> 00:04:01,108
AutoFill Credential
Providerを有効にします

59
00:03:56,336 --> 00:04:01,108
AutoFill Credential
Providerを有効にします

60
00:04:01,208 --> 00:04:03,277
すると必要な資格が追加され

61
00:04:03,377 --> 00:04:06,547
新しい認証サービスに
リンクします

62
00:04:06,647 --> 00:04:09,950
これでパスワード自動入力の
APIが提供されます

63
00:04:12,419 --> 00:04:17,457
次にAutoFill Credential Provider
Extensionをプロジェクトに追加

64
00:04:17,558 --> 00:04:20,459
Xcode 10には
テンプレートが備わってます

65
00:04:22,529 --> 00:04:25,065
これにより
ViewControllerクラスと

66
00:04:25,165 --> 00:04:28,969
ASCredentialProviderView
Controllerのサブクラスを作成

67
00:04:29,069 --> 00:04:31,171
自動入力にExtensionの
起動が必要な場合

68
00:04:31,271 --> 00:04:34,608
このクラスのインスタンスが
作成されて メソッドが呼び出され

69
00:04:34,708 --> 00:04:36,743
サブクラスは上書きされます

70
00:04:37,978 --> 00:04:40,447
プロジェクトの構成が
終わったら

71
00:04:40,547 --> 00:04:45,819
QuickTypeバーから呼び出せる
クレデンシャルリストを実装します

72
00:04:45,919 --> 00:04:47,454
その方法を説明します

73
00:04:49,156 --> 00:04:53,894
サインインでQuickTypeバーに
クレデンシャルを呼び出せます

74
00:04:54,862 --> 00:04:59,633
この時 自動入力でExtensionに
ユーザのログイン場所が知らされ

75
00:04:59,733 --> 00:05:02,469
最も関連性の高い
クレデンシャルが提案されます

76
00:04:59,733 --> 00:05:02,469
最も関連性の高い
クレデンシャルが提案されます

77
00:05:04,037 --> 00:05:08,609
自動入力でASCredentialService
Identifierが準備され

78
00:05:08,709 --> 00:05:11,778
ユーザが使用するサービスを
表示します

79
00:05:11,879 --> 00:05:14,314
自動入力で最適なサービスが
判断されると―

80
00:05:14,414 --> 00:05:18,519
Extensionがサービス識別子を
受け取ります

81
00:05:20,020 --> 00:05:20,821
サービス識別子は

82
00:05:20,921 --> 00:05:24,158
アプリケーションの
関連するドメインに基づきます

83
00:05:24,258 --> 00:05:26,326
ユニバーサルリンクHandoffや―

84
00:05:26,426 --> 00:05:28,362
共有ウェブ証明書を使えば

85
00:05:28,462 --> 00:05:30,464
ドメインが関連します

86
00:05:30,931 --> 00:05:35,569
例えば shiny Appは
shiny.example.comと関連づけられ

87
00:05:35,669 --> 00:05:41,675
このドメインのサービス識別子が
Extensionに提供されます

88
00:05:42,743 --> 00:05:48,448
Safariではユーザがログイン中の
URLに基づいた識別子になります

89
00:05:51,318 --> 00:05:54,454
自動入力で識別子が
Extensionに送られる際

90
00:05:54,555 --> 00:05:59,493
識別子用のクレデンシャルを
View Controllerに呼び出します

91
00:06:00,194 --> 00:06:04,765
ここでExtensionはUIを設定して
ユーザのクレデンシャルを表示し

92
00:06:04,865 --> 00:06:09,436
提供されたサービス識別子を使って
関連性の高いものを優先します

93
00:06:09,870 --> 00:06:12,005
この後の展開は２通りです

94
00:06:13,874 --> 00:06:16,076
Extensionを閉じる場合は―

95
00:06:16,176 --> 00:06:22,182
cancelRequest(withErrorを
呼び出します

96
00:06:23,050 --> 00:06:25,486
するとExtensionが閉じます

97
00:06:29,189 --> 00:06:32,292
ユーザがクレデンシャルを
選ぶ場合は―

98
00:06:32,392 --> 00:06:37,097
選択に基づいてExtensionが
ASPasswordCredentialを作成します

99
00:06:37,197 --> 00:06:40,234
そしてExtension上で選択した
クレデンシャルメソッドを使用して

100
00:06:40,334 --> 00:06:43,604
リクエストを呼び出し自動入力用に
クレデンシャルを渡します

101
00:06:44,471 --> 00:06:46,139
自動入力ではそれを使用し

102
00:06:46,240 --> 00:06:48,876
ユーザ名とパスワードを
アプリケーションに入力します

103
00:06:51,845 --> 00:06:56,383
この機能を生かすための
ペストプラクティスをいくつか

104
00:06:56,884 --> 00:07:00,854
まず UIにリクエストの
取り消しボタンを含めること

105
00:06:56,884 --> 00:07:00,854
まず UIにリクエストの
取り消しボタンを含めること

106
00:07:01,321 --> 00:07:03,957
サインイン中に
気が変わったとか―

107
00:07:04,057 --> 00:07:06,160
クレデンシャルがないと
気づいた時

108
00:07:06,260 --> 00:07:10,430
ボタンを押せばクレデンシャルを
選ばずにExtensionを閉じられます

109
00:07:12,799 --> 00:07:16,904
クレデンシャルリストのUIは
サービスと一致してなくても

110
00:07:17,004 --> 00:07:19,673
すべて表示しておく必要が
あります

111
00:07:19,773 --> 00:07:23,677
違うドメインからクレデンシャルを
選ぶ場合もあります

112
00:07:24,211 --> 00:07:27,581
ユーザが全クレデンシャルに
アクセスできるようにしておくと

113
00:07:27,681 --> 00:07:30,250
Extensionは
いつでも役立ちます

114
00:07:32,085 --> 00:07:35,522
ユーザ認証は
完全にExtension依存で

115
00:07:35,622 --> 00:07:39,827
認証の際はクレデンシャルリストを
表示して行います

116
00:07:42,696 --> 00:07:45,299
リストをExtensionに
実装しておけば―

117
00:07:45,399 --> 00:07:48,969
どこでサインインしても
クレデンシャルを使えます

118
00:07:50,304 --> 00:07:52,072
次は自動入力を使い

119
00:07:52,172 --> 00:07:56,210
QuickTypeバーに
クレデンシャルを表示します

120
00:07:57,344 --> 00:08:01,849
まずは処理の概要を説明し
コードとシステム―

121
00:07:57,344 --> 00:08:01,849
まずは処理の概要を説明し
コードとシステム―

122
00:08:01,949 --> 00:08:04,885
サインインするAppの
役割をお話しします

123
00:08:07,588 --> 00:08:10,991
まず QuickTypeバーに
どれを表示するかを―

124
00:08:11,091 --> 00:08:14,328
前もって自動入力機能に
通知しておきます

125
00:08:15,062 --> 00:08:18,131
するとクレデンシャルの
アイデンティティリストが入ります

126
00:08:18,232 --> 00:08:21,168
アイデンティティとは
クレデンシャルの情報で

127
00:08:21,268 --> 00:08:25,072
パスワード以外の
ユーザ名やサービス内容です

128
00:08:26,974 --> 00:08:30,344
ユーザがアプリケーションに
サインインすると

129
00:08:30,444 --> 00:08:33,647
自動入力機能はユーザ名や
パスワードの入力を促されます

130
00:08:34,847 --> 00:08:38,751
すると自動入力機能は適切な
クレデンシャルを検索します

131
00:08:38,852 --> 00:08:42,655
アプリケーションが渡してある
クレデンシャルから探すので

132
00:08:42,756 --> 00:08:45,292
Extensionを起動する必要は
ありません

133
00:08:45,859 --> 00:08:48,695
一致するクレデンシャルが
見つかると

134
00:08:48,795 --> 00:08:51,131
QuickTypeバーに
表示されます

135
00:08:51,798 --> 00:08:54,268
この提案は
非公開に行われるので―

136
00:08:54,368 --> 00:08:56,103
ユーザが保存したクレデンシャルを

137
00:08:56,203 --> 00:08:58,906
アプリケーションは
まだ判別できません

138
00:09:01,508 --> 00:09:04,044
ユーザが提案の１つを選ぶと―

139
00:09:04,144 --> 00:09:08,682
クレデンシャルを取得するよう
自動入力機能がExtensionを起動

140
00:09:10,384 --> 00:09:13,687
ユーザの選んだクレデンシャルが
Extensionに伝えられ

141
00:09:15,255 --> 00:09:20,561
パスワードのデータベースから
Extensionが検索します

142
00:09:21,228 --> 00:09:26,133
パスワードを返す前にExtensionは
専用UIを表示することもあります

143
00:09:26,600 --> 00:09:30,804
パスワード管理Appがユーザに
パスワード入力を促す際や

144
00:09:30,904 --> 00:09:34,408
別の認証方法を
提示する際に役立ちます

145
00:09:36,810 --> 00:09:38,579
パスワードが返されると―

146
00:09:38,679 --> 00:09:44,184
ASPasswordCredentialを介して
自動入力機能に渡されます

147
00:09:45,919 --> 00:09:48,288
専用UIが表示されない場合は―

148
00:09:48,388 --> 00:09:51,692
自動入力機能がユーザに対して
認証を行います

149
00:09:52,025 --> 00:09:54,428
デバイスと
ユーザの好みに応じて―

150
00:09:54,528 --> 00:09:59,066
Face IDやTouch ID
パスコードが使われます

151
00:10:01,535 --> 00:10:03,504
認証が成功すると―

152
00:10:03,604 --> 00:10:07,374
自動入力機能でユーザ名と
パスワードが入力されます

153
00:10:07,474 --> 00:10:08,642
手順が煩雑なので―

154
00:10:08,742 --> 00:10:12,613
デベロッパに必要な点を
まとめます

155
00:10:14,815 --> 00:10:20,320
自動入力機能にクレデンシャルの
アイデンティティを渡します

156
00:10:20,821 --> 00:10:25,192
Extensionがパスワードを
返すようサポートします

157
00:10:25,292 --> 00:10:30,030
ユーザが要求したら
ユーザ認証用のUIを―

158
00:10:30,130 --> 00:10:31,999
Extension内で表示させます

159
00:10:32,432 --> 00:10:34,535
このステップは任意です

160
00:10:34,635 --> 00:10:36,803
認証用のUIが
表示されない場合

161
00:10:36,904 --> 00:10:40,240
自動入力機能で
適切な認証が行われます

162
00:10:43,110 --> 00:10:48,248
ASPasswordCredentialIdentityは
アイデンティティを表すクラスです

163
00:10:48,348 --> 00:10:50,584
このクラスに入っている
情報を検討して―

164
00:10:50,684 --> 00:10:53,921
自動入力機能はその情報を
渡す先を判断します

165
00:10:54,555 --> 00:10:56,323
例えば サービス識別子は―

166
00:10:56,423 --> 00:10:58,725
どのアプリケーションや
ウェブサイトに

167
00:10:58,826 --> 00:11:00,594
情報を渡すかを指示しています

168
00:10:58,826 --> 00:11:00,594
情報を渡すかを指示しています

169
00:11:01,662 --> 00:11:03,597
クレデンシャルのユーザ名や

170
00:11:05,065 --> 00:11:06,967
レコード識別子は―

171
00:11:07,067 --> 00:11:08,769
データベースにある記録と

172
00:11:08,869 --> 00:11:11,205
アイデンティティを関連づけます

173
00:11:12,406 --> 00:11:13,974
次にランクパラメータです

174
00:11:14,241 --> 00:11:18,679
QuickTypeバーに表示できないほど
クレデンシャルがある場合は

175
00:11:18,779 --> 00:11:23,550
ランクパラメータを使用して
クレデンシャルの優先度を決めます

176
00:11:24,351 --> 00:11:29,857
ランク値の高いクレデンシャルは
低いものに先立ちます

177
00:11:32,726 --> 00:11:36,363
クレデンシャルアイデンティティ
ストアにこれらは保存されます

178
00:11:36,463 --> 00:11:38,499
このストアはデータベースで

179
00:11:38,599 --> 00:11:42,703
ASCredentialIdentityStore
クラスを使って変更できます

180
00:11:43,337 --> 00:11:45,405
自動入力機能では―

181
00:11:45,505 --> 00:11:48,208
このストアから
情報を取得します

182
00:11:50,310 --> 00:11:54,548
ストア内ではオープンデータが
完全に保護されていて

183
00:11:54,648 --> 00:11:57,651
ロックされた状態では
操作できません

184
00:11:58,151 --> 00:12:02,523
クラウドやバックアップと
リンクもしていないので

185
00:11:58,151 --> 00:12:02,523
クラウドやバックアップと
リンクもしていないので

186
00:12:02,623 --> 00:12:05,259
情報が漏れることは
ありません

187
00:12:07,661 --> 00:12:10,264
各アプリケーションには
ストアがあり

188
00:12:10,364 --> 00:12:13,233
アプリケーションとExtensionのみ
内容を変更できます

189
00:12:14,034 --> 00:12:16,136
自動入力機能のみが
ストアを読み取れて

190
00:12:16,236 --> 00:12:19,706
ユーザに提案する
クレデンシャルを決定できます

191
00:12:22,309 --> 00:12:27,781
Extensionが有効な時しか
ストアは変えられません

192
00:12:28,415 --> 00:12:31,952
Extensionが無効の時は
更新もできません

193
00:12:32,052 --> 00:12:36,123
Extensionの無効化や
アプリケーションの削除で

194
00:12:36,223 --> 00:12:37,457
ストアも削除されます

195
00:12:40,127 --> 00:12:42,329
ストアを更新する必要が
あるのは―

196
00:12:42,429 --> 00:12:45,532
クレデンシャルに関する
新情報が入った時です

197
00:12:46,200 --> 00:12:51,338
オンラインサービスを使って
クレデンシャルを格納した場合

198
00:12:52,139 --> 00:12:53,574
ユーザがサインインすると―

199
00:12:53,674 --> 00:12:56,543
アプリケーションは
クレデンシャルを取得します

200
00:12:56,643 --> 00:13:00,380
この時 ストア内の
クレデンシャルが更新され

201
00:12:56,643 --> 00:13:00,380
この時 ストア内の
クレデンシャルが更新され

202
00:13:00,480 --> 00:13:03,817
新規のクレデンシャルは
QuickTypeバーに提案されます

203
00:13:06,186 --> 00:13:10,023
ユーザがクレデンシャルの
追加や削除 変更を行うと―

204
00:13:10,123 --> 00:13:12,626
アプリケーションが
ストアを更新します

205
00:13:12,726 --> 00:13:17,264
そのため 正しいクレデンシャルの
内容が反映されます

206
00:13:18,765 --> 00:13:19,933
更新の理由は―

207
00:13:20,033 --> 00:13:22,669
ユーザがAppに
変更を加えたためとか

208
00:13:22,769 --> 00:13:26,006
他のデバイスが
オンラインで加えた変更に―

209
00:13:26,106 --> 00:13:27,975
同期したためなどです

210
00:13:29,943 --> 00:13:34,281
ユーザがデバイス上で
オンラインサービスから外れると

211
00:13:34,381 --> 00:13:37,351
アプリケーションはストアから
クレデンシャルを削除し

212
00:13:37,451 --> 00:13:41,188
それらクレデンシャルの提案が
なくなります

213
00:13:44,258 --> 00:13:47,628
ASCredentialIdentityStore
クラスを使うと

214
00:13:47,728 --> 00:13:50,164
ストアと連携できます

215
00:13:51,565 --> 00:13:54,268
replaceCredential
Identities(withや

216
00:13:54,368 --> 00:13:57,070
removeAllCredentialIdentitiesで

217
00:13:57,604 --> 00:14:02,543
クレデンシャルの置換や
削除が可能になっています

218
00:13:57,604 --> 00:14:02,543
クレデンシャルの置換や
削除が可能になっています

219
00:14:04,745 --> 00:14:06,747
個別に変更を加える場合は―

220
00:14:06,847 --> 00:14:10,884
saveCredentialIdentitiesや
removeCredentialIdentitiesで

221
00:14:10,984 --> 00:14:14,388
クレデンシャルの追加や更新
削除ができます

222
00:14:14,488 --> 00:14:17,491
ストアを完全に
置換する必要はありません

223
00:14:20,360 --> 00:14:22,930
当システムで
留意してほしいのは

224
00:14:23,030 --> 00:14:27,935
予測不可能なタイミングで
ストアが削除される可能性です

225
00:14:28,035 --> 00:14:29,603
例を挙げましょう

226
00:14:30,671 --> 00:14:33,040
Extensionを無効にしてから―

227
00:14:33,140 --> 00:14:36,944
有効に戻すと
ストアの中身が消去されます

228
00:14:37,211 --> 00:14:40,614
アプリケーションが
クレデンシャルを提供していても

229
00:14:40,714 --> 00:14:45,385
ユーザに対してパスワードを
提供できずにいると―

230
00:14:45,486 --> 00:14:51,024
ユーザが古い情報を見ることを
防ぐため ストアは削除されます

231
00:14:53,560 --> 00:14:58,499
Extensionを使うデバイスを
バックアップから復旧すると―

232
00:14:58,599 --> 00:15:03,237
ストアはバックアップされて
いないので 中身が消えます

233
00:14:58,599 --> 00:15:03,237
ストアはバックアップされて
いないので 中身が消えます

234
00:15:03,704 --> 00:15:05,873
これらのケースは対処可能で―

235
00:15:06,473 --> 00:15:09,476
ASCredentialIdentityStoreが
問題を検出します

236
00:15:09,576 --> 00:15:12,880
更新が必要なら
適切に行えるでしょう

237
00:15:15,682 --> 00:15:21,054
アイデンティティストアに関し
getStateで問い合わせると―

238
00:15:21,154 --> 00:15:24,858
ASCredentialIdentityStoreState
オブジェクトが戻されます

239
00:15:26,093 --> 00:15:30,430
Extensionが有効かどうかが
まず分かるでしょう

240
00:15:30,731 --> 00:15:34,101
ストアを更新する前に
必ず確認してください

241
00:15:34,201 --> 00:15:39,239
無効ならクレデンシャルの
保存や削除をしても無意味です

242
00:15:42,342 --> 00:15:45,846
supportsIncrementalUpdatesが
他にもあり―

243
00:15:45,946 --> 00:15:50,584
これを使えば最後の更新以降
ストアに変更がないか確認できます

244
00:15:51,485 --> 00:15:54,621
以前にストアで
クレデンシャルを保存していれば

245
00:15:54,721 --> 00:15:56,323
trueが返されます

246
00:15:56,423 --> 00:15:59,660
saveCredentialIdentitiesか
removeCredentialIdentitiesを

247
00:15:59,760 --> 00:16:02,129
使うべきだと分かります

248
00:15:59,760 --> 00:16:02,129
使うべきだと分かります

249
00:16:03,263 --> 00:16:06,166
もしストアに
書き込みがなければ―

250
00:16:06,266 --> 00:16:09,469
アプリケーションが一度
無効化されたということです

251
00:16:10,003 --> 00:16:12,639
supportsIncrementalUpdatesが
falseを返します

252
00:16:12,739 --> 00:16:17,010
replaceCredential
Identities(withを使用して

253
00:16:17,110 --> 00:16:20,547
クレデンシャルの全リストを
書き込みましょう

254
00:16:22,249 --> 00:16:25,552
アプリケーションがストアの中身を
一度 保存したら

255
00:16:25,652 --> 00:16:29,389
自動入力機能がQuickTypeバーに
クレデンシャル情報を提案します

256
00:16:29,823 --> 00:16:33,227
このような提案がされたら―

257
00:16:33,327 --> 00:16:36,263
パスワードの提供が
必要になります

258
00:16:38,031 --> 00:16:42,336
この場合 UIが表示されなくても
Extensionが起動され

259
00:16:42,436 --> 00:16:44,538
パスワードを求められます

260
00:16:45,205 --> 00:16:50,377
まずprovideCredentialWithout
UserInteraction(forメソッドが

261
00:16:50,477 --> 00:16:52,412
View Controllerで
呼び出され

262
00:16:52,513 --> 00:16:57,084
ASPasswordCredentialIdentityが
クレデンシャルの入力を示します

263
00:16:58,352 --> 00:17:02,489
この場合は関連する
パスワードを調べて

264
00:16:58,352 --> 00:17:02,489
この場合は関連する
パスワードを調べて

265
00:17:02,589 --> 00:17:07,327
completeRequest(with
SelectedCredentialで返します

266
00:17:09,762 --> 00:17:12,965
Extensionに
UIの表示を求められたら

267
00:17:13,099 --> 00:17:14,535
要求を取り消します

268
00:17:14,635 --> 00:17:17,604
ドメイン
ASExtensionErrorにある―

269
00:17:17,704 --> 00:17:20,540
userInteractionRequired
エラーコードを使います

270
00:17:22,342 --> 00:17:28,147
次にprepareInterfaceToProvide
Credential(forメソッドを使い

271
00:17:28,248 --> 00:17:29,716
UIを表示します

272
00:17:30,317 --> 00:17:35,122
そしてExtensionでUIを設定し
パスワードを提出します

273
00:17:35,889 --> 00:17:38,325
パスワードが
使用可能になったら

274
00:17:38,425 --> 00:17:41,995
completeRequest(with
SelectedCredentialメソッドを使い

275
00:17:42,095 --> 00:17:44,164
クレデンシャルを戻します

276
00:17:44,698 --> 00:17:47,734
Extensionに
UIが表示されると―

277
00:17:47,834 --> 00:17:52,105
クレデンシャルを入力するまで
自動入力機能では認証を行いません

278
00:17:52,206 --> 00:17:55,976
認証のタイプは
Extensionに応じて変わります

279
00:17:59,179 --> 00:18:02,249
この機能の実装で
最も重要なのは

280
00:17:59,179 --> 00:18:02,249
この機能の実装で
最も重要なのは

281
00:18:02,349 --> 00:18:06,487
UIを介さない最初の要求には
すぐ答えることです

282
00:18:06,587 --> 00:18:08,455
その結果は問いません

283
00:18:09,556 --> 00:18:11,658
UIが表示されない場合

284
00:18:11,758 --> 00:18:15,529
Extensionが動作しているかが
分かりにくいのです

285
00:18:15,963 --> 00:18:18,232
ユーザにパスワードを
返さずにいると―

286
00:18:18,332 --> 00:18:21,235
システムやアプリケーション

287
00:18:21,335 --> 00:18:24,271
サービスが
稼働していないと思われます

288
00:18:24,605 --> 00:18:26,907
ユーザは不満に思うでしょう

289
00:18:28,208 --> 00:18:29,543
だから大事なのです

290
00:18:29,643 --> 00:18:33,413
数秒 経っても
パスワードが返らず

291
00:18:33,514 --> 00:18:36,950
UIの表示の要求や
エラーが出たら―

292
00:18:37,050 --> 00:18:40,254
自動入力機能で
要求が取り消されます

293
00:18:41,822 --> 00:18:46,693
ただし デバッグビルドや
シミュレータ実行時でなければ―

294
00:18:46,793 --> 00:18:50,464
Extensionを
デバッグできます

295
00:18:54,434 --> 00:18:58,305
QuickTypeバーで
クレデンシャルを表示する際は―

296
00:18:58,405 --> 00:19:01,408
ストアを更新しておくことが
重要です

297
00:18:58,405 --> 00:19:01,408
ストアを更新しておくことが
重要です

298
00:19:01,508 --> 00:19:04,144
既知のクレデンシャルとの
同期も忘れずに

299
00:19:04,711 --> 00:19:07,448
ストアとアプリケーションで
同期が取れないと―

300
00:19:07,548 --> 00:19:10,717
QuickTypeバーに
クレデンシャルが表示されません

301
00:19:11,051 --> 00:19:15,656
あるいはアプリケーションから
削除後もバーに表示され続けます

302
00:19:16,590 --> 00:19:21,762
ASCredentialIdentityStoreの
増分更新APIをご利用ください

303
00:19:21,862 --> 00:19:26,600
クレデンシャルが変わるたびに
リスト全体を置換していると―

304
00:19:26,700 --> 00:19:30,270
アップデートに
負担が かかってしまいます

305
00:19:30,971 --> 00:19:34,708
新規のクレデンシャルの
増分のみを保存するとか―

306
00:19:34,808 --> 00:19:37,978
削除した分は
取り除くべきでしょう

307
00:19:38,078 --> 00:19:40,447
ストア全体を書き換えるより
マシです

308
00:19:42,583 --> 00:19:45,119
Extensionを呼び出す際

309
00:19:45,219 --> 00:19:47,554
別のアプリケーションが
使用中の場合も

310
00:19:47,754 --> 00:19:50,290
UIの使用は最小限に抑え

311
00:19:50,390 --> 00:19:53,961
パスワードの使用に
必要なもののみ含めてください

312
00:19:56,663 --> 00:19:59,666
パスワードデータベースの
ロードが高負荷なら―

313
00:19:59,766 --> 00:20:05,005
メソッドの設定のやり直しや
解除は避けましょう

314
00:19:59,766 --> 00:20:05,005
メソッドの設定のやり直しや
解除は避けましょう

315
00:20:05,405 --> 00:20:07,841
ユーザが
Extensionを使用して―

316
00:20:07,941 --> 00:20:11,912
複数のサービスに入る場合
再利用するかもしれません

317
00:20:12,679 --> 00:20:17,217
１度の呼び出しで
終えられる仕事なら―

318
00:20:17,317 --> 00:20:20,654
Extensionの再利用は
可能です

319
00:20:23,490 --> 00:20:27,561
QuickTypeバーでの
クレデンシャルの表示を話しました

320
00:20:29,329 --> 00:20:33,500
ご使用のExtensionで役立つ
APIをもう１つ 紹介します

321
00:20:34,134 --> 00:20:37,171
パスワード自動入力で
Extensionを有効化するなら―

322
00:20:37,271 --> 00:20:41,341
ユーザを満足させるために
しておくべき設定があります

323
00:20:41,708 --> 00:20:45,012
QuickTypeバーで
クレデンシャルを表示する前に

324
00:20:45,112 --> 00:20:49,550
自動入力機能にクレデンシャルを
渡しておくべきです

325
00:20:49,983 --> 00:20:52,920
この時 他の設定を
表示させるのも役に立ちます

326
00:20:53,020 --> 00:20:57,357
パスワードを取り戻すため
オンラインサービスに―

327
00:20:57,458 --> 00:20:58,859
サインインするなどです

328
00:21:00,561 --> 00:21:04,231
AuthenticationServicesは
このためのAPIを提供します

329
00:21:04,431 --> 00:21:09,236
Extensionを起動して
UIを表示すれば―

330
00:21:09,336 --> 00:21:11,305
ユーザ自身で設定できます

331
00:21:13,307 --> 00:21:17,945
作業の最適化には
Information Property Listを開き

332
00:21:18,045 --> 00:21:21,148
NSExtension属性の下に
新規のキーを追加します

333
00:21:21,748 --> 00:21:25,819
ASCredentialProviderExtension
ShowsConfigurationUIの―

334
00:21:25,919 --> 00:21:27,921
ブール値は“YES”

335
00:21:28,322 --> 00:21:31,992
Extensionが有効化されたら
このようにして起動します

336
00:21:34,094 --> 00:21:39,766
prepareInterfaceFor
ExtensionConfigurationを実装し

337
00:21:39,867 --> 00:21:43,437
Extensionを有効化したら
適切なUIを設定します

338
00:21:45,839 --> 00:21:50,510
completeExtension
ConfigurationRequestを呼び出せば

339
00:21:50,611 --> 00:21:54,181
UIは閉じられるでしょう

340
00:21:55,516 --> 00:21:57,651
この時点で
Extensionは有効です

341
00:21:57,751 --> 00:22:01,989
自動入力機能にクレデンシャルが
渡されてQuickTypeバーに表示され

342
00:21:57,751 --> 00:22:01,989
自動入力機能にクレデンシャルが
渡されてQuickTypeバーに表示され

343
00:22:02,089 --> 00:22:05,159
選択されると
パスワードの供給とともに

344
00:22:05,259 --> 00:22:07,995
ユーザには全クレデンシャルが
表示されます

345
00:22:08,195 --> 00:22:10,731
これで自動入力機能の統合は
終わりです

346
00:22:10,831 --> 00:22:15,802
ユーザはいつでも必要な時に
この機能を使用できます

347
00:22:18,472 --> 00:22:23,010
Extensionの開発における
ペストプラクティスを

348
00:22:25,746 --> 00:22:27,147
先に述べたように―

349
00:22:27,247 --> 00:22:32,352
View Controllerを使用して
UIの多様な機能を表示します

350
00:22:32,786 --> 00:22:35,422
メインのControllerの他に―

351
00:22:35,522 --> 00:22:37,791
サブのControllerの使用を
お勧めします

352
00:22:38,592 --> 00:22:43,297
例えば クレデンシャルリストを
１つのControllerで表示し

353
00:22:43,397 --> 00:22:46,900
ユーザ認証を
別のControllerで行うのです

354
00:22:47,935 --> 00:22:51,271
サブのControllerは
メインでも表示できるし

355
00:22:51,605 --> 00:22:54,675
ビューの埋め込みも可能です

356
00:22:55,542 --> 00:22:58,412
使用中のControllerで
インターフェイスを準備するなら

357
00:22:58,512 --> 00:23:01,248
アニメーションの使用は
控えてください

358
00:22:58,512 --> 00:23:01,248
アニメーションの使用は
控えてください

359
00:23:01,348 --> 00:23:05,085
メインのControllerで
すでに使用してるからです

360
00:23:08,021 --> 00:23:12,025
通常 Extensionは動作が軽く
すぐ終了できますが―

361
00:23:12,125 --> 00:23:15,395
AutoFill Credential
Provider Extensionも同様です

362
00:23:15,929 --> 00:23:18,932
Extensionで特定のタスクを
行っている時は―

363
00:23:19,032 --> 00:23:23,904
必要でない限り 他の作業や
他のユーザの使用は避けてください

364
00:23:25,272 --> 00:23:30,377
Extensionは予期せぬ理由で
終了することがあります

365
00:23:30,744 --> 00:23:34,515
AutoFill Credential
Provider Extensionも―

366
00:23:34,615 --> 00:23:37,451
アプリケーションの切り替えで
終了したりします

367
00:23:38,819 --> 00:23:41,722
また メインのアプリケーションと
サインボックスは別でも―

368
00:23:41,822 --> 00:23:45,092
クレデンシャルなどの
データは共有します

369
00:23:45,592 --> 00:23:50,531
App Groupsや共有キーチェーンで
共有を行ってください

370
00:23:51,231 --> 00:23:53,767
Extensionの開発に関しては―

371
00:23:53,867 --> 00:23:56,336
Extensionの作成の
説明ビデオや―

372
00:23:56,437 --> 00:24:00,741
WWDC 2014のOS Xの
セッションをご覧ください

373
00:23:56,437 --> 00:24:00,741
WWDC 2014のOS Xの
セッションをご覧ください

374
00:24:03,277 --> 00:24:07,381
最後に クレデンシャルの入力を
テストする際のデバッグは―

375
00:24:07,481 --> 00:24:09,583
Safariを使用してください

376
00:24:10,584 --> 00:24:13,453
まずExtensionスキームを
起動して

377
00:24:13,554 --> 00:24:15,856
ターゲットを選択し
“実行”を選択します

378
00:24:17,724 --> 00:24:21,862
ホストのアプリケーションの選択を
Xcodeから求められます

379
00:24:22,062 --> 00:24:24,965
Safariを選択して
“実行”を選択します

380
00:24:26,633 --> 00:24:29,837
Safariが開いて
サインインページに入ったら

381
00:24:29,937 --> 00:24:31,972
Extensionをテストします

382
00:24:32,372 --> 00:24:36,076
クレデンシャルリストを開くか
QuickTypeバーから開くと―

383
00:24:36,443 --> 00:24:40,013
Extensionが起動して
Xcodeがデバッガを起動し

384
00:24:40,114 --> 00:24:42,216
デバッグが始まります

385
00:24:44,751 --> 00:24:47,321
他の方法でデバッグする時は―

386
00:24:47,421 --> 00:24:50,724
“Debug>Attach to Process”を
使用して―

387
00:24:50,824 --> 00:24:52,693
デバッガを起動します

388
00:24:53,360 --> 00:24:57,998
手動で設定を開いて
設定UIをテストすることもできるし

389
00:24:58,098 --> 00:25:01,969
ログイン画面を開いて
その場でデバッグもできます

390
00:24:58,098 --> 00:25:01,969
ログイン画面を開いて
その場でデバッグもできます

391
00:25:05,505 --> 00:25:10,410
iOS 12ではパスワード管理Appに
自動入力機能が統合されました

392
00:25:11,044 --> 00:25:14,748
新しい認証サービスの
APIを使用すれば―

393
00:25:14,848 --> 00:25:18,452
Extensionで
クレデンシャルを表示できます

394
00:25:18,852 --> 00:25:20,921
QuickTypeバーで表示し

395
00:25:21,021 --> 00:25:25,192
ユーザは設定から
Extensionを設定できます

396
00:25:27,594 --> 00:25:31,432
詳しくはApple Developerページの
セッションで

397
00:25:31,965 --> 00:25:35,602
iOS 12での
パスワード管理の詳細は―

398
00:25:35,702 --> 00:25:39,673
“Automatic Strong Passwords and
Security Code AutoFill”です

399
00:25:40,174 --> 00:25:44,478
パスワードの自動入力機能の
詳細については―

400
00:25:44,678 --> 00:25:50,150
2017年の“Introducing Password
AutoFill for Apps”です