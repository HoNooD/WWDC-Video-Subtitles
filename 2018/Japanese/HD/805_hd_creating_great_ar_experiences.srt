
1
00:00:06,974 --> 00:00:16,650
(音楽)

2
00:00:17,818 --> 00:00:25,692
(拍手)

3
00:00:27,261 --> 00:00:28,462
こんにちは

4
00:00:28,562 --> 00:00:30,964
ARデザインセッションへ
ようこそ

5
00:00:31,498 --> 00:00:35,335
Human Interfaceチームの
グラント･ポールと申します

6
00:00:35,469 --> 00:00:38,505
WWDCをお楽しみのことと
存じます

7
00:00:39,339 --> 00:00:40,941
このセッションでは

8
00:00:41,041 --> 00:00:45,679
ユーザインターフェイスと
インタラクションを用いた―

9
00:00:45,779 --> 00:00:49,216
ARアプリケーションとゲームの
設計方法を紹介します

10
00:00:49,416 --> 00:00:51,185
その後 オマールが

11
00:00:51,285 --> 00:00:57,758
AR上の3Dモデルを
洗練させる方法を説明します

12
00:01:01,395 --> 00:01:05,432
まずは基本的なことを
確認します

13
00:01:05,699 --> 00:01:07,367
AR初心者の方は

14
00:01:07,467 --> 00:01:12,105
ARとは具体的にはどういうものかと
お思いでしょう

15
00:01:12,306 --> 00:01:17,144
ARに詳しい方にも
念のためお話しします

16
00:01:17,978 --> 00:01:22,082
ARとは拡張現実という
意味ですが

17
00:01:22,482 --> 00:01:25,152
その意味を少し掘り下げます

18
00:01:26,119 --> 00:01:29,556
まずは現実とは何かを
分析しましょう

19
00:01:29,957 --> 00:01:31,458
拡張現実の―

20
00:01:31,558 --> 00:01:35,395
現実とは
実世界のものを扱うこと

21
00:01:35,562 --> 00:01:39,399
これは 従来デバイスや
インターネット上で―

22
00:01:39,500 --> 00:01:44,204
私たちが行ってきたこととは
少し違います

23
00:01:44,338 --> 00:01:47,841
ARは現実の世界で
展開するものです

24
00:01:47,941 --> 00:01:52,346
皆さんがいる部屋の中や
実際にいる環境―

25
00:01:52,446 --> 00:01:55,215
または地図上で展開します

26
00:01:55,916 --> 00:01:58,218
しかし重要な点は
別にあります

27
00:01:58,752 --> 00:02:01,922
拡張現実は
拡張しているのです

28
00:01:58,752 --> 00:02:01,922
拡張現実は
拡張しているのです

29
00:02:02,256 --> 00:02:04,558
これには複数の意味が
あります

30
00:02:04,658 --> 00:02:09,128
自分の知る世界が
拡張されるという意味

31
00:02:09,229 --> 00:02:14,401
デバイスが世界をどう見るかを
ユーザに伝えるという意味

32
00:02:14,568 --> 00:02:20,340
バーチャルなものを世界に
出現させるという意味

33
00:02:20,807 --> 00:02:25,979
アニ文字など 実在のものに何かを
加えるという意味もあります

34
00:02:26,079 --> 00:02:29,750
現実にあるものを取り込み
強調し 拡張するのです

35
00:02:31,018 --> 00:02:36,290
これがARや
拡張現実の意味です

36
00:02:39,359 --> 00:02:42,529
では前半のテーマに移ります

37
00:02:42,629 --> 00:02:45,299
内容は ARアプリケーションや
ARゲームの―

38
00:02:45,399 --> 00:02:49,870
インターフェイスと
インタラクションの設計方法です

39
00:02:50,470 --> 00:02:51,805
まずお話しするのは―

40
00:02:51,905 --> 00:02:57,344
ARに人を引き込み
操作を促す方法についてです

41
00:02:57,511 --> 00:03:03,116
iOS 12内蔵のAR体験が
ユーザを導く方法をお見せし

42
00:02:57,511 --> 00:03:03,116
iOS 12内蔵のAR体験が
ユーザを導く方法をお見せし

43
00:03:03,250 --> 00:03:05,485
その原則を
アプリケーションに

44
00:03:05,586 --> 00:03:08,188
取り入れる方法を
お伝えします

45
00:03:08,789 --> 00:03:12,860
次はAR上でコンテンツを
表示する方法についてです

46
00:03:12,960 --> 00:03:16,330
ARKitを使えば
可能性が広がり―

47
00:03:16,430 --> 00:03:21,368
アプリケーション作成の
コツやヒントが得られます

48
00:03:22,402 --> 00:03:25,706
最後は現実世界との
インタラクションについてです

49
00:03:25,806 --> 00:03:30,077
ARアプリケーションと
2Dアプリケーションでは

50
00:03:30,177 --> 00:03:34,481
対応するインタラクションの種類が
異なります

51
00:03:34,948 --> 00:03:37,451
ARでも有効な種類を探り

52
00:03:37,551 --> 00:03:40,487
新たに必要な
インタラクションを考えます

53
00:03:41,655 --> 00:03:46,160
まずは
ARの中に入り込む方法です

54
00:03:46,260 --> 00:03:50,230
誰かがアプリケーションを
ダウンロードし

55
00:03:50,330 --> 00:03:53,834
AR体験を始めようとする時
まず必要なのは

56
00:03:54,034 --> 00:03:59,306
ARKitに現実の世界を
認識させることです

57
00:03:59,406 --> 00:04:04,912
どのARアプリケーションも
AR体験を始めるには

58
00:03:59,406 --> 00:04:04,912
どのARアプリケーションも
AR体験を始めるには

59
00:04:05,078 --> 00:04:08,715
ある程度 現実の世界を
認識する必要があります

60
00:04:08,815 --> 00:04:13,053
なぜなら 現実世界に
オブジェクトを表示したり

61
00:04:13,153 --> 00:04:17,524
その情報をユーザに
提供する必要があるからです

62
00:04:18,091 --> 00:04:21,728
ARKitに現実世界を
認識させるために

63
00:04:21,827 --> 00:04:25,866
ユーザがデバイスを動かすよう
働きかけます

64
00:04:26,233 --> 00:04:30,037
この点は
既存のデバイスのような―

65
00:04:30,137 --> 00:04:33,974
カメラプレビュー機能とは
少し異なります

66
00:04:34,308 --> 00:04:36,443
例えば写真を撮る時は

67
00:04:36,543 --> 00:04:40,113
ただデバイスを
被写体に向けるだけです

68
00:04:40,347 --> 00:04:45,853
ARでは ユーザが様々な位置や
角度から同じ場所を見ながら―

69
00:04:45,953 --> 00:04:48,021
動くことが必要です

70
00:04:49,089 --> 00:04:51,992
ここで大切なことは

71
00:04:52,092 --> 00:04:56,163
ユーザに 何をすべきかと
その必要性を知らせることです

72
00:04:56,263 --> 00:05:01,802
それには動きの目安となる
固定された基準が必要です

73
00:04:56,263 --> 00:05:01,802
それには動きの目安となる
固定された基準が必要です

74
00:05:02,269 --> 00:05:05,038
具体例を見てみましょう

75
00:05:05,572 --> 00:05:08,175
Euclidean Landsという
ゲームです

76
00:05:08,275 --> 00:05:12,412
デバイスが部屋の中を動く様子が
映っています

77
00:05:12,779 --> 00:05:16,850
このゲームの優れている点は
文字がなくても―

78
00:05:16,950 --> 00:05:19,353
何をすべきか
分かるところです

79
00:05:19,453 --> 00:05:23,190
デバイスを動かす
必要があると理解できます

80
00:05:23,690 --> 00:05:27,828
デバイスの向きを変えるだけでは
不十分です

81
00:05:27,928 --> 00:05:34,201
説明文なしでも 固定基準によって
すべきことを伝えられます

82
00:05:35,502 --> 00:05:39,506
多くの場合
このプロセスが必要になります

83
00:05:39,606 --> 00:05:44,444
iOS 12では
ARKitの認識速度が向上しています

84
00:05:44,545 --> 00:05:48,482
よって多くの場合
必要なのは 動くことだけです

85
00:05:48,582 --> 00:05:51,451
ARを起動するには
まず動きましょう

86
00:05:52,653 --> 00:05:57,090
しかし ARには
適さない環境もあります

87
00:05:57,191 --> 00:06:00,460
暗い部屋や
光の反射がある場合は

88
00:05:57,191 --> 00:06:00,460
暗い部屋や
光の反射がある場合は

89
00:06:00,561 --> 00:06:05,833
ARKitが認識するのに
手間取ることがあります

90
00:06:05,933 --> 00:06:09,536
準備ができるまでに
少し時間がかかり―

91
00:06:09,636 --> 00:06:11,805
すぐに開始できない可能性も
あります

92
00:06:12,606 --> 00:06:19,580
そんな時 ユーザはシステムから
デバイスを動かすよう指示されても

93
00:06:19,713 --> 00:06:21,281
疑問に思うでしょう

94
00:06:21,949 --> 00:06:23,750
“なぜ動作しない？”

95
00:06:23,851 --> 00:06:28,822
“ユーザの動きを
認識していないのか？”とね

96
00:06:29,256 --> 00:06:33,293
そんな時は
ユーザに知らせましょう

97
00:06:33,393 --> 00:06:37,197
あなたがやっていることは
間違っていない

98
00:06:37,297 --> 00:06:40,434
それを続けるべきだと
伝えるのです

99
00:06:41,034 --> 00:06:42,970
では 例を見てみましょう

100
00:06:46,173 --> 00:06:49,643
これはiOS 12に
内蔵される―

101
00:06:49,743 --> 00:06:51,945
ARアプリケーションの
ガイドです

102
00:06:52,079 --> 00:06:56,416
デバイスが固定基準の上を
動いています

103
00:06:56,517 --> 00:07:00,988
同じ場所にとどまらず
動く必要があると分かります

104
00:06:56,517 --> 00:07:00,988
同じ場所にとどまらず
動く必要があると分かります

105
00:07:01,555 --> 00:07:05,425
デバイスを動かし始めると

106
00:07:05,526 --> 00:07:07,995
面が立方体に変わります

107
00:07:08,295 --> 00:07:11,865
デバイスを動かすことで
この立方体は回転し

108
00:07:11,965 --> 00:07:17,938
ユーザの行っている作業は正しいと
伝えることができるのです

109
00:07:18,605 --> 00:07:22,109
ARKitの認識が完了したら

110
00:07:22,209 --> 00:07:26,713
立方体は消え
AR体験を開始できます

111
00:07:29,483 --> 00:07:33,854
このようにiOS 12は
ユーザを誘導します

112
00:07:33,954 --> 00:07:36,690
皆さんも
この原則にならい―

113
00:07:36,790 --> 00:07:43,163
デバイスを動かすように
ユーザに伝えましょう

114
00:07:43,297 --> 00:07:47,801
しかし全く同じスタイルにする
必要はありません

115
00:07:47,901 --> 00:07:53,440
それぞれのアプリケーションの
スタイルに合わせましょう

116
00:07:53,540 --> 00:07:59,413
ARが 取って付けたものに
見えないようにしてください

117
00:07:59,847 --> 00:08:05,986
重要なのは 正しい誘導ですが
違和感は避けるべきです

118
00:07:59,847 --> 00:08:05,986
重要なのは 正しい誘導ですが
違和感は避けるべきです

119
00:08:07,955 --> 00:08:11,658
ユーザをARに導くための
最後のポイントは

120
00:08:11,758 --> 00:08:14,127
バランスです

121
00:08:14,228 --> 00:08:17,865
指示や
AR開始を促すメッセージは

122
00:08:17,965 --> 00:08:21,368
効率的に
伝えなければなりません

123
00:08:21,902 --> 00:08:27,074
使い方を知っている人は
すぐデバイスを動かします

124
00:08:27,174 --> 00:08:31,879
そういった人には
説明は不要ですから―

125
00:08:31,979 --> 00:08:34,581
指示を出す必要はありません

126
00:08:34,681 --> 00:08:36,683
ARKitは処理速度が速いので

127
00:08:36,783 --> 00:08:38,818
デバイスを動かせば

128
00:08:38,919 --> 00:08:42,923
ARKitが認識を開始し
すぐに使うことができます

129
00:08:46,059 --> 00:08:52,633
以上が ユーザを誘導し
AR体験へと促す方法となります

130
00:08:52,966 --> 00:08:56,570
今度はAR上でコンテンツを
表示する方法です

131
00:08:56,670 --> 00:08:58,972
あらゆる
ARアプリケーションや―

132
00:08:59,072 --> 00:09:03,443
ARゲームに適用できる
コンテンツ表示方法についてです

133
00:08:59,072 --> 00:09:03,443
ARゲームに適用できる
コンテンツ表示方法についてです

134
00:09:04,378 --> 00:09:09,316
まずはARKitで構築できるものを
ご紹介しましょう

135
00:09:09,416 --> 00:09:15,455
必ずしも全てのAR体験が
カメラプレビューで見る世界に―

136
00:09:15,556 --> 00:09:19,693
オブジェクトを出現させる
必要はないのです

137
00:09:21,461 --> 00:09:27,301
AR体験の全てを２次元で
構築する方法もあります

138
00:09:27,401 --> 00:09:31,538
カメラプレビューや
3Dグラフィックは使いません

139
00:09:31,638 --> 00:09:36,743
ARKitが現実世界について
得た情報を―

140
00:09:37,744 --> 00:09:41,081
2Dで素敵なAR体験にできます

141
00:09:41,882 --> 00:09:44,218
では例を見てみましょう

142
00:09:44,751 --> 00:09:46,653
これはRainbrowという
ゲームです

143
00:09:47,354 --> 00:09:52,826
キャラクターの眉毛を
上下させて遊びます

144
00:09:54,728 --> 00:10:02,870
(ゲーム音楽)

145
00:09:54,728 --> 00:10:02,870
(ゲーム音楽)

146
00:10:14,848 --> 00:10:20,420
(拍手)

147
00:10:20,554 --> 00:10:23,590
カメラプレビューは
使いませんでした

148
00:10:23,690 --> 00:10:26,460
3Dのグラフィックもです

149
00:10:26,560 --> 00:10:32,099
2Dでも十分に楽しい
AR体験ができます

150
00:10:33,133 --> 00:10:35,335
これは2DのAR体験でした

151
00:10:35,469 --> 00:10:38,505
この他 ARKitを使えば―

152
00:10:38,605 --> 00:10:43,477
完全な仮想現実世界と
言えるものも体験できます

153
00:10:43,677 --> 00:10:47,648
つまり違う場所に
連れて行かれたような―

154
00:10:47,748 --> 00:10:50,551
感覚が味わえるのです

155
00:10:50,651 --> 00:10:52,686
その場所を歩き回ったり

156
00:10:52,786 --> 00:10:56,056
あらゆる方向を
眺めたりできます

157
00:10:56,190 --> 00:10:57,891
デバイスを通す形で―

158
00:10:57,991 --> 00:11:02,596
VR体験をすることは
可能なのです

159
00:10:57,991 --> 00:11:02,596
VR体験をすることは
可能なのです

160
00:11:03,530 --> 00:11:05,232
この利点は―

161
00:11:05,332 --> 00:11:07,968
使う場所を選ばないこと

162
00:11:08,068 --> 00:11:10,103
またヘッドセットも
不要で―

163
00:11:10,204 --> 00:11:15,542
デバイスさえ持っていれば
どこでも使えます

164
00:11:16,109 --> 00:11:18,045
実際に現実に浸るよりも

165
00:11:18,145 --> 00:11:21,482
デバイスを通して見た方が
いい場合もあります

166
00:11:21,582 --> 00:11:26,320
周辺視野を得られるので
壁にぶつかることがありません

167
00:11:26,687 --> 00:11:30,958
ARKitがあれば
仮想現実を作れるのです

168
00:11:31,058 --> 00:11:32,326
一例をご紹介します

169
00:11:33,360 --> 00:11:37,364
Enter the roomという
VR体験アプリケーションで

170
00:11:37,464 --> 00:11:40,934
赤十字国際委員会が
開発しました

171
00:11:41,301 --> 00:11:43,637
アプリケーションを起動すれば

172
00:11:43,737 --> 00:11:47,241
部屋のあらゆる方向を
見渡すことができます

173
00:11:47,341 --> 00:11:52,012
オブジェクトを間近で見たり
遠くまで移動したり―

174
00:11:52,112 --> 00:11:57,684
部屋の外で物音が
しているように聞こえます

175
00:11:58,085 --> 00:12:01,321
素晴らしい体験ができます

176
00:11:58,085 --> 00:12:01,321
素晴らしい体験ができます

177
00:12:01,421 --> 00:12:05,726
ARKitを使えば
仮想現実も作れるのです

178
00:12:07,261 --> 00:12:11,765
他にもARKitで
構築できるものがあります

179
00:12:11,999 --> 00:12:18,172
どんなアプリケーション作成にも
生かせるコツがあるでしょう

180
00:12:18,272 --> 00:12:22,776
ゲームや仕事効率化など
どんな種類でも構いません

181
00:12:24,144 --> 00:12:26,513
まずお話しするのは―

182
00:12:26,713 --> 00:12:29,116
ARで文字を表示する方法です

183
00:12:29,216 --> 00:12:31,485
文字情報は重要です

184
00:12:32,452 --> 00:12:34,421
どのARアプリケーションにも

185
00:12:34,521 --> 00:12:37,024
文字を表示する理由が
あります

186
00:12:37,124 --> 00:12:41,428
例えばゲームなら
レベル名や指示などですね

187
00:12:41,595 --> 00:12:45,365
その他のアプリケーションでは
オブジェクトの名前を表示したり

188
00:12:45,465 --> 00:12:49,169
注釈を出したりすることも
あり得るでしょう

189
00:12:49,536 --> 00:12:53,740
文字を表示させたい理由は
何であれ―

190
00:12:53,841 --> 00:12:57,678
大切なのは
文字が読みやすいことです

191
00:12:59,913 --> 00:13:03,016
ARで文字を表示するには

192
00:12:59,913 --> 00:13:03,016
ARで文字を表示するには

193
00:13:03,116 --> 00:13:06,086
現実世界に出すのが
簡単です

194
00:13:06,553 --> 00:13:11,225
名案に思えるかもしれませんが
欠点もあります

195
00:13:11,425 --> 00:13:12,593
欠点の１つは

196
00:13:12,693 --> 00:13:15,696
斜めから見た時に起こります

197
00:13:15,796 --> 00:13:19,299
文字がつぶれて
読みづらいのです

198
00:13:19,900 --> 00:13:21,268
もう１つの欠点は

199
00:13:21,368 --> 00:13:25,205
離れた場所から見た時に
起こります

200
00:13:25,305 --> 00:13:30,410
文字がすごく小さく
遠くからメモ用紙を読む感じです

201
00:13:31,078 --> 00:13:34,948
タイトルなどの
すでに知っている事柄を

202
00:13:35,048 --> 00:13:38,852
表示する時に
この方法は有効です

203
00:13:39,253 --> 00:13:44,024
しかし文字から情報を
受け取る必要がある場合は

204
00:13:44,191 --> 00:13:46,059
別の方法を試してください

205
00:13:47,694 --> 00:13:52,499
スクリーン空間に
文字を表示させる方法です

206
00:13:53,000 --> 00:13:57,404
スクリーン空間を使えば
常に文字は同じ大きさで

207
00:13:57,504 --> 00:14:00,541
いつでも目の前にあります

208
00:13:57,504 --> 00:14:00,541
いつでも目の前にあります

209
00:14:00,741 --> 00:14:03,710
この方法なら
とても読みやすいですし―

210
00:14:03,810 --> 00:14:07,381
見る角度や距離が
障害にはなりません

211
00:14:08,215 --> 00:14:11,485
スクリーン空間を
使用する際に大切なのは

212
00:14:11,585 --> 00:14:14,955
文字を 現実の一部に
見せることです

213
00:14:15,055 --> 00:14:19,259
ユーザが置いた
オブジェクトなどの位置に

214
00:14:19,359 --> 00:14:21,795
文字を固定することが
できます

215
00:14:22,496 --> 00:14:26,200
そうすることで
ARの一部に感じられます

216
00:14:26,600 --> 00:14:31,839
スクリーン空間の文字は
注釈などをARに表示させるのに

217
00:14:31,939 --> 00:14:34,341
向いていると言えます

218
00:14:35,442 --> 00:14:38,479
一例を見てみましょう

219
00:14:38,579 --> 00:14:41,515
iOS 12に搭載される
Measureです

220
00:14:42,015 --> 00:14:45,786
スクリーン空間に表示された
目盛りの文字は

221
00:14:45,886 --> 00:14:50,290
どんな角度から見ても
遠くから見ても

222
00:14:50,457 --> 00:14:52,793
驚くほどキレイに読めます

223
00:14:56,797 --> 00:15:00,367
スクリーン空間の文字は
読みやすいのですが

224
00:14:56,797 --> 00:15:00,367
スクリーン空間の文字は
読みやすいのですが

225
00:15:00,701 --> 00:15:06,974
AR上に表示する文字の数は
最小限にしてください

226
00:15:07,508 --> 00:15:10,878
なぜなら 文字を読むために―

227
00:15:10,978 --> 00:15:14,948
デバイスを傾けなければ
ならないからです

228
00:15:15,082 --> 00:15:18,085
デバイスを
通常のポジションにすれば

229
00:15:18,185 --> 00:15:19,953
文字は消えます

230
00:15:20,687 --> 00:15:24,625
ですから より詳しい情報や―

231
00:15:24,725 --> 00:15:27,494
オブジェクトの情報を
伝えるのなら

232
00:15:27,594 --> 00:15:30,497
画面上に表示しましょう

233
00:15:30,597 --> 00:15:32,766
ユーザが
iOSのデバイス上で―

234
00:15:32,866 --> 00:15:37,037
読むことで得られる
エクスペリエンスを

235
00:15:37,404 --> 00:15:41,008
画面上に直接
表示させられるのです

236
00:15:42,176 --> 00:15:45,179
AR外で詳細を
表示したい場合は

237
00:15:45,279 --> 00:15:47,080
切り替えが大切です

238
00:15:47,514 --> 00:15:52,085
切り替えで
見る対象が明確になります

239
00:15:52,186 --> 00:15:57,658
文字であれオブジェクトであれ
言及される内容や―

240
00:15:57,758 --> 00:16:00,227
詳細を知ることができます

241
00:15:57,758 --> 00:16:00,227
詳細を知ることができます

242
00:16:01,461 --> 00:16:04,965
ではまた
Measureの例を見ます

243
00:16:05,532 --> 00:16:08,502
測定した部分をタップすると

244
00:16:08,602 --> 00:16:13,874
ARから測定結果が現れ
画面上に表示されます

245
00:16:14,274 --> 00:16:16,410
素晴らしい機能ですね

246
00:16:16,510 --> 00:16:20,747
デバイスや電話を
傾ける必要がありません

247
00:16:20,948 --> 00:16:24,218
切り替えが
とてもスムーズです

248
00:16:24,384 --> 00:16:26,386
この画面を見れば

249
00:16:26,854 --> 00:16:31,592
何を測定した情報なのか
分かります

250
00:16:31,758 --> 00:16:35,596
一目瞭然なので
混乱せずに済みます

251
00:16:37,264 --> 00:16:41,235
ARから出たり
ARへ戻ったりすることで

252
00:16:41,335 --> 00:16:44,905
詳細な情報を
得ることができます

253
00:16:45,639 --> 00:16:49,610
ARにオブジェクトを
表示させる際にも重要です

254
00:16:50,077 --> 00:16:54,381
オブジェクトが１つの
バージョンだと感じられます

255
00:16:54,481 --> 00:16:58,085
アイデンティティが
あるのです

256
00:16:58,519 --> 00:17:02,156
AR上のオブジェクトには
実物の感があるので

257
00:16:58,519 --> 00:17:02,156
AR上のオブジェクトには
実物の感があるので

258
00:17:02,256 --> 00:17:06,960
本当に実在しているように
見えるのです

259
00:17:07,261 --> 00:17:11,565
現実世界のオブジェクトは
複製することができません

260
00:17:11,732 --> 00:17:16,502
AR上のオブジェクトにも
同じ原則を適応します

261
00:17:17,503 --> 00:17:20,874
Quick Look for ARを
見てみます

262
00:17:21,208 --> 00:17:24,310
固有の存在感がありますね

263
00:17:24,411 --> 00:17:27,281
ARのタブに切り替えても

264
00:17:27,381 --> 00:17:30,517
オブジェクトが
その場所に残ります

265
00:17:30,617 --> 00:17:33,520
消えたり突然現れたりは
しません

266
00:17:33,687 --> 00:17:37,057
配置する場所を
考えている間も

267
00:17:37,858 --> 00:17:40,394
オブジェクトは
表示されたままです

268
00:17:40,494 --> 00:17:44,531
１つしか存在しないと
容易に感じられます

269
00:17:44,965 --> 00:17:49,403
たとえアプリケーションの
選択画面に戻ったとしても

270
00:17:50,037 --> 00:17:53,974
先ほどのオブジェクトは
消えることがありません

271
00:17:54,074 --> 00:17:58,412
アプリケーション内を
行き来してるだけで

272
00:17:58,512 --> 00:18:03,250
現実世界に移る時に
複製されるわけではないのです

273
00:17:58,512 --> 00:18:03,250
現実世界に移る時に
複製されるわけではないのです

274
00:18:05,085 --> 00:18:08,055
ここまでAR上で
コンテンツを―

275
00:18:08,155 --> 00:18:11,892
表示する方法を
お伝えしてきました

276
00:18:12,459 --> 00:18:14,495
手短に振り返ります

277
00:18:14,962 --> 00:18:18,999
まずAR体験には
様々な方法がありました

278
00:18:19,099 --> 00:18:22,870
カメラプレビューや
3Dグラフィックも使わない

279
00:18:22,970 --> 00:18:26,039
2DのAR体験もあります

280
00:18:26,440 --> 00:18:30,978
ARKitを使用して
仮想現実を作ることで

281
00:18:31,078 --> 00:18:36,383
別の場所に行ったような
没入感を味わえます

282
00:18:37,117 --> 00:18:41,155
文字はスクリーン空間に
表示すれば

283
00:18:41,255 --> 00:18:46,493
角度や距離に関わらず
読みやすくなります

284
00:18:47,094 --> 00:18:50,164
画面に詳細を表示すれば

285
00:18:50,264 --> 00:18:52,699
デバイスを
傾ける必要がないので

286
00:18:52,799 --> 00:18:55,502
読みやすくなります

287
00:18:55,769 --> 00:19:01,241
iOSで情報を読む場合と
同じ知識を応用できます

288
00:18:55,769 --> 00:19:01,241
iOSで情報を読む場合と
同じ知識を応用できます

289
00:19:01,975 --> 00:19:06,713
最後は 詳細情報を
表示するため

290
00:19:06,880 --> 00:19:09,483
ARから出入りしました

291
00:19:09,583 --> 00:19:12,085
ただし オブジェクトには

292
00:19:12,186 --> 00:19:15,689
固有の実物である印象を
持たせることが重要です

293
00:19:19,459 --> 00:19:23,697
これがAR上にコンテンツを
表示させる方法です

294
00:19:23,797 --> 00:19:29,636
コンテンツのタイプにより
見せ方にはコツがあります

295
00:19:30,170 --> 00:19:33,440
次はインタラクションに
ついてです

296
00:19:33,540 --> 00:19:37,344
どんな方法が
あるのでしょうか

297
00:19:38,278 --> 00:19:40,280
まずは 触れることです

298
00:19:40,380 --> 00:19:42,549
iOSの完成当時から―

299
00:19:42,649 --> 00:19:45,018
触れることは
大切な要素でした

300
00:19:45,119 --> 00:19:47,454
デバイスを
相互作用させる上で

301
00:19:47,554 --> 00:19:50,757
マルチタッチは
最も重要な要素でした

302
00:19:51,792 --> 00:19:55,362
手で触れることが
素晴らしいのは

303
00:19:55,562 --> 00:19:58,165
直接 操作できるからです

304
00:19:58,699 --> 00:20:03,270
画面に表示されたものを
実物を触るように

305
00:19:58,699 --> 00:20:03,270
画面に表示されたものを
実物を触るように

306
00:20:03,370 --> 00:20:05,272
動かすことができます

307
00:20:05,372 --> 00:20:09,510
スクロールしたり
ズームを変えたりではなく

308
00:20:09,610 --> 00:20:11,979
コンテンツを
じかに動かせるので

309
00:20:12,079 --> 00:20:15,249
動かしている感触が
得られます

310
00:20:16,250 --> 00:20:18,519
これは何より大切です

311
00:20:18,619 --> 00:20:23,824
ARではリアルな実感が
得られるので―

312
00:20:24,157 --> 00:20:26,260
現実世界と変わりません

313
00:20:26,360 --> 00:20:29,329
じかに操作できると―

314
00:20:29,429 --> 00:20:33,167
直接 相互作用している
感じになります

315
00:20:34,601 --> 00:20:38,505
じかに操作するための
ジェスチャは

316
00:20:38,605 --> 00:20:42,543
iOSを操作する中で
すでに学んでいます

317
00:20:42,743 --> 00:20:47,014
iOSでコンテンツを
使用する時と同じ動きなので

318
00:20:47,114 --> 00:20:50,784
ずっと前から
使ってきたものと言えます

319
00:20:52,486 --> 00:20:57,391
では実際にオブジェクトを
動かしてみましょう

320
00:20:57,491 --> 00:21:01,962
指を手前に引けば
オブジェクトは移動します

321
00:20:57,491 --> 00:21:01,962
指を手前に引けば
オブジェクトは移動します

322
00:21:02,062 --> 00:21:05,599
指からオブジェクトが
離れないので

323
00:21:05,699 --> 00:21:09,236
自分で動かしている実感が
得られます

324
00:21:11,438 --> 00:21:15,109
次は大きさを
調整してみましょう

325
00:21:15,209 --> 00:21:19,880
まずは違和感のない
普通の大きさです

326
00:21:19,980 --> 00:21:23,617
大きくするには
オブジェクトをピンチし―

327
00:21:23,717 --> 00:21:26,820
小さくするには
逆にピンチします

328
00:21:27,221 --> 00:21:32,659
拡大と縮小をした時は
変化の度合いを知らせます

329
00:21:32,759 --> 00:21:34,795
オブジェクトを
４倍に拡大すれば

330
00:21:34,895 --> 00:21:38,232
変化の幅は大きくなります

331
00:21:39,099 --> 00:21:43,170
変化の度合いを
知らせる必要があります

332
00:21:43,670 --> 00:21:46,206
自然な大きさに戻すのを

333
00:21:46,306 --> 00:21:49,343
簡単にする必要もあります

334
00:21:49,443 --> 00:21:52,279
物質世界のサイズに
合わせたければ

335
00:21:52,379 --> 00:21:57,484
元の大きさに
すぐ戻すことも可能です

336
00:21:59,987 --> 00:22:02,623
またオブジェクトを
回転させるには

337
00:21:59,987 --> 00:22:02,623
またオブジェクトを
回転させるには

338
00:22:02,723 --> 00:22:06,560
２本の指を画面に乗せ
ツイストさせます

339
00:22:06,960 --> 00:22:10,531
このような
２本の指のジェスチャでは

340
00:22:10,631 --> 00:22:14,001
タップターゲットも
考慮しましょう

341
00:22:14,101 --> 00:22:17,738
デバイスと連動して
オブジェクトも動くので

342
00:22:17,838 --> 00:22:21,575
遠くに行くとターゲットが
小さくなります

343
00:22:21,675 --> 00:22:24,611
タップターゲットは
大きくすれば―

344
00:22:24,845 --> 00:22:27,915
オブジェクトに触るのが
簡単になります

345
00:22:28,015 --> 00:22:32,619
その際は必ず
２本の指の真ん中で

346
00:22:32,719 --> 00:22:34,822
動かすようにします

347
00:22:34,922 --> 00:22:37,591
タップターゲットが大きいと

348
00:22:37,691 --> 00:22:40,294
２本指が入らない
可能性もあります

349
00:22:41,895 --> 00:22:44,932
ARには実物の感があるので

350
00:22:45,032 --> 00:22:48,068
じかに操作できる機能は
欠かせません

351
00:22:48,368 --> 00:22:52,473
欠点があるとすれば
間違って 違うものを―

352
00:22:52,573 --> 00:22:55,542
動かしてしまうことです

353
00:22:55,642 --> 00:23:01,315
画面上のオブジェクトは
場所を変えるたびに動くので

354
00:22:55,642 --> 00:23:01,315
画面上のオブジェクトは
場所を変えるたびに動くので

355
00:23:01,415 --> 00:23:04,084
安定させることが大切です

356
00:23:04,284 --> 00:23:08,055
安定させるのは
困難かもしれません

357
00:23:08,856 --> 00:23:12,993
タッチしてオブジェクトを
動かす機能が

358
00:23:13,093 --> 00:23:16,663
ARに不十分である
一番の理由は

359
00:23:16,763 --> 00:23:19,132
それが２次元の
操作だからです

360
00:23:19,500 --> 00:23:23,070
タッチする画面は
２次元なので

361
00:23:23,170 --> 00:23:26,573
マルチタッチは
iOSに搭載された―

362
00:23:26,673 --> 00:23:29,476
2Dアプリケーションと
言えます

363
00:23:29,576 --> 00:23:33,747
しかしARコンテンツは
現実世界に配置します

364
00:23:34,047 --> 00:23:38,852
つまり３次元の動きが
必要になります

365
00:23:38,952 --> 00:23:41,355
ここが３次元の
世界だからです

366
00:23:42,789 --> 00:23:45,526
その問題を解決するには

367
00:23:45,626 --> 00:23:48,629
デバイスを動かしましょう

368
00:23:48,729 --> 00:23:53,433
デバイスを上下や
左右に動かしたり

369
00:23:53,534 --> 00:23:56,303
前後に動かしたりも
できます

370
00:23:56,403 --> 00:24:01,108
歩けば さらに遠くまで
動かすことができます

371
00:23:56,403 --> 00:24:01,108
歩けば さらに遠くまで
動かすことができます

372
00:24:01,442 --> 00:24:05,779
デバイスを３次元に
動かすことができれば

373
00:24:05,879 --> 00:24:10,250
ARに最高のインタラクションが
生まれるでしょう

374
00:24:10,651 --> 00:24:12,920
タッチすることよりも

375
00:24:13,020 --> 00:24:16,757
デバイスを３次元に
動かす方が大事です

376
00:24:17,057 --> 00:24:22,196
デフォルトで実装されるのが
自然と言えましょう

377
00:24:22,329 --> 00:24:24,264
AR上のオブジェクトを
見る時も

378
00:24:24,364 --> 00:24:29,336
角度を変えるために
デバイスを動かしますね

379
00:24:29,536 --> 00:24:33,073
だから不自然さがありません

380
00:24:34,408 --> 00:24:37,244
デバイスを動かすと言えば

381
00:24:37,344 --> 00:24:41,181
マルチタッチで
様々なことができます

382
00:24:41,281 --> 00:24:46,787
2Dのアプリケーションで
新しい情報を見たければ

383
00:24:46,887 --> 00:24:49,189
画面をスクロールします

384
00:24:49,690 --> 00:24:54,628
しかしARは3Dなので
勝手が違います

385
00:24:54,728 --> 00:24:57,898
違うコンテンツが見たければ

386
00:24:57,998 --> 00:25:02,870
デバイスを動かし
違う角度から眺めます

387
00:24:57,998 --> 00:25:02,870
デバイスを動かし
違う角度から眺めます

388
00:25:02,970 --> 00:25:05,839
もっと見たいと思ったら―

389
00:25:05,939 --> 00:25:08,609
３次元の方法で解決します

390
00:25:09,276 --> 00:25:13,881
2Dのアプリケーションで
拡大する時は

391
00:25:13,981 --> 00:25:16,150
ピンチでズームします

392
00:25:16,450 --> 00:25:21,688
縮小する場合は
ピンチでズームアウトします

393
00:25:22,322 --> 00:25:25,025
ARで拡大したければ

394
00:25:25,125 --> 00:25:28,762
見ているものに
近づきましょう

395
00:25:29,196 --> 00:25:33,567
一度に複数のオブジェクトを
確認したくなったら―

396
00:25:33,901 --> 00:25:38,238
後ろに下がれば
広範囲を眺められます

397
00:25:39,973 --> 00:25:42,276
デバイスを動かすことで

398
00:25:42,376 --> 00:25:45,779
2Dのアプリケーションの
ピンチに代わる―

399
00:25:47,147 --> 00:25:49,016
操作ができるのです

400
00:25:50,517 --> 00:25:53,053
デバイスを動かすことは

401
00:25:53,153 --> 00:25:55,689
マルチタッチの代わりに
なります

402
00:25:55,956 --> 00:25:57,224
動かす要素を

403
00:25:57,324 --> 00:26:01,662
アプリケーション開発に
組み込みましょう

404
00:25:57,324 --> 00:26:01,662
アプリケーション開発に
組み込みましょう

405
00:26:01,862 --> 00:26:04,231
しっくりくるはずです

406
00:26:04,331 --> 00:26:08,836
違うものを眺めるのにも
デバイスを使いましょう

407
00:26:08,936 --> 00:26:11,171
具体例をお見せします

408
00:26:11,605 --> 00:26:14,675
SwiftShotという
ゲームです

409
00:26:14,775 --> 00:26:17,411
すでに試した方も
いるかもしれません

410
00:26:17,711 --> 00:26:23,350
このゲームで弾を撃つには
ぱちんこに近づきます

411
00:26:23,450 --> 00:26:26,153
リストから選ぶ必要はなく―

412
00:26:26,286 --> 00:26:30,324
画面上で取らずに
近づくだけです

413
00:26:30,791 --> 00:26:34,728
弾を撃つ時は
デバイスを後ろに引きます

414
00:26:34,962 --> 00:26:39,132
３次元の要素を使って
弾を撃つので

415
00:26:39,233 --> 00:26:44,171
動かす時や後ろに引く時の
３次元での正確さがあります

416
00:26:44,271 --> 00:26:47,674
タッチする以上のことが
できます

417
00:26:47,775 --> 00:26:50,377
デバイスを動かすことは

418
00:26:50,477 --> 00:26:56,183
違和感がないだけでなく
より正確な結果を導きました

419
00:26:57,951 --> 00:27:03,257
時にタッチすることと
デバイスを動かすことを

420
00:26:57,951 --> 00:27:03,257
時にタッチすることと
デバイスを動かすことを

421
00:27:03,357 --> 00:27:07,995
組み合わせて究極の
相互作用が完成します

422
00:27:08,695 --> 00:27:10,464
その一例を見てみます

423
00:27:10,564 --> 00:27:15,435
じかに触れる操作と デバイスを
動かす操作を合わせてみます

424
00:27:16,570 --> 00:27:22,242
Quick Look for ARで
この組み合わせを

425
00:27:23,477 --> 00:27:25,746
検証することができます

426
00:27:26,046 --> 00:27:31,752
オブジェクトを移動するには
新たな場所までドラッグします

427
00:27:31,852 --> 00:27:34,454
タッチして動かすのです

428
00:27:34,555 --> 00:27:38,792
持ち上げる時もタッチし
デバイスの向きを変えてから

429
00:27:38,892 --> 00:27:40,794
新たな場所に置きます

430
00:27:40,894 --> 00:27:47,334
３次元の操作を駆使して
移動させることができました

431
00:27:47,434 --> 00:27:51,205
画面に見えない場所に
移動させます

432
00:27:51,305 --> 00:27:53,340
向きを変えるのです

433
00:27:53,440 --> 00:27:56,310
物理的な
つながりがあるので

434
00:27:56,410 --> 00:28:01,748
じかにオブジェクトを
持ち上げている感覚が得られます

435
00:27:56,410 --> 00:28:01,748
じかにオブジェクトを
持ち上げている感覚が得られます

436
00:28:01,849 --> 00:28:06,887
皆さんのアプリケーションで
オブジェクトを動かす時は

437
00:28:06,987 --> 00:28:11,291
じかに操作して
持ち上げる動作と―

438
00:28:11,391 --> 00:28:14,928
デバイスを動かして
探す動作を含めましょう

439
00:28:17,931 --> 00:28:24,171
この２つの操作は
タッチを含める１つの方法ですが

440
00:28:24,271 --> 00:28:29,076
次は間接的に
コントロールする方法です

441
00:28:29,710 --> 00:28:33,680
そもそもコントロールは
画面上の平面なので

442
00:28:33,781 --> 00:28:36,683
ARを現実世界に
配置しません

443
00:28:36,783 --> 00:28:41,688
画面上での位置が一定なので
場所が分かります

444
00:28:41,788 --> 00:28:44,291
だから邪魔にもなりません

445
00:28:44,391 --> 00:28:48,095
画面上の
コントロールの場所が分かったら

446
00:28:48,195 --> 00:28:50,964
その上に指を置けばいいのです

447
00:28:51,064 --> 00:28:54,701
その間 他のことに
集中できます

448
00:28:55,569 --> 00:28:57,571
その例を見てみましょう

449
00:28:57,671 --> 00:28:59,740
Zombie Gunship
Revenant AR です

450
00:28:59,840 --> 00:29:03,277
狙いを定め
たくさんいるゾンビを

451
00:28:59,840 --> 00:29:03,277
狙いを定め
たくさんいるゾンビを

452
00:29:03,377 --> 00:29:05,946
上空から撃ち殺すゲームです

453
00:29:06,046 --> 00:29:10,818
銃を撃たなきゃならない時に
指の置き場所なんて

454
00:29:10,918 --> 00:29:12,886
構っていられません

455
00:29:12,986 --> 00:29:16,623
代わりに発射ボタンの上に
指を置き―

456
00:29:16,723 --> 00:29:21,195
デバイスをあらゆる方向に
動かしましょう

457
00:29:21,295 --> 00:29:24,565
そしてゾンビに
照準を合わせます

458
00:29:26,533 --> 00:29:28,101
間接的なコントロール法に

459
00:29:28,202 --> 00:29:32,039
デバイスを動かす要素を
合わせました

460
00:29:32,406 --> 00:29:36,577
操作は片手で済むという点で
優れています

461
00:29:36,910 --> 00:29:41,815
ARを動かす時は
常に片手を使います

462
00:29:41,915 --> 00:29:44,785
片手も使わない場合は
ありません

463
00:29:44,885 --> 00:29:47,588
片手を使った
AR体験を作るなら

464
00:29:47,688 --> 00:29:52,292
押しやすい場所に
ボタンを設置しましょう

465
00:29:53,861 --> 00:29:56,463
Measureがその一例です

466
00:29:56,563 --> 00:29:58,265
プラスボタンと―

467
00:29:58,365 --> 00:30:01,201
画面の下部にある
追加ボタンで

468
00:29:58,365 --> 00:30:01,201
画面の下部にある
追加ボタンで

469
00:30:01,301 --> 00:30:02,870
ポイントを増やします

470
00:30:03,170 --> 00:30:05,772
押しやすい場所に
ありますよね

471
00:30:05,873 --> 00:30:10,444
正確な測定をするため
十字線の移動に―

472
00:30:10,544 --> 00:30:12,813
片手を使っていても

473
00:30:12,913 --> 00:30:15,616
プラスボタンに
指を置き続けて

474
00:30:15,716 --> 00:30:19,253
測定するポイントを
追加できます

475
00:30:19,486 --> 00:30:23,290
間接的なコントロール法を
使えば―

476
00:30:23,390 --> 00:30:28,028
片手で簡単にAR体験を
利用できるようになります

477
00:30:31,398 --> 00:30:34,868
これがARの
インタラクションなのです

478
00:30:34,968 --> 00:30:36,670
じかに操作すれば

479
00:30:36,770 --> 00:30:40,407
物理的な相互作用の
感覚が得られます

480
00:30:40,507 --> 00:30:44,044
デバイスを動かす要素は
ARには重要です

481
00:30:44,144 --> 00:30:48,482
間接的なコントロールは
内容に集中できるよう―

482
00:30:48,582 --> 00:30:52,719
押しやすい場所に
ボタンを置きました

483
00:30:53,320 --> 00:30:55,556
説明は以上になります

484
00:30:55,656 --> 00:31:00,494
ユーザを正しく誘導し
正しい操作がなされていると

485
00:30:55,656 --> 00:31:00,494
ユーザを正しく誘導し
正しい操作がなされていると

486
00:31:00,594 --> 00:31:02,563
直接的に知らせましょう

487
00:31:02,663 --> 00:31:06,333
2Dや仮想空間に
ARを表示しました

488
00:31:06,433 --> 00:31:09,503
文字を読みやすくするコツや

489
00:31:09,603 --> 00:31:13,640
ARに独自の存在感が
あることもお話ししました

490
00:31:14,241 --> 00:31:17,277
デバイスを動かしていると

491
00:31:17,377 --> 00:31:21,148
相互作用の感覚が
得られるともお伝えしました

492
00:31:22,015 --> 00:31:23,217
次はオマールが

493
00:31:23,317 --> 00:31:27,621
美しい3Dモデルの作り方を
お話しします

494
00:31:27,721 --> 00:31:28,589
ありがとう

495
00:31:28,722 --> 00:31:34,595
(拍手)

496
00:31:36,363 --> 00:31:38,165
ありがとう

497
00:31:40,567 --> 00:31:41,602
ありがとう　グラント

498
00:31:45,038 --> 00:31:46,173
こんにちは

499
00:31:46,273 --> 00:31:50,310
ARコンテンツを開発する上で
役に立つ方法を―

500
00:31:50,410 --> 00:31:55,182
ご紹介できて
すごくワクワクしています

501
00:31:55,282 --> 00:31:59,520
今日は様々な情報を
お伝えする予定です

502
00:31:59,686 --> 00:32:03,957
エンジニアやデザイナー
アーティストであれ

503
00:31:59,686 --> 00:32:03,957
エンジニアやデザイナー
アーティストであれ

504
00:32:04,057 --> 00:32:08,729
これからお話しする
戦略や定義を使えば

505
00:32:08,829 --> 00:32:15,135
人々を満足させる最高の
ARコンテンツを作れます

506
00:32:16,403 --> 00:32:22,643
まずはAR体験を開発する上で
欠かせない概念についてです

507
00:32:23,644 --> 00:32:25,512
ARは素晴らしいものです

508
00:32:25,612 --> 00:32:28,248
イメージした あらゆるものを

509
00:32:28,348 --> 00:32:31,385
現実世界に配置できます

510
00:32:31,518 --> 00:32:36,356
AR体験には多くの期待が
寄せられています

511
00:32:37,524 --> 00:32:38,792
AR体験には―

512
00:32:38,892 --> 00:32:42,062
スムーズで安定した
レンダリングが求められます

513
00:32:42,229 --> 00:32:48,101
コンテンツに興味を引かれ
ディテールを確認したくなり

514
00:32:48,268 --> 00:32:53,040
画面を拡大すると
フリーズすることがあります

515
00:32:53,407 --> 00:32:56,043
最適化が不十分だと

516
00:32:56,143 --> 00:32:58,645
パフォーマンスが
劇的に下がります

517
00:32:59,780 --> 00:33:03,484
高いパフォーマンスを
常に保ち―

518
00:32:59,780 --> 00:33:03,484
高いパフォーマンスを
常に保ち―

519
00:33:03,584 --> 00:33:06,887
人々の集中力を
持続させるには

520
00:33:07,087 --> 00:33:10,824
毎秒60フレームを
目指しましょう

521
00:33:11,091 --> 00:33:16,196
一貫して このフレーム数を
保つことが大切です

522
00:33:16,296 --> 00:33:20,934
様々なストレステストを
行ってください

523
00:33:21,034 --> 00:33:23,170
拡大や縮小をしても

524
00:33:23,270 --> 00:33:26,306
パフォーマンスが
落ちないようにするのです

525
00:33:27,941 --> 00:33:31,812
いずれバッテリーの寿命が
伸びるでしょう

526
00:33:32,045 --> 00:33:35,115
でも今はバッテリーの消耗が

527
00:33:35,215 --> 00:33:38,652
最小限になるように
設計してください

528
00:33:38,986 --> 00:33:42,723
ユーザに
非難されたくないですよね

529
00:33:42,823 --> 00:33:44,324
負荷を少なくすれば

530
00:33:44,424 --> 00:33:47,728
またAR体験をしたい人が
増えるでしょう

531
00:33:48,829 --> 00:33:52,566
私はバッテリー残量が
少なくなると

532
00:33:52,666 --> 00:33:55,169
パニック発作を
起こしそうになります

533
00:33:55,269 --> 00:33:57,838
AR体験のせいで
バッテリーのカオスが

534
00:33:57,938 --> 00:34:00,774
広がらないようにしましょう

535
00:33:57,938 --> 00:34:00,774
広がらないようにしましょう

536
00:34:00,908 --> 00:34:01,975
大切なことです

537
00:34:02,075 --> 00:34:05,646
バッテリーを救えるのは
皆さんだけなのです

538
00:34:07,448 --> 00:34:10,884
ARにはイメージした
あらゆるものを

539
00:34:10,984 --> 00:34:13,085
現実世界に送る力があります

540
00:34:13,520 --> 00:34:15,856
人々が期待していると知れば

541
00:34:15,956 --> 00:34:18,125
皆さんはベストを尽くすはず

542
00:34:18,225 --> 00:34:22,062
ディテールには
こだわりましょう

543
00:34:22,161 --> 00:34:24,164
ストーリーも大切です

544
00:34:24,264 --> 00:34:27,034
ちょっとしたディテールが

545
00:34:27,134 --> 00:34:29,803
人々を驚かせるのです

546
00:34:31,103 --> 00:34:35,375
水族館の気分を味わえる
コンテンツを作成しました

547
00:34:35,542 --> 00:34:40,280
抽象的な形をしている
このマシュマロの塊が―

548
00:34:40,380 --> 00:34:43,016
魚だと信じる人は
いないでしょう

549
00:34:43,516 --> 00:34:44,918
いい面をあげるなら―

550
00:34:45,018 --> 00:34:49,456
この魚だったら
パフォーマンスは上々です

551
00:34:49,590 --> 00:34:51,958
やり直してみます

552
00:34:52,760 --> 00:34:55,128
だいぶマシになりました

553
00:34:55,262 --> 00:34:57,831
今にも死にそうですが

554
00:34:58,031 --> 00:35:00,434
ディテールが優れています

555
00:34:58,031 --> 00:35:00,434
ディテールが優れています

556
00:35:00,534 --> 00:35:02,069
これをARにした場合

557
00:35:02,169 --> 00:35:05,572
人々が細かい部分まで
見たくなるように―

558
00:35:05,672 --> 00:35:08,809
仕向ける必要があります

559
00:35:09,309 --> 00:35:14,181
水族館に泳がせる魚は
これぐらい詳細に描きます

560
00:35:14,281 --> 00:35:16,850
まあ 今は
浮いているだけですが

561
00:35:18,018 --> 00:35:22,790
最後に ユーザは様々な環境で
アプリケーションを使います

562
00:35:22,890 --> 00:35:28,462
ARが現実世界で
悪目立ちしないようにします

563
00:35:28,562 --> 00:35:33,167
周囲と明るさが
一致しない恐れもあります

564
00:35:33,901 --> 00:35:37,104
明るすぎる色や暗すぎる色は

565
00:35:37,204 --> 00:35:39,673
使用を避けましょう

566
00:35:39,773 --> 00:35:45,579
表示する予定のオブジェクトは
どの角度から見ても

567
00:35:45,679 --> 00:35:48,549
光が当たるように設定します

568
00:35:48,949 --> 00:35:52,319
コンテンツは昼夜を問わず
使いたいですよね

569
00:35:52,419 --> 00:35:56,490
秘密をバラすと
ARKitの機能を修正します

570
00:35:56,590 --> 00:36:01,762
現実世界とARの境目が
あいまいになるので

571
00:35:56,590 --> 00:36:01,762
現実世界とARの境目が
あいまいになるので

572
00:36:01,862 --> 00:36:05,032
AR体験が楽しくなるはずです

573
00:36:06,400 --> 00:36:11,205
進捗状況を評価する際に
便利なツールがあります

574
00:36:11,305 --> 00:36:14,842
最近発表された
iOS 12に搭載される―

575
00:36:14,942 --> 00:36:16,343
AR Quicklookです

576
00:36:16,477 --> 00:36:21,481
iCloudにアセットを保存し
ファイルAppで表示させます

577
00:36:21,582 --> 00:36:24,918
すぐにARを
映し出せるわけです

578
00:36:26,820 --> 00:36:30,958
皆さんの自信作を
ウェブサイトに載せれば

579
00:36:31,058 --> 00:36:35,329
友人がSafariで
確認することも可能です

580
00:36:35,662 --> 00:36:37,464
画期的ですよね

581
00:36:37,598 --> 00:36:40,200
デイブとデビッドの
セッションで

582
00:36:40,300 --> 00:36:44,872
AR Quicklookの
使い方を学べば―

583
00:36:44,972 --> 00:36:49,209
アプリケーション開発を
変えられるでしょう

584
00:36:50,410 --> 00:36:55,516
AR体験への期待について
考察してきましたが

585
00:36:55,616 --> 00:36:59,019
次はアプリケーションの
種類についてです

586
00:36:59,286 --> 00:37:02,723
3Dコンテンツを
作り始める前に

587
00:36:59,286 --> 00:37:02,723
3Dコンテンツを
作り始める前に

588
00:37:02,823 --> 00:37:05,292
よく検討してください

589
00:37:05,759 --> 00:37:09,963
作りたいものが分かれば
最適化する方法を―

590
00:37:10,063 --> 00:37:12,499
絞り込めるでしょう

591
00:37:13,534 --> 00:37:17,538
机に向かっていると
突然ひらめいて

592
00:37:17,638 --> 00:37:21,942
最高のAR体験のアイデアが
浮かんだとします

593
00:37:22,276 --> 00:37:26,179
次は落ち着いて
自問してみましょう

594
00:37:26,480 --> 00:37:30,083
レンダリングする
オブジェクトは―

595
00:37:30,184 --> 00:37:33,921
たくさんにするか
それとも１つ？

596
00:37:34,521 --> 00:37:36,123
ディテールは必要？

597
00:37:36,223 --> 00:37:40,294
グラフィックは
どんなスタイルにするか？

598
00:37:41,295 --> 00:37:45,332
グラントが話していた
相互作用のレベルは

599
00:37:45,432 --> 00:37:47,301
どの程度必要なのか？

600
00:37:47,734 --> 00:37:52,005
これらの問いに
明確な答えがあれば

601
00:37:52,105 --> 00:37:55,609
レンダリング容量の
つぎ込み先が見えます

602
00:37:57,044 --> 00:38:01,849
例えば IKEA Placeのような
アプリケーションを想定します

603
00:37:57,044 --> 00:38:01,849
例えば IKEA Placeのような
アプリケーションを想定します

604
00:38:01,949 --> 00:38:06,019
様々な家具を
自宅や中庭に置き―

605
00:38:06,119 --> 00:38:09,490
プレビューできる
アプリケーションです

606
00:38:09,723 --> 00:38:13,627
ショーの主役は
その様々な家具なので

607
00:38:13,727 --> 00:38:18,465
細部に工夫を凝らし
本物に近いオブジェクトを

608
00:38:18,565 --> 00:38:19,733
作りましょう

609
00:38:20,567 --> 00:38:25,072
このようにレンダリングの対象が
１種類であれば

610
00:38:25,172 --> 00:38:28,909
少し時間をかけて作成します

611
00:38:29,042 --> 00:38:32,379
オブジェクトの質が
売上に関わるからです

612
00:38:34,314 --> 00:38:40,154
一方で 子供が家中に広げた
小さなプラスチックのブロックを

613
00:38:40,254 --> 00:38:43,724
もう踏みたくないと
思ったとします

614
00:38:43,824 --> 00:38:46,026
怒らずに済むように

615
00:38:46,126 --> 00:38:51,531
無限のブロックで遊べる
Playground風のARにします

616
00:38:51,632 --> 00:38:54,835
痛い思いは
しなくて済みます

617
00:38:54,935 --> 00:38:59,707
レンダリングや相互作用させる
オブジェクトが多い場合は

618
00:39:00,073 --> 00:39:05,646
モデルは ポリゴンやカラーを
減らしてシンプルにします

619
00:39:05,746 --> 00:39:09,683
そうすればパフォーマンスが
安定します

620
00:39:11,919 --> 00:39:16,590
自問した後は
ARキャンバスを用意します

621
00:39:16,757 --> 00:39:20,360
画家がキャンバスを
用意するように

622
00:39:20,460 --> 00:39:25,065
まずはプロジェクトの
始め方をお伝えします

623
00:39:25,165 --> 00:39:27,701
成功は間違いないでしょう

624
00:39:29,770 --> 00:39:34,107
まずはARコンテンツの置き場所を
決めましょう

625
00:39:34,308 --> 00:39:35,843
SceneKitには

626
00:39:35,943 --> 00:39:39,947
画面の一番下に
統計パネルがあります

627
00:39:40,047 --> 00:39:42,316
１秒あたりのフレーム数や

628
00:39:42,416 --> 00:39:46,353
画面上のポリゴンの数を
確認できます

629
00:39:46,453 --> 00:39:51,058
アプリケーションを
開発する上で役立つ機能です

630
00:39:52,326 --> 00:39:54,428
初期画面は決まりました

631
00:39:54,528 --> 00:39:59,933
どんな具体例を使うべきか
考えていました

632
00:40:00,300 --> 00:40:03,537
私はアウトドア派では
ありませんが

633
00:40:03,637 --> 00:40:05,939
カリフォルニアには
似た人が大勢います

634
00:40:06,073 --> 00:40:07,941
自然と触れ合うため

635
00:40:08,042 --> 00:40:11,478
キャンプに行こうと
思いましたが

636
00:40:11,578 --> 00:40:12,980
実現しませんでした

637
00:40:13,080 --> 00:40:16,383
代わりにアプリケーションを
作りました

638
00:40:17,417 --> 00:40:20,854
名前はCampfiARです

639
00:40:20,954 --> 00:40:22,489
完璧な名前ですよね

640
00:40:23,624 --> 00:40:26,460
細部にこだわった
オブジェクトを使って

641
00:40:26,560 --> 00:40:30,030
虫や新鮮な空気抜きで
アウトドアの―

642
00:40:30,130 --> 00:40:31,899
雰囲気を楽しみます

643
00:40:34,334 --> 00:40:38,939
グラフィックはフォルム化し
遊び心を持たせました

644
00:40:39,540 --> 00:40:43,344
物理ベースの
マテリアル属性を使うことで

645
00:40:43,444 --> 00:40:45,712
独自のディテールを
取り入れます

646
00:40:45,879 --> 00:40:51,719
レンダリングするために
大量のポリゴンを使用すると

647
00:40:51,819 --> 00:40:56,590
ユーザが火を何時間も
眺められなくなります

648
00:40:56,823 --> 00:41:02,262
そうならないためにも
ARシーンを最適化しましょう

649
00:40:56,823 --> 00:41:02,262
そうならないためにも
ARシーンを最適化しましょう

650
00:41:03,464 --> 00:41:08,969
3Dオブジェクトの基本である
メッシュについてです

651
00:41:09,069 --> 00:41:11,572
従来の開発手順を踏めば

652
00:41:11,672 --> 00:41:16,477
細部にこだわったモデルを
低いポリカウントを維持して

653
00:41:16,577 --> 00:41:18,479
作ることができます

654
00:41:18,979 --> 00:41:20,214
ちなみに―

655
00:41:20,314 --> 00:41:22,783
“ポリカウント”は
ポリゴンの数です

656
00:41:22,883 --> 00:41:25,953
ポリゴンは通常
三角形をしています

657
00:41:26,954 --> 00:41:29,957
まず簡単なメッシュを使って

658
00:41:30,057 --> 00:41:33,126
ARシーンの基本構造を
描いてみます

659
00:41:33,293 --> 00:41:36,864
ホワイトボックス技術を
駆使し―

660
00:41:36,964 --> 00:41:39,667
相互作用の動きを確認して

661
00:41:39,767 --> 00:41:43,971
オブジェクトの大きさを
決めていきます

662
00:41:44,605 --> 00:41:46,974
見事な
キャンプファイアですよね

663
00:41:47,074 --> 00:41:50,477
作業は切り上げて
出荷します

664
00:41:50,577 --> 00:41:53,480
では私はパーティの
二次会へ…

665
00:41:53,580 --> 00:41:57,017
キャンプファイアに
見えない？

666
00:41:57,518 --> 00:41:59,453
あれ？ そうですか

667
00:42:00,020 --> 00:42:05,092
失礼しました
メッシュの構築に戻ります

668
00:42:05,325 --> 00:42:08,295
まずはメッシュの概要や

669
00:42:08,395 --> 00:42:11,165
含まれる情報について
説明します

670
00:42:11,431 --> 00:42:16,937
メッシュとは立体的な
三角形の集合体で

671
00:42:17,037 --> 00:42:20,541
その表面上に加工を施します

672
00:42:20,641 --> 00:42:25,345
これら三角形には
頂点と呼ばれる角があり

673
00:42:25,446 --> 00:42:27,848
様々な情報を含んでいます

674
00:42:27,948 --> 00:42:32,186
空間の位置や
テクスチャのUV座標

675
00:42:32,286 --> 00:42:36,390
そして後ほど説明する
法線と呼ばれる情報です

676
00:42:37,524 --> 00:42:40,594
急いで出荷して失敗したので

677
00:42:40,694 --> 00:42:45,466
今度は最高に豪華な
キャンプファイアにします

678
00:42:45,599 --> 00:42:49,536
キャンプの出来栄えを
確認しましょう

679
00:42:49,770 --> 00:42:54,708
魚のうろこや枝の模様まで
見えますよね

680
00:42:55,208 --> 00:42:57,945
しかしパフォーマンスは
最悪です

681
00:42:58,045 --> 00:43:02,516
ポリゴン数は100万近くに
膨れ上がりました

682
00:42:58,045 --> 00:43:02,516
ポリゴン数は100万近くに
膨れ上がりました

683
00:43:02,783 --> 00:43:05,185
すでに困った状況ですし

684
00:43:05,285 --> 00:43:08,522
トラブル回避のために
修正します

685
00:43:08,622 --> 00:43:12,025
バッテリーへの負荷も
心配ですし

686
00:43:12,125 --> 00:43:15,896
ARシーンが反応するかも
気になります

687
00:43:15,996 --> 00:43:19,667
ではポリゴン数を
減らすには？

688
00:43:21,235 --> 00:43:23,504
多くの3D作成のソフトには

689
00:43:23,604 --> 00:43:27,741
モデルを簡略化する機能が
搭載されています

690
00:43:27,841 --> 00:43:33,380
これは高密度の魚と
ポリゴン数を減らした魚です

691
00:43:33,881 --> 00:43:37,618
ズームしてみると
細部の違いが分かります

692
00:43:37,718 --> 00:43:39,386
でも安心してください

693
00:43:39,486 --> 00:43:43,524
後ほどマテリアル属性で
細部を復活させます

694
00:43:43,791 --> 00:43:45,559
ここで重要なのは

695
00:43:45,659 --> 00:43:49,997
最小限のポリゴン数で
土台を作ることです

696
00:43:50,230 --> 00:43:55,469
では密度の低いメッシュで
作業を進めましょう

697
00:43:56,670 --> 00:43:59,973
前より見た目が
悪くなりましたが

698
00:44:00,073 --> 00:44:02,476
この成果を見てください

699
00:44:02,576 --> 00:44:07,581
大幅にポリゴン数を
減らしたおかげで―

700
00:44:07,681 --> 00:44:13,220
3Dオブジェクトを
追加することができました

701
00:44:13,687 --> 00:44:18,092
前出のメッシュでは
毎秒30フレームでしたが

702
00:44:18,192 --> 00:44:20,327
今は60フレームです

703
00:44:20,494 --> 00:44:23,897
100万近くあった
ポリゴン数も

704
00:44:23,997 --> 00:44:26,500
約9000になりました

705
00:44:26,800 --> 00:44:28,702
見事ですよね

706
00:44:28,802 --> 00:44:32,673
望み通りの仕様に
近づいています

707
00:44:32,773 --> 00:44:37,411
バッテリー消耗が少ない
安定した土台が完成しました

708
00:44:38,879 --> 00:44:41,548
モデルを最適化できたので

709
00:44:41,648 --> 00:44:44,818
今度は細部を
復活させましょう

710
00:44:44,918 --> 00:44:48,722
マテリアル属性や
テクニックを駆使することで

711
00:44:48,822 --> 00:44:50,691
パフォーマンスを落とさず

712
00:44:50,791 --> 00:44:54,094
見栄えのいいモデルを
作れます

713
00:44:55,863 --> 00:45:00,300
物理ベースレンダリングに
関する問題は

714
00:44:55,863 --> 00:45:00,300
物理ベースレンダリングに
関する問題は

715
00:45:00,534 --> 00:45:02,703
複雑なので話せば―

716
00:45:02,803 --> 00:45:06,406
このセッションが
終わってしまいます

717
00:45:06,507 --> 00:45:08,175
要約すると―

718
00:45:08,275 --> 00:45:13,514
様々なマテリアル属性を
メッシュに適用する手法です

719
00:45:13,614 --> 00:45:19,353
ARシーン内の光に
リアルに反応させられます

720
00:45:19,453 --> 00:45:23,891
以後の説明は この
シェーディング技術に準拠します

721
00:45:24,491 --> 00:45:28,929
詳しくはWWDC 2016の
セッションをご参照ください

722
00:45:29,029 --> 00:45:35,135
この技術をSceneKitに
応用する話を聞くことができます

723
00:45:36,470 --> 00:45:39,606
まずは使うのは
アルベドです

724
00:45:39,707 --> 00:45:43,243
ベースカラーや
ディフューズとも呼ばれます

725
00:45:44,478 --> 00:45:46,580
CampfiARに戻りましょう

726
00:45:46,947 --> 00:45:51,285
灰色の部分があるせいで
退屈な感じですが

727
00:45:51,385 --> 00:45:54,721
アルベドを使えば改善します

728
00:45:54,822 --> 00:45:58,325
元々のオブジェクトに
比べれば

729
00:45:58,425 --> 00:46:00,928
細部が失われています

730
00:45:58,425 --> 00:46:00,928
細部が失われています

731
00:46:01,028 --> 00:46:03,697
オブジェクトを拡大すると

732
00:46:03,797 --> 00:46:05,799
表面がフラットだと
気がつきます

733
00:46:05,899 --> 00:46:07,734
これは後で修正するとして

734
00:46:07,834 --> 00:46:10,637
まずはアルベドを適用します

735
00:46:12,172 --> 00:46:17,244
アルベドはオブジェクトの
基本となるメッシュで

736
00:46:17,444 --> 00:46:20,247
表面にテクスチャを
加えるために

737
00:46:20,347 --> 00:46:22,950
よく使われる属性です

738
00:46:23,283 --> 00:46:25,085
メッシュの頂点は

739
00:46:25,185 --> 00:46:28,088
様々な情報を
含んでいましたね

740
00:46:29,089 --> 00:46:31,158
これはUV座標です

741
00:46:31,258 --> 00:46:36,030
テクスチャを貼り付ける際に
役立ちます

742
00:46:36,497 --> 00:46:38,899
テクスチャを加えたら

743
00:46:38,999 --> 00:46:43,036
この魚における
アルベドの設定は完了です

744
00:46:43,871 --> 00:46:46,573
今は魚にテクスチャを
加えましたが

745
00:46:46,673 --> 00:46:51,612
アプリケーションは
不特定の場所で使われるので

746
00:46:51,712 --> 00:46:55,649
様々な場面に合うように
工夫しましょう

747
00:46:56,050 --> 00:46:59,553
明るすぎたり
暗すぎたりしないよう―

748
00:46:59,653 --> 00:47:01,755
気をつけましょう

749
00:46:59,653 --> 00:47:01,755
気をつけましょう

750
00:47:01,855 --> 00:47:05,926
様々な状況で
機能させたいですよね

751
00:47:06,026 --> 00:47:09,563
魚に皮が付きましたが
まだ不完全です

752
00:47:09,663 --> 00:47:12,032
他のオブジェクトも同様です

753
00:47:12,132 --> 00:47:15,736
さらに細部を
復活させましょう

754
00:47:16,236 --> 00:47:18,705
今度使うのは法線です

755
00:47:19,640 --> 00:47:21,708
CampfiARですが―

756
00:47:21,809 --> 00:47:25,612
最適化で失われた細部を
復活させましょう

757
00:47:26,113 --> 00:47:29,817
それには法線マップを
使います

758
00:47:29,917 --> 00:47:34,288
オブジェクトの部分が
青くなっていますね

759
00:47:34,588 --> 00:47:38,959
このマップがあれば
ジオメトリを加えずに

760
00:47:39,059 --> 00:47:41,862
表面の装飾を
復活させられます

761
00:47:41,962 --> 00:47:46,000
法線マップのおかげで
魚のうろこが復活し

762
00:47:46,100 --> 00:47:49,803
枝の表面にも
表情が出ました

763
00:47:49,903 --> 00:47:53,941
統計パネルを見てみると
ポリゴンの数は

764
00:47:54,041 --> 00:47:56,143
変化していません

765
00:47:56,477 --> 00:47:58,145
魔法みたいですね

766
00:47:59,079 --> 00:48:01,849
では法線マップの作り方は？

767
00:47:59,079 --> 00:48:01,849
では法線マップの作り方は？

768
00:48:02,082 --> 00:48:06,487
１本の枝を使って
仕組みを見てみましょう

769
00:48:06,587 --> 00:48:11,158
高密度のメッシュから
法線マップを生成し

770
00:48:11,258 --> 00:48:15,362
低密度のメッシュに
転写することができます

771
00:48:15,462 --> 00:48:19,366
これは高密度のメッシュから
生成された―

772
00:48:19,466 --> 00:48:21,468
枝の法線マップです

773
00:48:22,035 --> 00:48:23,704
これを適用すると

774
00:48:23,804 --> 00:48:27,941
細かな装飾が復活したのが
分かります

775
00:48:28,042 --> 00:48:32,045
高パフォーマンスですが
低ポリゴンのままです

776
00:48:33,414 --> 00:48:36,016
法線マップは
見た目が変ですね

777
00:48:36,116 --> 00:48:41,655
この色はベクトル情報を
可視化表現したものです

778
00:48:41,755 --> 00:48:44,992
光の反射の仕方を
変えるために―

779
00:48:45,092 --> 00:48:49,496
法線をどれだけ引き離すかを
決めています

780
00:48:49,596 --> 00:48:51,765
この効果のカギと言えます

781
00:48:52,633 --> 00:48:56,603
少し複雑なので
さらに掘り下げます

782
00:48:56,703 --> 00:48:59,773
法線は重要な要素だからです

783
00:48:59,873 --> 00:49:01,775
少し時間を割いて―

784
00:48:59,873 --> 00:49:01,775
少し時間を割いて―

785
00:49:01,875 --> 00:49:05,245
法線の素晴らしさを
お伝えします

786
00:49:06,080 --> 00:49:09,683
法線ベクトルを
操作することは

787
00:49:09,783 --> 00:49:14,822
細部を復活させるために
重要な作業の１つです

788
00:49:14,955 --> 00:49:19,426
法線ベクトルには
例外もあるのでしょうか？

789
00:49:19,593 --> 00:49:23,597
三角法を覚えていれば
ないと分かりますね

790
00:49:23,697 --> 00:49:29,203
法線ベクトルはメッシュの表面の
垂直方向に進みます

791
00:49:29,303 --> 00:49:31,171
なぜ法線は必要なのか？

792
00:49:32,339 --> 00:49:37,311
オブジェクトを見るには
3Dエンジンに光を当てます

793
00:49:37,711 --> 00:49:39,880
法線ベクトルのおかげで
3Dエンジンが

794
00:49:39,980 --> 00:49:43,384
光の反射度合いを
測定できるのです

795
00:49:43,484 --> 00:49:45,786
現実の光と
動きは似ていて

796
00:49:45,886 --> 00:49:49,757
リアリティを持たせるには
欠かせない要素です

797
00:49:50,858 --> 00:49:54,728
法線を修正すると
3Dエンジンに

798
00:49:54,828 --> 00:49:57,965
表面がより詳細に
できていると

799
00:49:58,065 --> 00:50:00,601
錯覚させることができます

800
00:49:58,065 --> 00:50:00,601
錯覚させることができます

801
00:50:01,168 --> 00:50:03,871
これは一見
球体に見えますが

802
00:50:03,971 --> 00:50:05,672
実は平らな丸です

803
00:50:05,973 --> 00:50:09,009
つまりメッシュの
各面からの法線は

804
00:50:09,109 --> 00:50:13,080
2Dで見てのとおり
同じ方向に進むのです

805
00:50:13,514 --> 00:50:16,383
光が表面に反応した時

806
00:50:16,483 --> 00:50:20,587
各面に均等に
反射していることから―

807
00:50:20,688 --> 00:50:23,757
ポリゴンの違いを
認識できます

808
00:50:24,858 --> 00:50:26,760
今度は同じモデルに

809
00:50:26,860 --> 00:50:30,164
スムーズシェーディングなどを
施しました

810
00:50:30,264 --> 00:50:32,833
法線が 表面の位置によって―

811
00:50:32,933 --> 00:50:35,536
少しずつ変化していますね

812
00:50:35,702 --> 00:50:39,940
3Dエンジンが
モデルに反射する光を計算し

813
00:50:40,040 --> 00:50:44,278
法線の変化を
滑らかで曲線的な表面だと―

814
00:50:44,378 --> 00:50:45,779
認識したのです

815
00:50:46,647 --> 00:50:51,151
この２つのポリゴン数は
全く同じです

816
00:50:51,251 --> 00:50:53,287
しかし法線を修正したので

817
00:50:53,387 --> 00:50:56,790
ジオメトリを
変化させなくても

818
00:50:56,890 --> 00:51:01,161
表面の滑らかさや
細部を表現できました

819
00:50:56,890 --> 00:51:01,161
表面の滑らかさや
細部を表現できました

820
00:51:02,296 --> 00:51:05,132
法線について
お話ししてきましたが

821
00:51:05,232 --> 00:51:08,902
次はARシーンに
ツヤを出しましょう

822
00:51:10,470 --> 00:51:13,474
CampfiARは
洗練されてきましたが

823
00:51:13,574 --> 00:51:17,244
それでもまだ少し不格好です

824
00:51:17,344 --> 00:51:22,683
ケトルや魚を輝かせ
光を反射させたいですね

825
00:51:23,217 --> 00:51:27,254
これはメタルマップを
適用した結果です

826
00:51:27,421 --> 00:51:30,657
メタルマップは
反射させる部分を

827
00:51:30,758 --> 00:51:33,560
決定するために使います

828
00:51:33,827 --> 00:51:37,631
この属性を反映させると
指定した場所に

829
00:51:37,731 --> 00:51:39,900
ツヤが出ています

830
00:51:40,000 --> 00:51:42,936
ケトルや魚のうろこが
光っています

831
00:51:44,905 --> 00:51:46,807
ケトルに注目しましょう

832
00:51:47,074 --> 00:51:49,276
まずアルベドを適用し

833
00:51:49,376 --> 00:51:53,180
次にメタルマップを使って
メタル感を出します

834
00:51:53,747 --> 00:51:55,682
メタルマップを適用すると

835
00:51:55,782 --> 00:51:59,620
反射の効果を出す面が
指定されます

836
00:51:59,720 --> 00:52:02,189
マップで白色だった部分です

837
00:51:59,720 --> 00:52:02,189
マップで白色だった部分です

838
00:52:02,323 --> 00:52:07,361
オブジェクトが
金属製でなくても構いません

839
00:52:07,461 --> 00:52:13,333
3Dエンジンに反射させる面を
指定するだけですから

840
00:52:14,668 --> 00:52:18,939
このケトルのように
金属混じりの表面は

841
00:52:19,039 --> 00:52:22,476
メタル感のマップを
使うのが一番です

842
00:52:22,976 --> 00:52:24,578
グレースケールマップにて

843
00:52:24,678 --> 00:52:28,882
金属性の表面は黒
非金属性の表面は白で―

844
00:52:28,982 --> 00:52:30,551
度合いが示されます

845
00:52:30,918 --> 00:52:34,221
これにより
１つの素材を使って

846
00:52:34,321 --> 00:52:38,559
オブジェクト上の
反射が異なる表面を表現できます

847
00:52:38,892 --> 00:52:42,162
このケトルは
光りすぎですよね

848
00:52:42,262 --> 00:52:45,666
こんな見た目は
望んでいません

849
00:52:45,766 --> 00:52:49,803
そんな時は反射率に
幅を持たせましょう

850
00:52:49,903 --> 00:52:54,174
全ての表面が滑らかとは
限りませんからね

851
00:52:54,274 --> 00:52:59,046
それに表面には小さな傷が
あるかもしれません

852
00:53:00,414 --> 00:53:03,283
次は粗さの属性を設定します

853
00:53:03,951 --> 00:53:05,886
CampfiARに戻りますが

854
00:53:05,986 --> 00:53:09,089
反射している面が
滑らかすぎます

855
00:53:09,189 --> 00:53:11,491
粗さのマップを重ねました

856
00:53:11,592 --> 00:53:16,463
ケトルと魚の反射の仕方が
変化しています

857
00:53:16,797 --> 00:53:20,601
魚たちに粗さの属性を
加えたことで

858
00:53:20,701 --> 00:53:23,370
反射が和らぎました

859
00:53:23,804 --> 00:53:29,209
粗さとメタルの属性は
一緒に使うといいでしょう

860
00:53:29,343 --> 00:53:32,546
粗さの属性を
さらに掘り下げます

861
00:53:34,081 --> 00:53:37,584
表面に細かな傷を
付けることで

862
00:53:37,684 --> 00:53:41,622
光の反射を
変化させることができます

863
00:53:41,755 --> 00:53:44,425
粗さの設定を
スムーズにすると

864
00:53:44,525 --> 00:53:47,728
鏡のように光が反射します

865
00:53:47,961 --> 00:53:52,132
粗さの程度を上げると
光の反射角が広がります

866
00:53:52,232 --> 00:53:55,903
このケトルの粗さの設定値を

867
00:53:56,003 --> 00:53:59,173
ゼロから最大値まで試します

868
00:54:01,074 --> 00:54:05,979
シュミレーションするには
画期的な方法です

869
00:54:06,080 --> 00:54:09,783
粗さの設定値を
変えていくことで

870
00:54:09,883 --> 00:54:13,554
全く反射がないポイントまで
ぼかせます

871
00:54:14,755 --> 00:54:17,491
メタル加工を施したケトルに

872
00:54:17,591 --> 00:54:21,695
一定の粗さの値を
適用するのに代わり―

873
00:54:21,795 --> 00:54:23,797
マップを適用しました

874
00:54:23,997 --> 00:54:28,435
これにより
光を分散させる表面で―

875
00:54:28,535 --> 00:54:31,238
その頻度や度合いを指定します

876
00:54:31,538 --> 00:54:33,807
粗さのマップを適用すると

877
00:54:33,907 --> 00:54:39,379
ケトルのツヤが最終的に
減ったのが分かります

878
00:54:40,013 --> 00:54:44,818
メタルと粗さの属性を
合わせることで

879
00:54:44,918 --> 00:54:47,921
素晴らしい反射面に
なりました

880
00:54:48,388 --> 00:54:51,892
背景が映り込む加減を
調整すると

881
00:54:51,992 --> 00:54:55,963
もっとリアルな感じを
演出できます

882
00:54:56,230 --> 00:54:58,365
粗さのマップを使えば

883
00:54:58,465 --> 00:55:03,437
表面に細かな傷を付け
細部に変更を加えられます

884
00:54:58,465 --> 00:55:03,437
表面に細かな傷を付け
細部に変更を加えられます

885
00:55:03,971 --> 00:55:07,941
さらにご紹介したい属性が
２つあります

886
00:55:08,042 --> 00:55:09,710
モデルを
洗練させるためには

887
00:55:09,810 --> 00:55:13,747
パフォーマンスと美しさの
バランスが大切です

888
00:55:15,015 --> 00:55:19,720
アンビエントオクルージョンは
自分の影を作り出す属性です

889
00:55:19,953 --> 00:55:24,324
これにより深みを
持たせることができます

890
00:55:25,259 --> 00:55:31,131
法線マップは失われた細部を
復活させるのに便利な一方で

891
00:55:31,231 --> 00:55:35,168
アンビエントオクルージョンは
その細部を決定づけます

892
00:55:35,269 --> 00:55:38,739
アンビエントオクルージョンの
マップです

893
00:55:38,839 --> 00:55:43,110
繊細な効果なので
見えにくいかもしれません

894
00:55:43,310 --> 00:55:48,482
丸太の表面とケトルの底の方に
影ができています

895
00:55:48,782 --> 00:55:52,586
とても影の変化が
分かりにくいので

896
00:55:52,686 --> 00:55:54,855
丸太を拡大してみます

897
00:55:56,990 --> 00:56:00,661
これは丸太の法線マップです

898
00:55:56,990 --> 00:56:00,661
これは丸太の法線マップです

899
00:56:00,761 --> 00:56:05,666
これでも十分だと思いますが
さらに手を加えます

900
00:56:06,266 --> 00:56:07,901
アンビエントオクルージョンで

901
00:56:08,001 --> 00:56:12,740
下の丸太と切り株の周りに
自らの影が

902
00:56:12,840 --> 00:56:15,409
映し出されています

903
00:56:15,776 --> 00:56:19,246
この効果を適用すると―

904
00:56:19,346 --> 00:56:22,783
過剰に動的な光源に
頼ることなく

905
00:56:22,883 --> 00:56:26,520
影が焼き付けられたのが
分かります

906
00:56:28,255 --> 00:56:33,126
アンビエントオクルージョンを
ぜひ使ってください

907
00:56:33,293 --> 00:56:35,028
CampfiARにも使いました

908
00:56:35,128 --> 00:56:39,099
カメラベースの
後処理効果などで―

909
00:56:39,199 --> 00:56:41,869
類似したものもありますが

910
00:56:41,969 --> 00:56:45,639
レンダリングの障害に
なりかねません

911
00:56:47,174 --> 00:56:48,976
最後になりましたが

912
00:56:49,710 --> 00:56:52,146
透明度の多用は
控えてください

913
00:56:52,246 --> 00:56:56,116
どうしても透明度を
使う場合は

914
00:56:56,216 --> 00:56:59,720
透明と不透明が混在する
表面とは分けてください

915
00:57:00,888 --> 00:57:03,290
ARに透明度を多用すると

916
00:57:03,390 --> 00:57:08,295
パフォーマンスが低下すると
言われています

917
00:57:08,395 --> 00:57:13,434
とりわけ透明な表面が
前後に重なる場合は要注意です

918
00:57:13,634 --> 00:57:17,804
いわゆるオーバードローは
避けましょう

919
00:57:19,406 --> 00:57:22,843
皆さんがまだ
飽きてないことを願います

920
00:57:22,943 --> 00:57:24,945
今までお話ししたのは

921
00:57:25,045 --> 00:57:30,083
3Dエンジンに光を
反応させる方法についてです

922
00:57:30,184 --> 00:57:34,988
今度はARを現実世界に
馴染ませる方法を説明します

923
00:57:35,923 --> 00:57:41,361
ARKitの機能の１つに
光を補正するものがあります

924
00:57:43,530 --> 00:57:45,699
LightEstimationです

925
00:57:45,933 --> 00:57:49,136
ではケトルで効果を
確認しましょう

926
00:57:49,236 --> 00:57:52,272
環境光の強さが
変化していますね

927
00:57:52,373 --> 00:57:55,709
ARシーンでも環境光を
補正します

928
00:57:56,376 --> 00:57:59,613
ARKitが映像を分析し

929
00:57:59,713 --> 00:58:03,584
現実世界の明るさを
推定してくれます

930
00:57:59,713 --> 00:58:03,584
現実世界の明るさを
推定してくれます

931
00:58:03,684 --> 00:58:05,686
魔法のような機能です

932
00:58:05,786 --> 00:58:10,457
現実世界に馴染む光量を
教えてくれるのです

933
00:58:12,359 --> 00:58:16,230
光の魔法使いの次は
影についてです

934
00:58:16,797 --> 00:58:19,967
ARで影を表現するのは
非常に大変です

935
00:58:20,167 --> 00:58:23,237
様々な場面に馴染む影が
必要です

936
00:58:23,337 --> 00:58:26,874
アプリケーションは
色々な場所で使用されます

937
00:58:26,974 --> 00:58:30,377
現実にある影と
異なっていれば―

938
00:58:30,477 --> 00:58:32,546
違和感が残るはずです

939
00:58:33,947 --> 00:58:37,918
まずは不自然な影を
作り出すために

940
00:58:38,018 --> 00:58:41,722
斜め上の角度から
光を当てました

941
00:58:42,122 --> 00:58:45,259
リアル感を出せる影ですが

942
00:58:45,359 --> 00:58:49,429
今は周囲の環境に
馴染んでいません

943
00:58:49,530 --> 00:58:52,766
物理の法則を
無視しています

944
00:58:54,067 --> 00:58:57,504
代わりに魚の上部から
光を当て

945
00:58:57,604 --> 00:59:03,877
もう少し繊細な影になるよう
光の強さを調整します

946
00:58:57,604 --> 00:59:03,877
もう少し繊細な影になるよう
光の強さを調整します

947
00:59:04,144 --> 00:59:09,016
こうすれば様々な場面で
影を演出できます

948
00:59:09,983 --> 00:59:13,520
ARシーンで
光を当てる以外にも

949
00:59:13,620 --> 00:59:15,823
影を作る方法があります

950
00:59:15,923 --> 00:59:19,059
でもコンテンツを
たくさん表示させるなら

951
00:59:19,159 --> 00:59:21,428
パフォーマンスに
影響が出ます

952
00:59:21,628 --> 00:59:25,099
時間をかけて
良質な影を作り

953
00:59:25,199 --> 00:59:29,670
様々な場面に
馴染むようにしてください

954
00:59:30,871 --> 00:59:32,840
環境マップですが―

955
00:59:32,973 --> 00:59:36,410
人々を驚かせたいなら
使いましょう

956
00:59:36,510 --> 00:59:40,314
オブジェクトを
反射させる場合に有効です

957
00:59:40,748 --> 00:59:44,685
ARとは思えないほど
リアルに仕上がります

958
00:59:44,818 --> 00:59:47,588
それを簡単に実現するために―

959
00:59:47,688 --> 00:59:52,926
iOS 12とARKit 2.0の新機能の
使い方を紹介します

960
00:59:53,026 --> 00:59:56,497
自動で環境マップを
生成してくれます

961
00:59:57,865 --> 00:59:59,333
ケトルを見てください

962
00:59:59,433 --> 01:00:03,470
従来のマップでは
少し赤みを帯びています

963
00:59:59,433 --> 01:00:03,470
従来のマップでは
少し赤みを帯びています

964
01:00:04,304 --> 01:00:06,907
新機能を有効にすると

965
01:00:07,007 --> 01:00:12,446
ケトルに地面や周囲の色が
反射しています

966
01:00:12,546 --> 01:00:16,884
ケトルを置いた草の
緑色すら映っています

967
01:00:17,084 --> 01:00:22,022
同化させるのに役立つ
素晴らしい機能です

968
01:00:22,122 --> 01:00:27,161
粗さの加工を慎重に行えば
よりリアルになります

969
01:00:28,762 --> 01:00:33,200
なぜ新機能が
画期的なのでしょうか？

970
01:00:33,367 --> 01:00:35,002
通常 マップは―

971
01:00:35,102 --> 01:00:40,474
金属面に周囲の色を
反射させるために使います

972
01:00:41,008 --> 01:00:44,545
立方体型の環境マップを
ご覧ください

973
01:00:45,179 --> 01:00:47,748
これまでのARKitでは

974
01:00:47,848 --> 01:00:51,819
様々な場所に
馴染むイメージを―

975
01:00:51,919 --> 01:00:54,488
皆さんが用意する必要が
ありました

976
01:00:54,588 --> 01:00:58,092
しかしARKit 2.0があれば

977
01:00:58,192 --> 01:01:01,195
馴染むか悩む必要は
ありません

978
01:00:58,192 --> 01:01:01,195
馴染むか悩む必要は
ありません

979
01:01:02,996 --> 01:01:07,367
ARKit 2.0の新機能について
知りたければ

980
01:01:07,468 --> 01:01:11,405
What's New in ARKit 2を
チェックしてください

981
01:01:12,473 --> 01:01:18,145
ではCampfiARに
全ての効果を加えましょう

982
01:01:19,379 --> 01:01:24,885
アニメーション系エフェクトと
今日お話しした技術の力で

983
01:01:24,985 --> 01:01:27,421
CampfiARは完成しました

984
01:01:27,588 --> 01:01:31,959
今後 外出したくなったら
その気持ちを抑えて―

985
01:01:32,059 --> 01:01:37,931
安全な屋内で CampfiARによる
アウトドア気分を楽しみます

986
01:01:38,031 --> 01:01:40,234
虫刺されとはお別れです

987
01:01:42,069 --> 01:01:44,137
様々な話をしましたが

988
01:01:44,238 --> 01:01:47,708
覚えておいてほしい
大切な点を

989
01:01:47,841 --> 01:01:49,376
おさらいします

990
01:01:49,710 --> 01:01:53,614
アプリケーションは
様々な場所で使用されるので

991
01:01:53,714 --> 01:01:58,152
どの環境にも馴染むように
作りましょう

992
01:01:58,585 --> 01:02:03,557
AR体験の種類を決めたら
レンダリング容量に従い

993
01:01:58,585 --> 01:02:03,557
AR体験の種類を決めたら
レンダリング容量に従い

994
01:02:03,891 --> 01:02:08,228
バッテリー消費を減らし
パフォーマンスを保つために

995
01:02:08,328 --> 01:02:10,097
最適化してください

996
01:02:10,464 --> 01:02:13,267
様々なマテリアル属性を
使用しましょう

997
01:02:13,367 --> 01:02:17,971
ARKitに搭載された機能も
駆使すれば―

998
01:02:18,072 --> 01:02:20,340
コンテンツの見た目が
改善します

999
01:02:21,508 --> 01:02:27,114
参考のために使用した属性を
一覧にまとめました

1000
01:02:27,881 --> 01:02:30,484
追加情報はデベロッパWebサイトを
ご覧ください

1001
01:02:30,918 --> 01:02:31,852
ありがとう

1002
01:02:31,952 --> 01:02:36,056
(拍手)