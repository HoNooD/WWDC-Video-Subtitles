1
00:00:01,516 --> 00:00:06,796
[ Music ]


2
00:00:07,296 --> 00:00:08,966
>> Hello. I'm Jonathan Davis,


3
00:00:08,966 --> 00:00:10,626
web technologies evangelist for


4
00:00:10,626 --> 00:00:12,196
the Safari and WebKit teams.


5
00:00:12,686 --> 00:00:14,376
Welcome to Understanding CPU


6
00:00:14,376 --> 00:00:15,986
Usage with Web Inspector.


7
00:00:17,666 --> 00:00:19,176
We all know that battery life is


8
00:00:19,176 --> 00:00:20,676
important to users and you


9
00:00:20,676 --> 00:00:22,516
probably instinctively know the


10
00:00:22,516 --> 00:00:23,646
web browser is one of the


11
00:00:23,646 --> 00:00:25,726
most-used apps on our devices.


12
00:00:26,236 --> 00:00:28,686
But beyond that, web content is


13
00:00:28,686 --> 00:00:30,366
also incorporated into many


14
00:00:30,366 --> 00:00:32,606
popular iOS and macOS apps.


15
00:00:33,226 --> 00:00:34,626
That means web content


16
00:00:34,626 --> 00:00:36,276
significantly affects battery


17
00:00:36,276 --> 00:00:37,246
life for users.


18
00:00:37,696 --> 00:00:39,386
So making it power-efficient has


19
00:00:39,386 --> 00:00:40,246
a big impact.


20
00:00:41,346 --> 00:00:42,736
Safari and WebKit already


21
00:00:42,736 --> 00:00:43,776
provide features to


22
00:00:43,776 --> 00:00:45,226
automatically save power for


23
00:00:45,226 --> 00:00:47,086
users when possible, such as


24
00:00:47,086 --> 00:00:48,746
throttling timers when a webpage


25
00:00:48,746 --> 00:00:49,556
is in the background.


26
00:00:50,456 --> 00:00:51,896
And with support for content


27
00:00:51,896 --> 00:00:53,716
blocker extensions, users can


28
00:00:53,716 --> 00:00:55,156
automatically block loading


29
00:00:55,156 --> 00:00:56,646
unwanted content that's often


30
00:00:56,646 --> 00:00:58,006
just junk slowing down their


31
00:00:58,006 --> 00:00:59,926
browser, or worse, tracking


32
00:01:00,646 --> 00:01:00,736
them.


33
00:01:01,896 --> 00:01:03,316
But even with the built-in


34
00:01:03,316 --> 00:01:05,025
power-saving features in Safari,


35
00:01:05,275 --> 00:01:06,766
there's a lot left in the hands


36
00:01:06,766 --> 00:01:07,766
of web developers.


37
00:01:08,246 --> 00:01:09,676
So it's an opportunity for all


38
00:01:09,676 --> 00:01:11,316
of us to improve performance and


39
00:01:11,316 --> 00:01:12,916
build a power-efficient web for


40
00:01:12,916 --> 00:01:13,566
users.


41
00:01:14,786 --> 00:01:16,746
The good news is that everything


42
00:01:16,746 --> 00:01:18,376
you know about good performance


43
00:01:18,376 --> 00:01:20,806
practices on the web also apply


44
00:01:20,806 --> 00:01:22,466
as best practices for saving


45
00:01:22,466 --> 00:01:22,836
power.


46
00:01:23,486 --> 00:01:24,946
So all of the things we've heard


47
00:01:24,946 --> 00:01:26,716
about improving page load time,


48
00:01:27,166 --> 00:01:29,346
optimizing JavaScript, and using


49
00:01:29,346 --> 00:01:31,476
CSS animations and transitions


50
00:01:31,886 --> 00:01:33,496
really help with battery life.


51
00:01:34,606 --> 00:01:35,756
Whether you're experienced with


52
00:01:35,756 --> 00:01:36,976
all the best practices for


53
00:01:36,976 --> 00:01:38,606
performance on the web or just


54
00:01:38,606 --> 00:01:40,316
starting out, I'm going to show


55
00:01:40,316 --> 00:01:42,056
you a powerful new tool in Web


56
00:01:42,056 --> 00:01:43,546
Inspector that's going to give


57
00:01:43,546 --> 00:01:45,006
you superpowers for finding


58
00:01:45,006 --> 00:01:45,996
where performance can be


59
00:01:45,996 --> 00:01:47,586
improved to save battery life.


60
00:01:48,426 --> 00:01:50,406
It's called the CPU Usage


61
00:01:50,406 --> 00:01:50,986
Timeline.


62
00:01:51,556 --> 00:01:53,576
And it's new in Web Inspector in


63
00:01:53,576 --> 00:01:55,316
Safari 13 for macOS.


64
00:01:55,826 --> 00:01:57,336
It provides a window into power


65
00:01:57,336 --> 00:01:58,906
use that makes it easy to see


66
00:01:58,906 --> 00:02:00,036
the impact of behaviors that


67
00:02:00,036 --> 00:02:01,926
contribute to high CPU usage.


68
00:02:03,996 --> 00:02:05,556
Today I'm going to show you how


69
00:02:05,556 --> 00:02:07,206
to work with a new CPU Usage


70
00:02:07,206 --> 00:02:09,526
Timeline, discover power issues


71
00:02:09,526 --> 00:02:11,846
through CPU usage, and then I'll


72
00:02:11,846 --> 00:02:13,386
briefly go over some strategies


73
00:02:13,386 --> 00:02:14,906
for improving power savings in


74
00:02:14,906 --> 00:02:16,276
your web-based projects.


75
00:02:17,276 --> 00:02:18,536
Now before you can use the new


76
00:02:18,536 --> 00:02:20,066
timeline, you'll need to enable


77
00:02:20,066 --> 00:02:21,616
the Develop menu to access Web


78
00:02:21,616 --> 00:02:22,156
Inspector.


79
00:02:23,946 --> 00:02:25,616
Just load up Safari preferences


80
00:02:25,936 --> 00:02:27,216
and click on Advanced.


81
00:02:27,566 --> 00:02:29,536
And click to enable the Show


82
00:02:29,536 --> 00:02:31,506
Develop Menu in Menu Bar option.


83
00:02:33,256 --> 00:02:35,356
Now just load up a webpage and


84
00:02:35,356 --> 00:02:36,546
open Web Inspector from the


85
00:02:36,546 --> 00:02:37,316
Develop menu.


86
00:02:38,686 --> 00:02:40,116
Or use the keyboard shortcut


87
00:02:40,116 --> 00:02:41,016
Command-Option-I.


88
00:02:42,326 --> 00:02:44,056
I am going to use the new CPU


89
00:02:44,056 --> 00:02:45,936
Usage Timeline to look for where


90
00:02:45,936 --> 00:02:47,386
we can improve power on


91
00:02:47,386 --> 00:02:48,196
WebKit.org.


92
00:02:48,326 --> 00:02:50,356
The homepage is pretty simple


93
00:02:50,676 --> 00:02:51,826
but it should be interesting


94
00:02:51,906 --> 00:02:52,806
because it still has some


95
00:02:52,806 --> 00:02:54,186
dynamic things happening like


96
00:02:54,186 --> 00:02:55,676
this subtle logo animation in


97
00:02:55,676 --> 00:02:56,256
the background.


98
00:02:58,776 --> 00:03:00,646
With Web Inspector open, click


99
00:03:00,646 --> 00:03:02,036
over to the Timelines tab.


100
00:03:05,206 --> 00:03:06,676
In the upper left is a list of


101
00:03:06,676 --> 00:03:07,716
different timelines.


102
00:03:08,056 --> 00:03:08,786
There's a bunch of other


103
00:03:08,786 --> 00:03:10,246
timelines you can use, but the


104
00:03:10,246 --> 00:03:11,886
defaults will work great to look


105
00:03:11,886 --> 00:03:13,826
for ways to improve CPU usage.


106
00:03:16,236 --> 00:03:17,656
To start a recording, you can


107
00:03:17,656 --> 00:03:19,276
click the red Record button or


108
00:03:19,276 --> 00:03:20,256
press the space bar.


109
00:03:20,256 --> 00:03:21,426
But I'm going to click the


110
00:03:21,426 --> 00:03:22,676
Reload button, which will


111
00:03:22,676 --> 00:03:24,216
automatically start a recording


112
00:03:24,576 --> 00:03:25,986
and capture page load, too.


113
00:03:27,536 --> 00:03:29,736
When looking at CPU usage, it's


114
00:03:29,736 --> 00:03:31,076
important to remember you'll


115
00:03:31,076 --> 00:03:32,766
want to record at least 15


116
00:03:32,766 --> 00:03:34,546
seconds in order to get useful


117
00:03:34,546 --> 00:03:35,186
measurements.


118
00:03:36,116 --> 00:03:37,616
So I'll let this recording go a


119
00:03:37,616 --> 00:03:38,886
bit beyond that to capture


120
00:03:38,886 --> 00:03:39,396
enough data.


121
00:03:41,326 --> 00:03:42,306
Now I'll scroll over the


122
00:03:42,306 --> 00:03:43,796
timeline to zoom out a bit so I


123
00:03:43,796 --> 00:03:44,536
can see everything.


124
00:03:47,106 --> 00:03:48,786
Clicking on the CPU timeline,


125
00:03:48,786 --> 00:03:50,356
you can see details about CPU


126
00:03:50,356 --> 00:03:51,466
usage of the page.


127
00:03:52,416 --> 00:03:54,136
At a glance, I can tell the page


128
00:03:54,136 --> 00:03:55,176
does a pretty good job of


129
00:03:55,176 --> 00:03:56,576
keeping energy use low.


130
00:03:57,326 --> 00:03:58,896
The quick load time helps a lot


131
00:03:59,266 --> 00:04:01,346
and when the page becomes idle,


132
00:04:01,676 --> 00:04:03,096
the timeline shows the page as


133
00:04:03,096 --> 00:04:04,386
basically doing nothing.


134
00:04:05,016 --> 00:04:06,236
This is great because it means


135
00:04:06,236 --> 00:04:07,976
users can stay on the page all


136
00:04:07,976 --> 00:04:10,006
day and the CPU drops to a very


137
00:04:10,006 --> 00:04:11,856
low power state with negligible


138
00:04:11,856 --> 00:04:13,416
battery drain caused by the web


139
00:04:13,416 --> 00:04:14,086
content.


140
00:04:17,065 --> 00:04:17,875
The Main Thread is where a lot


141
00:04:17,875 --> 00:04:19,196
of interesting work happens for


142
00:04:19,196 --> 00:04:20,005
web content.


143
00:04:20,596 --> 00:04:22,055
The Main Thread chart shows


144
00:04:22,055 --> 00:04:23,336
different categories of work


145
00:04:23,496 --> 00:04:24,486
done on the Main Thread


146
00:04:24,486 --> 00:04:26,056
including JavaScript processing,


147
00:04:26,466 --> 00:04:28,796
painting, layout and things in


148
00:04:28,796 --> 00:04:30,076
service of layout like style


149
00:04:30,076 --> 00:04:30,846
recalculation.


150
00:04:31,806 --> 00:04:32,896
Based on this, we can see that


151
00:04:32,896 --> 00:04:34,336
most of the time working was


152
00:04:34,336 --> 00:04:35,286
spent on painting.


153
00:04:35,716 --> 00:04:37,556
In the middle of the indicator


154
00:04:37,556 --> 00:04:38,826
is the time it took for the Main


155
00:04:38,826 --> 00:04:40,046
Thread to complete its work.


156
00:04:40,336 --> 00:04:42,286
The entire recording was about


157
00:04:42,286 --> 00:04:43,696
20 seconds but the Main Thread


158
00:04:43,696 --> 00:04:45,456
only took about 100 milliseconds


159
00:04:45,456 --> 00:04:46,306
to complete its work.


160
00:04:48,586 --> 00:04:50,146
Below the Main Thread chart is a


161
00:04:50,146 --> 00:04:51,906
detailed breakdown of the CPU


162
00:04:51,906 --> 00:04:53,596
usage across all of the threads


163
00:04:53,596 --> 00:04:54,886
involved in doing work for the


164
00:04:54,886 --> 00:04:55,616
web content.


165
00:04:55,816 --> 00:04:58,036
I can take a closer look at this


166
00:04:58,036 --> 00:04:59,516
by clicking and dragging in the


167
00:04:59,516 --> 00:05:01,556
timeline to select just the time


168
00:05:01,556 --> 00:05:02,686
range where the work is being


169
00:05:02,686 --> 00:05:02,986
done.


170
00:05:04,396 --> 00:05:06,306
And just under the CPU usage


171
00:05:06,306 --> 00:05:08,766
graph, in this thin strip, is


172
00:05:08,766 --> 00:05:10,346
the Main Thread Indicator, which


173
00:05:10,346 --> 00:05:11,706
shows categories of work that


174
00:05:11,706 --> 00:05:12,616
were happening on the Main


175
00:05:12,616 --> 00:05:13,876
Thread at different points in


176
00:05:13,876 --> 00:05:14,166
time.


177
00:05:14,636 --> 00:05:16,866
In this area of growing


178
00:05:16,866 --> 00:05:18,406
activity, there were some layout


179
00:05:18,406 --> 00:05:19,716
events in red, followed by


180
00:05:19,716 --> 00:05:21,446
significant painting work, just


181
00:05:21,446 --> 00:05:22,636
like in the chart above, but


182
00:05:22,636 --> 00:05:23,706
showing when it happened.


183
00:05:26,096 --> 00:05:28,126
The Energy Impact Gauge really


184
00:05:28,126 --> 00:05:29,276
brings it all together though.


185
00:05:29,606 --> 00:05:31,116
It provides a score based on the


186
00:05:31,116 --> 00:05:33,006
total average usage across all


187
00:05:33,006 --> 00:05:34,986
CPU cores for the selected time


188
00:05:34,986 --> 00:05:35,316
range.


189
00:05:35,576 --> 00:05:37,416
The Energy Impact Gauge really


190
00:05:37,416 --> 00:05:38,546
brings it all together though.


191
00:05:38,846 --> 00:05:40,486
It provides a score based on the


192
00:05:40,486 --> 00:05:42,536
total average usage across all


193
00:05:42,536 --> 00:05:44,476
CPU cores for the selected time


194
00:05:44,476 --> 00:05:44,916
range.


195
00:05:47,116 --> 00:05:48,646
The Energy Impact Gauge is


196
00:05:48,646 --> 00:05:50,366
interactive and as a total


197
00:05:50,366 --> 00:05:52,006
average will change depending on


198
00:05:52,006 --> 00:05:53,196
the time range selected.


199
00:05:53,596 --> 00:05:55,476
For the page load period, the


200
00:05:55,476 --> 00:05:56,996
gauge shows medium energy


201
00:05:56,996 --> 00:05:57,516
impact.


202
00:05:57,906 --> 00:05:59,106
But loading is expensive in


203
00:05:59,106 --> 00:06:00,176
terms of power so that's


204
00:06:00,176 --> 00:06:00,816
expected.


205
00:06:01,266 --> 00:06:02,716
At least it stayed out of the


206
00:06:02,716 --> 00:06:03,346
high range.


207
00:06:03,346 --> 00:06:04,286
That would have indicated a


208
00:06:04,286 --> 00:06:04,786
problem.


209
00:06:05,386 --> 00:06:06,696
Double-clicking the Timeline


210
00:06:06,696 --> 00:06:08,106
area to select the entire


211
00:06:08,106 --> 00:06:09,956
recording shows the overall


212
00:06:09,956 --> 00:06:11,386
average CPU is low.


213
00:06:12,016 --> 00:06:13,646
I can click and drag the


214
00:06:13,646 --> 00:06:15,496
timeline to select a slice of


215
00:06:15,496 --> 00:06:17,246
time out of the recording and


216
00:06:17,246 --> 00:06:18,676
watch the average change.


217
00:06:20,396 --> 00:06:22,516
Now when I click to grab the


218
00:06:22,516 --> 00:06:23,986
selection and slide it to a


219
00:06:23,986 --> 00:06:25,356
period where the page goes idle,


220
00:06:25,776 --> 00:06:27,276
the energy impact drops to low.


221
00:06:27,926 --> 00:06:28,946
That's really great.


222
00:06:29,426 --> 00:06:30,966
When the page is idle, we don't


223
00:06:30,966 --> 00:06:32,426
want to be costing the user lots


224
00:06:32,426 --> 00:06:33,786
of power for content they're not


225
00:06:33,786 --> 00:06:34,606
actively using.


226
00:06:36,406 --> 00:06:38,226
The CPU use was in the low range


227
00:06:38,226 --> 00:06:39,566
while idle, even with the


228
00:06:39,566 --> 00:06:40,976
rotating logo animation


229
00:06:40,976 --> 00:06:42,076
happening in the background.


230
00:06:42,426 --> 00:06:43,476
That's because it's using a


231
00:06:43,476 --> 00:06:45,666
simple CSS animation that makes


232
00:06:45,666 --> 00:06:47,506
it really cheap to animate, but


233
00:06:47,506 --> 00:06:49,146
it still gives the page a nice


234
00:06:49,146 --> 00:06:50,096
visual impact.


235
00:06:51,266 --> 00:06:52,716
WebKit.org is doing great so


236
00:06:52,716 --> 00:06:54,166
far, but when you're looking for


237
00:06:54,166 --> 00:06:56,186
power issues, looking at loading


238
00:06:56,186 --> 00:06:57,516
and idle are good starts.


239
00:06:58,126 --> 00:07:00,196
To cover all the bases, we need


240
00:07:00,196 --> 00:07:01,526
to capture some interactivity


241
00:07:01,526 --> 00:07:01,836
too.


242
00:07:02,416 --> 00:07:05,506
The WebKit Feature Status page


243
00:07:05,506 --> 00:07:06,866
is a great way to stay up to


244
00:07:06,866 --> 00:07:08,366
date for WebKit support for your


245
00:07:08,366 --> 00:07:09,616
favorite web features.


246
00:07:10,036 --> 00:07:11,376
It allows you to filter and


247
00:07:11,376 --> 00:07:12,786
search and that's perfect for


248
00:07:12,786 --> 00:07:13,756
capturing interaction.


249
00:07:14,036 --> 00:07:16,406
I'm going to record a timeline


250
00:07:16,406 --> 00:07:17,586
and interact with the page in


251
00:07:17,586 --> 00:07:18,136
some ways.


252
00:07:18,136 --> 00:07:19,566
I'll just scroll down to the


253
00:07:19,566 --> 00:07:21,016
bottom and then all the way back


254
00:07:21,016 --> 00:07:21,806
up to the top.


255
00:07:24,376 --> 00:07:26,066
And then I'll do a quick search


256
00:07:26,766 --> 00:07:28,086
and click on some things here


257
00:07:28,086 --> 00:07:28,456
and there.


258
00:07:29,116 --> 00:07:31,906
And again, we should at least


259
00:07:31,906 --> 00:07:33,346
capture 15 seconds.


260
00:07:33,836 --> 00:07:35,366
Since we're on a new page, we


261
00:07:35,366 --> 00:07:36,546
should capture some period of


262
00:07:36,546 --> 00:07:37,196
idle too.


263
00:07:38,146 --> 00:07:39,576
I'm going to let this continue


264
00:07:39,576 --> 00:07:41,286
recording to get enough idle


265
00:07:41,286 --> 00:07:42,086
time captured.


266
00:07:46,456 --> 00:07:47,666
Okay, that looks pretty good.


267
00:07:48,546 --> 00:07:49,586
Now I'm going to select the


268
00:07:49,586 --> 00:07:51,746
entire recording and scroll to


269
00:07:51,746 --> 00:07:53,076
zoom out of the timeline a bit


270
00:07:53,076 --> 00:07:54,146
so we can see everything.


271
00:07:54,696 --> 00:07:57,116
And click to look at the CPU


272
00:07:57,116 --> 00:07:58,296
Usage Details.


273
00:08:03,206 --> 00:08:04,296
Let's start digging into these


274
00:08:04,296 --> 00:08:06,076
areas starting with loading.


275
00:08:07,946 --> 00:08:09,636
The page managed to stay out of


276
00:08:09,636 --> 00:08:10,986
the high range during the quick


277
00:08:10,986 --> 00:08:12,706
load time, so we're okay there.


278
00:08:14,306 --> 00:08:15,636
Now let's look at this range of


279
00:08:15,636 --> 00:08:16,436
interactivity.


280
00:08:17,346 --> 00:08:18,906
The energy impact stays in the


281
00:08:18,906 --> 00:08:20,516
medium range even with all of


282
00:08:20,516 --> 00:08:21,376
these things happening.


283
00:08:21,916 --> 00:08:22,756
But you can tell form the


284
00:08:22,756 --> 00:08:24,476
JavaScript and Events Timeline,


285
00:08:24,516 --> 00:08:25,916
there's a lot of script firing


286
00:08:25,916 --> 00:08:27,296
while scrolling and interacting.


287
00:08:27,976 --> 00:08:29,086
We definitely want to avoid


288
00:08:29,086 --> 00:08:30,756
doing any extra CPU work while


289
00:08:30,756 --> 00:08:32,106
scrolling, since it's very


290
00:08:32,106 --> 00:08:33,106
expensive to scroll.


291
00:08:34,066 --> 00:08:35,176
Let's see if we need to be doing


292
00:08:35,176 --> 00:08:37,385
that work or not.


293
00:08:37,586 --> 00:08:38,905
The Statistics and Sources


294
00:08:38,905 --> 00:08:40,196
sections tell the story.


295
00:08:41,046 --> 00:08:42,486
There were over 1,200 entries


296
00:08:42,486 --> 00:08:44,006
into JavaScript for the selected


297
00:08:44,006 --> 00:08:46,486
time in the recording; 596


298
00:08:46,486 --> 00:08:48,026
Request Animation Frame timers


299
00:08:48,026 --> 00:08:50,566
fired, and there are 647 scroll


300
00:08:50,566 --> 00:08:50,946
events.


301
00:08:51,826 --> 00:08:53,336
Now I know that reducing timers


302
00:08:53,336 --> 00:08:54,626
and staying off of scrolling is


303
00:08:54,626 --> 00:08:55,896
better for performance, but we


304
00:08:55,896 --> 00:08:57,056
need to look at the code to know


305
00:08:57,056 --> 00:08:58,596
if it's necessary or can be


306
00:08:58,596 --> 00:08:59,056
improved.


307
00:08:59,986 --> 00:09:01,766
In the statistics area, you can


308
00:09:01,766 --> 00:09:03,336
click on the timers or events to


309
00:09:03,336 --> 00:09:04,736
filter the sources on the right


310
00:09:04,776 --> 00:09:06,666
to the code that triggered it.


311
00:09:06,666 --> 00:09:08,216
And clicking the source takes


312
00:09:08,216 --> 00:09:09,386
you right to the code in the


313
00:09:09,386 --> 00:09:10,396
JavaScript debugger.


314
00:09:13,416 --> 00:09:14,256
Ah, okay.


315
00:09:14,736 --> 00:09:15,806
It looks like the Request


316
00:09:15,806 --> 00:09:17,426
Animation Frame timer is calling


317
00:09:17,426 --> 00:09:19,346
Update Images, which iterates


318
00:09:19,346 --> 00:09:20,766
over all of the images and


319
00:09:20,766 --> 00:09:21,816
checks if they are in view.


320
00:09:21,916 --> 00:09:23,186
And if so, it loads them.


321
00:09:23,366 --> 00:09:25,396
It's a pretty basic Lazy Loaded


322
00:09:25,396 --> 00:09:26,286
images pattern.


323
00:09:26,746 --> 00:09:28,456
But this dimmed out code in the


324
00:09:28,456 --> 00:09:30,496
debugger tells us In View and


325
00:09:30,496 --> 00:09:32,076
Load Image are never called.


326
00:09:33,616 --> 00:09:34,606
Even though we scrolled the


327
00:09:34,606 --> 00:09:36,726
entire page to the bottom and


328
00:09:36,726 --> 00:09:38,546
back up to the top, it makes


329
00:09:38,546 --> 00:09:39,776
sense though because there's


330
00:09:39,776 --> 00:09:41,346
basically no images on the page.


331
00:09:41,846 --> 00:09:43,486
So the Lazy Loading image code


332
00:09:43,486 --> 00:09:44,746
shouldn't be firing at all on


333
00:09:44,746 --> 00:09:45,296
this page.


334
00:09:46,106 --> 00:09:47,466
Let's switch back to the code.


335
00:09:47,776 --> 00:09:49,926
The images and the event


336
00:09:49,926 --> 00:09:51,156
handlers are set up here.


337
00:09:52,456 --> 00:09:54,116
So looking at the code, it's


338
00:09:54,116 --> 00:09:55,416
just always setting up the event


339
00:09:55,416 --> 00:09:57,026
handlers for scroll and resize


340
00:09:57,026 --> 00:09:57,686
all of the time.


341
00:09:58,356 --> 00:09:59,856
To keep that from happening, we


342
00:09:59,856 --> 00:10:01,096
just need to add a conditional


343
00:10:01,096 --> 00:10:01,476
guard.


344
00:10:02,776 --> 00:10:03,976
There, let's try that.


345
00:10:08,066 --> 00:10:09,046
Okay, so let's capture a


346
00:10:09,046 --> 00:10:10,636
timeline with a fix in place.


347
00:10:11,346 --> 00:10:12,696
I'll click back over to the


348
00:10:12,696 --> 00:10:15,356
Timelines tab, start a new


349
00:10:15,356 --> 00:10:19,676
recording and I'll do some quick


350
00:10:19,676 --> 00:10:20,196
scrolling.


351
00:10:23,106 --> 00:10:24,326
You can already see there are no


352
00:10:24,326 --> 00:10:25,746
JavaScript entries showing up in


353
00:10:25,746 --> 00:10:26,426
the timeline.


354
00:10:26,606 --> 00:10:27,596
It's all just paints.


355
00:10:28,116 --> 00:10:29,356
So our guard is working to


356
00:10:29,356 --> 00:10:30,766
prevent extra JavaScript work


357
00:10:30,906 --> 00:10:32,116
while scrolling on a page


358
00:10:32,116 --> 00:10:33,836
without any Lazy Loaded images.


359
00:10:35,416 --> 00:10:36,966
The energy impact has been


360
00:10:36,966 --> 00:10:38,466
reduced and all of the Main


361
00:10:38,466 --> 00:10:39,676
Thread work is paints for


362
00:10:39,676 --> 00:10:40,166
scrolling.


363
00:10:40,636 --> 00:10:41,746
But we need to make sure that


364
00:10:41,746 --> 00:10:43,116
the pages that should be using


365
00:10:43,116 --> 00:10:44,566
Lazy Loaded images are still


366
00:10:44,566 --> 00:10:44,956
working.


367
00:10:46,746 --> 00:10:48,186
Again with the fix in place,


368
00:10:48,416 --> 00:10:50,266
I'll record a new timeline on a


369
00:10:50,266 --> 00:10:51,866
page with a motion mark logo


370
00:10:51,866 --> 00:10:53,286
image at the bottom that should


371
00:10:53,286 --> 00:10:54,336
use the Lazy Loader.


372
00:10:56,126 --> 00:10:56,616
Perfect.


373
00:10:56,826 --> 00:10:58,556
The motion mark image loaded in.


374
00:10:58,846 --> 00:11:00,236
I'm going to scroll to get some


375
00:11:00,236 --> 00:11:01,526
CPU measurements of the new


376
00:11:01,526 --> 00:11:03,186
behavior and click the CPU


377
00:11:03,186 --> 00:11:06,986
timelines to see where we're at.


378
00:11:07,246 --> 00:11:10,046
So we've reduced the timer and


379
00:11:10,046 --> 00:11:11,506
events to just the pages where


380
00:11:11,506 --> 00:11:12,256
it's necessary.


381
00:11:12,586 --> 00:11:13,416
That's great.


382
00:11:14,326 --> 00:11:15,956
But there's still a lot of


383
00:11:15,956 --> 00:11:17,196
entries into script when


384
00:11:17,196 --> 00:11:18,776
scrolling on pages with a Lazy


385
00:11:18,776 --> 00:11:19,546
Loaded image.


386
00:11:20,396 --> 00:11:21,866
There's an API available in


387
00:11:21,866 --> 00:11:23,386
Safari that we can use to take


388
00:11:23,386 --> 00:11:24,746
this solution a step further.


389
00:11:25,286 --> 00:11:26,516
We can replace the Request


390
00:11:26,516 --> 00:11:28,066
Animation Frame implementation


391
00:11:28,186 --> 00:11:29,586
to use Intersection Observer


392
00:11:29,586 --> 00:11:30,236
instead.


393
00:11:31,636 --> 00:11:33,126
Intersection Observer can tell


394
00:11:33,126 --> 00:11:34,556
when an element comes into view,


395
00:11:34,786 --> 00:11:36,156
so you can limit your work to


396
00:11:36,156 --> 00:11:37,306
just when it's visible.


397
00:11:37,546 --> 00:11:38,876
And as soon as it goes out of


398
00:11:38,876 --> 00:11:40,566
view, you can stop the work to


399
00:11:40,566 --> 00:11:42,136
get back to a low CPU power


400
00:11:42,136 --> 00:11:43,336
state and save power.


401
00:11:45,366 --> 00:11:46,276
So with the Intersection


402
00:11:46,276 --> 00:11:47,926
Observer implementation, let's


403
00:11:47,926 --> 00:11:49,646
record another timeline and do


404
00:11:49,646 --> 00:11:50,916
some scrolling to see how this


405
00:11:50,916 --> 00:11:51,966
solution performs.


406
00:11:53,126 --> 00:11:54,306
And as I begin scrolling,


407
00:11:54,566 --> 00:11:55,846
there's just a single entry into


408
00:11:55,846 --> 00:11:56,576
JavaScript.


409
00:11:56,916 --> 00:11:58,166
And for the rest of the time,


410
00:11:58,166 --> 00:11:59,216
it's just painting while I


411
00:11:59,216 --> 00:11:59,626
scroll.


412
00:12:07,046 --> 00:12:09,176
So in the end we went from 16.3%


413
00:12:09,306 --> 00:12:12,266
down to 9.5% average CPU usage


414
00:12:12,266 --> 00:12:13,446
with the Intersection Observer


415
00:12:13,446 --> 00:12:13,906
solution.


416
00:12:14,386 --> 00:12:15,706
Every little bit helps and


417
00:12:15,706 --> 00:12:16,636
that's a really nice


418
00:12:16,636 --> 00:12:17,196
improvement.


419
00:12:18,856 --> 00:12:19,926
So there are lots of ways to


420
00:12:19,926 --> 00:12:21,356
save power in web content.


421
00:12:22,696 --> 00:12:24,546
Use the CPU Usage Timeline to


422
00:12:24,546 --> 00:12:26,186
investigate web content for ways


423
00:12:26,186 --> 00:12:27,786
to improve during interactivity


424
00:12:27,786 --> 00:12:29,076
and when the page is idle.


425
00:12:30,206 --> 00:12:32,286
Remember that reducing CPU usage


426
00:12:32,286 --> 00:12:34,016
saves energy and reduces battery


427
00:12:34,016 --> 00:12:35,016
drain for users.


428
00:12:36,696 --> 00:12:38,696
CSS animations and transitions


429
00:12:38,696 --> 00:12:40,256
can provide dynamic visuals


430
00:12:40,256 --> 00:12:41,576
without the power cost.


431
00:12:41,716 --> 00:12:44,436
And try to avoid doing work


432
00:12:44,436 --> 00:12:45,136
while scrolling.


433
00:12:45,306 --> 00:12:46,656
Use the Intersection Observer


434
00:12:46,656 --> 00:12:47,536
API instead.


435
00:12:48,616 --> 00:12:50,416
Users want an engaging, dynamic


436
00:12:50,416 --> 00:12:52,156
experience with web content, but


437
00:12:52,156 --> 00:12:53,196
the best version of those


438
00:12:53,196 --> 00:12:55,026
experiences use the least amount


439
00:12:55,026 --> 00:12:56,196
of CPU possible.


440
00:12:57,496 --> 00:12:58,216
There are a lot more


441
00:12:58,216 --> 00:12:59,586
power-saving tips for web


442
00:12:59,586 --> 00:13:01,116
development on the WebKit Blog.


443
00:13:01,626 --> 00:13:02,526
Check out the links in the


444
00:13:02,526 --> 00:13:04,426
Resources section associated


445
00:13:04,426 --> 00:13:05,126
with this video.


446
00:13:06,976 --> 00:13:08,306
We hope you'll try using these


447
00:13:08,306 --> 00:13:09,886
tools on your web content and


448
00:13:09,886 --> 00:13:11,586
use the advice in this video as


449
00:13:11,586 --> 00:13:12,926
some starting places for your


450
00:13:12,926 --> 00:13:14,636
investigations on how to make


451
00:13:14,636 --> 00:13:15,756
your web content power


452
00:13:15,756 --> 00:13:17,606
efficient, and join us in


453
00:13:17,606 --> 00:13:19,126
helping the web become more


454
00:13:19,126 --> 00:13:21,076
powerful by using less power.

