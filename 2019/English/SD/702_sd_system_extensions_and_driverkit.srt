1
00:00:01,516 --> 00:00:05,500
[ Music ]


2
00:00:27,516 --> 00:00:33,546
[ Applause ]


3
00:00:34,046 --> 00:00:35,196
>> My name is Joe and later I


4
00:00:35,196 --> 00:00:36,606
will be joined by my colleagues


5
00:00:36,656 --> 00:00:37,766
Simon and Scott.


6
00:00:38,186 --> 00:00:39,726
We're from the Core OS group,


7
00:00:40,116 --> 00:00:41,456
and we'd like to tell you about


8
00:00:41,456 --> 00:00:42,936
some new developments with


9
00:00:42,936 --> 00:00:44,936
kernel extensions and in macOS


10
00:00:44,936 --> 00:00:46,536
10.15 Catalina.


11
00:00:48,776 --> 00:00:51,816
Kernel extensions or kexts are a


12
00:00:51,816 --> 00:00:53,386
technology that's been part of


13
00:00:53,386 --> 00:00:55,276
macOS from the very beginning.


14
00:00:56,526 --> 00:00:58,286
Using kexts, you can build


15
00:00:58,336 --> 00:01:00,336
powerful and innovative apps


16
00:01:00,736 --> 00:01:02,146
that extend the built-in


17
00:01:02,146 --> 00:01:03,926
functionality of the operating


18
00:01:03,926 --> 00:01:04,385
system.


19
00:01:04,906 --> 00:01:07,876
This power to extend the system


20
00:01:08,326 --> 00:01:10,036
is an important part of what


21
00:01:10,036 --> 00:01:13,366
makes the Mac the Mac, but there


22
00:01:13,976 --> 00:01:15,696
are some problems with kernel


23
00:01:15,696 --> 00:01:16,416
extensions.


24
00:01:17,806 --> 00:01:19,656
They can be difficult to develop


25
00:01:19,656 --> 00:01:22,946
and to debug, they can be a risk


26
00:01:22,946 --> 00:01:25,336
to security and privacy on the


27
00:01:25,336 --> 00:01:27,566
machine and they can be a risk


28
00:01:27,566 --> 00:01:28,696
to the reliability of the


29
00:01:28,696 --> 00:01:29,166
system.


30
00:01:30,246 --> 00:01:31,836
It's time for an upgrade.


31
00:01:33,296 --> 00:01:35,566
MacOS Catalina introduces two


32
00:01:35,566 --> 00:01:37,546
new technologies called System


33
00:01:37,546 --> 00:01:39,396
Extensions and DriverKit.


34
00:01:40,596 --> 00:01:43,046
Using them, your apps can extend


35
00:01:43,226 --> 00:01:44,976
the operating system in ways


36
00:01:44,976 --> 00:01:47,146
that are more reliable, more


37
00:01:47,146 --> 00:01:49,926
secure, and easier to develop


38
00:01:50,196 --> 00:01:51,026
than ever before.


39
00:01:51,526 --> 00:01:55,006
Here's what we'll talk about


40
00:01:55,006 --> 00:01:55,426
today.


41
00:01:55,956 --> 00:01:57,616
First, I'll introduce these new


42
00:01:57,616 --> 00:02:00,686
technologies and show you how


43
00:02:00,686 --> 00:02:02,116
they avoid the problems of


44
00:02:02,156 --> 00:02:03,156
kernel extensions.


45
00:02:04,396 --> 00:02:06,656
Then, Simon will come up and


46
00:02:06,656 --> 00:02:08,066
show us how to build driver


47
00:02:08,066 --> 00:02:09,846
extensions using DriverKit,


48
00:02:11,876 --> 00:02:13,666
Scott will show us how to write


49
00:02:13,726 --> 00:02:16,016
and debug a simple USB driver,


50
00:02:17,496 --> 00:02:18,836
and then I'll tell you how to


51
00:02:18,836 --> 00:02:20,436
include system extensions in


52
00:02:20,436 --> 00:02:22,656
your apps.


53
00:02:22,656 --> 00:02:25,006
Let's get started.


54
00:02:25,146 --> 00:02:27,956
System extensions are our first


55
00:02:27,956 --> 00:02:29,386
new technology in MacOS


56
00:02:29,436 --> 00:02:29,916
Catalina.


57
00:02:31,566 --> 00:02:33,176
A system extension is part of


58
00:02:33,176 --> 00:02:34,806
your app that extends the


59
00:02:34,806 --> 00:02:36,416
functionality of the operating


60
00:02:36,416 --> 00:02:38,656
system in ways similar to a


61
00:02:38,656 --> 00:02:40,656
kernel extension but running in


62
00:02:40,656 --> 00:02:43,666
user space outside the kernel.


63
00:02:44,876 --> 00:02:46,746
There are three kinds of system


64
00:02:46,746 --> 00:02:48,176
extensions that you can build in


65
00:02:48,176 --> 00:02:48,756
Catalina.


66
00:02:49,436 --> 00:02:51,146
They are network extensions,


67
00:02:51,736 --> 00:02:54,176
driver extensions, and endpoint


68
00:02:54,176 --> 00:02:55,416
security extensions.


69
00:02:57,316 --> 00:02:58,626
Network extensions are a


70
00:02:58,626 --> 00:03:00,656
replacement for network kernel


71
00:03:00,656 --> 00:03:01,436
extensions.


72
00:03:01,956 --> 00:03:04,796
They can filter and reroute


73
00:03:04,796 --> 00:03:08,086
network traffic or connect to a


74
00:03:08,836 --> 00:03:08,946
VPN.


75
00:03:09,006 --> 00:03:10,516
For more information on network


76
00:03:10,516 --> 00:03:12,356
extensions, there's a section


77
00:03:12,356 --> 00:03:13,786
dedicated to them on Friday


78
00:03:13,786 --> 00:03:14,216
morning.


79
00:03:17,396 --> 00:03:19,926
Endpoint security extensions are


80
00:03:19,926 --> 00:03:22,356
a replacement for kexts that


81
00:03:22,356 --> 00:03:24,196
intercept and monitor security


82
00:03:24,196 --> 00:03:26,416
related events with the kauth


83
00:03:26,416 --> 00:03:27,126
interfaces.


84
00:03:28,106 --> 00:03:29,316
Some of the apps you can build


85
00:03:29,316 --> 00:03:31,356
this way are endpoint detection


86
00:03:31,356 --> 00:03:32,796
and response and data loss


87
00:03:32,796 --> 00:03:33,796
prevention apps.


88
00:03:34,896 --> 00:03:36,176
If you're interested in endpoint


89
00:03:36,176 --> 00:03:38,166
security extensions, please come


90
00:03:38,166 --> 00:03:39,446
to the security labs.


91
00:03:39,966 --> 00:03:41,456
There is one happening right now


92
00:03:41,456 --> 00:03:43,056
and continuing after this talk


93
00:03:43,546 --> 00:03:45,186
and one on Thursday afternoon.


94
00:03:45,776 --> 00:03:50,276
The third type of extension is


95
00:03:50,276 --> 00:03:52,316
driver extensions which are a


96
00:03:52,316 --> 00:03:54,006
replacement for device driver


97
00:03:54,006 --> 00:03:55,436
kexts using IOKit.


98
00:03:56,056 --> 00:03:58,816
In Catalina, you can control


99
00:03:58,936 --> 00:04:01,886
USB, serial, network interface


100
00:04:02,006 --> 00:04:03,696
and human interface devices.


101
00:04:05,536 --> 00:04:07,636
Driver extensions are built with


102
00:04:07,676 --> 00:04:09,686
DriverKit which is our second


103
00:04:09,686 --> 00:04:11,636
new technology in Catalina.


104
00:04:13,056 --> 00:04:17,125
DriverKit is a new SDK with all


105
00:04:17,125 --> 00:04:20,386
new frameworks based on IOKit,


106
00:04:20,466 --> 00:04:22,206
but updated and modernized,


107
00:04:23,596 --> 00:04:25,056
designed for building driver


108
00:04:25,056 --> 00:04:27,746
extensions in user space outside


109
00:04:27,746 --> 00:04:27,976
the kernel.


110
00:04:28,946 --> 00:04:31,876
Now that we've met these new


111
00:04:31,876 --> 00:04:35,546
technologies let's see how they


112
00:04:35,546 --> 00:04:37,206
avoid the problems of kernel


113
00:04:37,206 --> 00:04:37,886
extensions.


114
00:04:37,886 --> 00:04:41,316
There is a phrase I used in both


115
00:04:41,316 --> 00:04:43,536
of those definitions, in user


116
00:04:43,536 --> 00:04:45,496
space outside the kernel.


117
00:04:46,506 --> 00:04:47,536
Why does this matter?


118
00:04:48,866 --> 00:04:50,616
The kernel is a very unforgiving


119
00:04:50,616 --> 00:04:52,376
and difficult environment to


120
00:04:52,376 --> 00:04:53,286
program within.


121
00:04:53,856 --> 00:04:57,306
The kernel is the conductor of


122
00:04:57,406 --> 00:04:58,636
everything that happens on the


123
00:04:58,636 --> 00:05:01,436
machine so it must never stop


124
00:05:01,436 --> 00:05:03,496
running, must never wait for


125
00:05:03,496 --> 00:05:04,946
anything to happen, and must


126
00:05:04,946 --> 00:05:05,866
never crash.


127
00:05:07,266 --> 00:05:09,706
Code in the kernel has to be


128
00:05:09,706 --> 00:05:13,666
fast, has to be predictable, has


129
00:05:13,666 --> 00:05:15,116
to be frugal with its use of


130
00:05:15,116 --> 00:05:17,296
resources like memory and has to


131
00:05:17,296 --> 00:05:18,596
be essentially bug-free.


132
00:05:19,796 --> 00:05:21,286
It's very difficult to write


133
00:05:21,346 --> 00:05:23,006
code that meets all of these


134
00:05:23,066 --> 00:05:23,746
restrictions.


135
00:05:25,736 --> 00:05:27,806
System extensions run in user


136
00:05:27,806 --> 00:05:30,006
space outside the kernel, which


137
00:05:30,006 --> 00:05:31,736
means they run in a comfortable,


138
00:05:31,736 --> 00:05:33,536
modern programming environment.


139
00:05:35,306 --> 00:05:37,076
This makes them easier to


140
00:05:37,076 --> 00:05:40,096
develop than kexts where kernel


141
00:05:40,096 --> 00:05:42,306
code has restrictions on when


142
00:05:42,306 --> 00:05:44,036
and how it can allocate memory


143
00:05:44,036 --> 00:05:45,676
or synchronize between threads.


144
00:05:46,816 --> 00:05:48,226
This means it cannot use most


145
00:05:48,226 --> 00:05:50,016
system frameworks such as


146
00:05:50,016 --> 00:05:51,596
Foundation since they are not


147
00:05:51,596 --> 00:05:52,596
designed to run in this


148
00:05:52,596 --> 00:05:53,136
environment.


149
00:05:54,436 --> 00:05:55,906
The only supported language for


150
00:05:55,906 --> 00:05:59,016
kext development is C and C++.


151
00:06:00,396 --> 00:06:02,026
System extensions on the other


152
00:06:02,026 --> 00:06:03,936
hand have no such restrictions,


153
00:06:04,496 --> 00:06:05,696
which means they can be built


154
00:06:06,056 --> 00:06:08,596
using any framework in the macOS


155
00:06:08,716 --> 00:06:11,986
SDK, and can be written in any


156
00:06:11,986 --> 00:06:12,976
language, including Swift.


157
00:06:13,516 --> 00:06:19,546
[ Applause ]


158
00:06:20,046 --> 00:06:21,096
There is one exception to this.


159
00:06:21,406 --> 00:06:23,186
Driver extensions because of


160
00:06:23,186 --> 00:06:24,536
their close relationship with


161
00:06:24,566 --> 00:06:26,586
hardware still have some


162
00:06:26,586 --> 00:06:27,346
restrictions.


163
00:06:28,516 --> 00:06:29,866
They must use the DriverKit


164
00:06:29,866 --> 00:06:32,016
frameworks and run in a tailored


165
00:06:32,016 --> 00:06:33,526
runtime, which isolates them


166
00:06:33,566 --> 00:06:36,516
from the rest of the system.


167
00:06:36,706 --> 00:06:38,846
Driver extensions must be


168
00:06:38,846 --> 00:06:40,606
written in C or C++.


169
00:06:40,686 --> 00:06:42,976
However, the default is C++ 17.


170
00:06:43,516 --> 00:06:48,546
[ Applause ]


171
00:06:49,046 --> 00:06:49,916
System extensions are also


172
00:06:49,916 --> 00:06:51,576
easier to debug than kernel


173
00:06:51,576 --> 00:06:52,286
extensions.


174
00:06:53,206 --> 00:06:54,816
Attaching a debugger to the


175
00:06:54,816 --> 00:06:56,786
kernel halts the kernel and the


176
00:06:56,786 --> 00:06:59,156
entire machine, including the


177
00:06:59,156 --> 00:06:59,656
debugger.


178
00:07:00,616 --> 00:07:01,946
This means you usually need a


179
00:07:01,946 --> 00:07:04,106
second machine to debug and you


180
00:07:04,106 --> 00:07:05,376
may need special cables or


181
00:07:05,376 --> 00:07:07,066
network configuration to connect


182
00:07:07,066 --> 00:07:07,776
the machines.


183
00:07:08,316 --> 00:07:11,246
The cycle of building, testing,


184
00:07:11,416 --> 00:07:13,866
and debugging a kext can be slow


185
00:07:13,976 --> 00:07:15,636
because any crash in the kext


186
00:07:15,636 --> 00:07:17,046
means the whole system has to


187
00:07:17,046 --> 00:07:21,046
restart and the kernel debugger


188
00:07:21,046 --> 00:07:22,126
has limited support.


189
00:07:22,466 --> 00:07:23,436
It cannot do things like


190
00:07:23,436 --> 00:07:25,126
evaluate expressions or print


191
00:07:25,126 --> 00:07:26,386
the value of objects.


192
00:07:26,916 --> 00:07:30,176
System extensions on the other


193
00:07:30,176 --> 00:07:34,426
hand can be debugged and the


194
00:07:34,676 --> 00:07:37,866
kernel keeps running; there's no


195
00:07:37,866 --> 00:07:39,566
need to restart if an extension


196
00:07:39,566 --> 00:07:40,196
crashes.


197
00:07:41,326 --> 00:07:43,286
You can build, test, and debug


198
00:07:43,506 --> 00:07:45,686
all on one machine with full


199
00:07:45,686 --> 00:07:48,666
debugger support, but the


200
00:07:49,106 --> 00:07:51,076
biggest improvements of system


201
00:07:51,076 --> 00:07:52,726
extensions over kernel


202
00:07:52,726 --> 00:07:54,886
extensions are in the areas of


203
00:07:54,886 --> 00:07:57,136
security, privacy, and


204
00:07:57,136 --> 00:07:57,796
reliability.


205
00:07:59,996 --> 00:08:03,136
The kernel has many jobs but one


206
00:08:03,136 --> 00:08:04,686
of the most important is to


207
00:08:04,686 --> 00:08:07,226
define and enforce the rules of


208
00:08:07,226 --> 00:08:08,756
the system security policy.


209
00:08:09,756 --> 00:08:11,666
The kernel separates apps from


210
00:08:11,666 --> 00:08:13,296
each other and from direct


211
00:08:13,296 --> 00:08:15,646
access to hardware; then, it


212
00:08:15,646 --> 00:08:17,146
allows them to share data and


213
00:08:17,146 --> 00:08:19,186
use system services following


214
00:08:19,186 --> 00:08:20,666
the rules of the security


215
00:08:20,666 --> 00:08:21,156
policy.


216
00:08:21,156 --> 00:08:24,926
When a kernel extension loads,


217
00:08:25,326 --> 00:08:27,276
it becomes part of the kernel.


218
00:08:28,386 --> 00:08:30,176
It has access to everything on


219
00:08:30,176 --> 00:08:30,676
the machine.


220
00:08:31,556 --> 00:08:33,145
This is where a kext's power


221
00:08:33,145 --> 00:08:36,285
comes from but it can also be a


222
00:08:36,876 --> 00:08:37,056
danger.


223
00:08:37,196 --> 00:08:39,376
Because the kernel extension is


224
00:08:39,376 --> 00:08:40,905
part of the kernel, which makes


225
00:08:40,905 --> 00:08:43,416
the security rules, it is above


226
00:08:43,416 --> 00:08:44,196
the rules.


227
00:08:45,936 --> 00:08:48,056
If a kext has a bug that allows


228
00:08:48,056 --> 00:08:50,886
it to be compromised, it can


229
00:08:50,886 --> 00:08:52,606
take over the entire machine


230
00:08:53,646 --> 00:08:55,066
doing things its developers


231
00:08:55,066 --> 00:08:57,036
never intended and its users


232
00:08:57,036 --> 00:08:57,666
don't want.


233
00:08:58,406 --> 00:09:00,196
There are no security rules that


234
00:09:00,196 --> 00:09:00,966
can restrain it.


235
00:09:02,116 --> 00:09:03,656
This means that any bug in a


236
00:09:03,656 --> 00:09:06,086
kext can be a critical security


237
00:09:06,086 --> 00:09:06,486
problem.


238
00:09:07,026 --> 00:09:10,916
Any bug in a kext can also be


239
00:09:11,016 --> 00:09:15,336
a-- can also be a, what's


240
00:09:15,336 --> 00:09:15,716
happening?


241
00:09:15,716 --> 00:09:16,646
Where are my slides?


242
00:09:16,646 --> 00:09:19,086
[Laughter] Any bug in a kext can


243
00:09:19,086 --> 00:09:21,686
also be a critical reliability


244
00:09:21,686 --> 00:09:21,976
problem.


245
00:09:22,516 --> 00:09:26,596
[ Applause ]


246
00:09:27,096 --> 00:09:28,596
Because the kernel does not just


247
00:09:28,596 --> 00:09:29,086
crash.


248
00:09:29,136 --> 00:09:30,866
It panics and the entire machine


249
00:09:30,866 --> 00:09:31,726
has to restart.


250
00:09:32,406 --> 00:09:34,336
If you're a kext developer,


251
00:09:34,336 --> 00:09:35,916
you've surely seen this dialogue


252
00:09:35,916 --> 00:09:38,476
a lot and unfortunately so have


253
00:09:38,476 --> 00:09:39,676
too many of our users.


254
00:09:40,226 --> 00:09:42,646
Let's see how the picture


255
00:09:42,646 --> 00:09:44,366
changes with system extensions.


256
00:09:45,626 --> 00:09:47,796
A system extension runs in user


257
00:09:47,796 --> 00:09:48,266
space.


258
00:09:48,876 --> 00:09:50,886
Like other apps, it has to


259
00:09:50,886 --> 00:09:52,276
follow the rules of the system


260
00:09:52,276 --> 00:09:53,286
security policy.


261
00:09:54,236 --> 00:09:55,966
Unlike other apps, system


262
00:09:55,966 --> 00:09:57,656
extensions are granted special


263
00:09:57,656 --> 00:09:59,586
privileges to do special jobs.


264
00:10:00,616 --> 00:10:02,066
For example, they may have


265
00:10:02,066 --> 00:10:03,216
direct access to their


266
00:10:03,216 --> 00:10:05,266
associated hardware devices or


267
00:10:05,266 --> 00:10:07,196
use special APIs to communicate


268
00:10:07,196 --> 00:10:08,746
directly with kernel systems.


269
00:10:10,196 --> 00:10:11,836
If a system extension crashes,


270
00:10:12,506 --> 00:10:14,126
the rest of the system and apps


271
00:10:14,126 --> 00:10:19,046
are unaffected and keep running.


272
00:10:19,196 --> 00:10:21,396
For all these reasons, we think


273
00:10:21,396 --> 00:10:23,396
that system extensions are a big


274
00:10:23,396 --> 00:10:24,946
step forward for the Mac


275
00:10:24,946 --> 00:10:25,476
platform.


276
00:10:26,056 --> 00:10:28,706
In fact, we think there's such


277
00:10:28,706 --> 00:10:30,396
an improvement that we recommend


278
00:10:30,396 --> 00:10:31,906
you adopt them immediately.


279
00:10:32,516 --> 00:10:35,216
As Sebastian said in the state


280
00:10:35,216 --> 00:10:37,496
of the union yesterday, we are


281
00:10:37,496 --> 00:10:39,006
beginning the process of


282
00:10:39,046 --> 00:10:40,676
deprecating kernel extensions.


283
00:10:41,406 --> 00:10:43,746
MacOS 10.15 Catalina will be the


284
00:10:43,746 --> 00:10:45,936
last release to fully support


285
00:10:45,936 --> 00:10:46,646
kernel extensions without


286
00:10:46,646 --> 00:10:46,976
compromises.


287
00:10:47,516 --> 00:10:52,546
[ Applause ]


288
00:10:53,046 --> 00:10:54,436
Specifically, for the


289
00:10:54,436 --> 00:10:56,366
capabilities supported by system


290
00:10:56,366 --> 00:10:57,786
extensions and the device


291
00:10:57,786 --> 00:10:59,516
families supported by DriverKit,


292
00:11:00,136 --> 00:11:01,726
using a kernel extension to do


293
00:11:01,726 --> 00:11:03,996
that same job is now deprecated


294
00:11:04,816 --> 00:11:06,516
and a future release of macOS


295
00:11:06,516 --> 00:11:08,316
will not load kernel extensions


296
00:11:08,316 --> 00:11:09,336
of these kinds.


297
00:11:09,876 --> 00:11:13,816
In future releases, we will add


298
00:11:13,816 --> 00:11:15,676
more kinds of system extensions


299
00:11:15,926 --> 00:11:17,266
and more device families to


300
00:11:17,266 --> 00:11:17,886
DriverKit.


301
00:11:19,056 --> 00:11:21,026
In turn, kernel extensions of


302
00:11:21,026 --> 00:11:22,846
those kinds will also be


303
00:11:22,846 --> 00:11:23,546
deprecated.


304
00:11:25,506 --> 00:11:29,546
So that's a brief introduction


305
00:11:29,546 --> 00:11:30,846
to system extensions.


306
00:11:32,216 --> 00:11:34,046
They avoid the difficulties of


307
00:11:34,046 --> 00:11:35,896
kernel programming by running in


308
00:11:35,896 --> 00:11:37,826
user space, which lets your apps


309
00:11:37,826 --> 00:11:39,756
extend the system in ways that


310
00:11:39,756 --> 00:11:42,676
are easier to develop and debug,


311
00:11:43,366 --> 00:11:46,336
that protect the security and


312
00:11:46,336 --> 00:11:49,256
reliability of our users' data,


313
00:11:49,766 --> 00:11:53,326
and now I'd like to turn it over


314
00:11:53,326 --> 00:11:54,796
to Simon who will show you how


315
00:11:54,796 --> 00:11:56,736
to build driver extensions using


316
00:11:56,736 --> 00:11:57,976
the new DriverKit runtime.


317
00:11:58,516 --> 00:12:04,876
[ Applause ]


318
00:12:05,376 --> 00:12:06,096
>> Thanks, Joe.


319
00:12:06,276 --> 00:12:10,496
As Joe just said, a driver


320
00:12:10,496 --> 00:12:11,766
extension is a new type of


321
00:12:11,766 --> 00:12:13,906
system extension that controls a


322
00:12:13,906 --> 00:12:15,846
hardware device and makes its


323
00:12:15,846 --> 00:12:17,236
services available across the


324
00:12:17,236 --> 00:12:17,866
whole OS.


325
00:12:19,216 --> 00:12:20,166
We call his new driver


326
00:12:20,166 --> 00:12:21,836
extensions a dext.


327
00:12:23,236 --> 00:12:24,216
Our goal is to make the


328
00:12:24,216 --> 00:12:25,536
transition from a kernel


329
00:12:25,536 --> 00:12:27,546
extension to a driver extension


330
00:12:27,976 --> 00:12:28,986
as easy as possible.


331
00:12:30,786 --> 00:12:31,776
To show you how driver


332
00:12:31,776 --> 00:12:33,316
extensions work and how you can


333
00:12:33,316 --> 00:12:34,846
build your own or transition


334
00:12:34,846 --> 00:12:36,886
from a kext, we're going to talk


335
00:12:36,886 --> 00:12:37,756
about 4 things.


336
00:12:39,166 --> 00:12:41,026
We're going to talk about their


337
00:12:41,026 --> 00:12:44,216
lifecycle and how they match in


338
00:12:44,216 --> 00:12:52,626
staff and how they compete with


339
00:12:52,656 --> 00:12:53,306
kext.


340
00:12:53,736 --> 00:12:55,106
And we're going to talk about


341
00:12:55,106 --> 00:12:56,536
how to build them with the new


342
00:12:56,536 --> 00:12:59,356
DriverKit SDK, and we're going


343
00:12:59,356 --> 00:13:00,586
to go over some security


344
00:13:00,586 --> 00:13:02,136
features such as entitlements.


345
00:13:02,876 --> 00:13:04,976
And finally we'll talk about


346
00:13:04,976 --> 00:13:06,306
some compatibility questions


347
00:13:06,306 --> 00:13:07,646
about how you can deploy an app


348
00:13:08,216 --> 00:13:11,000
to macOS Catalina and Mojave.


349
00:13:16,076 --> 00:13:16,766
So let's talk about the


350
00:13:16,766 --> 00:13:18,000
lifecycle of a kext.


351
00:13:22,556 --> 00:13:23,676
Let's look at the process that


352
00:13:23,676 --> 00:13:24,886
happens when a device appears


353
00:13:24,886 --> 00:13:26,116
that has a driver extension.


354
00:13:27,046 --> 00:13:28,436
We start with IOKit Matching


355
00:13:28,436 --> 00:13:30,086
creating a kernel service to


356
00:13:30,086 --> 00:13:31,236
represent your service.


357
00:13:31,896 --> 00:13:32,876
This is written by Apple.


358
00:13:33,556 --> 00:13:38,386
We then staff a process hosting


359
00:13:38,386 --> 00:13:40,066
a driver with DriverKit class


360
00:13:40,066 --> 00:13:43,526
instantiated and the process


361
00:13:43,526 --> 00:13:46,016
also has proxy objects for any


362
00:13:46,016 --> 00:13:48,116
services it uses such as its


363
00:13:48,116 --> 00:13:48,586
provider.


364
00:13:49,936 --> 00:13:52,366
This device is using a USB


365
00:13:52,366 --> 00:13:53,116
device.


366
00:13:53,626 --> 00:13:55,266
This device is using a USB


367
00:13:55,266 --> 00:13:57,326
device so it has a proxy object


368
00:13:57,326 --> 00:13:58,356
to call that represents the


369
00:13:58,356 --> 00:13:59,126
kernel device.


370
00:13:59,726 --> 00:14:02,286
This means that DriverKit


371
00:14:02,796 --> 00:14:04,346
drivers appears to kernel


372
00:14:04,346 --> 00:14:06,366
extensions and can compete in


373
00:14:06,366 --> 00:14:07,776
matching with kernel drivers.


374
00:14:09,396 --> 00:14:10,606
You can see them in the registry


375
00:14:10,986 --> 00:14:12,666
with tools like IOReg and you


376
00:14:12,666 --> 00:14:14,776
can use the IOKit framework APIs


377
00:14:15,466 --> 00:14:16,276
with them.


378
00:14:17,676 --> 00:14:19,456
Since DriverKit drivers are


379
00:14:19,456 --> 00:14:21,056
separated from the kernel and


380
00:14:21,056 --> 00:14:23,086
from each other another device


381
00:14:23,086 --> 00:14:24,436
will have its own process and


382
00:14:24,436 --> 00:14:28,746
another instance of the driver.


383
00:14:28,906 --> 00:14:31,816
In macOS Catalina, Apple has


384
00:14:31,816 --> 00:14:33,086
started to move several of its


385
00:14:33,086 --> 00:14:34,176
own drivers to driver


386
00:14:34,176 --> 00:14:34,746
extensions.


387
00:14:36,046 --> 00:14:37,376
Here you can see a process that


388
00:14:37,376 --> 00:14:39,016
is hosting a USB networking


389
00:14:39,016 --> 00:14:41,496
device which is visible in the


390
00:14:41,496 --> 00:14:43,216
registry as a normal Ethernet


391
00:14:43,216 --> 00:14:47,366
device to the rest of the OS.


392
00:14:47,366 --> 00:14:48,446
And you can also see some other


393
00:14:48,446 --> 00:14:49,856
processes in the registry


394
00:14:50,416 --> 00:14:52,006
hosting several HID and serial


395
00:14:52,006 --> 00:14:52,536
drivers.


396
00:14:55,496 --> 00:14:56,546
So now we're going to talk about


397
00:14:56,546 --> 00:14:57,996
building your driver extension


398
00:14:58,416 --> 00:15:00,486
with the DriverKit SDK.


399
00:15:02,536 --> 00:15:03,946
We wanted to make building


400
00:15:03,946 --> 00:15:05,246
driver extensions an easy


401
00:15:05,246 --> 00:15:06,626
transition for those of you who


402
00:15:06,626 --> 00:15:08,346
currently build kexts so we


403
00:15:08,756 --> 00:15:10,886
started with the IOKit C++ APIs


404
00:15:10,886 --> 00:15:12,916
that you are familiar with.


405
00:15:14,036 --> 00:15:15,716
The DriverKit APIs are an


406
00:15:15,716 --> 00:15:17,526
extension of the IOKit APIs to


407
00:15:17,526 --> 00:15:19,556
user space and we have collected


408
00:15:19,556 --> 00:15:21,036
them into a new DriverKit SDK


409
00:15:21,036 --> 00:15:23,216
that is separate to the macOS


410
00:15:23,366 --> 00:15:23,596
SDK.


411
00:15:25,656 --> 00:15:27,936
This SDK has a limited API


412
00:15:28,136 --> 00:15:29,676
surface for reliability and


413
00:15:29,676 --> 00:15:32,526
security and there is no direct


414
00:15:32,526 --> 00:15:34,026
access to the file system,


415
00:15:34,566 --> 00:15:36,036
networking, or mock messaging.


416
00:15:36,666 --> 00:15:39,786
This allows Apple to tailor the


417
00:15:39,786 --> 00:15:41,556
user space process to running


418
00:15:41,556 --> 00:15:44,716
drivers and can give it an


419
00:15:44,716 --> 00:15:46,166
elevated priority and increased


420
00:15:46,166 --> 00:15:46,796
capabilities.


421
00:15:49,456 --> 00:15:50,496
So let's talk about some of the


422
00:15:50,496 --> 00:15:52,986
classes in the DriverKit SDK.


423
00:15:54,416 --> 00:15:56,176
First, the iOS service class


424
00:15:56,176 --> 00:15:57,636
exists in DriverKit and is very


425
00:15:57,636 --> 00:15:59,866
similar to the IOKit class.


426
00:16:01,076 --> 00:16:02,146
There are also


427
00:16:02,146 --> 00:16:03,336
IOMemoryDescriptor and


428
00:16:03,336 --> 00:16:04,976
IOBufferMemoryDescriptor classes


429
00:16:04,976 --> 00:16:06,276
available that are, again, very


430
00:16:06,276 --> 00:16:10,006
similar to IOKit.


431
00:16:10,146 --> 00:16:11,376
We also have replacements for


432
00:16:11,376 --> 00:16:12,776
the IOWorkLoop and event source


433
00:16:12,776 --> 00:16:13,866
classes in IOKit.


434
00:16:14,666 --> 00:16:18,036
And finally there's a new class


435
00:16:18,036 --> 00:16:20,236
called OSAction that is required


436
00:16:20,236 --> 00:16:21,456
to represent a C function


437
00:16:21,456 --> 00:16:21,806
pointer.


438
00:16:25,206 --> 00:16:27,106
So let's take a closer look at


439
00:16:27,106 --> 00:16:30,546
some of these classes.


440
00:16:30,636 --> 00:16:33,376
The IOService class has the


441
00:16:33,476 --> 00:16:35,366
lifecycle APIs from IOKit like


442
00:16:35,366 --> 00:16:36,676
start, stop, and terminate.


443
00:16:38,076 --> 00:16:42,596
For synchronization, every


444
00:16:42,746 --> 00:16:44,776
IOService has a default dispatch


445
00:16:44,776 --> 00:16:47,016
queue and all methods are


446
00:16:47,016 --> 00:16:48,296
invoked on a queue including


447
00:16:48,296 --> 00:16:49,346
interrupts, timers, and


448
00:16:49,346 --> 00:16:50,046
completions.


449
00:16:51,356 --> 00:16:53,686
IODispatchQueue is built on


450
00:16:53,736 --> 00:16:55,426
Grand Central dispatch code and


451
00:16:56,126 --> 00:16:57,076
there's a special vision


452
00:16:57,076 --> 00:16:58,216
optimized for running in the


453
00:16:58,216 --> 00:16:59,326
restricted DriverKit


454
00:16:59,326 --> 00:16:59,896
environment.


455
00:17:01,356 --> 00:17:03,046
Drivers do have control over


456
00:17:03,046 --> 00:17:05,236
their queues and which methods


457
00:17:05,236 --> 00:17:06,756
are invoked on which queues for


458
00:17:06,756 --> 00:17:08,246
advanced use.


459
00:17:10,556 --> 00:17:12,826
The event APIs are similar to


460
00:17:12,826 --> 00:17:14,266
the IOWorkLoop model in IOKit


461
00:17:14,266 --> 00:17:16,776
but are now based on the Grand


462
00:17:16,776 --> 00:17:19,626
Central dispatch APIs.


463
00:17:20,516 --> 00:17:22,215
With queues and dispatch sources


464
00:17:22,215 --> 00:17:24,836
for interrupts and timers the


465
00:17:24,836 --> 00:17:26,226
block API is replaced


466
00:17:26,401 --> 00:17:28,401
[inaudible].


467
00:17:28,576 --> 00:17:30,276
GCD provides synchronization


468
00:17:30,276 --> 00:17:32,126
primitives that are easy to use


469
00:17:32,126 --> 00:17:34,236
and very likely familiar to you.


470
00:17:35,536 --> 00:17:36,636
There is also an


471
00:17:36,636 --> 00:17:38,496
IOSharedDataQueueDispatchSource


472
00:17:38,496 --> 00:17:40,286
class that provides a shared


473
00:17:40,286 --> 00:17:43,526
memory ring buffer for fast--


474
00:17:43,526 --> 00:17:44,606
for low overhead message


475
00:17:44,606 --> 00:17:44,966
passing.


476
00:17:45,266 --> 00:17:49,046
The last class we'll talk about


477
00:17:49,046 --> 00:17:52,116
is OSAction, which encapsulates


478
00:17:52,116 --> 00:17:53,396
what would be a callback in the


479
00:17:53,396 --> 00:17:55,466
IOKit APIs.


480
00:17:56,056 --> 00:17:58,686
They are always asynchronous and


481
00:17:58,686 --> 00:18:00,126
they hold the callback client


482
00:18:00,126 --> 00:18:03,656
state privately, and they allow


483
00:18:03,656 --> 00:18:05,076
the callback to be defined with


484
00:18:05,076 --> 00:18:06,836
arbitrary arguments and with


485
00:18:06,836 --> 00:18:08,506
type checking at compile and


486
00:18:09,236 --> 00:18:09,426
runtime.


487
00:18:10,536 --> 00:18:12,016
So that was some of the classes


488
00:18:12,016 --> 00:18:12,626
in DriverKit.


489
00:18:12,856 --> 00:18:13,886
Let's look at how we define


490
00:18:13,886 --> 00:18:15,536
these classes, which is a little


491
00:18:15,536 --> 00:18:17,226
different from IOKit.


492
00:18:19,036 --> 00:18:20,476
DriverKit interfaces that are


493
00:18:20,476 --> 00:18:22,146
described with a new file type


494
00:18:22,146 --> 00:18:25,366
with the .iig extension and they


495
00:18:25,366 --> 00:18:26,876
are processed by a tool also


496
00:18:26,876 --> 00:18:28,566
called iig.


497
00:18:29,336 --> 00:18:31,836
The iig file is a class


498
00:18:31,866 --> 00:18:33,456
definition that is compiled by


499
00:18:33,456 --> 00:18:35,576
[inaudible] and can import C and


500
00:18:35,576 --> 00:18:38,476
C++ headers for common types and


501
00:18:38,476 --> 00:18:41,826
structures, but it does have


502
00:18:41,826 --> 00:18:43,046
some extra attributes to its


503
00:18:43,046 --> 00:18:44,516
class and method definitions


504
00:18:45,076 --> 00:18:47,496
that allow it to be used-- to be


505
00:18:47,496 --> 00:18:48,796
used for calling from separate


506
00:18:48,796 --> 00:18:49,526
address bases.


507
00:18:50,006 --> 00:18:54,526
Here, you can see a basic class


508
00:18:54,526 --> 00:18:55,826
definition that looks mostly


509
00:18:55,826 --> 00:18:57,846
normal but it has some extra


510
00:18:57,846 --> 00:18:59,776
attributes such as kernel on the


511
00:18:59,776 --> 00:19:01,196
class, which means the class is


512
00:19:01,196 --> 00:19:03,976
defined in the kernel and local


513
00:19:03,976 --> 00:19:05,506
on some method declarations


514
00:19:05,886 --> 00:19:06,766
which means the method is


515
00:19:06,766 --> 00:19:10,526
implemented in a user driver.


516
00:19:11,296 --> 00:19:12,476
Some of the families that are


517
00:19:12,476 --> 00:19:14,496
available in the macOS Catalina


518
00:19:14,496 --> 00:19:16,756
developer preview today are


519
00:19:16,756 --> 00:19:18,316
NetworkingDriverKit for creating


520
00:19:18,316 --> 00:19:21,566
network interfaces, HIDDriverKit


521
00:19:21,566 --> 00:19:23,096
for creating HID devices,


522
00:19:25,326 --> 00:19:27,826
USBSerialDriverKit to make a USB


523
00:19:27,966 --> 00:19:30,046
serial device available to the


524
00:19:30,796 --> 00:19:33,506
OS, and USBDriverKit to make use


525
00:19:33,506 --> 00:19:35,166
of USB device providers in your


526
00:19:35,166 --> 00:19:35,656
drivers.


527
00:19:36,216 --> 00:19:38,716
Shortly, Scott will be


528
00:19:38,716 --> 00:19:40,506
demonstrating what a USB device


529
00:19:41,026 --> 00:19:42,406
support looks like with


530
00:19:42,406 --> 00:19:42,996
USBDriverKit.


531
00:19:42,996 --> 00:19:47,196
So now we're going to talk about


532
00:19:47,196 --> 00:19:48,866
some security aspects of


533
00:19:49,076 --> 00:19:50,676
developing driver extensions.


534
00:19:53,486 --> 00:19:55,696
There are a few types of


535
00:19:55,696 --> 00:19:56,806
entitlement that your driver


536
00:19:56,806 --> 00:19:58,126
extension will need to obtain.


537
00:19:59,466 --> 00:20:00,826
There's one for all driver


538
00:20:00,826 --> 00:20:03,376
extensions and there's one to


539
00:20:03,376 --> 00:20:05,166
take control of a device called


540
00:20:05,166 --> 00:20:07,266
the transport entitlement, which


541
00:20:07,266 --> 00:20:08,306
is specific to the kind of


542
00:20:08,346 --> 00:20:08,826
device.


543
00:20:09,436 --> 00:20:12,286
And there is also a family


544
00:20:12,286 --> 00:20:13,686
entitlement that is required to


545
00:20:13,686 --> 00:20:15,296
make available a service into


546
00:20:15,296 --> 00:20:16,626
the OS.


547
00:20:17,286 --> 00:20:18,716
And Joe will talk later in the


548
00:20:18,776 --> 00:20:20,196
session about code signing and


549
00:20:20,196 --> 00:20:21,266
the approval process for


550
00:20:21,266 --> 00:20:22,586
obtaining these entitlements.


551
00:20:25,966 --> 00:20:27,946
Now we'll have a quick word on


552
00:20:27,946 --> 00:20:29,176
shipping products that work on


553
00:20:29,176 --> 00:20:30,766
older versions of macOS.


554
00:20:31,946 --> 00:20:34,746
Shipping a product for both


555
00:20:34,746 --> 00:20:36,196
macOS Catalina and early


556
00:20:36,196 --> 00:20:38,246
releases will require you to


557
00:20:38,246 --> 00:20:40,326
install a kernel extension for


558
00:20:40,326 --> 00:20:42,286
older releases but use the


559
00:20:42,286 --> 00:20:43,966
system extensions framework and


560
00:20:43,966 --> 00:20:45,856
provide a driver extension on


561
00:20:45,856 --> 00:20:46,846
macOS Catalina.


562
00:20:47,526 --> 00:20:50,366
So, now, Scott will be


563
00:20:50,366 --> 00:20:51,746
demonstrating how to make use of


564
00:20:51,746 --> 00:20:53,586
the new USB DriverKit framework.


565
00:20:54,576 --> 00:20:54,976
Thanks, Scott.


566
00:20:55,516 --> 00:21:02,836
[ Applause ]


567
00:21:03,336 --> 00:21:03,856
Thanks, Simon.


568
00:21:04,176 --> 00:21:05,606
So today I'm going to show you


569
00:21:05,606 --> 00:21:07,886
how to build a simple USB driver


570
00:21:07,886 --> 00:21:08,846
that reads data from an


571
00:21:08,846 --> 00:21:10,636
interrupt endpoint using the new


572
00:21:10,636 --> 00:21:12,506
USB DriverKit framework.


573
00:21:12,806 --> 00:21:14,266
We'll briefly go over how to


574
00:21:14,266 --> 00:21:15,886
create a new project in Xcode


575
00:21:15,886 --> 00:21:17,116
using the DriverKit template.


576
00:21:17,866 --> 00:21:19,126
After that, we'll take a look at


577
00:21:19,126 --> 00:21:20,456
a kernel class versus a


578
00:21:20,456 --> 00:21:21,406
DriverKit class.


579
00:21:22,266 --> 00:21:23,306
Then, next, I'll go into the


580
00:21:23,306 --> 00:21:24,656
details of the implementation in


581
00:21:24,656 --> 00:21:25,456
DriverKit.


582
00:21:25,806 --> 00:21:27,056
And finally I'll give a short


583
00:21:27,056 --> 00:21:28,536
demonstration of the driver in


584
00:21:28,536 --> 00:21:29,816
action and how you can debug


585
00:21:29,816 --> 00:21:31,476
your dext live with LLGB.


586
00:21:34,586 --> 00:21:36,266
Creating a new DriverKit project


587
00:21:36,266 --> 00:21:38,046
with Xcode is as simple as


588
00:21:38,046 --> 00:21:39,226
selecting the proper template


589
00:21:39,226 --> 00:21:40,866
during Xcode's new project


590
00:21:40,866 --> 00:21:41,326
workflow.


591
00:21:42,006 --> 00:21:43,616
Once completed, Xcode will have


592
00:21:43,616 --> 00:21:44,806
auto generated a few files to


593
00:21:44,806 --> 00:21:45,366
help you begin.


594
00:21:45,916 --> 00:21:49,396
The generator project includes


595
00:21:49,396 --> 00:21:50,446
the standard files needed to


596
00:21:50,446 --> 00:21:51,376
successfully build.


597
00:21:51,376 --> 00:21:53,806
As with the kernel extension,


598
00:21:53,906 --> 00:21:55,486
the project includes the C++


599
00:21:55,486 --> 00:21:57,096
implementation, entitlements,


600
00:21:57,096 --> 00:21:58,156
and an info.plist.


601
00:21:59,356 --> 00:22:01,566
In addition to those, Xcode has


602
00:22:01,566 --> 00:22:03,586
also generated the iig file that


603
00:22:03,586 --> 00:22:04,776
Simon mentioned earlier.


604
00:22:05,596 --> 00:22:06,696
This file contains the class


605
00:22:06,746 --> 00:22:08,296
definition for your driver.


606
00:22:09,516 --> 00:22:10,486
So let's take a look at the


607
00:22:10,486 --> 00:22:12,476
class definition for my user USB


608
00:22:12,476 --> 00:22:14,326
interface driver.


609
00:22:15,316 --> 00:22:17,406
You can see how this looks very


610
00:22:17,406 --> 00:22:18,966
similar to a kernel driver.


611
00:22:19,606 --> 00:22:21,506
For example, the same public


612
00:22:21,506 --> 00:22:22,966
IOKit lifecycle method, start


613
00:22:22,966 --> 00:22:24,236
and stop, exist in driver kit


614
00:22:24,236 --> 00:22:25,276
but have been capitalized.


615
00:22:26,466 --> 00:22:28,346
That said, there are a few small


616
00:22:28,346 --> 00:22:29,446
but important differences.


617
00:22:31,236 --> 00:22:32,836
First, the DriverKit class


618
00:22:32,836 --> 00:22:34,246
requires a different callback


619
00:22:34,246 --> 00:22:35,426
with an additional attribute.


620
00:22:35,896 --> 00:22:37,736
This attribute indicates that


621
00:22:37,796 --> 00:22:38,836
this method conforms to the


622
00:22:38,836 --> 00:22:40,766
callback type defined by the


623
00:22:40,766 --> 00:22:42,256
IOUSBHostPipe object and


624
00:22:42,256 --> 00:22:44,086
enforces compile time type


625
00:22:44,126 --> 00:22:44,476
checking.


626
00:22:45,306 --> 00:22:47,326
Second, there are no instance


627
00:22:47,326 --> 00:22:48,496
variables declared in a


628
00:22:48,496 --> 00:22:49,476
DriverKit class.


629
00:22:50,306 --> 00:22:52,276
This is because all instance


630
00:22:52,276 --> 00:22:53,766
variables must be allocated by


631
00:22:53,766 --> 00:22:54,796
the driver during


632
00:22:54,796 --> 00:22:55,566
initialization.


633
00:22:56,126 --> 00:22:57,326
So let's take a look at how


634
00:22:57,326 --> 00:22:59,006
that's done for my user USB


635
00:22:59,006 --> 00:23:00,586
interface driver.


636
00:23:01,516 --> 00:23:03,356
First you need to declare a


637
00:23:03,356 --> 00:23:04,926
structure to hold all of your


638
00:23:04,926 --> 00:23:05,646
instance variables.


639
00:23:06,406 --> 00:23:07,536
All instance variables that


640
00:23:07,536 --> 00:23:08,986
would have previously been part


641
00:23:08,986 --> 00:23:10,396
of your kernel class should be


642
00:23:10,396 --> 00:23:11,286
part of this structure.


643
00:23:12,146 --> 00:23:13,586
For this class we have pointers


644
00:23:13,586 --> 00:23:15,076
to the same USB kernel types


645
00:23:15,556 --> 00:23:17,606
that a kext would such as an


646
00:23:17,606 --> 00:23:20,786
ISBHostInterface provider, an


647
00:23:20,846 --> 00:23:22,286
ISBHostPipe object for


648
00:23:22,286 --> 00:23:22,886
performing IO.


649
00:23:22,886 --> 00:23:25,566
And there's also an OSAction


650
00:23:25,566 --> 00:23:26,666
object that will be used to


651
00:23:26,666 --> 00:23:27,836
encapsulate the callback for


652
00:23:27,836 --> 00:23:28,686
asynchronous IO.


653
00:23:29,266 --> 00:23:31,596
Then you simply need to allocate


654
00:23:31,596 --> 00:23:32,696
the structure during your init


655
00:23:32,696 --> 00:23:33,066
routine.


656
00:23:33,706 --> 00:23:37,026
And here's the init routine for


657
00:23:37,026 --> 00:23:39,006
my user USB interface driver.


658
00:23:39,506 --> 00:23:41,116
It calls an init on the


659
00:23:41,116 --> 00:23:42,256
superclass in the same way a


660
00:23:42,256 --> 00:23:44,046
kext would and then it allocates


661
00:23:44,046 --> 00:23:44,966
the ivar structure.


662
00:23:46,306 --> 00:23:48,036
It should be noted that the


663
00:23:48,036 --> 00:23:49,606
superclass defines an ivars


664
00:23:50,126 --> 00:23:51,636
member that must be used to


665
00:23:51,636 --> 00:23:52,596
assign the result of the


666
00:23:52,596 --> 00:23:53,196
allocation.


667
00:23:54,216 --> 00:23:56,006
So next we'll take a look at the


668
00:23:56,006 --> 00:23:57,726
implementation of Start.


669
00:23:58,596 --> 00:24:00,706
This portion of Start is


670
00:24:00,706 --> 00:24:01,876
responsible for calling into the


671
00:24:01,876 --> 00:24:03,276
superclass and validating the


672
00:24:03,276 --> 00:24:03,746
provider.


673
00:24:04,966 --> 00:24:06,236
Here things are slightly


674
00:24:06,236 --> 00:24:07,176
different than the kernel


675
00:24:07,176 --> 00:24:07,956
implementation.


676
00:24:10,096 --> 00:24:11,426
You can see the definition is


677
00:24:11,426 --> 00:24:13,486
wrapped in a macro IMPL and this


678
00:24:13,486 --> 00:24:15,066
macro is required to support the


679
00:24:15,186 --> 00:24:16,606
IPC communication between your


680
00:24:16,606 --> 00:24:18,156
user process and the kernel


681
00:24:18,156 --> 00:24:19,036
proxy object.


682
00:24:20,366 --> 00:24:22,416
You can also see that calling


683
00:24:22,416 --> 00:24:23,846
superstart takes a different


684
00:24:23,846 --> 00:24:24,096
form.


685
00:24:24,626 --> 00:24:29,396
Next, using the USB DriverKit


686
00:24:29,906 --> 00:24:32,086
APIs you open your ISB host


687
00:24:32,086 --> 00:24:35,606
interface provider and you


688
00:24:35,726 --> 00:24:39,436
allocate your pipe object and


689
00:24:39,436 --> 00:24:40,296
then allocate a memory


690
00:24:40,296 --> 00:24:41,556
descriptor to be used for IO.


691
00:24:42,586 --> 00:24:43,776
This should be a fairly familiar


692
00:24:43,776 --> 00:24:45,096
paradigm and is basically


693
00:24:45,096 --> 00:24:46,296
identical to what's done in a


694
00:24:47,046 --> 00:24:47,330
kext.


695
00:24:50,576 --> 00:24:51,796
In this case, we're performing


696
00:24:51,796 --> 00:24:53,416
asynchronous IO so we need to


697
00:24:53,416 --> 00:24:55,426
allocate an OSAction object to


698
00:24:55,426 --> 00:24:56,526
encapsulate the callback.


699
00:24:58,056 --> 00:24:59,126
And then finally all that


700
00:24:59,126 --> 00:25:00,426
remains is to [inaudible] the


701
00:25:00,426 --> 00:25:00,616
IO.


702
00:25:02,356 --> 00:25:04,276
At this point, assuming the set


703
00:25:04,276 --> 00:25:06,336
up is successful, there is an


704
00:25:06,336 --> 00:25:07,586
asynchronous read which we'll


705
00:25:07,586 --> 00:25:09,216
call read complete when finished


706
00:25:09,516 --> 00:25:10,886
and the read complete method for


707
00:25:10,886 --> 00:25:12,096
this driver just prints the


708
00:25:12,096 --> 00:25:13,696
number of bytes transferred and


709
00:25:13,696 --> 00:25:14,356
the status.


710
00:25:14,596 --> 00:25:16,036
If successful, it re-en-queues


711
00:25:16,036 --> 00:25:16,396
the IO.


712
00:25:16,846 --> 00:25:19,016
So next let's take a look at the


713
00:25:19,016 --> 00:25:22,016
driver in action.


714
00:25:22,726 --> 00:25:24,736
So in this demo, you'll see some


715
00:25:24,736 --> 00:25:26,306
logging I've added to my user


716
00:25:26,306 --> 00:25:28,266
USB interface driver that will


717
00:25:28,596 --> 00:25:31,566
print some of the lifecycle


718
00:25:31,566 --> 00:25:32,116
methods.


719
00:25:35,906 --> 00:25:37,636
I've also added an infinite


720
00:25:38,366 --> 00:25:40,586
loop, which will debug using


721
00:25:40,586 --> 00:25:44,356
LLDB then I've also introduced a


722
00:25:44,356 --> 00:25:47,986
crash, which we can see how it


723
00:25:48,286 --> 00:25:49,716
is recoverable now using the new


724
00:25:49,716 --> 00:25:50,816
DriverKit framework.


725
00:25:51,436 --> 00:25:53,166
So if I plug in the device, you


726
00:25:53,166 --> 00:25:54,716
can see an init and start run


727
00:25:54,716 --> 00:25:55,896
just like they would in a kext


728
00:25:56,206 --> 00:25:57,706
and read complete being called


729
00:25:57,836 --> 00:25:59,666
as data is been transferred to


730
00:25:59,706 --> 00:26:01,726
and from the device.


731
00:26:01,726 --> 00:26:06,886
Using PS, we can see that our


732
00:26:07,446 --> 00:26:09,976
driver is running and now we've


733
00:26:09,976 --> 00:26:11,346
hit my infinite loop that I


734
00:26:11,346 --> 00:26:12,496
added and we can take a look


735
00:26:12,496 --> 00:26:14,306
with LLDB at what's happening in


736
00:26:14,306 --> 00:26:14,746
the driver.


737
00:26:15,516 --> 00:26:22,546
[ Keystrokes ]


738
00:26:23,046 --> 00:26:24,106
So from earlier we can see our


739
00:26:24,106 --> 00:26:26,576
pid is 2572, so we need to


740
00:26:26,576 --> 00:26:27,976
attach to that process.


741
00:26:28,516 --> 00:26:35,546
[ Keystrokes ]


742
00:26:36,046 --> 00:26:36,946
We need to find the thread


743
00:26:36,946 --> 00:26:38,396
running the read complete method


744
00:26:39,876 --> 00:26:42,776
and you can see that's thread 2.


745
00:26:44,916 --> 00:26:47,226
And here we've definitely got an


746
00:26:47,226 --> 00:26:48,506
infinite loop and because we're


747
00:26:48,506 --> 00:26:49,796
running a user space, we can


748
00:26:49,796 --> 00:26:51,476
modify our loop variable.


749
00:26:55,816 --> 00:26:58,216
And before I continue, if you


750
00:26:58,216 --> 00:27:00,396
look closely, you can see there


751
00:27:00,396 --> 00:27:02,376
is definitely a null pointer


752
00:27:02,706 --> 00:27:03,666
[inaudible] reference, which


753
00:27:03,666 --> 00:27:04,766
will crash the driver.


754
00:27:05,286 --> 00:27:10,236
And you can see it's crashed but


755
00:27:10,236 --> 00:27:11,626
then immediately restarted


756
00:27:12,056 --> 00:27:13,056
without affecting the rest of


757
00:27:13,056 --> 00:27:13,526
the system.


758
00:27:14,446 --> 00:27:16,196
And then on unplug you can see


759
00:27:16,196 --> 00:27:17,646
your stop and free methods would


760
00:27:17,646 --> 00:27:18,706
run as normal.


761
00:27:20,516 --> 00:27:29,546
[ Applause ]


762
00:27:30,046 --> 00:27:31,246
That's how easy it is to build


763
00:27:31,246 --> 00:27:33,556
and debug a new driver with the


764
00:27:33,556 --> 00:27:34,716
new DriverKit framework.


765
00:27:34,916 --> 00:27:36,396
Now, we'll hand it back to Joe


766
00:27:36,396 --> 00:27:38,086
to talk about how to deliver


767
00:27:38,086 --> 00:27:39,536
system extensions in your apps.


768
00:27:42,036 --> 00:27:43,076
>> Thank you, Scott.


769
00:27:44,366 --> 00:27:45,756
Now that we've seen how to build


770
00:27:45,756 --> 00:27:47,316
a driver extension, I'd like to


771
00:27:47,316 --> 00:27:49,446
tell you how to ship a driver or


772
00:27:49,446 --> 00:27:51,196
other type of system extension


773
00:27:51,426 --> 00:27:52,846
in your app.


774
00:27:54,296 --> 00:27:55,966
We'll talk about how your


775
00:27:55,966 --> 00:27:57,416
extension relates to your app,


776
00:27:58,966 --> 00:28:00,456
how to build and package the


777
00:28:00,456 --> 00:28:01,686
extension bundle.


778
00:28:02,546 --> 00:28:03,886
We'll talk about code signing


779
00:28:03,926 --> 00:28:06,376
and entitlements and how to


780
00:28:06,376 --> 00:28:08,546
install, update, and uninstall


781
00:28:08,546 --> 00:28:09,556
your system extension.


782
00:28:12,336 --> 00:28:15,016
A system extension is always


783
00:28:15,146 --> 00:28:15,896
part of an app.


784
00:28:16,686 --> 00:28:18,316
This is a basic principle of the


785
00:28:18,316 --> 00:28:18,816
design.


786
00:28:19,406 --> 00:28:20,766
There is no such thing as a


787
00:28:20,766 --> 00:28:22,536
stand-alone system extension.


788
00:28:24,066 --> 00:28:25,916
This is because users think in


789
00:28:25,916 --> 00:28:26,826
terms of apps.


790
00:28:27,286 --> 00:28:29,536
They purchase apps, install


791
00:28:29,536 --> 00:28:31,696
apps, and run apps.


792
00:28:32,576 --> 00:28:34,556
Your system extension should be


793
00:28:34,556 --> 00:28:36,516
an implementation detail of your


794
00:28:36,516 --> 00:28:36,696
app.


795
00:28:38,056 --> 00:28:39,466
The app is how the user


796
00:28:40,106 --> 00:28:42,076
interacts with and controls your


797
00:28:42,076 --> 00:28:42,656
extension.


798
00:28:45,166 --> 00:28:46,476
Once you've packaged your system


799
00:28:46,476 --> 00:28:48,716
extension into an app you can


800
00:28:48,716 --> 00:28:50,156
distribute that out directly to


801
00:28:50,156 --> 00:28:53,306
your users using developer ID or


802
00:28:53,306 --> 00:28:54,596
through the Mac App Store, which


803
00:28:54,596 --> 00:28:55,526
has never been possible with


804
00:28:55,526 --> 00:28:55,976
kernel extensions.


805
00:28:56,516 --> 00:29:01,746
[ Applause ]


806
00:29:02,246 --> 00:29:03,206
Because of the close


807
00:29:03,206 --> 00:29:04,746
relationship between your app


808
00:29:04,746 --> 00:29:07,046
and its extensions, your system


809
00:29:07,046 --> 00:29:09,136
extension should be identifiable


810
00:29:09,136 --> 00:29:11,516
by the user as related to your


811
00:29:12,536 --> 00:29:12,603
app.


812
00:29:12,826 --> 00:29:14,356
You should use the CF bundle


813
00:29:14,356 --> 00:29:15,986
display name key in the


814
00:29:15,986 --> 00:29:17,986
extensions info.plist to give it


815
00:29:17,986 --> 00:29:20,086
a good localized name and give


816
00:29:20,086 --> 00:29:21,636
it a custom icon that relates to


817
00:29:21,636 --> 00:29:22,986
your app's main icon.


818
00:29:23,736 --> 00:29:25,186
This way if the extension is


819
00:29:25,186 --> 00:29:26,596
ever shown in the user


820
00:29:26,596 --> 00:29:28,636
interface, a user will recognize


821
00:29:28,636 --> 00:29:33,156
it as part of an app that they


822
00:29:33,336 --> 00:29:33,446
use.


823
00:29:33,576 --> 00:29:35,316
You should also include a usage


824
00:29:35,316 --> 00:29:36,956
description string in your


825
00:29:36,956 --> 00:29:39,406
extension's info.plist that


826
00:29:39,406 --> 00:29:41,026
explains simply what the


827
00:29:41,026 --> 00:29:43,446
extension is and does, and why a


828
00:29:43,446 --> 00:29:44,356
user would run it.


829
00:29:45,116 --> 00:29:46,566
Think of this as similar to the


830
00:29:46,566 --> 00:29:48,006
usage strings required for


831
00:29:48,006 --> 00:29:50,000
calendar or camera access.


832
00:29:53,816 --> 00:29:56,376
For driver extensions, use the


833
00:29:56,376 --> 00:29:58,746
key OS bundle usage description


834
00:29:59,016 --> 00:30:00,196
and for other types of system


835
00:30:00,196 --> 00:30:02,256
extensions, use the key NS


836
00:30:02,496 --> 00:30:03,846
system extension usage


837
00:30:03,846 --> 00:30:04,386
description.


838
00:30:05,536 --> 00:30:07,176
Remember to localize these and


839
00:30:07,176 --> 00:30:08,696
all other strings for all the


840
00:30:08,696 --> 00:30:12,746
languages your app supports.


841
00:30:13,046 --> 00:30:15,036
The system extension itself is a


842
00:30:15,066 --> 00:30:16,956
separate sub bundle of your app


843
00:30:16,956 --> 00:30:18,656
with its own executable and


844
00:30:18,656 --> 00:30:21,116
info.plist embedded within your


845
00:30:21,116 --> 00:30:21,786
application.


846
00:30:22,476 --> 00:30:23,926
Here's a peek inside a sample


847
00:30:23,926 --> 00:30:25,686
application showing a system


848
00:30:25,686 --> 00:30:27,396
extension in its contents


849
00:30:27,496 --> 00:30:29,166
library system extensions


850
00:30:29,236 --> 00:30:29,656
folder.


851
00:30:32,096 --> 00:30:34,556
Driver extension bundles use the


852
00:30:34,556 --> 00:30:36,776
.dext file name suffix and the


853
00:30:36,776 --> 00:30:38,286
package type dext.


854
00:30:39,296 --> 00:30:41,556
They use OS bundle keys in their


855
00:30:41,556 --> 00:30:43,536
info.plist similarly to kernel


856
00:30:43,536 --> 00:30:44,516
extension bundles.


857
00:30:46,006 --> 00:30:47,526
Driver extension bundles should


858
00:30:47,526 --> 00:30:50,496
be flat bundles with no contents


859
00:30:50,496 --> 00:30:53,256
folder similar to iOS apps.


860
00:30:54,986 --> 00:30:56,456
System extension bundles of


861
00:30:56,456 --> 00:30:58,676
other types use the dot system


862
00:30:58,676 --> 00:31:00,706
extension file name suffix and


863
00:31:00,706 --> 00:31:04,066
the CFBundlePackageType SYSX


864
00:31:04,876 --> 00:31:06,276
system extension.


865
00:31:07,006 --> 00:31:10,986
In Xcode, your system extension


866
00:31:10,986 --> 00:31:12,096
is a separate target.


867
00:31:12,726 --> 00:31:16,536
Xcode has templates for network


868
00:31:16,536 --> 00:31:18,796
extensions and DriverKit drivers


869
00:31:19,046 --> 00:31:20,306
built in.


870
00:31:22,476 --> 00:31:24,086
When you create such a target,


871
00:31:24,086 --> 00:31:25,506
Xcode will ask if you want to


872
00:31:25,506 --> 00:31:27,176
embed it in an application


873
00:31:27,176 --> 00:31:28,286
that's already part of your


874
00:31:28,286 --> 00:31:28,666
project.


875
00:31:29,286 --> 00:31:31,496
If you do, it will create a copy


876
00:31:31,496 --> 00:31:33,546
files phase that copies the


877
00:31:33,546 --> 00:31:35,126
extension build product into


878
00:31:35,126 --> 00:31:36,056
your application.


879
00:31:36,616 --> 00:31:41,436
Once you've built your system


880
00:31:41,436 --> 00:31:43,836
extension, you sign it with the


881
00:31:43,836 --> 00:31:45,376
same certificate that you sign


882
00:31:45,376 --> 00:31:45,826
your app.


883
00:31:46,256 --> 00:31:47,986
There is no need for a special


884
00:31:47,986 --> 00:31:50,426
kext certificate-- kext specific


885
00:31:50,426 --> 00:31:51,836
signing certificate anymore.


886
00:31:52,516 --> 00:31:56,636
[ Applause ]


887
00:31:57,136 --> 00:31:59,546
Normally, the team ID used to


888
00:31:59,546 --> 00:32:01,016
sign your system extension and


889
00:32:01,016 --> 00:32:02,396
your main app must match.


890
00:32:02,756 --> 00:32:03,976
This is a security measure.


891
00:32:04,696 --> 00:32:06,466
However, you may be building an


892
00:32:06,466 --> 00:32:08,156
extension that's intended to be


893
00:32:08,156 --> 00:32:09,826
packaged in other developers'


894
00:32:09,826 --> 00:32:10,276
apps.


895
00:32:10,526 --> 00:32:12,516
For example, a driver extension


896
00:32:12,776 --> 00:32:15,086
for a common type of USB serial


897
00:32:15,086 --> 00:32:16,516
interface chip that's included


898
00:32:16,516 --> 00:32:17,446
in many products.


899
00:32:18,156 --> 00:32:19,746
If so, there is an entitlement


900
00:32:19,746 --> 00:32:20,846
you can use on the system


901
00:32:20,846 --> 00:32:22,656
extension to allow it to be


902
00:32:22,656 --> 00:32:23,696
packaged in a different


903
00:32:23,766 --> 00:32:25,306
developer's app.


904
00:32:28,676 --> 00:32:29,926
If you sign your system


905
00:32:29,926 --> 00:32:32,026
extension with developer ID, it


906
00:32:32,026 --> 00:32:33,786
must be notarized before it will


907
00:32:33,786 --> 00:32:35,886
run on a user's system.


908
00:32:36,556 --> 00:32:37,796
For more information on


909
00:32:37,796 --> 00:32:39,726
notarization, please watch the


910
00:32:39,726 --> 00:32:42,466
session from last year or come


911
00:32:42,466 --> 00:32:44,106
to the notarization lab later


912
00:32:44,106 --> 00:32:44,766
this afternoon.


913
00:32:45,346 --> 00:32:49,626
Your system extension uses


914
00:32:49,626 --> 00:32:51,786
entitlements to describe its


915
00:32:51,786 --> 00:32:53,316
capabilities to the operating


916
00:32:53,376 --> 00:32:55,516
system, what type of extension


917
00:32:55,516 --> 00:32:56,856
it is and what it can do.


918
00:32:57,506 --> 00:32:59,266
For example, DriverKit--


919
00:32:59,266 --> 00:33:02,116
extensions use the transport and


920
00:33:02,116 --> 00:33:03,786
family entitlements that Simon


921
00:33:03,786 --> 00:33:04,096
showed.


922
00:33:04,156 --> 00:33:08,026
Your app that contains system


923
00:33:08,026 --> 00:33:10,176
extensions also should use the


924
00:33:10,176 --> 00:33:11,966
COM Apple Developer System


925
00:33:11,966 --> 00:33:13,746
Extension Install Entitlement.


926
00:33:15,596 --> 00:33:17,346
For more information on these


927
00:33:17,346 --> 00:33:19,196
entitlements and to request the


928
00:33:19,196 --> 00:33:20,636
use of them by your development


929
00:33:20,636 --> 00:33:24,086
team, visit developer.apple.com/


930
00:33:24,086 --> 00:33:25,596
systemextensions.


931
00:33:28,556 --> 00:33:29,586
In the developer seed of


932
00:33:29,586 --> 00:33:32,766
Catalina for local development,


933
00:33:33,406 --> 00:33:34,876
you can turn system integrity


934
00:33:34,876 --> 00:33:36,836
protection off to disable some


935
00:33:36,836 --> 00:33:38,256
of the checks for code signing


936
00:33:38,256 --> 00:33:39,876
and entitlements while you are


937
00:33:39,876 --> 00:33:40,276
testing.


938
00:33:41,526 --> 00:33:42,806
Please remember to turn system


939
00:33:42,806 --> 00:33:44,316
integrity protection on again


940
00:33:44,316 --> 00:33:45,286
when you're finished testing.


941
00:33:45,926 --> 00:33:49,346
Now that you've built your app


942
00:33:49,706 --> 00:33:51,276
with the system extension, how


943
00:33:52,036 --> 00:33:53,956
does the extension get installed


944
00:33:53,956 --> 00:33:55,626
on a user system?


945
00:33:56,276 --> 00:33:57,806
There is no need for an


946
00:33:57,806 --> 00:33:59,316
installer or a package.


947
00:33:59,806 --> 00:34:01,716
Your system extension stays in


948
00:34:01,956 --> 00:34:04,036
your app bundle.


949
00:34:04,166 --> 00:34:05,806
Your app uses the new system


950
00:34:05,806 --> 00:34:07,916
extensions framework and creates


951
00:34:07,916 --> 00:34:10,556
an activation request to request


952
00:34:10,556 --> 00:34:11,626
that the extension be made


953
00:34:11,626 --> 00:34:13,346
available for the system to use.


954
00:34:13,346 --> 00:34:15,696
A system administrator will


955
00:34:15,696 --> 00:34:19,065
approve this request.


956
00:34:19,516 --> 00:34:21,366
Most apps should probably create


957
00:34:21,366 --> 00:34:23,235
an activation request during app


958
00:34:23,235 --> 00:34:25,025
launch so the extension is made


959
00:34:25,025 --> 00:34:26,126
available right away.


960
00:34:26,786 --> 00:34:28,755
If your extension has previously


961
00:34:28,956 --> 00:34:31,206
been activated and approved, the


962
00:34:31,206 --> 00:34:32,686
activation request will return


963
00:34:32,686 --> 00:34:33,815
quickly with success.


964
00:34:34,726 --> 00:34:36,596
However, you may wish to


965
00:34:36,596 --> 00:34:38,226
activate your system extensions


966
00:34:38,226 --> 00:34:39,216
at different points in your


967
00:34:39,216 --> 00:34:41,166
app's lifecycle, such as after a


968
00:34:41,166 --> 00:34:42,835
user has agreed to a license


969
00:34:42,835 --> 00:34:44,656
agreement or made an in-app


970
00:34:44,746 --> 00:34:46,065
purchase if that's required for


971
00:34:46,065 --> 00:34:46,636
your extension.


972
00:34:49,456 --> 00:34:50,956
Once your extension has been


973
00:34:50,956 --> 00:34:52,795
activated, the system will


974
00:34:52,795 --> 00:34:54,856
manage its lifecycle starting it


975
00:34:54,926 --> 00:34:56,426
automatically when it is needed.


976
00:34:57,166 --> 00:34:58,846
For example, a driver extension


977
00:34:58,846 --> 00:35:00,496
will start when a matching


978
00:35:00,496 --> 00:35:01,846
hardware device is connected.


979
00:35:05,626 --> 00:35:07,596
To update your system extension,


980
00:35:08,296 --> 00:35:09,656
update your app bundle.


981
00:35:10,696 --> 00:35:12,896
A user may install a new version


982
00:35:12,896 --> 00:35:13,986
that they download from your


983
00:35:13,986 --> 00:35:16,646
website, your auto updater may


984
00:35:16,646 --> 00:35:18,106
update the app bundle in place,


985
00:35:18,646 --> 00:35:20,326
or if you release a new version


986
00:35:20,326 --> 00:35:21,646
on the app store, it will be


987
00:35:21,646 --> 00:35:22,586
updated for the user.


988
00:35:23,236 --> 00:35:26,716
The next time your app runs and


989
00:35:26,716 --> 00:35:28,226
submits an activation request,


990
00:35:28,896 --> 00:35:30,256
the system will notice that the


991
00:35:30,256 --> 00:35:32,396
extension's version has changed.


992
00:35:32,826 --> 00:35:34,306
It will ask your activation


993
00:35:34,306 --> 00:35:36,316
request delegate to compare the


994
00:35:36,316 --> 00:35:38,166
version numbers following your


995
00:35:38,166 --> 00:35:39,936
own version number rules.


996
00:35:41,246 --> 00:35:42,636
If your delegate determines that


997
00:35:42,636 --> 00:35:44,936
this is an upgrade, the system


998
00:35:44,936 --> 00:35:46,426
will stop the old version of the


999
00:35:46,426 --> 00:35:48,106
system extension and start the


1000
00:35:48,106 --> 00:35:49,000
new one.


1001
00:35:50,746 --> 00:35:53,036
If a user wishes to uninstall


1002
00:35:53,036 --> 00:35:55,526
your application, when they move


1003
00:35:55,526 --> 00:35:57,206
it to the trash all of its


1004
00:35:57,206 --> 00:35:58,756
extensions will automatically be


1005
00:35:58,756 --> 00:36:00,076
deactivated as well.


1006
00:36:01,166 --> 00:36:02,806
There is a deactivation request


1007
00:36:02,806 --> 00:36:05,246
API, if you wish to use it, but


1008
00:36:05,246 --> 00:36:12,396
there's no need for a dedicated


1009
00:36:12,776 --> 00:36:13,106
uninstaller.


1010
00:36:14,046 --> 00:36:16,626
So today we introduced system


1011
00:36:16,626 --> 00:36:17,406
extensions.


1012
00:36:17,756 --> 00:36:19,056
The replacement for kernel


1013
00:36:19,056 --> 00:36:20,616
extensions that lets your apps


1014
00:36:21,076 --> 00:36:22,856
extend the system in ways that


1015
00:36:22,856 --> 00:36:25,486
are more reliable, more secure


1016
00:36:26,286 --> 00:36:27,886
and easier to develop than ever


1017
00:36:27,886 --> 00:36:28,226
before.


1018
00:36:29,746 --> 00:36:31,896
We saw how to use the DriverKit


1019
00:36:31,896 --> 00:36:34,736
SDK and frameworks, which are a


1020
00:36:34,736 --> 00:36:37,476
modernized update of IOKit to


1021
00:36:37,476 --> 00:36:40,546
build the driver, and we saw how


1022
00:36:40,546 --> 00:36:42,556
to write and then debug an


1023
00:36:42,556 --> 00:36:44,536
example USB driver, all on one


1024
00:36:44,536 --> 00:36:44,946
machine.


1025
00:36:46,276 --> 00:36:47,646
Finally, we talked about how to


1026
00:36:47,646 --> 00:36:49,256
include system extensions in


1027
00:36:49,256 --> 00:36:50,536
your apps.


1028
00:36:53,206 --> 00:36:55,116
If you have any questions, we


1029
00:36:55,116 --> 00:36:56,926
would love to answer them at the


1030
00:36:56,926 --> 00:36:58,216
Core OS Labs.


1031
00:36:58,436 --> 00:37:00,066
There is one later today and one


1032
00:37:00,066 --> 00:37:00,976
Thursday morning.


1033
00:37:02,436 --> 00:37:03,546
You may also wish to visit the


1034
00:37:03,546 --> 00:37:05,956
security lab happening now or on


1035
00:37:05,956 --> 00:37:07,286
Thursday afternoon or the


1036
00:37:07,286 --> 00:37:08,636
networking lab on Friday


1037
00:37:08,636 --> 00:37:08,936
morning.


1038
00:37:09,536 --> 00:37:12,206
Thanks very much and enjoy the


1039
00:37:12,206 --> 00:37:12,956
rest of WWDC.


1040
00:37:13,516 --> 00:37:18,500
[ Applause ]

