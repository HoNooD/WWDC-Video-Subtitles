1
00:00:00,506 --> 00:00:06,186
[ Music ]


2
00:00:06,686 --> 00:00:08,456
>> Hello. Welcome to What's New


3
00:00:08,456 --> 00:00:09,186
in ClassKit.


4
00:00:09,676 --> 00:00:11,016
My name is John Calhoun.


5
00:00:11,286 --> 00:00:12,496
I'm an iOS engineer on the


6
00:00:12,496 --> 00:00:13,886
ClassKit and Schoolwork team.


7
00:00:15,236 --> 00:00:16,646
In case you are new to ClassKit,


8
00:00:17,036 --> 00:00:18,266
I'll begin with an introduction


9
00:00:18,266 --> 00:00:19,486
to give you some context for


10
00:00:19,486 --> 00:00:20,216
what follows.


11
00:00:20,656 --> 00:00:21,976
And what follows are the new


12
00:00:21,976 --> 00:00:23,596
features for ClassKit, as well


13
00:00:23,596 --> 00:00:25,366
as a brief discussion of best


14
00:00:25,366 --> 00:00:26,796
coding practices that you might


15
00:00:26,796 --> 00:00:27,546
want to consider.


16
00:00:29,406 --> 00:00:30,836
Let's begin with what ClassKit


17
00:00:30,836 --> 00:00:31,156
is.


18
00:00:32,686 --> 00:00:34,146
ClassKit is a framework that


19
00:00:34,146 --> 00:00:36,466
Apple introduced in iOS 11.3.


20
00:00:37,756 --> 00:00:39,056
It's a core part of Apple's


21
00:00:39,056 --> 00:00:40,516
education ecosystem.


22
00:00:41,046 --> 00:00:42,516
So, if you consider your app to


23
00:00:42,516 --> 00:00:44,546
also target education, then you


24
00:00:44,546 --> 00:00:45,636
should become familiar with the


25
00:00:45,636 --> 00:00:47,246
ClassKit framework and what it


26
00:00:47,246 --> 00:00:47,946
can do for your app.


27
00:00:50,256 --> 00:00:51,996
The whole purpose of ClassKit is


28
00:00:51,996 --> 00:00:53,076
to allow your app to share a


29
00:00:53,076 --> 00:00:54,156
student's progress with a


30
00:00:54,156 --> 00:00:54,646
teacher.


31
00:00:55,126 --> 00:00:56,446
I'll discuss what this means in


32
00:00:56,446 --> 00:00:57,666
more detail in a bit.


33
00:00:59,586 --> 00:01:01,126
And because student data is so


34
00:01:01,126 --> 00:01:03,056
important, ClassKit exists to


35
00:01:03,056 --> 00:01:04,245
ensure that the data remains


36
00:01:04,245 --> 00:01:06,246
secure and is only accessible to


37
00:01:06,246 --> 00:01:08,016
specific users, like the


38
00:01:08,016 --> 00:01:09,196
teachers who have been granted


39
00:01:09,196 --> 00:01:11,086
privileges to access that data.


40
00:01:11,416 --> 00:01:13,186
But let's move on to an example.


41
00:01:14,206 --> 00:01:15,436
I'm going to use an imaginary


42
00:01:15,436 --> 00:01:17,266
application as an example today.


43
00:01:17,966 --> 00:01:19,236
This will be a simple app that


44
00:01:19,236 --> 00:01:20,606
introduces the user to writing


45
00:01:20,606 --> 00:01:20,966
code.


46
00:01:21,706 --> 00:01:23,126
It contains a number of sections


47
00:01:23,126 --> 00:01:24,236
that the student works through.


48
00:01:25,156 --> 00:01:26,796
There are exercises and quizzes


49
00:01:26,796 --> 00:01:28,246
along the way that check to see


50
00:01:28,246 --> 00:01:29,236
how well the student is


51
00:01:29,236 --> 00:01:30,456
understanding the material.


52
00:01:31,036 --> 00:01:32,246
So it already has the notion of


53
00:01:32,246 --> 00:01:33,886
activities and it would be nice


54
00:01:33,886 --> 00:01:35,256
to share the student's progress


55
00:01:35,256 --> 00:01:35,946
with a teacher.


56
00:01:36,476 --> 00:01:37,906
In short, it's a good candidate


57
00:01:37,906 --> 00:01:38,586
for ClassKit.


58
00:01:41,046 --> 00:01:42,596
Here's the student using the


59
00:01:43,906 --> 00:01:43,986
app.


60
00:01:44,206 --> 00:01:45,796
And somehow the app would like


61
00:01:45,796 --> 00:01:47,056
to share the student's progress


62
00:01:47,056 --> 00:01:48,606
with the teacher and do so in a


63
00:01:48,606 --> 00:01:50,006
way that protects the student's


64
00:01:50,006 --> 00:01:50,556
privacy.


65
00:01:52,186 --> 00:01:53,646
This is the role that ClassKit


66
00:01:53,646 --> 00:01:54,486
facilitates.


67
00:01:55,186 --> 00:01:56,446
ClassKit ensures that the


68
00:01:56,446 --> 00:01:57,886
student data, stored on the


69
00:01:57,886 --> 00:01:59,776
device, sent to the cloud and


70
00:01:59,776 --> 00:02:01,496
stored in the cloud is always


71
00:02:01,496 --> 00:02:01,936
secure.


72
00:02:02,656 --> 00:02:04,436
And ClassKit ensures that access


73
00:02:04,436 --> 00:02:06,386
to this data is available only


74
00:02:06,386 --> 00:02:07,316
to users with the right


75
00:02:07,316 --> 00:02:08,856
privileges, for example, the


76
00:02:08,856 --> 00:02:09,696
student's teacher.


77
00:02:10,656 --> 00:02:12,116
So, how does the teacher, or the


78
00:02:12,116 --> 00:02:13,616
student for that matter, see


79
00:02:13,616 --> 00:02:14,666
their progress in a


80
00:02:14,666 --> 00:02:16,106
ClassKit-enabled app?


81
00:02:17,776 --> 00:02:19,226
Apple provides an application


82
00:02:19,226 --> 00:02:21,076
called Schoolwork for iOS.


83
00:02:22,156 --> 00:02:23,816
It's a free app for the iPad.


84
00:02:24,066 --> 00:02:25,116
It's been available since


85
00:02:25,116 --> 00:02:26,196
ClassKit debuted.


86
00:02:26,456 --> 00:02:27,546
You can download it today.


87
00:02:28,896 --> 00:02:30,526
It's being used by schools, not


88
00:02:30,526 --> 00:02:31,986
only in the United States but in


89
00:02:31,986 --> 00:02:33,036
other countries as well.


90
00:02:33,666 --> 00:02:34,766
Teachers use Schoolwork to


91
00:02:34,766 --> 00:02:36,096
create assignments, called


92
00:02:36,096 --> 00:02:37,976
handouts, and students receive


93
00:02:37,976 --> 00:02:39,176
these handouts from within


94
00:02:39,176 --> 00:02:39,726
Schoolwork.


95
00:02:41,126 --> 00:02:42,696
When your application, in


96
00:02:42,696 --> 00:02:44,436
response to a handout activity,


97
00:02:44,646 --> 00:02:46,856
records progress, it is within


98
00:02:46,856 --> 00:02:48,506
Schoolwork that the teacher and


99
00:02:48,506 --> 00:02:49,956
student both can track this


100
00:02:49,956 --> 00:02:50,586
progress.


101
00:02:51,606 --> 00:02:53,116
Let's briefly look at Schoolwork


102
00:02:53,446 --> 00:02:54,386
so you can understand the


103
00:02:54,386 --> 00:02:55,136
workflow.


104
00:02:56,256 --> 00:02:57,466
The first time you launch


105
00:02:57,466 --> 00:02:59,096
Schoolwork as a developer, you


106
00:02:59,096 --> 00:03:00,346
may see a screen like this.


107
00:03:01,016 --> 00:03:02,666
Schoolwork requires a managed


108
00:03:02,666 --> 00:03:03,166
Apple ID.


109
00:03:03,166 --> 00:03:05,286
These are the type of Apple IDs


110
00:03:05,286 --> 00:03:06,646
that schools use in order to


111
00:03:06,646 --> 00:03:07,956
assign them to students and


112
00:03:07,956 --> 00:03:08,456
teachers.


113
00:03:09,036 --> 00:03:10,596
Since most of us don't have a


114
00:03:10,596 --> 00:03:12,786
managed Apple ID, we've provided


115
00:03:12,786 --> 00:03:14,846
a useful switch in iOS under


116
00:03:14,846 --> 00:03:16,316
Settings in the developer


117
00:03:16,316 --> 00:03:16,866
section.


118
00:03:19,086 --> 00:03:20,026
You'll need the Developer


119
00:03:20,026 --> 00:03:21,226
install of iOS.


120
00:03:21,676 --> 00:03:23,186
This adds additional developer


121
00:03:23,186 --> 00:03:24,696
options in the Settings app.


122
00:03:26,376 --> 00:03:27,706
One of the settings is labeled


123
00:03:27,706 --> 00:03:28,666
ClassKit API.


124
00:03:30,046 --> 00:03:31,596
Here, you can emulate the role


125
00:03:31,596 --> 00:03:32,946
of either a user with teacher


126
00:03:32,946 --> 00:03:34,796
privileges or a user with


127
00:03:34,796 --> 00:03:35,836
student privileges.


128
00:03:36,426 --> 00:03:37,676
Initially, it is off.


129
00:03:39,046 --> 00:03:40,936
But, select Teacher, and when


130
00:03:40,936 --> 00:03:42,366
you launch Schoolwork, you'll


131
00:03:42,366 --> 00:03:43,486
have the ability to create


132
00:03:43,486 --> 00:03:44,936
handouts and assign them to a


133
00:03:44,936 --> 00:03:45,416
student.


134
00:03:46,176 --> 00:03:48,186
Go back into Settings and switch


135
00:03:48,186 --> 00:03:49,666
the ClassKit API role to


136
00:03:49,666 --> 00:03:50,256
student.


137
00:03:51,216 --> 00:03:52,616
And when you return to


138
00:03:52,616 --> 00:03:54,176
Schoolwork, you're now your


139
00:03:54,176 --> 00:03:55,846
student persona and you can


140
00:03:55,846 --> 00:03:57,316
complete that handout that you


141
00:03:57,316 --> 00:03:58,706
just assigned from your teacher


142
00:03:58,706 --> 00:03:59,196
persona.


143
00:04:00,016 --> 00:04:01,526
If you're still with me, you can


144
00:04:01,526 --> 00:04:03,026
then switch back to the teacher


145
00:04:03,026 --> 00:04:04,736
role and see your student


146
00:04:04,736 --> 00:04:06,116
persona's progress.


147
00:04:07,476 --> 00:04:09,236
OK. If you've never used


148
00:04:09,236 --> 00:04:10,876
Schoolwork, here's an example of


149
00:04:10,876 --> 00:04:12,146
what a handout looks like.


150
00:04:12,606 --> 00:04:14,376
The handout recipients displayed


151
00:04:14,376 --> 00:04:15,586
at the top of the card are


152
00:04:15,586 --> 00:04:16,716
chosen by the teacher.


153
00:04:16,986 --> 00:04:18,486
The title and instructions for


154
00:04:18,486 --> 00:04:19,666
the handout, just below the


155
00:04:19,666 --> 00:04:21,286
recipients, are created by the


156
00:04:21,286 --> 00:04:22,065
teacher as well.


157
00:04:23,426 --> 00:04:25,506
But the activity, the icon


158
00:04:25,506 --> 00:04:26,926
representation of what you can


159
00:04:26,926 --> 00:04:28,886
see here, could be an activity


160
00:04:28,886 --> 00:04:30,706
in your ClassKit-enabled app.


161
00:04:31,456 --> 00:04:33,086
So how do we get from your code,


162
00:04:33,436 --> 00:04:35,206
your app to a handout?


163
00:04:36,316 --> 00:04:37,726
By adopting ClassKit.


164
00:04:37,726 --> 00:04:40,126
And there's an entire


165
00:04:40,126 --> 00:04:43,246
presentation from WWDC 2018 that


166
00:04:43,246 --> 00:04:44,926
covers ClassKit and its full


167
00:04:44,926 --> 00:04:45,686
feature set.


168
00:04:46,126 --> 00:04:47,596
But for brevity, I'll give you a


169
00:04:47,596 --> 00:04:49,176
primer on one specific and


170
00:04:49,176 --> 00:04:52,016
important class in ClassKit, the


171
00:04:52,016 --> 00:04:53,196
CLSContext.


172
00:04:54,096 --> 00:04:55,856
If you're not familiar with the


173
00:04:55,856 --> 00:04:57,626
whole of ClassKit, understanding


174
00:04:57,626 --> 00:04:59,146
at least the CLSContext will


175
00:04:59,146 --> 00:05:00,666
give you insight into how


176
00:05:00,666 --> 00:05:02,116
exactly your app can appear in


177
00:05:02,116 --> 00:05:03,656
Schoolwork and be added to a


178
00:05:03,656 --> 00:05:04,246
handout.


179
00:05:04,806 --> 00:05:05,866
It is through the use of


180
00:05:05,866 --> 00:05:07,836
CLSContext that your app can


181
00:05:07,836 --> 00:05:09,206
surface the activities that it


182
00:05:09,206 --> 00:05:09,796
supports.


183
00:05:10,436 --> 00:05:12,296
If your app teaches coding, each


184
00:05:12,296 --> 00:05:13,556
lesson might be an individual


185
00:05:13,556 --> 00:05:14,106
activity.


186
00:05:14,326 --> 00:05:15,946
And so, each lesson would have a


187
00:05:15,946 --> 00:05:18,056
corresponding CLSContext.


188
00:05:19,206 --> 00:05:20,566
And when a student is using your


189
00:05:20,566 --> 00:05:22,906
app, those same CLSContext


190
00:05:23,066 --> 00:05:24,456
provide the scaffolding upon


191
00:05:24,456 --> 00:05:25,696
which you hang the progress


192
00:05:25,696 --> 00:05:25,966
data.


193
00:05:26,806 --> 00:05:28,356
In the example app, I mentioned


194
00:05:28,356 --> 00:05:29,836
we can keep track of time spent


195
00:05:29,836 --> 00:05:31,986
within a given lesson, or if


196
00:05:31,986 --> 00:05:33,176
there is a quiz in the app, we


197
00:05:33,176 --> 00:05:34,486
can record the quiz score for


198
00:05:34,486 --> 00:05:36,076
that student as progress data.


199
00:05:36,606 --> 00:05:39,476
And as I alluded to, your


200
00:05:39,476 --> 00:05:41,196
application can create as many


201
00:05:41,196 --> 00:05:43,216
CLSContexts as there are


202
00:05:43,216 --> 00:05:45,196
activities within your app, as


203
00:05:45,196 --> 00:05:46,266
many as makes sense.


204
00:05:46,986 --> 00:05:48,516
ClassKit has you organize them


205
00:05:48,516 --> 00:05:49,876
in a tree structure with


206
00:05:49,986 --> 00:05:51,536
child-parent relationships.


207
00:05:53,646 --> 00:05:54,886
So, let's take a look at what is


208
00:05:54,886 --> 00:05:56,266
meant by your app's context


209
00:05:56,266 --> 00:05:56,526
tree.


210
00:05:57,256 --> 00:05:58,246
It begins with the one


211
00:05:58,246 --> 00:06:00,276
CLSContext that your app doesn't


212
00:06:00,276 --> 00:06:00,736
create.


213
00:06:01,186 --> 00:06:02,786
This is the main app context.


214
00:06:03,386 --> 00:06:05,236
The main app context is created


215
00:06:05,236 --> 00:06:06,606
for you by ClassKit when you


216
00:06:06,606 --> 00:06:07,886
request it.


217
00:06:07,886 --> 00:06:09,896
And it is this context that all


218
00:06:09,896 --> 00:06:11,776
CLSContext that you will create


219
00:06:11,826 --> 00:06:13,156
will descend from, will be


220
00:06:13,156 --> 00:06:13,736
children of.


221
00:06:14,646 --> 00:06:16,006
It's the root node of the tree.


222
00:06:17,426 --> 00:06:18,666
So, before you do anything at


223
00:06:18,666 --> 00:06:19,946
all with ClassKit in your app,


224
00:06:20,266 --> 00:06:21,556
you need to request your main


225
00:06:21,556 --> 00:06:23,336
app context from ClassKit.


226
00:06:23,916 --> 00:06:25,206
You do this with a simple call


227
00:06:25,206 --> 00:06:27,626
to the CLSDataStore singleton as


228
00:06:27,626 --> 00:06:28,226
shown here.


229
00:06:28,916 --> 00:06:31,096
But, before we go on to creating


230
00:06:31,096 --> 00:06:32,726
contexts and adding them to our


231
00:06:32,726 --> 00:06:34,746
main app context, we need to


232
00:06:34,746 --> 00:06:37,306
step back and ask, what context


233
00:06:37,436 --> 00:06:39,536
or activities does our app want


234
00:06:39,536 --> 00:06:40,066
to present?


235
00:06:41,996 --> 00:06:43,246
I'll stick with the example of


236
00:06:43,246 --> 00:06:44,536
an app that has an introduction


237
00:06:44,536 --> 00:06:45,456
on how to code.


238
00:06:46,026 --> 00:06:47,546
For our example, I'll imagine


239
00:06:47,546 --> 00:06:48,526
that there are three major


240
00:06:48,526 --> 00:06:50,546
sections in the app, an intro


241
00:06:50,546 --> 00:06:52,736
section, a section on variables


242
00:06:52,736 --> 00:06:54,816
and data types, and then one on


243
00:06:54,816 --> 00:06:55,526
conditionals.


244
00:06:56,536 --> 00:06:57,836
We could consider each of these


245
00:06:57,836 --> 00:06:59,866
an activity, but ask yourself if


246
00:06:59,866 --> 00:07:01,306
a teacher might wish to assign


247
00:07:01,306 --> 00:07:02,996
one of these sections as part of


248
00:07:02,996 --> 00:07:03,576
a handout.


249
00:07:04,296 --> 00:07:05,506
These are large sections and


250
00:07:05,506 --> 00:07:06,806
might cover a little too much


251
00:07:06,806 --> 00:07:07,756
for a single handout.


252
00:07:07,756 --> 00:07:09,836
It might be too large in scope.


253
00:07:11,056 --> 00:07:12,546
But digging deeper into our app,


254
00:07:12,766 --> 00:07:14,866
within each section, our app has


255
00:07:14,896 --> 00:07:15,976
individual lessons.


256
00:07:16,926 --> 00:07:18,586
The lessons are smaller, more


257
00:07:18,586 --> 00:07:19,846
bite sized, if you will.


258
00:07:20,326 --> 00:07:21,826
It makes more sense to expose


259
00:07:21,826 --> 00:07:23,876
these instead as the activities.


260
00:07:24,516 --> 00:07:26,216
Since the sections were rather


261
00:07:26,216 --> 00:07:28,066
broad, I'm going to assume no


262
00:07:28,066 --> 00:07:29,586
teacher would assign an entire


263
00:07:29,586 --> 00:07:30,136
section.


264
00:07:30,466 --> 00:07:31,966
So, I've removed them from


265
00:07:31,966 --> 00:07:32,806
consideration.


266
00:07:33,256 --> 00:07:34,476
We're left with these seven


267
00:07:34,476 --> 00:07:35,066
lessons.


268
00:07:36,096 --> 00:07:38,126
Oh, additionally, in our app,


269
00:07:38,276 --> 00:07:39,466
some of the lessons are followed


270
00:07:39,466 --> 00:07:40,966
by a quiz to see how well the


271
00:07:40,966 --> 00:07:42,416
student understood the lesson.


272
00:07:43,016 --> 00:07:44,496
These would make nice activities


273
00:07:44,496 --> 00:07:45,836
with which our app can provide


274
00:07:45,836 --> 00:07:47,306
meaningful progress data to the


275
00:07:47,306 --> 00:07:49,356
teacher, like what score the


276
00:07:49,356 --> 00:07:50,646
student gets on a quiz.


277
00:07:51,506 --> 00:07:52,566
So, where does that leave us?


278
00:07:53,226 --> 00:07:54,546
We decide to take advantage of


279
00:07:54,546 --> 00:07:55,926
the tree structure that ClassKit


280
00:07:55,926 --> 00:07:56,446
allows.


281
00:07:56,786 --> 00:07:58,296
The quizzes then can be children


282
00:07:58,296 --> 00:07:59,736
activities of the lessons that


283
00:07:59,736 --> 00:08:00,276
they cover.


284
00:08:01,016 --> 00:08:03,416
OK. Each item here makes sense


285
00:08:03,656 --> 00:08:05,476
as an individual progress


286
00:08:05,476 --> 00:08:06,826
trackable activity.


287
00:08:07,296 --> 00:08:08,276
They're not too broad.


288
00:08:08,676 --> 00:08:10,216
But now, let's see how an app


289
00:08:10,216 --> 00:08:11,666
can go about representing these


290
00:08:11,666 --> 00:08:14,046
activities as CLSContexts.


291
00:08:15,716 --> 00:08:17,716
So, I've depicted the activities


292
00:08:17,716 --> 00:08:19,546
now in a tree-like arrangement.


293
00:08:19,826 --> 00:08:21,296
At the top of the tree is, not


294
00:08:21,296 --> 00:08:22,966
surprisingly, the main app


295
00:08:22,966 --> 00:08:24,646
context that ClassKit provides


296
00:08:24,646 --> 00:08:25,046
our app.


297
00:08:25,216 --> 00:08:26,916
And descending from the main app


298
00:08:26,916 --> 00:08:28,556
context are the first level of


299
00:08:28,556 --> 00:08:29,076
children.


300
00:08:29,796 --> 00:08:31,146
These are the seven lessons that


301
00:08:31,146 --> 00:08:33,126
I described, or a lesson had a


302
00:08:33,126 --> 00:08:35,186
quiz, of course, we have a child


303
00:08:35,186 --> 00:08:37,296
CLSContext that represents that


304
00:08:37,296 --> 00:08:37,726
quiz.


305
00:08:38,525 --> 00:08:39,996
The labels I'm showing here for


306
00:08:39,996 --> 00:08:42,706
each app created CLSContext is


307
00:08:42,706 --> 00:08:45,086
the CLSContext's identifier


308
00:08:45,086 --> 00:08:45,696
property.


309
00:08:46,016 --> 00:08:48,606
The identifier is any string you


310
00:08:48,606 --> 00:08:50,786
wish to assign to a CLSContext.


311
00:08:51,186 --> 00:08:52,526
It's never seen by the teacher


312
00:08:52,526 --> 00:08:53,126
or students.


313
00:08:53,126 --> 00:08:54,016
So you can use whatever


314
00:08:54,016 --> 00:08:55,286
nomenclature makes sense for


315
00:08:55,286 --> 00:08:55,606
you.


316
00:08:55,906 --> 00:08:57,686
For this example, I came up with


317
00:08:57,686 --> 00:08:59,346
something fairly compact but


318
00:08:59,346 --> 00:08:59,876
descriptive.


319
00:09:01,176 --> 00:09:03,846
CLSContext have a title property


320
00:09:03,846 --> 00:09:04,356
as well.


321
00:09:04,476 --> 00:09:05,686
And this is what the teacher and


322
00:09:05,686 --> 00:09:07,256
student will see as I will soon


323
00:09:07,256 --> 00:09:07,816
demonstrate.


324
00:09:08,486 --> 00:09:09,706
I'm showing only a portion of


325
00:09:09,706 --> 00:09:11,176
the context tree here with their


326
00:09:11,176 --> 00:09:12,576
titles because of how much


327
00:09:12,576 --> 00:09:14,006
visual space they would take up


328
00:09:14,006 --> 00:09:14,606
on the slide.


329
00:09:15,816 --> 00:09:17,146
But let's return to the


330
00:09:17,146 --> 00:09:17,946
identifiers.


331
00:09:18,276 --> 00:09:19,586
From the software side, we deal


332
00:09:19,586 --> 00:09:20,846
with the identifier property


333
00:09:20,846 --> 00:09:21,606
exclusively.


334
00:09:22,526 --> 00:09:24,306
Once the CLSContext, with a


335
00:09:24,306 --> 00:09:25,846
given identifier, is added to


336
00:09:25,846 --> 00:09:28,296
your context tree, it will have


337
00:09:28,296 --> 00:09:30,176
an implied identifier path.


338
00:09:31,196 --> 00:09:32,966
ClassKit API often make


339
00:09:32,966 --> 00:09:34,906
reference to this path so it is


340
00:09:34,906 --> 00:09:36,466
worthwhile briefly explaining


341
00:09:36,466 --> 00:09:36,616
it.


342
00:09:36,926 --> 00:09:38,916
An identifier path is an array


343
00:09:38,916 --> 00:09:40,766
of strings, an array of


344
00:09:40,766 --> 00:09:43,466
identifiers of CLSContexts from


345
00:09:43,466 --> 00:09:45,286
the root of your context tree to


346
00:09:45,286 --> 00:09:47,216
the CLSContext in question.


347
00:09:47,906 --> 00:09:49,436
Begin at any child of the main


348
00:09:49,436 --> 00:09:50,886
app context and grab its


349
00:09:50,886 --> 00:09:51,606
identifier.


350
00:09:51,986 --> 00:09:53,696
Append the identifiers of the


351
00:09:53,696 --> 00:09:55,606
children as you descend the tree


352
00:09:55,836 --> 00:09:57,196
until you arrive at some


353
00:09:57,346 --> 00:09:59,016
intended CLSContext.


354
00:09:59,626 --> 00:10:01,296
You have the identifier path now


355
00:10:01,296 --> 00:10:02,876
for that CLSContext.


356
00:10:04,116 --> 00:10:05,556
Just to give you a single


357
00:10:05,556 --> 00:10:07,056
example, consider the


358
00:10:07,056 --> 00:10:08,796
highlighted CLSContext.


359
00:10:09,246 --> 00:10:11,776
The identifier path that looks


360
00:10:11,776 --> 00:10:14,036
like 4 underscore structs and 4


361
00:10:14,036 --> 00:10:16,126
underscore quiz uniquely refers


362
00:10:16,126 --> 00:10:17,846
to this one CLSContext.


363
00:10:18,116 --> 00:10:19,996
And it's this quiz context's


364
00:10:19,996 --> 00:10:20,816
identifier path.


365
00:10:21,926 --> 00:10:24,376
Now, having examined our app and


366
00:10:24,376 --> 00:10:25,666
considered the activities we


367
00:10:25,666 --> 00:10:26,946
want to support and their


368
00:10:26,946 --> 00:10:29,166
hierarchy, we've arrived at this


369
00:10:29,166 --> 00:10:30,506
tree representation of


370
00:10:30,506 --> 00:10:31,796
CLSContexts.


371
00:10:32,426 --> 00:10:34,046
If you want to see code examples


372
00:10:34,046 --> 00:10:36,046
on how to create CLSContext,


373
00:10:36,396 --> 00:10:37,866
there are resources associated


374
00:10:37,866 --> 00:10:38,966
with this presentation.


375
00:10:39,686 --> 00:10:40,986
To stay within the scope of this


376
00:10:40,986 --> 00:10:42,796
presentation, I want to go back


377
00:10:42,796 --> 00:10:44,206
briefly to Schoolwork, so we can


378
00:10:44,206 --> 00:10:45,266
tie this discussion of


379
00:10:45,266 --> 00:10:47,326
CLSContexts back into the


380
00:10:47,326 --> 00:10:48,666
teacher-student workflow.


381
00:10:50,156 --> 00:10:51,526
You'll recall that in Settings,


382
00:10:51,576 --> 00:10:52,586
you can select the teacher


383
00:10:52,586 --> 00:10:53,106
persona.


384
00:10:53,576 --> 00:10:55,086
If you select this and then you


385
00:10:55,086 --> 00:10:57,556
launch Schoolwork, there is a


386
00:10:57,556 --> 00:10:59,196
plus button in the top right


387
00:10:59,196 --> 00:11:00,716
corner of the dashboard that


388
00:11:00,716 --> 00:11:02,196
allows the teacher to create a


389
00:11:02,196 --> 00:11:02,906
new handout.


390
00:11:03,836 --> 00:11:06,476
Tapping on that presents this


391
00:11:06,476 --> 00:11:06,736
view.


392
00:11:07,296 --> 00:11:08,666
It allows you to create a new


393
00:11:08,666 --> 00:11:09,216
handout.


394
00:11:10,116 --> 00:11:11,876
As I mentioned earlier, the


395
00:11:11,876 --> 00:11:13,596
teacher determines who to assign


396
00:11:13,596 --> 00:11:15,196
the handout to, gives the


397
00:11:15,196 --> 00:11:16,476
handout a title and


398
00:11:16,476 --> 00:11:17,196
instructions.


399
00:11:17,916 --> 00:11:19,566
But more interesting to us is


400
00:11:19,566 --> 00:11:22,586
the blue plus button labeled Add


401
00:11:22,586 --> 00:11:23,246
Activity.


402
00:11:24,056 --> 00:11:25,696
Tapping on that brings up a list


403
00:11:25,696 --> 00:11:26,416
of activities.


404
00:11:27,316 --> 00:11:28,316
There are a number of different


405
00:11:28,316 --> 00:11:29,826
options for adding various


406
00:11:29,826 --> 00:11:31,526
document types, but we want to


407
00:11:31,526 --> 00:11:33,046
pay attention to the top item,


408
00:11:33,606 --> 00:11:34,106
Apps.


409
00:11:34,946 --> 00:11:36,926
Tapping that brings up a list of


410
00:11:36,926 --> 00:11:37,896
app activities.


411
00:11:38,536 --> 00:11:40,376
And there, second in the list,


412
00:11:40,526 --> 00:11:41,696
is our application.


413
00:11:42,656 --> 00:11:44,246
That our app appears at all


414
00:11:44,356 --> 00:11:45,636
indicates that our app has


415
00:11:45,636 --> 00:11:47,716
created a CLSContext tree.


416
00:11:49,276 --> 00:11:51,066
The disclosure chevron to the


417
00:11:51,066 --> 00:11:52,666
right tells the teacher to drill


418
00:11:52,666 --> 00:11:54,086
in for the activities for this


419
00:11:54,086 --> 00:11:54,346
app.


420
00:11:55,346 --> 00:11:56,946
And having tapped to drill in,


421
00:11:57,336 --> 00:11:58,456
guess what is presented to the


422
00:11:58,456 --> 00:12:01,296
teacher, the CLSContext that are


423
00:12:01,296 --> 00:12:02,976
the first descendants of our


424
00:12:02,976 --> 00:12:04,616
app's main app context.


425
00:12:05,076 --> 00:12:06,176
Here, of course, we are


426
00:12:06,176 --> 00:12:07,786
displaying the titles for each


427
00:12:07,786 --> 00:12:10,026
CLSContext, not the identifiers.


428
00:12:10,466 --> 00:12:11,456
That's why they're human


429
00:12:11,456 --> 00:12:11,876
readable.


430
00:12:12,286 --> 00:12:15,286
Notice that the last five have a


431
00:12:15,286 --> 00:12:16,436
disclosure chevron.


432
00:12:17,286 --> 00:12:18,576
It shouldn't surprise you that


433
00:12:18,576 --> 00:12:20,396
these are the CLSContext that


434
00:12:20,396 --> 00:12:21,546
had a quiz as well.


435
00:12:22,466 --> 00:12:25,506
For example, if the teacher taps


436
00:12:25,506 --> 00:12:27,336
into the third item down, "What


437
00:12:27,336 --> 00:12:30,086
is a variable?", there's the


438
00:12:30,086 --> 00:12:30,626
quiz.


439
00:12:31,066 --> 00:12:32,376
But let's say that the teacher


440
00:12:32,376 --> 00:12:33,736
is creating a handout that


441
00:12:33,736 --> 00:12:35,606
introduces Swift, the class is


442
00:12:35,606 --> 00:12:36,876
not yet ready for variable.


443
00:12:36,876 --> 00:12:38,926
So, instead the teacher backs up


444
00:12:38,926 --> 00:12:40,556
by tapping the button to return.


445
00:12:41,326 --> 00:12:42,856
The teacher then taps the Select


446
00:12:42,856 --> 00:12:44,746
button in the upper right and


447
00:12:44,746 --> 00:12:46,006
selects the "What is Swift?"


448
00:12:46,006 --> 00:12:48,176
activity. This is how you add an


449
00:12:48,176 --> 00:12:49,326
activity to a handout.


450
00:12:50,486 --> 00:12:52,036
So now, we're back on the


451
00:12:52,036 --> 00:12:53,276
handout editing view.


452
00:12:53,436 --> 00:12:54,856
And at this point, the teacher


453
00:12:54,856 --> 00:12:56,446
can tap Post in the upper right


454
00:12:56,446 --> 00:12:58,056
corner and the handout will then


455
00:12:58,056 --> 00:12:59,466
be sent to the assignees.


456
00:12:59,596 --> 00:13:03,296
And as we saw before, a handout


457
00:13:03,296 --> 00:13:05,116
card with the activity displayed


458
00:13:05,276 --> 00:13:06,676
will appear in Schoolwork on


459
00:13:06,676 --> 00:13:07,696
everyone's device.


460
00:13:08,666 --> 00:13:09,696
There is more to learn in


461
00:13:09,696 --> 00:13:11,686
ClassKit regarding what happens


462
00:13:11,686 --> 00:13:12,806
when the student taps on the


463
00:13:12,806 --> 00:13:14,746
activity and your app launches


464
00:13:14,746 --> 00:13:16,106
and how you report progress


465
00:13:16,106 --> 00:13:17,816
data, but that's outside the


466
00:13:17,816 --> 00:13:18,956
scope of this session.


467
00:13:19,096 --> 00:13:20,906
I would refer you instead to the


468
00:13:20,906 --> 00:13:22,626
many resources associated with


469
00:13:22,626 --> 00:13:24,096
this session and, in particular,


470
00:13:24,266 --> 00:13:26,486
the ClassKit session from WWDC


471
00:13:26,486 --> 00:13:27,576
2018.


472
00:13:28,446 --> 00:13:30,506
And as we saw before, a handout


473
00:13:30,506 --> 00:13:32,096
card with the activity displayed


474
00:13:32,096 --> 00:13:33,596
will appear in Schoolwork on


475
00:13:33,596 --> 00:13:34,576
everyone's device.


476
00:13:35,676 --> 00:13:37,176
There's more learning ClassKit


477
00:13:37,176 --> 00:13:38,366
regarding what happens when the


478
00:13:38,366 --> 00:13:40,106
student taps on the activity and


479
00:13:40,106 --> 00:13:41,736
your app launches and how you


480
00:13:41,736 --> 00:13:42,936
report progress data.


481
00:13:43,246 --> 00:13:44,756
But that is outside of the scope


482
00:13:44,756 --> 00:13:45,586
of this session.


483
00:13:46,166 --> 00:13:47,706
I would refer you instead to the


484
00:13:47,706 --> 00:13:49,556
many resources associated with


485
00:13:49,556 --> 00:13:51,306
this session, in particular, the


486
00:13:51,306 --> 00:13:54,356
ClassKit session from WWDC 2018.


487
00:13:55,806 --> 00:13:57,396
But with that somewhat focused


488
00:13:57,396 --> 00:13:59,366
background on ClassKit, let's go


489
00:13:59,366 --> 00:14:00,656
now to the new features.


490
00:14:01,966 --> 00:14:02,806
The features I'm going to


491
00:14:02,806 --> 00:14:04,266
describe were introduced in


492
00:14:04,266 --> 00:14:06,916
ClassKit for iOS version 12.2.


493
00:14:07,196 --> 00:14:08,526
So these are already available


494
00:14:08,526 --> 00:14:08,946
today.


495
00:14:09,856 --> 00:14:11,246
We've added a new context


496
00:14:11,246 --> 00:14:13,196
provider extension, added a new


497
00:14:13,196 --> 00:14:14,696
function you can call to mark an


498
00:14:14,696 --> 00:14:16,866
activity as complete and added a


499
00:14:16,866 --> 00:14:18,106
new progress value.


500
00:14:19,026 --> 00:14:20,366
The first feature I'll discuss


501
00:14:20,446 --> 00:14:21,606
is the context provider


502
00:14:21,606 --> 00:14:22,236
extension.


503
00:14:22,996 --> 00:14:23,626
The name might be


504
00:14:23,626 --> 00:14:24,746
self-explanatory.


505
00:14:25,036 --> 00:14:26,546
It is a new extension you can


506
00:14:26,546 --> 00:14:28,006
create for your app that will be


507
00:14:28,006 --> 00:14:29,426
called upon to create your


508
00:14:29,426 --> 00:14:31,406
CLSContext tree to provide


509
00:14:31,406 --> 00:14:32,146
contexts.


510
00:14:33,036 --> 00:14:34,606
But before I explain how it


511
00:14:34,606 --> 00:14:36,086
works, I want to show you how


512
00:14:36,086 --> 00:14:37,426
you would initially create this


513
00:14:37,426 --> 00:14:38,006
extension.


514
00:14:38,116 --> 00:14:40,056
Here is the most recent Xcode.


515
00:14:40,346 --> 00:14:41,746
If you go to the File menu and


516
00:14:41,746 --> 00:14:43,286
select New and then Target, for


517
00:14:43,676 --> 00:14:45,786
the iOS application extensions


518
00:14:45,836 --> 00:14:48,276
templates, there is a new


519
00:14:48,276 --> 00:14:50,476
template for ClassKit context


520
00:14:50,476 --> 00:14:50,986
provider.


521
00:14:51,866 --> 00:14:53,126
When you add this target to your


522
00:14:53,126 --> 00:14:54,656
app, it creates a single new


523
00:14:54,656 --> 00:14:55,526
file for you.


524
00:14:56,206 --> 00:14:57,606
Let me explain how the context


525
00:14:57,606 --> 00:14:59,406
provider extension works by


526
00:14:59,406 --> 00:15:00,826
showing you boilerplate code


527
00:15:00,826 --> 00:15:01,756
that you might implement.


528
00:15:02,066 --> 00:15:03,386
I'll show you after how it will


529
00:15:03,386 --> 00:15:04,886
likely be used by Schoolwork.


530
00:15:06,816 --> 00:15:08,606
So, I said that a context


531
00:15:08,606 --> 00:15:10,256
provider extension adds a single


532
00:15:10,256 --> 00:15:10,786
file.


533
00:15:11,026 --> 00:15:12,346
It's in fact just a single


534
00:15:12,346 --> 00:15:12,936
class.


535
00:15:13,276 --> 00:15:15,956
CLSContextProvider is the super


536
00:15:15,956 --> 00:15:17,906
class where you must override


537
00:15:18,106 --> 00:15:19,286
just one function,


538
00:15:19,956 --> 00:15:22,486
updateDescendants of context


539
00:15:22,626 --> 00:15:23,306
completion.


540
00:15:24,096 --> 00:15:25,066
ClassKit will call your


541
00:15:25,066 --> 00:15:26,636
extensions updateDescendants


542
00:15:26,636 --> 00:15:26,976
call.


543
00:15:27,536 --> 00:15:29,056
When called, your extension is


544
00:15:29,056 --> 00:15:30,696
being asked to add a minimum,


545
00:15:30,906 --> 00:15:32,626
update or provide the children's


546
00:15:32,626 --> 00:15:35,446
CLSContexts, of the CLSContext


547
00:15:35,446 --> 00:15:36,476
being passed in.


548
00:15:37,296 --> 00:15:38,586
You don't return these children


549
00:15:38,586 --> 00:15:39,646
in the function, mind you.


550
00:15:39,986 --> 00:15:41,716
Your extension is being asked to


551
00:15:41,716 --> 00:15:43,506
add or update just a specific


552
00:15:43,506 --> 00:15:45,226
part of your app's context tree


553
00:15:45,396 --> 00:15:46,726
and to save those changes.


554
00:15:48,096 --> 00:15:49,656
And for reasons I'll explain.


555
00:15:49,996 --> 00:15:51,126
Your code in this function


556
00:15:51,126 --> 00:15:52,566
should be as performant as


557
00:15:52,566 --> 00:15:53,136
possible.


558
00:15:55,136 --> 00:15:56,316
I'll go back to our earlier


559
00:15:56,316 --> 00:15:57,916
example to give you an idea of


560
00:15:57,916 --> 00:15:59,146
how this all might work.


561
00:15:59,726 --> 00:16:00,996
Imagine your extension being


562
00:16:00,996 --> 00:16:02,756
called updateDescendants of


563
00:16:02,756 --> 00:16:04,516
context completion being called.


564
00:16:04,786 --> 00:16:06,986
And the CLSContext passed in is


565
00:16:06,986 --> 00:16:08,636
your app's main app context.


566
00:16:08,696 --> 00:16:10,416
How does your code know it's the


567
00:16:10,416 --> 00:16:11,466
main app context?


568
00:16:11,596 --> 00:16:13,296
The simplest check is to see if


569
00:16:13,296 --> 00:16:15,296
the CLSContext passed in has a


570
00:16:15,296 --> 00:16:15,776
parent.


571
00:16:16,116 --> 00:16:17,916
Only the main app context is


572
00:16:17,916 --> 00:16:18,656
parentless.


573
00:16:19,356 --> 00:16:21,446
So, your contract is to update


574
00:16:21,446 --> 00:16:23,426
your context tree to provide at


575
00:16:23,426 --> 00:16:24,656
least the first tier.


576
00:16:24,886 --> 00:16:26,696
That is, the immediate children


577
00:16:26,766 --> 00:16:28,726
CLSContext of your main app


578
00:16:28,726 --> 00:16:29,406
context.


579
00:16:30,166 --> 00:16:31,646
If you recall from our example,


580
00:16:31,856 --> 00:16:32,926
this would correspond to the


581
00:16:32,926 --> 00:16:35,726
CLSContext what is an IDE, what


582
00:16:35,726 --> 00:16:37,566
is Swift, what is a variable, et


583
00:16:37,566 --> 00:16:37,976
cetera.


584
00:16:38,326 --> 00:16:40,356
Those seven top level lessons,


585
00:16:40,816 --> 00:16:42,546
or since we've been referring to


586
00:16:42,546 --> 00:16:43,906
them by their identifiers,


587
00:16:44,276 --> 00:16:44,716
these.


588
00:16:47,146 --> 00:16:48,556
If these children are all there,


589
00:16:49,166 --> 00:16:50,906
exist already in your context


590
00:16:50,906 --> 00:16:52,006
tree, do not need to be


591
00:16:52,006 --> 00:16:53,766
modified, then your code need do


592
00:16:53,766 --> 00:16:54,436
nothing at all.


593
00:16:54,886 --> 00:16:55,776
You can simply call the


594
00:16:55,776 --> 00:16:57,396
completion block and pass no


595
00:16:57,396 --> 00:16:59,146
error to indicate all is well.


596
00:16:59,976 --> 00:17:01,206
But the extension exists to


597
00:17:01,206 --> 00:17:02,736
allow you to create this portion


598
00:17:02,736 --> 00:17:04,226
of your tree in the event that


599
00:17:04,226 --> 00:17:05,396
the teacher had never yet


600
00:17:05,396 --> 00:17:06,996
visited this portion of your


601
00:17:06,996 --> 00:17:07,316
app.


602
00:17:07,516 --> 00:17:09,046
Maybe they have never launched


603
00:17:09,046 --> 00:17:09,675
your app at all.


604
00:17:10,536 --> 00:17:11,925
I want to add though that your


605
00:17:11,925 --> 00:17:13,665
extension is free to populate


606
00:17:13,665 --> 00:17:15,445
more of your app's context tree.


607
00:17:15,866 --> 00:17:17,366
In fact, could populate the


608
00:17:17,366 --> 00:17:19,156
entire tree as long as it can be


609
00:17:19,156 --> 00:17:19,836
done quickly.


610
00:17:20,596 --> 00:17:21,876
You'll see why this is important


611
00:17:21,876 --> 00:17:22,356
in a minute.


612
00:17:22,726 --> 00:17:24,406
For this example, I'll stick to


613
00:17:24,406 --> 00:17:25,906
the bare minimum and imagine


614
00:17:25,906 --> 00:17:27,056
that we only create the


615
00:17:27,056 --> 00:17:28,696
immediate descendants of the


616
00:17:28,696 --> 00:17:30,366
CLSContext passed in.


617
00:17:30,516 --> 00:17:32,986
And so, we create those seven


618
00:17:32,986 --> 00:17:34,786
descendants, and our context


619
00:17:34,786 --> 00:17:36,016
tree should look like this.


620
00:17:37,576 --> 00:17:39,076
Let me give one more example.


621
00:17:39,076 --> 00:17:40,286
And I think it will be clearer


622
00:17:40,286 --> 00:17:41,056
how this works.


623
00:17:41,646 --> 00:17:43,286
Consider now your extension is


624
00:17:43,286 --> 00:17:44,006
called again.


625
00:17:44,356 --> 00:17:46,326
But this time, the CLSContext


626
00:17:46,326 --> 00:17:48,446
with the identifier 3 underscore


627
00:17:48,446 --> 00:17:51,026
datatypes is the CLSContext


628
00:17:51,026 --> 00:17:52,126
passed to the function.


629
00:17:52,866 --> 00:17:55,056
The expectation is that your


630
00:17:55,056 --> 00:17:57,206
code will add or update at least


631
00:17:57,206 --> 00:17:59,366
the immediate descendants of 3


632
00:17:59,366 --> 00:18:00,656
underscore datatypes.


633
00:18:01,656 --> 00:18:03,106
And you may recall, this was


634
00:18:03,106 --> 00:18:04,136
simply a quiz.


635
00:18:04,336 --> 00:18:05,916
And so, we have added it here.


636
00:18:08,246 --> 00:18:09,446
What is the purpose of the


637
00:18:09,446 --> 00:18:11,086
context provider extension?


638
00:18:11,826 --> 00:18:13,166
I essentially laid it out for


639
00:18:13,166 --> 00:18:14,526
you, it's to give your app an


640
00:18:14,526 --> 00:18:15,956
opportunity to create your


641
00:18:15,956 --> 00:18:18,426
CLSContext tree to, in effect,


642
00:18:18,696 --> 00:18:20,726
advertise your app's activities,


643
00:18:20,876 --> 00:18:22,326
and the teacher will not have


644
00:18:22,326 --> 00:18:23,806
needed to have even launched


645
00:18:23,806 --> 00:18:24,316
your app.


646
00:18:25,446 --> 00:18:27,206
Of course, the teacher will have


647
00:18:27,206 --> 00:18:28,886
had to have downloaded your app.


648
00:18:29,096 --> 00:18:30,736
But the very act of downloading


649
00:18:30,736 --> 00:18:31,856
will cause your ClassKit


650
00:18:31,856 --> 00:18:33,276
extension to be registered with


651
00:18:33,476 --> 00:18:35,466
iOS, such as the ClassKit, and


652
00:18:35,506 --> 00:18:37,106
more specifically Schoolwork


653
00:18:37,226 --> 00:18:38,256
will be aware of those


654
00:18:38,256 --> 00:18:39,456
activities available.


655
00:18:43,146 --> 00:18:44,906
Some of your apps may support a


656
00:18:44,906 --> 00:18:46,636
bevy of activities and have a


657
00:18:46,636 --> 00:18:48,636
tree that may be broad or deep.


658
00:18:49,126 --> 00:18:50,636
To create this entire tree when


659
00:18:50,636 --> 00:18:51,976
your app launches might cause a


660
00:18:51,976 --> 00:18:52,926
performance issue.


661
00:18:52,926 --> 00:18:55,226
So, this extension is designed


662
00:18:55,226 --> 00:18:56,816
to allow you to dole out


663
00:18:56,816 --> 00:18:59,326
CLSContexts in smaller batches.


664
00:19:00,406 --> 00:19:02,446
Some ClassKit apps require user


665
00:19:02,446 --> 00:19:03,966
interaction before they can


666
00:19:03,966 --> 00:19:05,376
begin to create their context


667
00:19:05,376 --> 00:19:05,666
tree.


668
00:19:06,386 --> 00:19:08,136
Unfortunately, the extension is


669
00:19:08,136 --> 00:19:09,746
not going to be useful in those


670
00:19:09,746 --> 00:19:10,296
cases.


671
00:19:10,486 --> 00:19:12,066
The extension is called without


672
00:19:12,066 --> 00:19:13,146
an option for your app to


673
00:19:13,146 --> 00:19:14,026
display any UI.


674
00:19:15,646 --> 00:19:18,006
Finally, I want to present to


675
00:19:18,006 --> 00:19:19,536
you how your context provider


676
00:19:19,536 --> 00:19:21,086
extension fits in with the


677
00:19:21,086 --> 00:19:21,966
teacher workflow.


678
00:19:22,636 --> 00:19:23,936
Recall the example that I gave


679
00:19:23,936 --> 00:19:25,216
earlier, where a teacher was


680
00:19:25,216 --> 00:19:26,566
creating a handout and was


681
00:19:26,566 --> 00:19:27,436
navigating through the


682
00:19:27,436 --> 00:19:28,626
activities available.


683
00:19:29,396 --> 00:19:30,606
If your app has a context


684
00:19:30,606 --> 00:19:32,066
provider extension, you can


685
00:19:32,066 --> 00:19:33,366
expect it to be called before


686
00:19:33,366 --> 00:19:35,006
the teacher gets to this screen


687
00:19:35,006 --> 00:19:35,756
in Schoolwork.


688
00:19:36,296 --> 00:19:37,396
Your extension should have been


689
00:19:37,396 --> 00:19:38,396
called with the main app


690
00:19:38,396 --> 00:19:39,946
context, so that your app can be


691
00:19:39,946 --> 00:19:41,416
presented here as having


692
00:19:41,546 --> 00:19:42,686
available activities.


693
00:19:43,396 --> 00:19:44,526
And should the teacher begin


694
00:19:44,526 --> 00:19:45,946
drilling down into your app's


695
00:19:45,946 --> 00:19:48,646
activity hierarchy, you can


696
00:19:48,646 --> 00:19:50,366
expect repeated calls to your


697
00:19:50,366 --> 00:19:52,226
extension to provide more depth


698
00:19:52,226 --> 00:19:53,766
to your CLSContext tree.


699
00:19:54,696 --> 00:19:56,346
Since it is possible that your


700
00:19:56,346 --> 00:19:57,996
tree is being created in more or


701
00:19:57,996 --> 00:19:59,926
less real time, live as the


702
00:19:59,926 --> 00:20:01,916
teacher is drilling in, this is


703
00:20:01,916 --> 00:20:03,456
why it is important that your


704
00:20:03,456 --> 00:20:05,346
extension code work quickly to


705
00:20:05,346 --> 00:20:07,936
create and save the CLSContext


706
00:20:08,086 --> 00:20:08,906
being asked for.


707
00:20:09,966 --> 00:20:11,656
I think you can see now how all


708
00:20:11,656 --> 00:20:12,626
the pieces of this work


709
00:20:12,626 --> 00:20:14,536
together, the extension, your


710
00:20:14,536 --> 00:20:16,326
app's tree of activities and


711
00:20:16,326 --> 00:20:16,876
Schoolwork.


712
00:20:18,186 --> 00:20:19,866
The next feature new to ClassKit


713
00:20:20,116 --> 00:20:21,606
is an API that allows your app


714
00:20:21,606 --> 00:20:22,696
to mark an activity as


715
00:20:22,696 --> 00:20:23,216
completed.


716
00:20:23,376 --> 00:20:25,186
That is, to make it easier for


717
00:20:25,186 --> 00:20:26,706
the student to let the teacher


718
00:20:26,706 --> 00:20:28,216
know that the activity that was


719
00:20:28,216 --> 00:20:29,456
assigned is done.


720
00:20:30,456 --> 00:20:32,246
To understand why this is a nice


721
00:20:32,246 --> 00:20:34,336
new feature, let me revisit


722
00:20:34,336 --> 00:20:36,306
Schoolwork but briefly show you


723
00:20:36,306 --> 00:20:37,206
the student side.


724
00:20:37,876 --> 00:20:38,806
We've seen a bit about the


725
00:20:38,806 --> 00:20:40,346
teacher workflow for assigning


726
00:20:40,346 --> 00:20:40,946
activities.


727
00:20:41,196 --> 00:20:42,206
What's it like to be on the


728
00:20:42,206 --> 00:20:42,906
receiving end?


729
00:20:43,566 --> 00:20:45,116
This is the handout card that I


730
00:20:45,116 --> 00:20:45,816
showed earlier.


731
00:20:46,156 --> 00:20:47,506
It's how the student sees it in


732
00:20:47,506 --> 00:20:48,056
Schoolwork.


733
00:20:48,926 --> 00:20:53,186
When they tap on it, they see


734
00:20:53,186 --> 00:20:54,876
the handout with the activities,


735
00:20:55,286 --> 00:20:56,596
just the one activity in this


736
00:20:56,596 --> 00:20:56,936
case.


737
00:20:57,286 --> 00:20:58,826
Tapping on the activity takes


738
00:20:58,826 --> 00:20:59,616
them to your app.


739
00:20:59,976 --> 00:21:01,536
But after completing the


740
00:21:01,536 --> 00:21:03,536
activity, the students still has


741
00:21:03,536 --> 00:21:05,606
to come back to Schoolwork and


742
00:21:05,606 --> 00:21:06,966
tap the complete button.


743
00:21:08,006 --> 00:21:09,586
If your app adapts a new


744
00:21:09,586 --> 00:21:11,666
ClassKit API, you can make this


745
00:21:11,666 --> 00:21:13,016
last step unnecessary.


746
00:21:13,016 --> 00:21:15,296
From within your app, you can


747
00:21:15,296 --> 00:21:17,026
mark the activity complete by


748
00:21:17,026 --> 00:21:18,336
calling a new API.


749
00:21:19,776 --> 00:21:21,946
The CLSDataStore has a new


750
00:21:21,946 --> 00:21:22,736
function called


751
00:21:23,006 --> 00:21:24,926
completeAllAssignedActivities


752
00:21:25,166 --> 00:21:26,716
matching contextPath.


753
00:21:27,066 --> 00:21:29,026
The path is, of course, an


754
00:21:29,076 --> 00:21:30,366
identifier path to the


755
00:21:30,366 --> 00:21:32,686
CLSContext or activity that the


756
00:21:32,686 --> 00:21:33,776
student just completed.


757
00:21:34,476 --> 00:21:35,946
If, for example, the student


758
00:21:35,946 --> 00:21:37,426
just completed the, what is a


759
00:21:37,426 --> 00:21:39,306
variable quiz within this app,


760
00:21:39,916 --> 00:21:41,276
we can indicate it is complete


761
00:21:41,276 --> 00:21:41,916
by calling


762
00:21:41,916 --> 00:21:43,796
completeAllAssignedActivities


763
00:21:43,946 --> 00:21:45,796
for the CLSContext with the path


764
00:21:46,066 --> 00:21:48,356
2 underscore vars, 2 underscore


765
00:21:48,356 --> 00:21:48,846
quiz.


766
00:21:49,576 --> 00:21:50,896
The next time the student


767
00:21:50,896 --> 00:21:53,276
returns to Schoolwork, it will


768
00:21:53,276 --> 00:21:54,946
indicate the activity complete.


769
00:21:55,276 --> 00:21:56,706
Further, the teacher who


770
00:21:56,706 --> 00:21:58,346
assigned the handout will also


771
00:21:58,346 --> 00:21:59,696
find the activity marked as


772
00:21:59,696 --> 00:22:00,856
complete for that student.


773
00:22:01,646 --> 00:22:03,046
If your app adapts this new


774
00:22:03,046 --> 00:22:04,516
call, the student's workflow


775
00:22:04,516 --> 00:22:05,626
will be much smoother.


776
00:22:07,176 --> 00:22:10,566
Finally, ClassKit and iOS 12.2


777
00:22:10,646 --> 00:22:13,006
adds a new activity item type, a


778
00:22:13,006 --> 00:22:14,546
correct/incorrect type.


779
00:22:16,156 --> 00:22:17,496
In my ClassKit overview, I


780
00:22:17,496 --> 00:22:19,526
didn't describe the CLS activity


781
00:22:19,526 --> 00:22:21,556
class, but for purposes of


782
00:22:21,556 --> 00:22:22,976
introducing this new feature,


783
00:22:22,976 --> 00:22:24,716
I'll just mention that each


784
00:22:24,716 --> 00:22:26,906
CLSContext can have an activity


785
00:22:26,906 --> 00:22:28,956
in the form of a CLS activity


786
00:22:28,956 --> 00:22:29,626
object.


787
00:22:30,046 --> 00:22:32,816
And, a CLS activity can have any


788
00:22:32,816 --> 00:22:35,216
number of CLS activity items.


789
00:22:36,606 --> 00:22:39,156
Now, CLSActivityItem is a parent


790
00:22:39,156 --> 00:22:40,526
class to a handful of other


791
00:22:40,526 --> 00:22:41,116
classes.


792
00:22:41,286 --> 00:22:42,676
And I'll call out one, in


793
00:22:42,676 --> 00:22:45,866
particular, the CLSBinaryItem.


794
00:22:46,406 --> 00:22:49,776
A CLSBinaryItem can only


795
00:22:49,776 --> 00:22:51,426
represent progress in one of two


796
00:22:51,426 --> 00:22:53,086
states, the flavors of which are


797
00:22:53,086 --> 00:22:53,616
shown here.


798
00:22:54,406 --> 00:22:55,606
Maybe the progress you want to


799
00:22:55,606 --> 00:22:56,706
report is simply whether the


800
00:22:56,706 --> 00:22:58,006
student passed or failed.


801
00:22:58,376 --> 00:23:00,916
And CLSBinaryItem has an ENUM to


802
00:23:00,916 --> 00:23:01,756
indicate this.


803
00:23:02,296 --> 00:23:03,956
Additionally, you can indicate


804
00:23:03,956 --> 00:23:06,176
true versus false or yes versus


805
00:23:06,176 --> 00:23:06,506
no.


806
00:23:07,356 --> 00:23:08,796
But we heard from developers


807
00:23:08,796 --> 00:23:09,736
that felt as though we were


808
00:23:09,736 --> 00:23:11,496
missing another binary flavor.


809
00:23:13,256 --> 00:23:14,726
So, ClassKit has defined the


810
00:23:14,726 --> 00:23:16,766
correct/incorrect enumeration to


811
00:23:16,766 --> 00:23:18,476
describe this new type of binary


812
00:23:18,476 --> 00:23:19,086
activity.


813
00:23:19,746 --> 00:23:21,136
Consider the quiz example that I


814
00:23:21,136 --> 00:23:22,516
mentioned for our sample app.


815
00:23:22,826 --> 00:23:24,426
It consists of 10 questions.


816
00:23:24,626 --> 00:23:26,386
We'll probably not use a binary


817
00:23:26,386 --> 00:23:27,936
activity type for the primary


818
00:23:27,936 --> 00:23:29,616
activity item, because we want


819
00:23:29,616 --> 00:23:30,686
to represent the score as a


820
00:23:30,686 --> 00:23:31,386
quantity.


821
00:23:31,486 --> 00:23:33,036
So, the teacher sees that the


822
00:23:33,036 --> 00:23:35,286
student got 70%, for example.


823
00:23:36,676 --> 00:23:38,896
But as a bonus, our app can add


824
00:23:38,896 --> 00:23:40,476
additional activity items.


825
00:23:40,546 --> 00:23:41,976
For example, one for each


826
00:23:41,976 --> 00:23:43,916
question, and indicate correct


827
00:23:43,916 --> 00:23:45,456
or incorrect for those so that


828
00:23:45,456 --> 00:23:46,486
the teacher can see which


829
00:23:46,486 --> 00:23:47,836
questions the student missed,


830
00:23:48,106 --> 00:23:49,466
which ones they got correct.


831
00:23:50,016 --> 00:23:51,666
I just offer that as one example


832
00:23:51,666 --> 00:23:53,136
of how this type might be used.


833
00:23:54,516 --> 00:23:57,006
So, finally, let's talk about


834
00:23:57,006 --> 00:23:59,176
ClassKit coding best practices.


835
00:23:59,696 --> 00:24:02,796
I've already described that it


836
00:24:02,876 --> 00:24:04,326
is an error to add to your


837
00:24:04,326 --> 00:24:07,066
context tree a CLSContext whose


838
00:24:07,126 --> 00:24:09,056
identifier path is not unique.


839
00:24:09,256 --> 00:24:11,306
At first blush, this sounds sort


840
00:24:11,306 --> 00:24:12,556
of like an error that's hard to


841
00:24:12,556 --> 00:24:12,976
make.


842
00:24:13,336 --> 00:24:14,416
But consider the following


843
00:24:14,416 --> 00:24:16,616
scenario, your app launches for


844
00:24:16,616 --> 00:24:18,206
the very first time, and you


845
00:24:18,206 --> 00:24:20,326
dutifully create a CLSContext


846
00:24:20,326 --> 00:24:22,036
tree in order to make available


847
00:24:22,036 --> 00:24:23,186
your app's activities.


848
00:24:23,666 --> 00:24:25,276
A portion of that original tree


849
00:24:25,276 --> 00:24:25,926
is shown here.


850
00:24:27,406 --> 00:24:29,436
On your app's second launch, you


851
00:24:29,436 --> 00:24:30,796
should not create your


852
00:24:30,796 --> 00:24:32,706
CLSContext tree again.


853
00:24:34,056 --> 00:24:36,126
This would be adding CLSContext


854
00:24:36,266 --> 00:24:38,016
that have identifier paths that


855
00:24:38,016 --> 00:24:39,586
conflict with the existing ones.


856
00:24:39,996 --> 00:24:41,486
You should always check that a


857
00:24:41,486 --> 00:24:43,696
CLSContext does not exist first


858
00:24:43,696 --> 00:24:45,286
in your tree before adding it.


859
00:24:46,696 --> 00:24:48,336
There are a few ways to check to


860
00:24:48,336 --> 00:24:50,496
see if a CLSContext is already


861
00:24:50,496 --> 00:24:51,316
part of your tree.


862
00:24:51,696 --> 00:24:52,726
One way is to call the


863
00:24:52,726 --> 00:24:55,246
CLSDataStore function contexts


864
00:24:55,246 --> 00:24:56,666
matchingIdentifierPath.


865
00:24:56,846 --> 00:24:58,396
And when your completion block


866
00:24:58,396 --> 00:25:00,326
is called, a note that the call


867
00:25:00,326 --> 00:25:02,656
is asynchronous, an empty array


868
00:25:02,656 --> 00:25:04,366
for the CLSContext returned


869
00:25:04,536 --> 00:25:05,956
would indicate the context with


870
00:25:05,956 --> 00:25:07,846
that path does not yet exist.


871
00:25:07,996 --> 00:25:09,636
So, it would be correct to now


872
00:25:09,636 --> 00:25:11,036
create it.


873
00:25:11,036 --> 00:25:12,686
Or, instead there was a


874
00:25:12,686 --> 00:25:14,886
CLSContext function descendant's


875
00:25:14,886 --> 00:25:16,896
matchingIdentifierPath that you


876
00:25:16,896 --> 00:25:17,456
could call.


877
00:25:17,986 --> 00:25:19,416
It also is asynchronous.


878
00:25:19,416 --> 00:25:20,856
And like the previous example,


879
00:25:21,156 --> 00:25:22,806
if no context is passed to your


880
00:25:22,806 --> 00:25:24,686
completion block, then again, it


881
00:25:24,686 --> 00:25:25,996
is safe for your app to create


882
00:25:25,996 --> 00:25:27,796
and add the new CLSContext.


883
00:25:27,796 --> 00:25:29,546
There are going to be numerous


884
00:25:29,546 --> 00:25:30,886
places within your app where


885
00:25:30,886 --> 00:25:32,096
you're going to have to make one


886
00:25:32,096 --> 00:25:32,936
of these checks.


887
00:25:33,606 --> 00:25:35,856
And if you adopt the new context


888
00:25:35,856 --> 00:25:37,426
provider extension, you're


889
00:25:37,426 --> 00:25:38,836
adding even more vectors from


890
00:25:38,836 --> 00:25:39,866
which you will need to test


891
00:25:39,866 --> 00:25:42,046
whether a CLSContext has already


892
00:25:42,046 --> 00:25:43,736
been added to your tree or not.


893
00:25:45,166 --> 00:25:46,666
So I wanted you to be aware of


894
00:25:46,666 --> 00:25:47,646
what might be an elegant


895
00:25:47,646 --> 00:25:49,416
solution, which is to implement


896
00:25:49,416 --> 00:25:50,846
the CLSDataStore Delegate


897
00:25:50,846 --> 00:25:52,506
function, createContext


898
00:25:52,506 --> 00:25:54,736
forIdentifier, parentContext,


899
00:25:54,736 --> 00:25:56,126
parentIdentifierPath.


900
00:25:56,636 --> 00:25:58,076
If you make one of the classes


901
00:25:58,076 --> 00:25:59,656
in your app, the CLSDataStore


902
00:25:59,656 --> 00:26:01,446
Delegate, then when you call one


903
00:26:01,446 --> 00:26:02,836
of the previous functions like


904
00:26:02,836 --> 00:26:04,536
CLSDataStore context


905
00:26:04,536 --> 00:26:06,626
matchingIdentifierPath, this


906
00:26:06,626 --> 00:26:08,186
delegate function will only be


907
00:26:08,186 --> 00:26:10,166
called if the context has never


908
00:26:10,166 --> 00:26:12,396
been created, implementing the


909
00:26:12,396 --> 00:26:14,056
delegate sort of bottlenecks


910
00:26:14,056 --> 00:26:15,956
then all context creation to


911
00:26:15,956 --> 00:26:17,396
just one place in your app.


912
00:26:18,476 --> 00:26:19,866
In my experience, the actual


913
00:26:19,866 --> 00:26:21,546
implementation of creating a


914
00:26:21,546 --> 00:26:23,526
CLSContext is pretty app


915
00:26:23,526 --> 00:26:24,126
specific.


916
00:26:24,126 --> 00:26:25,406
So I've left the code empty


917
00:26:25,406 --> 00:26:25,746
here.


918
00:26:26,076 --> 00:26:27,756
If you are adding ClassKit


919
00:26:27,756 --> 00:26:29,336
support for the first time, the


920
00:26:29,336 --> 00:26:32,806
2018 WWDC session on ClassKit or


921
00:26:32,806 --> 00:26:34,666
the available sample code is an


922
00:26:34,666 --> 00:26:35,846
excellent place to start.


923
00:26:37,156 --> 00:26:39,106
Here's an example of a simple


924
00:26:39,106 --> 00:26:40,616
helper function that might exist


925
00:26:40,616 --> 00:26:41,186
in your app.


926
00:26:41,566 --> 00:26:42,716
This function we'll call


927
00:26:42,806 --> 00:26:44,816
beginActivity, can be called to


928
00:26:44,816 --> 00:26:47,066
make a specific CLSContext the


929
00:26:47,066 --> 00:26:48,196
active context.


930
00:26:48,706 --> 00:26:50,396
We pass in only an identifier


931
00:26:50,396 --> 00:26:50,786
path.


932
00:26:51,846 --> 00:26:52,786
The function calls the


933
00:26:52,786 --> 00:26:54,886
CLSContext query to find the


934
00:26:54,886 --> 00:26:56,016
descendant that matches the


935
00:26:56,016 --> 00:26:57,666
identifier path passed in.


936
00:26:58,246 --> 00:26:59,986
Again, since we have elsewhere


937
00:26:59,986 --> 00:27:01,626
in this application set up the


938
00:27:01,626 --> 00:27:03,986
CLSDataStore Delegate, we can be


939
00:27:03,986 --> 00:27:05,346
sure that if the specified


940
00:27:05,346 --> 00:27:07,916
CLSContext was never created, it


941
00:27:07,916 --> 00:27:09,796
will be in the delegate function


942
00:27:09,796 --> 00:27:11,646
and therefore a CLSContext


943
00:27:11,806 --> 00:27:12,856
should be returned from the


944
00:27:12,856 --> 00:27:13,276
query.


945
00:27:14,786 --> 00:27:16,256
We make the context return to


946
00:27:16,256 --> 00:27:18,216
active, create a new activity


947
00:27:18,216 --> 00:27:19,816
for it and start that activity.


948
00:27:20,376 --> 00:27:21,836
These series of calls indicates


949
00:27:21,836 --> 00:27:23,456
we want to record progress in


950
00:27:23,456 --> 00:27:25,066
the form of time spent for a


951
00:27:25,066 --> 00:27:26,806
specific CLSContext.


952
00:27:27,646 --> 00:27:30,086
And finally, we call save on the


953
00:27:30,086 --> 00:27:32,096
CLSDataStore to initiate these


954
00:27:32,096 --> 00:27:33,556
series of calls that we've made.


955
00:27:34,456 --> 00:27:35,676
Likely, you will create plenty


956
00:27:35,676 --> 00:27:37,086
of other helper functions like


957
00:27:37,086 --> 00:27:38,626
this one, but the context


958
00:27:38,626 --> 00:27:39,996
creation code need to live in


959
00:27:39,996 --> 00:27:41,486
only one place in your


960
00:27:41,486 --> 00:27:43,536
CLSDataStore Delegate function.


961
00:27:45,016 --> 00:27:46,666
If you are new to ClassKit, I


962
00:27:46,666 --> 00:27:48,126
hope this brief introduction has


963
00:27:48,126 --> 00:27:49,126
given you a taste of its


964
00:27:49,126 --> 00:27:49,996
capabilities.


965
00:27:50,176 --> 00:27:51,766
And if you think students and


966
00:27:51,766 --> 00:27:53,236
teachers would benefit from


967
00:27:53,236 --> 00:27:54,676
using your app in the education


968
00:27:54,676 --> 00:27:55,806
realm, you should give


969
00:27:55,806 --> 00:27:57,266
consideration to adapting


970
00:27:57,266 --> 00:27:57,956
ClassKit.


971
00:27:58,136 --> 00:28:00,136
If you are already familiar with


972
00:28:00,136 --> 00:28:01,486
ClassKit, I hope you take


973
00:28:01,486 --> 00:28:02,906
advantage of the new features we


974
00:28:02,906 --> 00:28:04,376
added for 2019.


975
00:28:04,616 --> 00:28:06,096
All of these were the result of


976
00:28:06,096 --> 00:28:07,756
feedback from developers like


977
00:28:07,756 --> 00:28:08,366
yourselves.


978
00:28:09,716 --> 00:28:10,786
Take a look at the links that


979
00:28:10,786 --> 00:28:12,306
accompany this presentation.


980
00:28:13,036 --> 00:28:14,326
You'll find links to sample


981
00:28:14,326 --> 00:28:16,606
code, documentation and to other


982
00:28:16,606 --> 00:28:18,216
presentations that take a deeper


983
00:28:18,216 --> 00:28:19,466
dive into ClassKit.


984
00:28:20,216 --> 00:28:20,626
Thank you.

